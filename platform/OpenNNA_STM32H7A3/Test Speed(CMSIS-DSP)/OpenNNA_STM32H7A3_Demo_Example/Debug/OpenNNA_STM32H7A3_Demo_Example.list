
OpenNNA_STM32H7A3_Demo_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a020  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e40  0800a2d0  0800a2d0  0001a2d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b110  0800b110  0001b110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b118  0800b118  0001b118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b11c  0800b11c  0001b11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0005096c  24000000  0800b120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001a034  24050970  0805ba8c  00070970  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2406a9a4  0805ba8c  0007a9a4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0007096c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00031383  00000000  00000000  0007099a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005981  00000000  00000000  000a1d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00025544  00000000  00000000  000a769e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000016c0  00000000  00000000  000ccbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000046f8  00000000  00000000  000ce2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000611a  00000000  00000000  000d29a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00030fae  00000000  00000000  000d8aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014c1c1  00000000  00000000  00109a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00255c29  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005d38  00000000  00000000  00255c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24050970 	.word	0x24050970
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800a2b8 	.word	0x0800a2b8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24050974 	.word	0x24050974
 80002ec:	0800a2b8 	.word	0x0800a2b8

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr

08000304 <strlen>:
 8000304:	4603      	mov	r3, r0
 8000306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800030a:	2a00      	cmp	r2, #0
 800030c:	d1fb      	bne.n	8000306 <strlen+0x2>
 800030e:	1a18      	subs	r0, r3, r0
 8000310:	3801      	subs	r0, #1
 8000312:	4770      	bx	lr
	...

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003d4:	f000 b974 	b.w	80006c0 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468e      	mov	lr, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d14d      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fe:	428a      	cmp	r2, r1
 8000400:	4694      	mov	ip, r2
 8000402:	d969      	bls.n	80004d8 <__udivmoddi4+0xe8>
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	b152      	cbz	r2, 8000420 <__udivmoddi4+0x30>
 800040a:	fa01 f302 	lsl.w	r3, r1, r2
 800040e:	f1c2 0120 	rsb	r1, r2, #32
 8000412:	fa20 f101 	lsr.w	r1, r0, r1
 8000416:	fa0c fc02 	lsl.w	ip, ip, r2
 800041a:	ea41 0e03 	orr.w	lr, r1, r3
 800041e:	4094      	lsls	r4, r2
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	0c21      	lsrs	r1, r4, #16
 8000426:	fbbe f6f8 	udiv	r6, lr, r8
 800042a:	fa1f f78c 	uxth.w	r7, ip
 800042e:	fb08 e316 	mls	r3, r8, r6, lr
 8000432:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000436:	fb06 f107 	mul.w	r1, r6, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000446:	f080 811f 	bcs.w	8000688 <__udivmoddi4+0x298>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 811c 	bls.w	8000688 <__udivmoddi4+0x298>
 8000450:	3e02      	subs	r6, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3310 	mls	r3, r8, r0, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb00 f707 	mul.w	r7, r0, r7
 8000468:	42a7      	cmp	r7, r4
 800046a:	d90a      	bls.n	8000482 <__udivmoddi4+0x92>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000474:	f080 810a 	bcs.w	800068c <__udivmoddi4+0x29c>
 8000478:	42a7      	cmp	r7, r4
 800047a:	f240 8107 	bls.w	800068c <__udivmoddi4+0x29c>
 800047e:	4464      	add	r4, ip
 8000480:	3802      	subs	r0, #2
 8000482:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000486:	1be4      	subs	r4, r4, r7
 8000488:	2600      	movs	r6, #0
 800048a:	b11d      	cbz	r5, 8000494 <__udivmoddi4+0xa4>
 800048c:	40d4      	lsrs	r4, r2
 800048e:	2300      	movs	r3, #0
 8000490:	e9c5 4300 	strd	r4, r3, [r5]
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d909      	bls.n	80004b2 <__udivmoddi4+0xc2>
 800049e:	2d00      	cmp	r5, #0
 80004a0:	f000 80ef 	beq.w	8000682 <__udivmoddi4+0x292>
 80004a4:	2600      	movs	r6, #0
 80004a6:	e9c5 0100 	strd	r0, r1, [r5]
 80004aa:	4630      	mov	r0, r6
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	fab3 f683 	clz	r6, r3
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	d14a      	bne.n	8000550 <__udivmoddi4+0x160>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d302      	bcc.n	80004c4 <__udivmoddi4+0xd4>
 80004be:	4282      	cmp	r2, r0
 80004c0:	f200 80f9 	bhi.w	80006b6 <__udivmoddi4+0x2c6>
 80004c4:	1a84      	subs	r4, r0, r2
 80004c6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ca:	2001      	movs	r0, #1
 80004cc:	469e      	mov	lr, r3
 80004ce:	2d00      	cmp	r5, #0
 80004d0:	d0e0      	beq.n	8000494 <__udivmoddi4+0xa4>
 80004d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004d6:	e7dd      	b.n	8000494 <__udivmoddi4+0xa4>
 80004d8:	b902      	cbnz	r2, 80004dc <__udivmoddi4+0xec>
 80004da:	deff      	udf	#255	; 0xff
 80004dc:	fab2 f282 	clz	r2, r2
 80004e0:	2a00      	cmp	r2, #0
 80004e2:	f040 8092 	bne.w	800060a <__udivmoddi4+0x21a>
 80004e6:	eba1 010c 	sub.w	r1, r1, ip
 80004ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ee:	fa1f fe8c 	uxth.w	lr, ip
 80004f2:	2601      	movs	r6, #1
 80004f4:	0c20      	lsrs	r0, r4, #16
 80004f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004fa:	fb07 1113 	mls	r1, r7, r3, r1
 80004fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000502:	fb0e f003 	mul.w	r0, lr, r3
 8000506:	4288      	cmp	r0, r1
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x12c>
 800050a:	eb1c 0101 	adds.w	r1, ip, r1
 800050e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x12a>
 8000514:	4288      	cmp	r0, r1
 8000516:	f200 80cb 	bhi.w	80006b0 <__udivmoddi4+0x2c0>
 800051a:	4643      	mov	r3, r8
 800051c:	1a09      	subs	r1, r1, r0
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb1 f0f7 	udiv	r0, r1, r7
 8000524:	fb07 1110 	mls	r1, r7, r0, r1
 8000528:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800052c:	fb0e fe00 	mul.w	lr, lr, r0
 8000530:	45a6      	cmp	lr, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x156>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800053c:	d202      	bcs.n	8000544 <__udivmoddi4+0x154>
 800053e:	45a6      	cmp	lr, r4
 8000540:	f200 80bb 	bhi.w	80006ba <__udivmoddi4+0x2ca>
 8000544:	4608      	mov	r0, r1
 8000546:	eba4 040e 	sub.w	r4, r4, lr
 800054a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x9a>
 8000550:	f1c6 0720 	rsb	r7, r6, #32
 8000554:	40b3      	lsls	r3, r6
 8000556:	fa22 fc07 	lsr.w	ip, r2, r7
 800055a:	ea4c 0c03 	orr.w	ip, ip, r3
 800055e:	fa20 f407 	lsr.w	r4, r0, r7
 8000562:	fa01 f306 	lsl.w	r3, r1, r6
 8000566:	431c      	orrs	r4, r3
 8000568:	40f9      	lsrs	r1, r7
 800056a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800056e:	fa00 f306 	lsl.w	r3, r0, r6
 8000572:	fbb1 f8f9 	udiv	r8, r1, r9
 8000576:	0c20      	lsrs	r0, r4, #16
 8000578:	fa1f fe8c 	uxth.w	lr, ip
 800057c:	fb09 1118 	mls	r1, r9, r8, r1
 8000580:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000584:	fb08 f00e 	mul.w	r0, r8, lr
 8000588:	4288      	cmp	r0, r1
 800058a:	fa02 f206 	lsl.w	r2, r2, r6
 800058e:	d90b      	bls.n	80005a8 <__udivmoddi4+0x1b8>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000598:	f080 8088 	bcs.w	80006ac <__udivmoddi4+0x2bc>
 800059c:	4288      	cmp	r0, r1
 800059e:	f240 8085 	bls.w	80006ac <__udivmoddi4+0x2bc>
 80005a2:	f1a8 0802 	sub.w	r8, r8, #2
 80005a6:	4461      	add	r1, ip
 80005a8:	1a09      	subs	r1, r1, r0
 80005aa:	b2a4      	uxth	r4, r4
 80005ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80005b0:	fb09 1110 	mls	r1, r9, r0, r1
 80005b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005bc:	458e      	cmp	lr, r1
 80005be:	d908      	bls.n	80005d2 <__udivmoddi4+0x1e2>
 80005c0:	eb1c 0101 	adds.w	r1, ip, r1
 80005c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80005c8:	d26c      	bcs.n	80006a4 <__udivmoddi4+0x2b4>
 80005ca:	458e      	cmp	lr, r1
 80005cc:	d96a      	bls.n	80006a4 <__udivmoddi4+0x2b4>
 80005ce:	3802      	subs	r0, #2
 80005d0:	4461      	add	r1, ip
 80005d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005d6:	fba0 9402 	umull	r9, r4, r0, r2
 80005da:	eba1 010e 	sub.w	r1, r1, lr
 80005de:	42a1      	cmp	r1, r4
 80005e0:	46c8      	mov	r8, r9
 80005e2:	46a6      	mov	lr, r4
 80005e4:	d356      	bcc.n	8000694 <__udivmoddi4+0x2a4>
 80005e6:	d053      	beq.n	8000690 <__udivmoddi4+0x2a0>
 80005e8:	b15d      	cbz	r5, 8000602 <__udivmoddi4+0x212>
 80005ea:	ebb3 0208 	subs.w	r2, r3, r8
 80005ee:	eb61 010e 	sbc.w	r1, r1, lr
 80005f2:	fa01 f707 	lsl.w	r7, r1, r7
 80005f6:	fa22 f306 	lsr.w	r3, r2, r6
 80005fa:	40f1      	lsrs	r1, r6
 80005fc:	431f      	orrs	r7, r3
 80005fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000602:	2600      	movs	r6, #0
 8000604:	4631      	mov	r1, r6
 8000606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	40d8      	lsrs	r0, r3
 8000610:	fa0c fc02 	lsl.w	ip, ip, r2
 8000614:	fa21 f303 	lsr.w	r3, r1, r3
 8000618:	4091      	lsls	r1, r2
 800061a:	4301      	orrs	r1, r0
 800061c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000620:	fa1f fe8c 	uxth.w	lr, ip
 8000624:	fbb3 f0f7 	udiv	r0, r3, r7
 8000628:	fb07 3610 	mls	r6, r7, r0, r3
 800062c:	0c0b      	lsrs	r3, r1, #16
 800062e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000632:	fb00 f60e 	mul.w	r6, r0, lr
 8000636:	429e      	cmp	r6, r3
 8000638:	fa04 f402 	lsl.w	r4, r4, r2
 800063c:	d908      	bls.n	8000650 <__udivmoddi4+0x260>
 800063e:	eb1c 0303 	adds.w	r3, ip, r3
 8000642:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000646:	d22f      	bcs.n	80006a8 <__udivmoddi4+0x2b8>
 8000648:	429e      	cmp	r6, r3
 800064a:	d92d      	bls.n	80006a8 <__udivmoddi4+0x2b8>
 800064c:	3802      	subs	r0, #2
 800064e:	4463      	add	r3, ip
 8000650:	1b9b      	subs	r3, r3, r6
 8000652:	b289      	uxth	r1, r1
 8000654:	fbb3 f6f7 	udiv	r6, r3, r7
 8000658:	fb07 3316 	mls	r3, r7, r6, r3
 800065c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000660:	fb06 f30e 	mul.w	r3, r6, lr
 8000664:	428b      	cmp	r3, r1
 8000666:	d908      	bls.n	800067a <__udivmoddi4+0x28a>
 8000668:	eb1c 0101 	adds.w	r1, ip, r1
 800066c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000670:	d216      	bcs.n	80006a0 <__udivmoddi4+0x2b0>
 8000672:	428b      	cmp	r3, r1
 8000674:	d914      	bls.n	80006a0 <__udivmoddi4+0x2b0>
 8000676:	3e02      	subs	r6, #2
 8000678:	4461      	add	r1, ip
 800067a:	1ac9      	subs	r1, r1, r3
 800067c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000680:	e738      	b.n	80004f4 <__udivmoddi4+0x104>
 8000682:	462e      	mov	r6, r5
 8000684:	4628      	mov	r0, r5
 8000686:	e705      	b.n	8000494 <__udivmoddi4+0xa4>
 8000688:	4606      	mov	r6, r0
 800068a:	e6e3      	b.n	8000454 <__udivmoddi4+0x64>
 800068c:	4618      	mov	r0, r3
 800068e:	e6f8      	b.n	8000482 <__udivmoddi4+0x92>
 8000690:	454b      	cmp	r3, r9
 8000692:	d2a9      	bcs.n	80005e8 <__udivmoddi4+0x1f8>
 8000694:	ebb9 0802 	subs.w	r8, r9, r2
 8000698:	eb64 0e0c 	sbc.w	lr, r4, ip
 800069c:	3801      	subs	r0, #1
 800069e:	e7a3      	b.n	80005e8 <__udivmoddi4+0x1f8>
 80006a0:	4646      	mov	r6, r8
 80006a2:	e7ea      	b.n	800067a <__udivmoddi4+0x28a>
 80006a4:	4620      	mov	r0, r4
 80006a6:	e794      	b.n	80005d2 <__udivmoddi4+0x1e2>
 80006a8:	4640      	mov	r0, r8
 80006aa:	e7d1      	b.n	8000650 <__udivmoddi4+0x260>
 80006ac:	46d0      	mov	r8, sl
 80006ae:	e77b      	b.n	80005a8 <__udivmoddi4+0x1b8>
 80006b0:	3b02      	subs	r3, #2
 80006b2:	4461      	add	r1, ip
 80006b4:	e732      	b.n	800051c <__udivmoddi4+0x12c>
 80006b6:	4630      	mov	r0, r6
 80006b8:	e709      	b.n	80004ce <__udivmoddi4+0xde>
 80006ba:	4464      	add	r4, ip
 80006bc:	3802      	subs	r0, #2
 80006be:	e742      	b.n	8000546 <__udivmoddi4+0x156>

080006c0 <__aeabi_idiv0>:
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop

080006c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
    /*****************第1步:创建神经网络对象**********************/
    struct layer * Network = NULL;
    Network = OpenNNA_CreateNetwork();
 80006c6:	f003 fb95 	bl	8003df4 <OpenNNA_CreateNetwork>
    OpenNNA_Demo_Conv_OpenNNAPaper(Network);
  for(;;)
  {
	  memset(RunTimeInfo,0,400);
 80006ca:	4c0f      	ldr	r4, [pc, #60]	; (8000708 <StartDefaultTask+0x44>)
	  //OpenNNA_Demo_Dense_Mnist();
	  OpenNNA_Demo_Conv_OpenNNAPaper_Predict(Network);
	  //printf("Free RTOS Test Task end!\r\n");
      vTaskGetRunTimeStats(RunTimeInfo);
      //printf("Task Name\t\t\tRun Time\t\t\trun(%)\r\n");
      printf("%s\r\n",RunTimeInfo);
 80006cc:	4f0f      	ldr	r7, [pc, #60]	; (800070c <StartDefaultTask+0x48>)
    Network = OpenNNA_CreateNetwork();
 80006ce:	4605      	mov	r5, r0
      printf("\r\n");
 80006d0:	4e0f      	ldr	r6, [pc, #60]	; (8000710 <StartDefaultTask+0x4c>)
    OpenNNA_Demo_Conv_OpenNNAPaper(Network);
 80006d2:	f003 fc97 	bl	8004004 <OpenNNA_Demo_Conv_OpenNNAPaper>
	  memset(RunTimeInfo,0,400);
 80006d6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80006da:	2100      	movs	r1, #0
 80006dc:	4620      	mov	r0, r4
 80006de:	f006 fdf9 	bl	80072d4 <memset>
	  OpenNNA_Demo_Conv_OpenNNAPaper_Predict(Network);
 80006e2:	4628      	mov	r0, r5
 80006e4:	f003 fe22 	bl	800432c <OpenNNA_Demo_Conv_OpenNNAPaper_Predict>
      vTaskGetRunTimeStats(RunTimeInfo);
 80006e8:	4620      	mov	r0, r4
 80006ea:	f006 f89f 	bl	800682c <vTaskGetRunTimeStats>
      printf("%s\r\n",RunTimeInfo);
 80006ee:	4621      	mov	r1, r4
 80006f0:	4638      	mov	r0, r7
 80006f2:	f007 fa3b 	bl	8007b6c <iprintf>
      printf("\r\n");
 80006f6:	4630      	mov	r0, r6
 80006f8:	f007 fabe 	bl	8007c78 <puts>
      osDelay(3000);
 80006fc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000700:	f004 fc6a 	bl	8004fd8 <osDelay>
  for(;;)
 8000704:	e7e7      	b.n	80006d6 <StartDefaultTask+0x12>
 8000706:	bf00      	nop
 8000708:	24050998 	.word	0x24050998
 800070c:	0800a2d0 	.word	0x0800a2d0
 8000710:	0800a2d8 	.word	0x0800a2d8

08000714 <_write>:
{
 8000714:	b508      	push	{r3, lr}
	 if(HAL_UART_Transmit(&huart3,ptr,len,0xffff) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <_write+0x18>)
 8000718:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800071c:	b292      	uxth	r2, r2
 800071e:	f003 f987 	bl	8003a30 <HAL_UART_Transmit>
 8000722:	b108      	cbz	r0, 8000728 <_write+0x14>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000724:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000726:	e7fe      	b.n	8000726 <_write+0x12>
}
 8000728:	bd08      	pop	{r3, pc}
 800072a:	bf00      	nop
 800072c:	24050b78 	.word	0x24050b78

08000730 <SystemClock_Config>:
{
 8000730:	b510      	push	{r4, lr}
 8000732:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000734:	224c      	movs	r2, #76	; 0x4c
 8000736:	2100      	movs	r1, #0
 8000738:	a80a      	add	r0, sp, #40	; 0x28
 800073a:	f006 fdcb 	bl	80072d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073e:	2220      	movs	r2, #32
 8000740:	2100      	movs	r1, #0
 8000742:	a802      	add	r0, sp, #8
 8000744:	f006 fdc6 	bl	80072d4 <memset>
  RCC->CKGAENR = 0xFFFFFFFF;
 8000748:	4b2b      	ldr	r3, [pc, #172]	; (80007f8 <SystemClock_Config+0xc8>)
 800074a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800074e:	2004      	movs	r0, #4
  RCC->CKGAENR = 0xFFFFFFFF;
 8000750:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000754:	f000 fd74 	bl	8001240 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000758:	4a28      	ldr	r2, [pc, #160]	; (80007fc <SystemClock_Config+0xcc>)
 800075a:	2300      	movs	r3, #0
 800075c:	9301      	str	r3, [sp, #4]
 800075e:	6993      	ldr	r3, [r2, #24]
 8000760:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000764:	6193      	str	r3, [r2, #24]
 8000766:	6993      	ldr	r3, [r2, #24]
 8000768:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800076c:	9301      	str	r3, [sp, #4]
 800076e:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000770:	6993      	ldr	r3, [r2, #24]
 8000772:	049b      	lsls	r3, r3, #18
 8000774:	d5fc      	bpl.n	8000770 <SystemClock_Config+0x40>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000776:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000778:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800077a:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLN = 70;
 800077c:	2446      	movs	r4, #70	; 0x46
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800077e:	9110      	str	r1, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000780:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000782:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000784:	210c      	movs	r1, #12
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000786:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000788:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLN = 70;
 800078a:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800078c:	921c      	str	r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800078e:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80007e0 <SystemClock_Config+0xb0>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000792:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000796:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000798:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800079c:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007a0:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	f000 fe0f 	bl	80013c4 <HAL_RCC_OscConfig>
 80007a6:	b108      	cbz	r0, 80007ac <SystemClock_Config+0x7c>
 80007a8:	b672      	cpsid	i
  while (1)
 80007aa:	e7fe      	b.n	80007aa <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ac:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80007e8 <SystemClock_Config+0xb8>
 80007b0:	2200      	movs	r2, #0
 80007b2:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007b4:	a802      	add	r0, sp, #8
 80007b6:	2107      	movs	r1, #7
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80007bc:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80007f0 <SystemClock_Config+0xc0>
 80007c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80007c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007c8:	2340      	movs	r3, #64	; 0x40
 80007ca:	ed8d 7b06 	vstr	d7, [sp, #24]
 80007ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007d2:	f001 f95d 	bl	8001a90 <HAL_RCC_ClockConfig>
 80007d6:	b108      	cbz	r0, 80007dc <SystemClock_Config+0xac>
 80007d8:	b672      	cpsid	i
  while (1)
 80007da:	e7fe      	b.n	80007da <SystemClock_Config+0xaa>
}
 80007dc:	b01e      	add	sp, #120	; 0x78
 80007de:	bd10      	pop	{r4, pc}
 80007e0:	00000021 	.word	0x00000021
 80007e4:	00050000 	.word	0x00050000
 80007e8:	0000003f 	.word	0x0000003f
 80007ec:	00000003 	.word	0x00000003
 80007f0:	00000040 	.word	0x00000040
 80007f4:	00000040 	.word	0x00000040
 80007f8:	58024400 	.word	0x58024400
 80007fc:	58024800 	.word	0x58024800

08000800 <main>:
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b092      	sub	sp, #72	; 0x48
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	2400      	movs	r4, #0
  HAL_Init();
 8000806:	f000 fb27 	bl	8000e58 <HAL_Init>
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800080a:	2600      	movs	r6, #0
  SystemClock_Config();
 800080c:	f7ff ff90 	bl	8000730 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000810:	4b99      	ldr	r3, [pc, #612]	; (8000a78 <main+0x278>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000814:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000818:	4622      	mov	r2, r4
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800081a:	2700      	movs	r7, #0
  huart3.Instance = USART3;
 800081c:	4d97      	ldr	r5, [pc, #604]	; (8000a7c <main+0x27c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8000822:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 800082a:	f040 0004 	orr.w	r0, r0, #4
 800082e:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
 8000832:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 8000836:	f000 0004 	and.w	r0, r0, #4
 800083a:	9001      	str	r0, [sp, #4]
 800083c:	9801      	ldr	r0, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800083e:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 8000842:	f040 0020 	orr.w	r0, r0, #32
 8000846:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
 800084a:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 800084e:	f000 0020 	and.w	r0, r0, #32
 8000852:	9002      	str	r0, [sp, #8]
 8000854:	9802      	ldr	r0, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000856:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 800085a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800085e:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
 8000862:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 8000866:	f000 0080 	and.w	r0, r0, #128	; 0x80
 800086a:	9003      	str	r0, [sp, #12]
 800086c:	9803      	ldr	r0, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 8000872:	f040 0002 	orr.w	r0, r0, #2
 8000876:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
 800087a:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 800087e:	f000 0002 	and.w	r0, r0, #2
 8000882:	9004      	str	r0, [sp, #16]
 8000884:	9804      	ldr	r0, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000886:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 800088a:	f040 0008 	orr.w	r0, r0, #8
 800088e:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
 8000892:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 8000896:	f000 0008 	and.w	r0, r0, #8
 800089a:	9005      	str	r0, [sp, #20]
 800089c:	9805      	ldr	r0, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800089e:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 80008a2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80008a6:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
 80008aa:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 80008ae:	f000 0040 	and.w	r0, r0, #64	; 0x40
 80008b2:	9006      	str	r0, [sp, #24]
 80008b4:	9806      	ldr	r0, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 80008ba:	f040 0001 	orr.w	r0, r0, #1
 80008be:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
 80008c2:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 80008c6:	f000 0001 	and.w	r0, r0, #1
 80008ca:	9007      	str	r0, [sp, #28]
 80008cc:	9807      	ldr	r0, [sp, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ce:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 80008d2:	f040 0010 	orr.w	r0, r0, #16
 80008d6:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
 80008da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008de:	4868      	ldr	r0, [pc, #416]	; (8000a80 <main+0x280>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008e0:	f003 0310 	and.w	r3, r3, #16
 80008e4:	9308      	str	r3, [sp, #32]
 80008e6:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008e8:	f000 fca6 	bl	8001238 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008ec:	4622      	mov	r2, r4
 80008ee:	f244 0101 	movw	r1, #16385	; 0x4001
 80008f2:	4864      	ldr	r0, [pc, #400]	; (8000a84 <main+0x284>)
 80008f4:	f000 fca0 	bl	8001238 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008f8:	4622      	mov	r2, r4
 80008fa:	2102      	movs	r1, #2
 80008fc:	4862      	ldr	r0, [pc, #392]	; (8000a88 <main+0x288>)
 80008fe:	f000 fc9b 	bl	8001238 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8000902:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000906:	2300      	movs	r3, #0
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000908:	a90c      	add	r1, sp, #48	; 0x30
 800090a:	4860      	ldr	r0, [pc, #384]	; (8000a8c <main+0x28c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = B1_Pin;
 800090e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000912:	f000 fb57 	bl	8000fc4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000916:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800091a:	2301      	movs	r3, #1
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800091c:	a90c      	add	r1, sp, #48	; 0x30
 800091e:	4858      	ldr	r0, [pc, #352]	; (8000a80 <main+0x280>)
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000920:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8000924:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000928:	f000 fb4c 	bl	8000fc4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800092c:	f244 0201 	movw	r2, #16385	; 0x4001
 8000930:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	a90c      	add	r1, sp, #48	; 0x30
 8000934:	4853      	ldr	r0, [pc, #332]	; (8000a84 <main+0x284>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000936:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800093a:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093e:	f000 fb41 	bl	8000fc4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000942:	2280      	movs	r2, #128	; 0x80
 8000944:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000948:	a90c      	add	r1, sp, #48	; 0x30
 800094a:	4851      	ldr	r0, [pc, #324]	; (8000a90 <main+0x290>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800094e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000952:	f000 fb37 	bl	8000fc4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800095a:	2300      	movs	r3, #0
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800095c:	a90c      	add	r1, sp, #48	; 0x30
 800095e:	484d      	ldr	r0, [pc, #308]	; (8000a94 <main+0x294>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000962:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000966:	f000 fb2d 	bl	8000fc4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800096a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800096e:	2302      	movs	r3, #2
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000970:	a90c      	add	r1, sp, #48	; 0x30
 8000972:	4848      	ldr	r0, [pc, #288]	; (8000a94 <main+0x294>)
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000974:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000978:	230a      	movs	r3, #10
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800097a:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800097e:	9310      	str	r3, [sp, #64]	; 0x40
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000980:	f000 fb20 	bl	8000fc4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000984:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000988:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	a90c      	add	r1, sp, #48	; 0x30
 800098c:	4841      	ldr	r0, [pc, #260]	; (8000a94 <main+0x294>)
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 800098e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8000992:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000996:	f000 fb15 	bl	8000fc4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 800099a:	2202      	movs	r2, #2
 800099c:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800099e:	483a      	ldr	r0, [pc, #232]	; (8000a88 <main+0x288>)
 80009a0:	a90c      	add	r1, sp, #48	; 0x30
  GPIO_InitStruct.Pin = LD2_Pin;
 80009a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80009a6:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f000 fb0b 	bl	8000fc4 <HAL_GPIO_Init>
  huart3.Init.BaudRate = 115200;
 80009ae:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart3.Instance = USART3;
 80009b2:	4a39      	ldr	r2, [pc, #228]	; (8000a98 <main+0x298>)
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009b4:	4628      	mov	r0, r5
  huart3.Init.Parity = UART_PARITY_NONE;
 80009b6:	612c      	str	r4, [r5, #16]
  huart3.Init.BaudRate = 115200;
 80009b8:	e9c5 2300 	strd	r2, r3, [r5]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009bc:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009be:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009c2:	e9c5 3405 	strd	r3, r4, [r5, #20]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c6:	e9c5 4407 	strd	r4, r4, [r5, #28]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ca:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ce:	f003 f8fb 	bl	8003bc8 <HAL_UART_Init>
 80009d2:	b108      	cbz	r0, 80009d8 <main+0x1d8>
 80009d4:	b672      	cpsid	i
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <main+0x1d6>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d8:	4601      	mov	r1, r0
 80009da:	4628      	mov	r0, r5
 80009dc:	f003 f97e 	bl	8003cdc <HAL_UARTEx_SetTxFifoThreshold>
 80009e0:	b108      	cbz	r0, 80009e6 <main+0x1e6>
 80009e2:	b672      	cpsid	i
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <main+0x1e4>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e6:	4601      	mov	r1, r0
 80009e8:	4628      	mov	r0, r5
 80009ea:	f003 f9b9 	bl	8003d60 <HAL_UARTEx_SetRxFifoThreshold>
 80009ee:	b108      	cbz	r0, 80009f4 <main+0x1f4>
 80009f0:	b672      	cpsid	i
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <main+0x1f2>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009f4:	4628      	mov	r0, r5
 80009f6:	f003 f953 	bl	8003ca0 <HAL_UARTEx_DisableFifoMode>
 80009fa:	4603      	mov	r3, r0
 80009fc:	b108      	cbz	r0, 8000a02 <main+0x202>
 80009fe:	b672      	cpsid	i
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <main+0x200>
  htim3.Instance = TIM3;
 8000a02:	4c26      	ldr	r4, [pc, #152]	; (8000a9c <main+0x29c>)
  htim3.Init.Prescaler = 280-1;
 8000a04:	f240 1217 	movw	r2, #279	; 0x117
  htim3.Instance = TIM3;
 8000a08:	4925      	ldr	r1, [pc, #148]	; (8000aa0 <main+0x2a0>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0a:	9009      	str	r0, [sp, #36]	; 0x24
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0c:	60a0      	str	r0, [r4, #8]
  htim3.Init.Prescaler = 280-1;
 8000a0e:	e9c4 1200 	strd	r1, r2, [r4]
  htim3.Init.Period = 50-1;
 8000a12:	2131      	movs	r1, #49	; 0x31
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a14:	2280      	movs	r2, #128	; 0x80
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a16:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 8000a1a:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  htim3.Init.Period = 50-1;
 8000a1e:	e9c4 1003 	strd	r1, r0, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a22:	4620      	mov	r0, r4
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a24:	61a2      	str	r2, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a26:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a2a:	f002 f99d 	bl	8002d68 <HAL_TIM_Base_Init>
 8000a2e:	b108      	cbz	r0, 8000a34 <main+0x234>
 8000a30:	b672      	cpsid	i
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <main+0x232>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a38:	a90c      	add	r1, sp, #48	; 0x30
 8000a3a:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a3c:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a3e:	f002 faa5 	bl	8002f8c <HAL_TIM_ConfigClockSource>
 8000a42:	4603      	mov	r3, r0
 8000a44:	b108      	cbz	r0, 8000a4a <main+0x24a>
 8000a46:	b672      	cpsid	i
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <main+0x248>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a4a:	4620      	mov	r0, r4
 8000a4c:	a909      	add	r1, sp, #36	; 0x24
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4e:	9309      	str	r3, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a50:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a52:	f002 fc27 	bl	80032a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a56:	4604      	mov	r4, r0
 8000a58:	b108      	cbz	r0, 8000a5e <main+0x25e>
 8000a5a:	b672      	cpsid	i
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <main+0x25c>
  osKernelInitialize();
 8000a5e:	f004 fa45 	bl	8004eec <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000a62:	4a10      	ldr	r2, [pc, #64]	; (8000aa4 <main+0x2a4>)
 8000a64:	4621      	mov	r1, r4
 8000a66:	4810      	ldr	r0, [pc, #64]	; (8000aa8 <main+0x2a8>)
 8000a68:	f004 fa6c 	bl	8004f44 <osThreadNew>
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <main+0x2ac>)
 8000a6e:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000a70:	f004 fa4e 	bl	8004f10 <osKernelStart>
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <main+0x274>
 8000a76:	bf00      	nop
 8000a78:	58024400 	.word	0x58024400
 8000a7c:	24050b78 	.word	0x24050b78
 8000a80:	58021400 	.word	0x58021400
 8000a84:	58020400 	.word	0x58020400
 8000a88:	58021000 	.word	0x58021000
 8000a8c:	58020800 	.word	0x58020800
 8000a90:	58021800 	.word	0x58021800
 8000a94:	58020000 	.word	0x58020000
 8000a98:	40004800 	.word	0x40004800
 8000a9c:	24050b2c 	.word	0x24050b2c
 8000aa0:	40000400 	.word	0x40000400
 8000aa4:	0800a2e8 	.word	0x0800a2e8
 8000aa8:	080006c5 	.word	0x080006c5
 8000aac:	24050b28 	.word	0x24050b28

08000ab0 <configureTimerForRunTimeStats>:
{
 8000ab0:	b508      	push	{r3, lr}
	HAL_TIM_Base_Start_IT(&htim3);
 8000ab2:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <configureTimerForRunTimeStats+0x14>)
 8000ab4:	f002 fa0e 	bl	8002ed4 <HAL_TIM_Base_Start_IT>
	FreeRTOSRunTimeTicks=0;
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <configureTimerForRunTimeStats+0x18>)
 8000aba:	2000      	movs	r0, #0
 8000abc:	2100      	movs	r1, #0
 8000abe:	e9c3 0100 	strd	r0, r1, [r3]
}
 8000ac2:	bd08      	pop	{r3, pc}
 8000ac4:	24050b2c 	.word	0x24050b2c
 8000ac8:	24050990 	.word	0x24050990

08000acc <getRunTimeCounterValue>:
return FreeRTOSRunTimeTicks;
 8000acc:	4b01      	ldr	r3, [pc, #4]	; (8000ad4 <getRunTimeCounterValue+0x8>)
 8000ace:	e9d3 0100 	ldrd	r0, r1, [r3]
}
 8000ad2:	4770      	bx	lr
 8000ad4:	24050990 	.word	0x24050990

08000ad8 <HAL_TIM_PeriodElapsedCallback>:
    if (htim == (&htim3))
 8000ad8:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ada:	4283      	cmp	r3, r0
 8000adc:	d000      	beq.n	8000ae0 <HAL_TIM_PeriodElapsedCallback+0x8>
 8000ade:	4770      	bx	lr
{
 8000ae0:	b410      	push	{r4}
    	FreeRTOSRunTimeTicks++;
 8000ae2:	4c06      	ldr	r4, [pc, #24]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000ae4:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000ae8:	1c50      	adds	r0, r2, #1
 8000aea:	f143 0100 	adc.w	r1, r3, #0
 8000aee:	e9c4 0100 	strd	r0, r1, [r4]
}
 8000af2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	24050b2c 	.word	0x24050b2c
 8000afc:	24050990 	.word	0x24050990

08000b00 <Error_Handler>:
 8000b00:	b672      	cpsid	i
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <Error_Handler+0x2>

08000b04 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <HAL_MspInit+0x30>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	210f      	movs	r1, #15
 8000b0a:	f06f 0001 	mvn.w	r0, #1
{
 8000b0e:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b10:	f8d3 4154 	ldr.w	r4, [r3, #340]	; 0x154
{
 8000b14:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	f044 0402 	orr.w	r4, r4, #2
 8000b1a:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
 8000b1e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	9301      	str	r3, [sp, #4]
 8000b28:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2a:	b003      	add	sp, #12
 8000b2c:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b30:	f000 b9e6 	b.w	8000f00 <HAL_NVIC_SetPriority>
 8000b34:	58024400 	.word	0x58024400

08000b38 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <HAL_TIM_Base_MspInit+0x40>)
 8000b3a:	6802      	ldr	r2, [r0, #0]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d000      	beq.n	8000b42 <HAL_TIM_Base_MspInit+0xa>
 8000b40:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_TIM_Base_MspInit+0x44>)
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000b44:	201d      	movs	r0, #29
 8000b46:	2200      	movs	r2, #0
 8000b48:	2105      	movs	r1, #5
{
 8000b4a:	b510      	push	{r4, lr}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b4c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
{
 8000b50:	b082      	sub	sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b52:	f044 0402 	orr.w	r4, r4, #2
 8000b56:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8000b5a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	9301      	str	r3, [sp, #4]
 8000b64:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000b66:	f000 f9cb 	bl	8000f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b6a:	201d      	movs	r0, #29
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b6c:	b002      	add	sp, #8
 8000b6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b72:	f000 ba03 	b.w	8000f7c <HAL_NVIC_EnableIRQ>
 8000b76:	bf00      	nop
 8000b78:	40000400 	.word	0x40000400
 8000b7c:	58024400 	.word	0x58024400

08000b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b80:	b510      	push	{r4, lr}
 8000b82:	b0b6      	sub	sp, #216	; 0xd8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	2100      	movs	r1, #0
{
 8000b86:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b88:	22b8      	movs	r2, #184	; 0xb8
 8000b8a:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	9106      	str	r1, [sp, #24]
 8000b8e:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000b92:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b96:	f006 fb9d 	bl	80072d4 <memset>
  if(huart->Instance==USART3)
 8000b9a:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <HAL_UART_MspInit+0xa0>)
 8000b9c:	6822      	ldr	r2, [r4, #0]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d001      	beq.n	8000ba6 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ba2:	b036      	add	sp, #216	; 0xd8
 8000ba4:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ba6:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba8:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000baa:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bac:	f001 fa5c 	bl	8002068 <HAL_RCCEx_PeriphCLKConfig>
 8000bb0:	bb40      	cbnz	r0, 8000c04 <HAL_UART_MspInit+0x84>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bb2:	4b1c      	ldr	r3, [pc, #112]	; (8000c24 <HAL_UART_MspInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bb4:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb6:	a902      	add	r1, sp, #8
 8000bb8:	481b      	ldr	r0, [pc, #108]	; (8000c28 <HAL_UART_MspInit+0xa8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bba:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8000bbe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000bc2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8000bc6:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8000bca:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000bce:	9200      	str	r2, [sp, #0]
 8000bd0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8000bd6:	f042 0208 	orr.w	r2, r2, #8
 8000bda:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8000bde:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000be2:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be4:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000be8:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8000c10 <HAL_UART_MspInit+0x90>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bec:	9301      	str	r3, [sp, #4]
 8000bee:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000bf0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000bf4:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8000c18 <HAL_UART_MspInit+0x98>
 8000bf8:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bfc:	f000 f9e2 	bl	8000fc4 <HAL_GPIO_Init>
}
 8000c00:	b036      	add	sp, #216	; 0xd8
 8000c02:	bd10      	pop	{r4, pc}
      Error_Handler();
 8000c04:	f7ff ff7c 	bl	8000b00 <Error_Handler>
 8000c08:	e7d3      	b.n	8000bb2 <HAL_UART_MspInit+0x32>
 8000c0a:	bf00      	nop
 8000c0c:	f3af 8000 	nop.w
 8000c10:	00000300 	.word	0x00000300
 8000c14:	00000002 	.word	0x00000002
	...
 8000c20:	40004800 	.word	0x40004800
 8000c24:	58024400 	.word	0x58024400
 8000c28:	58020c00 	.word	0x58020c00

08000c2c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <NMI_Handler>
 8000c2e:	bf00      	nop

08000c30 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <HardFault_Handler>
 8000c32:	bf00      	nop

08000c34 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <MemManage_Handler>
 8000c36:	bf00      	nop

08000c38 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <BusFault_Handler>
 8000c3a:	bf00      	nop

08000c3c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler>
 8000c3e:	bf00      	nop

08000c40 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop

08000c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c46:	f000 f937 	bl	8000eb8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c4a:	f005 fd99 	bl	8006780 <xTaskGetSchedulerState>
 8000c4e:	2801      	cmp	r0, #1
 8000c50:	d100      	bne.n	8000c54 <SysTick_Handler+0x10>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c52:	bd08      	pop	{r3, pc}
 8000c54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 8000c58:	f006 b91c 	b.w	8006e94 <xPortSysTickHandler>

08000c5c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c5c:	4801      	ldr	r0, [pc, #4]	; (8000c64 <TIM3_IRQHandler+0x8>)
 8000c5e:	f002 ba69 	b.w	8003134 <HAL_TIM_IRQHandler>
 8000c62:	bf00      	nop
 8000c64:	24050b2c 	.word	0x24050b2c

08000c68 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000c68:	2001      	movs	r0, #1
 8000c6a:	4770      	bx	lr

08000c6c <_kill>:

int _kill(int pid, int sig)
{
 8000c6c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000c6e:	f006 faf9 	bl	8007264 <__errno>
 8000c72:	2216      	movs	r2, #22
 8000c74:	4603      	mov	r3, r0
	return -1;
}
 8000c76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	errno = EINVAL;
 8000c7a:	601a      	str	r2, [r3, #0]
}
 8000c7c:	bd08      	pop	{r3, pc}
 8000c7e:	bf00      	nop

08000c80 <_exit>:

void _exit (int status)
{
 8000c80:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000c82:	f006 faef 	bl	8007264 <__errno>
 8000c86:	2316      	movs	r3, #22
 8000c88:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8000c8a:	e7fe      	b.n	8000c8a <_exit+0xa>

08000c8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c8c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8e:	1e16      	subs	r6, r2, #0
 8000c90:	dd07      	ble.n	8000ca2 <_read+0x16>
 8000c92:	460c      	mov	r4, r1
 8000c94:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8000c96:	f3af 8000 	nop.w
 8000c9a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d1f9      	bne.n	8000c96 <_read+0xa>
	}

return len;
}
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	bd70      	pop	{r4, r5, r6, pc}
 8000ca6:	bf00      	nop

08000ca8 <_close>:
}

int _close(int file)
{
	return -1;
}
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000cb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8000cb4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000cb6:	604b      	str	r3, [r1, #4]
}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4770      	bx	lr

08000cc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	4770      	bx	lr

08000cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc4:	b538      	push	{r3, r4, r5, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc6:	4c0d      	ldr	r4, [pc, #52]	; (8000cfc <_sbrk+0x38>)
{
 8000cc8:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cca:	490d      	ldr	r1, [pc, #52]	; (8000d00 <_sbrk+0x3c>)
 8000ccc:	4d0d      	ldr	r5, [pc, #52]	; (8000d04 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8000cce:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd0:	1b49      	subs	r1, r1, r5
  if (NULL == __sbrk_heap_end)
 8000cd2:	b12a      	cbz	r2, 8000ce0 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cd4:	4413      	add	r3, r2
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d808      	bhi.n	8000cec <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000cda:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 8000cdc:	6023      	str	r3, [r4, #0]
}
 8000cde:	bd38      	pop	{r3, r4, r5, pc}
    __sbrk_heap_end = &_end;
 8000ce0:	4809      	ldr	r0, [pc, #36]	; (8000d08 <_sbrk+0x44>)
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000ce6:	4413      	add	r3, r2
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d9f6      	bls.n	8000cda <_sbrk+0x16>
    errno = ENOMEM;
 8000cec:	f006 faba 	bl	8007264 <__errno>
 8000cf0:	230c      	movs	r3, #12
    return (void *)-1;
 8000cf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    errno = ENOMEM;
 8000cf6:	6003      	str	r3, [r0, #0]
}
 8000cf8:	4610      	mov	r0, r2
 8000cfa:	bd38      	pop	{r3, r4, r5, pc}
 8000cfc:	24050c08 	.word	0x24050c08
 8000d00:	24100000 	.word	0x24100000
 8000d04:	00000400 	.word	0x00000400
 8000d08:	2406a9a8 	.word	0x2406a9a8

08000d0c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d0c:	4922      	ldr	r1, [pc, #136]	; (8000d98 <SystemInit+0x8c>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d0e:	4a23      	ldr	r2, [pc, #140]	; (8000d9c <SystemInit+0x90>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d10:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8000d18:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d1e:	6813      	ldr	r3, [r2, #0]
 8000d20:	f003 030f 	and.w	r3, r3, #15
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d805      	bhi.n	8000d34 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d28:	6813      	ldr	r3, [r2, #0]
 8000d2a:	f023 030f 	bic.w	r3, r3, #15
 8000d2e:	f043 0303 	orr.w	r3, r3, #3
 8000d32:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d34:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <SystemInit+0x94>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d36:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d38:	4a1a      	ldr	r2, [pc, #104]	; (8000da4 <SystemInit+0x98>)
  RCC->CR |= RCC_CR_HSION;
 8000d3a:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d3c:	4817      	ldr	r0, [pc, #92]	; (8000d9c <SystemInit+0x90>)
  RCC->CR |= RCC_CR_HSION;
 8000d3e:	f041 0101 	orr.w	r1, r1, #1
 8000d42:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000d44:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8000d46:	6819      	ldr	r1, [r3, #0]
 8000d48:	400a      	ands	r2, r1
 8000d4a:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d4c:	6803      	ldr	r3, [r0, #0]
 8000d4e:	f013 0f0c 	tst.w	r3, #12
 8000d52:	d005      	beq.n	8000d60 <SystemInit+0x54>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d54:	6803      	ldr	r3, [r0, #0]
 8000d56:	f023 030f 	bic.w	r3, r3, #15
 8000d5a:	f043 0303 	orr.w	r3, r3, #3
 8000d5e:	6003      	str	r3, [r0, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <SystemInit+0x94>)
 8000d62:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d64:	4910      	ldr	r1, [pc, #64]	; (8000da8 <SystemInit+0x9c>)
  RCC->PLLCKSELR = 0x02020200;
 8000d66:	4c11      	ldr	r4, [pc, #68]	; (8000dac <SystemInit+0xa0>)
  RCC->PLLCFGR = 0x01FF0000;
 8000d68:	4811      	ldr	r0, [pc, #68]	; (8000db0 <SystemInit+0xa4>)
  RCC->CDCFGR1 = 0x00000000;
 8000d6a:	619a      	str	r2, [r3, #24]
  RCC->CDCFGR2 = 0x00000000;
 8000d6c:	61da      	str	r2, [r3, #28]
  RCC->SRDCFGR = 0x00000000;
 8000d6e:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000d70:	629c      	str	r4, [r3, #40]	; 0x28
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d72:	f243 04d2 	movw	r4, #12498	; 0x30d2
  RCC->PLLCFGR = 0x01FF0000;
 8000d76:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8000d78:	6319      	str	r1, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 8000d7a:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x01010280;
 8000d7c:	6399      	str	r1, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 8000d7e:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x01010280;
 8000d80:	6419      	str	r1, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8000d82:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8000d84:	6819      	ldr	r1, [r3, #0]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d86:	480b      	ldr	r0, [pc, #44]	; (8000db4 <SystemInit+0xa8>)
  RCC->CR &= 0xFFFBFFFFU;
 8000d88:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000d8c:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8000d8e:	661a      	str	r2, [r3, #96]	; 0x60
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d90:	6004      	str	r4, [r0, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00
 8000d9c:	52002000 	.word	0x52002000
 8000da0:	58024400 	.word	0x58024400
 8000da4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000da8:	01010280 	.word	0x01010280
 8000dac:	02020200 	.word	0x02020200
 8000db0:	01ff0000 	.word	0x01ff0000
 8000db4:	52004000 	.word	0x52004000

08000db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dbc:	f7ff ffa6 	bl	8000d0c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc0:	480c      	ldr	r0, [pc, #48]	; (8000df4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dc2:	490d      	ldr	r1, [pc, #52]	; (8000df8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	; (8000dfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc8:	e002      	b.n	8000dd0 <LoopCopyDataInit>

08000dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dce:	3304      	adds	r3, #4

08000dd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd4:	d3f9      	bcc.n	8000dca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dd8:	4c0a      	ldr	r4, [pc, #40]	; (8000e04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ddc:	e001      	b.n	8000de2 <LoopFillZerobss>

08000dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de0:	3204      	adds	r2, #4

08000de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de4:	d3fb      	bcc.n	8000dde <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000de6:	f006 fa43 	bl	8007270 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dea:	f7ff fd09 	bl	8000800 <main>
  bx  lr
 8000dee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000df0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000df4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000df8:	2405096c 	.word	0x2405096c
  ldr r2, =_sidata
 8000dfc:	0800b120 	.word	0x0800b120
  ldr r2, =_sbss
 8000e00:	24050970 	.word	0x24050970
  ldr r4, =_ebss
 8000e04:	2406a9a4 	.word	0x2406a9a4

08000e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC_IRQHandler>
	...

08000e0c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <HAL_InitTick+0x40>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b90b      	cbnz	r3, 8000e16 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8000e12:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000e14:	4770      	bx	lr
{
 8000e16:	b510      	push	{r4, lr}
 8000e18:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e1e:	4a0c      	ldr	r2, [pc, #48]	; (8000e50 <HAL_InitTick+0x44>)
 8000e20:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e24:	6810      	ldr	r0, [r2, #0]
 8000e26:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e2a:	f000 f8b5 	bl	8000f98 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2e:	2c0f      	cmp	r4, #15
 8000e30:	d800      	bhi.n	8000e34 <HAL_InitTick+0x28>
 8000e32:	b108      	cbz	r0, 8000e38 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8000e34:	2001      	movs	r0, #1
}
 8000e36:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	4621      	mov	r1, r4
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e40:	f000 f85e 	bl	8000f00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <HAL_InitTick+0x48>)
 8000e46:	2000      	movs	r0, #0
 8000e48:	601c      	str	r4, [r3, #0]
}
 8000e4a:	bd10      	pop	{r4, pc}
 8000e4c:	24000008 	.word	0x24000008
 8000e50:	24000000 	.word	0x24000000
 8000e54:	2400000c 	.word	0x2400000c

08000e58 <HAL_Init>:
{
 8000e58:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5a:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000e5c:	4c12      	ldr	r4, [pc, #72]	; (8000ea8 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5e:	f000 f83d 	bl	8000edc <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000e62:	f000 fd75 	bl	8001950 <HAL_RCC_GetSysClockFreq>
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <HAL_Init+0x54>)
 8000e68:	4911      	ldr	r1, [pc, #68]	; (8000eb0 <HAL_Init+0x58>)
 8000e6a:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000e6c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000e6e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000e72:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000e76:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000e78:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000e7a:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8000e7e:	490d      	ldr	r1, [pc, #52]	; (8000eb4 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000e80:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000e84:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000e86:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8000e8a:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e8c:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000e8e:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e90:	f7ff ffbc 	bl	8000e0c <HAL_InitTick>
 8000e94:	b110      	cbz	r0, 8000e9c <HAL_Init+0x44>
    return HAL_ERROR;
 8000e96:	2401      	movs	r4, #1
}
 8000e98:	4620      	mov	r0, r4
 8000e9a:	bd10      	pop	{r4, pc}
 8000e9c:	4604      	mov	r4, r0
  HAL_MspInit();
 8000e9e:	f7ff fe31 	bl	8000b04 <HAL_MspInit>
}
 8000ea2:	4620      	mov	r0, r4
 8000ea4:	bd10      	pop	{r4, pc}
 8000ea6:	bf00      	nop
 8000ea8:	24000004 	.word	0x24000004
 8000eac:	58024400 	.word	0x58024400
 8000eb0:	0800a30c 	.word	0x0800a30c
 8000eb4:	24000000 	.word	0x24000000

08000eb8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000eb8:	4a03      	ldr	r2, [pc, #12]	; (8000ec8 <HAL_IncTick+0x10>)
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <HAL_IncTick+0x14>)
 8000ebc:	6811      	ldr	r1, [r2, #0]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	440b      	add	r3, r1
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	24050c0c 	.word	0x24050c0c
 8000ecc:	24000008 	.word	0x24000008

08000ed0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ed0:	4b01      	ldr	r3, [pc, #4]	; (8000ed8 <HAL_GetTick+0x8>)
 8000ed2:	6818      	ldr	r0, [r3, #0]
}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	24050c0c 	.word	0x24050c0c

08000edc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000edc:	4906      	ldr	r1, [pc, #24]	; (8000ef8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ede:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee2:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee6:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eec:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef0:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8000ef2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000ef4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00
 8000efc:	05fa0000 	.word	0x05fa0000

08000f00 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <HAL_NVIC_SetPriority+0x70>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f08:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f0a:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f12:	f1be 0f04 	cmp.w	lr, #4
 8000f16:	bf28      	it	cs
 8000f18:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1c:	f1bc 0f06 	cmp.w	ip, #6
 8000f20:	d91a      	bls.n	8000f58 <HAL_NVIC_SetPriority+0x58>
 8000f22:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f24:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f28:	fa0c fc03 	lsl.w	ip, ip, r3
 8000f2c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 8000f34:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f36:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000f3a:	ea21 010c 	bic.w	r1, r1, ip
 8000f3e:	fa01 f103 	lsl.w	r1, r1, r3
 8000f42:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000f46:	db0a      	blt.n	8000f5e <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f48:	0109      	lsls	r1, r1, #4
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_NVIC_SetPriority+0x74>)
 8000f4c:	b2c9      	uxtb	r1, r1
 8000f4e:	4403      	add	r3, r0
 8000f50:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f54:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f58:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7e8      	b.n	8000f30 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5e:	f000 000f 	and.w	r0, r0, #15
 8000f62:	0109      	lsls	r1, r1, #4
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <HAL_NVIC_SetPriority+0x78>)
 8000f66:	b2c9      	uxtb	r1, r1
 8000f68:	4403      	add	r3, r0
 8000f6a:	7619      	strb	r1, [r3, #24]
 8000f6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f70:	e000ed00 	.word	0xe000ed00
 8000f74:	e000e100 	.word	0xe000e100
 8000f78:	e000ecfc 	.word	0xe000ecfc

08000f7c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	db07      	blt.n	8000f90 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f80:	2301      	movs	r3, #1
 8000f82:	f000 011f 	and.w	r1, r0, #31
 8000f86:	4a03      	ldr	r2, [pc, #12]	; (8000f94 <HAL_NVIC_EnableIRQ+0x18>)
 8000f88:	0940      	lsrs	r0, r0, #5
 8000f8a:	408b      	lsls	r3, r1
 8000f8c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000e100 	.word	0xe000e100

08000f98 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	1e43      	subs	r3, r0, #1
 8000f9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f9e:	d20c      	bcs.n	8000fba <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa4:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	4906      	ldr	r1, [pc, #24]	; (8000fc0 <HAL_SYSTICK_Config+0x28>)
 8000fa8:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fac:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fae:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb4:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb6:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000fba:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fc8:	680c      	ldr	r4, [r1, #0]
{
 8000fca:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fcc:	2c00      	cmp	r4, #0
 8000fce:	f000 80a6 	beq.w	800111e <HAL_GPIO_Init+0x15a>
 8000fd2:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd6:	4f8e      	ldr	r7, [pc, #568]	; (8001210 <HAL_GPIO_Init+0x24c>)
  uint32_t position = 0x00U;
 8000fd8:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8000fde:	ea12 0e04 	ands.w	lr, r2, r4
 8000fe2:	f000 8095 	beq.w	8001110 <HAL_GPIO_Init+0x14c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fe6:	684d      	ldr	r5, [r1, #4]
 8000fe8:	f005 0903 	and.w	r9, r5, #3
 8000fec:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 8000ff0:	2e01      	cmp	r6, #1
 8000ff2:	f240 8097 	bls.w	8001124 <HAL_GPIO_Init+0x160>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff6:	f1b9 0f03 	cmp.w	r9, #3
 8000ffa:	f040 80d1 	bne.w	80011a0 <HAL_GPIO_Init+0x1dc>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ffe:	fa09 f20c 	lsl.w	r2, r9, ip
 8001002:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 8001006:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001008:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800100c:	ea06 0808 	and.w	r8, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001010:	ea42 0208 	orr.w	r2, r2, r8
      GPIOx->MODER = temp;
 8001014:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001016:	d07b      	beq.n	8001110 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001018:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800101c:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001020:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001024:	f042 0202 	orr.w	r2, r2, #2
 8001028:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800102c:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001030:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8001034:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 8001038:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800103c:	f002 0202 	and.w	r2, r2, #2
 8001040:	9201      	str	r2, [sp, #4]
 8001042:	9a01      	ldr	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001044:	220f      	movs	r2, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 8001046:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800104a:	fa02 f209 	lsl.w	r2, r2, r9
 800104e:	ea26 0202 	bic.w	r2, r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001052:	4e70      	ldr	r6, [pc, #448]	; (8001214 <HAL_GPIO_Init+0x250>)
 8001054:	42b0      	cmp	r0, r6
 8001056:	d029      	beq.n	80010ac <HAL_GPIO_Init+0xe8>
 8001058:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800105c:	42b0      	cmp	r0, r6
 800105e:	f000 80ac 	beq.w	80011ba <HAL_GPIO_Init+0x1f6>
 8001062:	4e6d      	ldr	r6, [pc, #436]	; (8001218 <HAL_GPIO_Init+0x254>)
 8001064:	42b0      	cmp	r0, r6
 8001066:	f000 80ae 	beq.w	80011c6 <HAL_GPIO_Init+0x202>
 800106a:	4e6c      	ldr	r6, [pc, #432]	; (800121c <HAL_GPIO_Init+0x258>)
 800106c:	42b0      	cmp	r0, r6
 800106e:	f000 809e 	beq.w	80011ae <HAL_GPIO_Init+0x1ea>
 8001072:	4e6b      	ldr	r6, [pc, #428]	; (8001220 <HAL_GPIO_Init+0x25c>)
 8001074:	42b0      	cmp	r0, r6
 8001076:	f000 80b2 	beq.w	80011de <HAL_GPIO_Init+0x21a>
 800107a:	4e6a      	ldr	r6, [pc, #424]	; (8001224 <HAL_GPIO_Init+0x260>)
 800107c:	42b0      	cmp	r0, r6
 800107e:	f000 80b4 	beq.w	80011ea <HAL_GPIO_Init+0x226>
 8001082:	4e69      	ldr	r6, [pc, #420]	; (8001228 <HAL_GPIO_Init+0x264>)
 8001084:	42b0      	cmp	r0, r6
 8001086:	f000 80a4 	beq.w	80011d2 <HAL_GPIO_Init+0x20e>
 800108a:	4e68      	ldr	r6, [pc, #416]	; (800122c <HAL_GPIO_Init+0x268>)
 800108c:	42b0      	cmp	r0, r6
 800108e:	f000 80b2 	beq.w	80011f6 <HAL_GPIO_Init+0x232>
 8001092:	4e67      	ldr	r6, [pc, #412]	; (8001230 <HAL_GPIO_Init+0x26c>)
 8001094:	42b0      	cmp	r0, r6
 8001096:	f000 80b4 	beq.w	8001202 <HAL_GPIO_Init+0x23e>
 800109a:	4e66      	ldr	r6, [pc, #408]	; (8001234 <HAL_GPIO_Init+0x270>)
 800109c:	42b0      	cmp	r0, r6
 800109e:	bf0c      	ite	eq
 80010a0:	2609      	moveq	r6, #9
 80010a2:	260a      	movne	r6, #10
 80010a4:	fa06 f909 	lsl.w	r9, r6, r9
 80010a8:	ea42 0209 	orr.w	r2, r2, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010ac:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010b4:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 80010b6:	ea6f 080e 	mvn.w	r8, lr
        temp = EXTI->RTSR1;
 80010ba:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80010bc:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80010c0:	bf54      	ite	pl
 80010c2:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 80010c6:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->RTSR1 = temp;
 80010ca:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010cc:	02aa      	lsls	r2, r5, #10
        temp = EXTI->FTSR1;
 80010ce:	6876      	ldr	r6, [r6, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80010d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80010d4:	bf54      	ite	pl
 80010d6:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 80010da:	ea4e 0606 	orrmi.w	r6, lr, r6
        EXTI->FTSR1 = temp;
 80010de:	6056      	str	r6, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80010e0:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010e4:	03aa      	lsls	r2, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80010e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80010ea:	bf54      	ite	pl
 80010ec:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 80010f0:	ea4e 0606 	orrmi.w	r6, lr, r6

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f4:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80010f6:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 80010fa:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80010fe:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 8001102:	bf54      	ite	pl
 8001104:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 8001108:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800110c:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 8001110:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001112:	f10c 0c02 	add.w	ip, ip, #2
 8001116:	fa34 f203 	lsrs.w	r2, r4, r3
 800111a:	f47f af5e 	bne.w	8000fda <HAL_GPIO_Init+0x16>
  }
}
 800111e:	b003      	add	sp, #12
 8001120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001124:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 8001128:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800112a:	fa08 f80c 	lsl.w	r8, r8, ip
 800112e:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001132:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001134:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001138:	fa06 f60c 	lsl.w	r6, r6, ip
 800113c:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8001140:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001142:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 8001146:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800114a:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800114c:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001150:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8001152:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8001154:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001156:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800115a:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800115c:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001160:	fa06 f60c 	lsl.w	r6, r6, ip
 8001164:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 8001168:	fa09 f20c 	lsl.w	r2, r9, ip
 800116c:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116e:	f47f af4a 	bne.w	8001006 <HAL_GPIO_Init+0x42>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001172:	f003 0607 	and.w	r6, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001176:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800117a:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 800117e:	260f      	movs	r6, #15
 8001180:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8001184:	fa06 f60b 	lsl.w	r6, r6, fp
        temp = GPIOx->AFR[position >> 3U];
 8001188:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800118c:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001190:	690e      	ldr	r6, [r1, #16]
 8001192:	fa06 f60b 	lsl.w	r6, r6, fp
 8001196:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 800119a:	f8c9 6020 	str.w	r6, [r9, #32]
 800119e:	e732      	b.n	8001006 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011a0:	f04f 0803 	mov.w	r8, #3
 80011a4:	fa08 f80c 	lsl.w	r8, r8, ip
 80011a8:	ea6f 0808 	mvn.w	r8, r8
 80011ac:	e7d2      	b.n	8001154 <HAL_GPIO_Init+0x190>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011ae:	2603      	movs	r6, #3
 80011b0:	fa06 f909 	lsl.w	r9, r6, r9
 80011b4:	ea42 0209 	orr.w	r2, r2, r9
 80011b8:	e778      	b.n	80010ac <HAL_GPIO_Init+0xe8>
 80011ba:	2601      	movs	r6, #1
 80011bc:	fa06 f909 	lsl.w	r9, r6, r9
 80011c0:	ea42 0209 	orr.w	r2, r2, r9
 80011c4:	e772      	b.n	80010ac <HAL_GPIO_Init+0xe8>
 80011c6:	2602      	movs	r6, #2
 80011c8:	fa06 f909 	lsl.w	r9, r6, r9
 80011cc:	ea42 0209 	orr.w	r2, r2, r9
 80011d0:	e76c      	b.n	80010ac <HAL_GPIO_Init+0xe8>
 80011d2:	2606      	movs	r6, #6
 80011d4:	fa06 f909 	lsl.w	r9, r6, r9
 80011d8:	ea42 0209 	orr.w	r2, r2, r9
 80011dc:	e766      	b.n	80010ac <HAL_GPIO_Init+0xe8>
 80011de:	2604      	movs	r6, #4
 80011e0:	fa06 f909 	lsl.w	r9, r6, r9
 80011e4:	ea42 0209 	orr.w	r2, r2, r9
 80011e8:	e760      	b.n	80010ac <HAL_GPIO_Init+0xe8>
 80011ea:	2605      	movs	r6, #5
 80011ec:	fa06 f909 	lsl.w	r9, r6, r9
 80011f0:	ea42 0209 	orr.w	r2, r2, r9
 80011f4:	e75a      	b.n	80010ac <HAL_GPIO_Init+0xe8>
 80011f6:	2607      	movs	r6, #7
 80011f8:	fa06 f909 	lsl.w	r9, r6, r9
 80011fc:	ea42 0209 	orr.w	r2, r2, r9
 8001200:	e754      	b.n	80010ac <HAL_GPIO_Init+0xe8>
 8001202:	2608      	movs	r6, #8
 8001204:	fa06 f909 	lsl.w	r9, r6, r9
 8001208:	ea42 0209 	orr.w	r2, r2, r9
 800120c:	e74e      	b.n	80010ac <HAL_GPIO_Init+0xe8>
 800120e:	bf00      	nop
 8001210:	58024400 	.word	0x58024400
 8001214:	58020000 	.word	0x58020000
 8001218:	58020800 	.word	0x58020800
 800121c:	58020c00 	.word	0x58020c00
 8001220:	58021000 	.word	0x58021000
 8001224:	58021400 	.word	0x58021400
 8001228:	58021800 	.word	0x58021800
 800122c:	58021c00 	.word	0x58021c00
 8001230:	58022000 	.word	0x58022000
 8001234:	58022400 	.word	0x58022400

08001238 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001238:	b902      	cbnz	r2, 800123c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800123a:	0409      	lsls	r1, r1, #16
 800123c:	6181      	str	r1, [r0, #24]
  }
}
 800123e:	4770      	bx	lr

08001240 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001240:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001242:	4c1d      	ldr	r4, [pc, #116]	; (80012b8 <HAL_PWREx_ConfigSupply+0x78>)
{
 8001244:	4605      	mov	r5, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001246:	68e3      	ldr	r3, [r4, #12]
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	2b06      	cmp	r3, #6
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800124e:	68e3      	ldr	r3, [r4, #12]
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001250:	d005      	beq.n	800125e <HAL_PWREx_ConfigSupply+0x1e>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001252:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001256:	1a18      	subs	r0, r3, r0
 8001258:	bf18      	it	ne
 800125a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800125c:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800125e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001262:	4303      	orrs	r3, r0
 8001264:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8001266:	f7ff fe33 	bl	8000ed0 <HAL_GetTick>
 800126a:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800126c:	e005      	b.n	800127a <HAL_PWREx_ConfigSupply+0x3a>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800126e:	f7ff fe2f 	bl	8000ed0 <HAL_GetTick>
 8001272:	1b83      	subs	r3, r0, r6
 8001274:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001278:	d81b      	bhi.n	80012b2 <HAL_PWREx_ConfigSupply+0x72>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800127a:	6863      	ldr	r3, [r4, #4]
 800127c:	049a      	lsls	r2, r3, #18
 800127e:	d5f6      	bpl.n	800126e <HAL_PWREx_ConfigSupply+0x2e>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001280:	f1a5 031d 	sub.w	r3, r5, #29
 8001284:	2b01      	cmp	r3, #1
 8001286:	d905      	bls.n	8001294 <HAL_PWREx_ConfigSupply+0x54>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 8001288:	f1a5 002d 	sub.w	r0, r5, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800128c:	2801      	cmp	r0, #1
 800128e:	d901      	bls.n	8001294 <HAL_PWREx_ConfigSupply+0x54>
  return HAL_OK;
 8001290:	2000      	movs	r0, #0
}
 8001292:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 8001294:	f7ff fe1c 	bl	8000ed0 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001298:	4d07      	ldr	r5, [pc, #28]	; (80012b8 <HAL_PWREx_ConfigSupply+0x78>)
    tickstart = HAL_GetTick ();
 800129a:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800129c:	e005      	b.n	80012aa <HAL_PWREx_ConfigSupply+0x6a>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800129e:	f7ff fe17 	bl	8000ed0 <HAL_GetTick>
 80012a2:	1b00      	subs	r0, r0, r4
 80012a4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80012a8:	d803      	bhi.n	80012b2 <HAL_PWREx_ConfigSupply+0x72>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80012aa:	68eb      	ldr	r3, [r5, #12]
 80012ac:	03db      	lsls	r3, r3, #15
 80012ae:	d5f6      	bpl.n	800129e <HAL_PWREx_ConfigSupply+0x5e>
 80012b0:	e7ee      	b.n	8001290 <HAL_PWREx_ConfigSupply+0x50>
      return HAL_ERROR;
 80012b2:	2001      	movs	r0, #1
}
 80012b4:	bd70      	pop	{r4, r5, r6, pc}
 80012b6:	bf00      	nop
 80012b8:	58024800 	.word	0x58024800

080012bc <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80012bc:	4b3b      	ldr	r3, [pc, #236]	; (80013ac <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 80012be:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80012c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80012c2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80012c4:	6add      	ldr	r5, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 80012c6:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80012ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80012cc:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 80012d0:	d038      	beq.n	8001344 <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80012d2:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80012d6:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80012da:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80012de:	fb05 f101 	mul.w	r1, r5, r1
 80012e2:	2a01      	cmp	r2, #1
 80012e4:	ee07 1a90 	vmov	s15, r1
 80012e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 80012ec:	d002      	beq.n	80012f4 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 80012ee:	2a02      	cmp	r2, #2
 80012f0:	d04e      	beq.n	8001390 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 80012f2:	b34a      	cbz	r2, 8001348 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80012f4:	ee07 0a90 	vmov	s15, r0
 80012f8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80013b0 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 80012fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8001306:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80013b4 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800130a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800130e:	ee06 3a90 	vmov	s13, r3
 8001312:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8001316:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800131a:	ee76 6a85 	vadd.f32	s13, s13, s10
 800131e:	eee7 6a25 	vfma.f32	s13, s14, s11
 8001322:	ee66 6a26 	vmul.f32	s13, s12, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001326:	4b21      	ldr	r3, [pc, #132]	; (80013ac <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800132e:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001330:	ee07 3a90 	vmov	s15, r3
 8001334:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800133c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001340:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8001344:	bc30      	pop	{r4, r5}
 8001346:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	0692      	lsls	r2, r2, #26
 800134c:	d527      	bpl.n	800139e <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800134e:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001350:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001354:	4a18      	ldr	r2, [pc, #96]	; (80013b8 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001356:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800135a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800135c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001364:	ed9f 5a13 	vldr	s10, [pc, #76]	; 80013b4 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8001368:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800136c:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800136e:	ee06 3a90 	vmov	s13, r3
 8001372:	ee05 2a90 	vmov	s11, r2
 8001376:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800137a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800137e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001382:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8001386:	eee7 6a05 	vfma.f32	s13, s14, s10
 800138a:	ee66 6a26 	vmul.f32	s13, s12, s13
 800138e:	e7ca      	b.n	8001326 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001390:	ee07 0a90 	vmov	s15, r0
 8001394:	eddf 6a09 	vldr	s13, [pc, #36]	; 80013bc <HAL_RCC_GetSysClockFreq.part.0+0x100>
 8001398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800139c:	e7b0      	b.n	8001300 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800139e:	ee07 0a90 	vmov	s15, r0
 80013a2:	eddf 6a07 	vldr	s13, [pc, #28]	; 80013c0 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 80013a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013aa:	e7a9      	b.n	8001300 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 80013ac:	58024400 	.word	0x58024400
 80013b0:	4a742400 	.word	0x4a742400
 80013b4:	39000000 	.word	0x39000000
 80013b8:	03d09000 	.word	0x03d09000
 80013bc:	4af42400 	.word	0x4af42400
 80013c0:	4c742400 	.word	0x4c742400

080013c4 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80013c4:	2800      	cmp	r0, #0
 80013c6:	f000 81ce 	beq.w	8001766 <HAL_RCC_OscConfig+0x3a2>
{
 80013ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013cc:	6803      	ldr	r3, [r0, #0]
 80013ce:	4604      	mov	r4, r0
 80013d0:	07d9      	lsls	r1, r3, #31
 80013d2:	d53b      	bpl.n	800144c <HAL_RCC_OscConfig+0x88>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013d4:	4996      	ldr	r1, [pc, #600]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 80013d6:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013d8:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013da:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80013de:	2a10      	cmp	r2, #16
 80013e0:	f000 80fd 	beq.w	80015de <HAL_RCC_OscConfig+0x21a>
 80013e4:	2a18      	cmp	r2, #24
 80013e6:	f000 80f5 	beq.w	80015d4 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ea:	6863      	ldr	r3, [r4, #4]
 80013ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f0:	d018      	beq.n	8001424 <HAL_RCC_OscConfig+0x60>
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 8154 	beq.w	80016a0 <HAL_RCC_OscConfig+0x2dc>
 80013f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013fc:	f000 8254 	beq.w	80018a8 <HAL_RCC_OscConfig+0x4e4>
 8001400:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001404:	4b8a      	ldr	r3, [pc, #552]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	f000 8214 	beq.w	8001834 <HAL_RCC_OscConfig+0x470>
 800140c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	e004      	b.n	800142e <HAL_RCC_OscConfig+0x6a>
 8001424:	4a82      	ldr	r2, [pc, #520]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001426:	6813      	ldr	r3, [r2, #0]
 8001428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800142c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800142e:	f7ff fd4f 	bl	8000ed0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001432:	4e7f      	ldr	r6, [pc, #508]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
        tickstart = HAL_GetTick();
 8001434:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001436:	e005      	b.n	8001444 <HAL_RCC_OscConfig+0x80>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001438:	f7ff fd4a 	bl	8000ed0 <HAL_GetTick>
 800143c:	1b40      	subs	r0, r0, r5
 800143e:	2864      	cmp	r0, #100	; 0x64
 8001440:	f200 812c 	bhi.w	800169c <HAL_RCC_OscConfig+0x2d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001444:	6833      	ldr	r3, [r6, #0]
 8001446:	039b      	lsls	r3, r3, #14
 8001448:	d5f6      	bpl.n	8001438 <HAL_RCC_OscConfig+0x74>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144a:	6823      	ldr	r3, [r4, #0]
 800144c:	079d      	lsls	r5, r3, #30
 800144e:	d47e      	bmi.n	800154e <HAL_RCC_OscConfig+0x18a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001450:	06d9      	lsls	r1, r3, #27
 8001452:	d528      	bpl.n	80014a6 <HAL_RCC_OscConfig+0xe2>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001454:	4976      	ldr	r1, [pc, #472]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001456:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001458:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800145a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800145e:	2a08      	cmp	r2, #8
 8001460:	f000 80cd 	beq.w	80015fe <HAL_RCC_OscConfig+0x23a>
 8001464:	2a18      	cmp	r2, #24
 8001466:	f000 80c5 	beq.w	80015f4 <HAL_RCC_OscConfig+0x230>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800146a:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800146c:	4d70      	ldr	r5, [pc, #448]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 8152 	beq.w	8001718 <HAL_RCC_OscConfig+0x354>
        __HAL_RCC_CSI_ENABLE();
 8001474:	682b      	ldr	r3, [r5, #0]
 8001476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800147a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800147c:	f7ff fd28 	bl	8000ed0 <HAL_GetTick>
 8001480:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001482:	e005      	b.n	8001490 <HAL_RCC_OscConfig+0xcc>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001484:	f7ff fd24 	bl	8000ed0 <HAL_GetTick>
 8001488:	1b80      	subs	r0, r0, r6
 800148a:	2802      	cmp	r0, #2
 800148c:	f200 8106 	bhi.w	800169c <HAL_RCC_OscConfig+0x2d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001490:	682b      	ldr	r3, [r5, #0]
 8001492:	05db      	lsls	r3, r3, #23
 8001494:	d5f6      	bpl.n	8001484 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001496:	68eb      	ldr	r3, [r5, #12]
 8001498:	6a22      	ldr	r2, [r4, #32]
 800149a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800149e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80014a2:	60eb      	str	r3, [r5, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a4:	6823      	ldr	r3, [r4, #0]
 80014a6:	071d      	lsls	r5, r3, #28
 80014a8:	d516      	bpl.n	80014d8 <HAL_RCC_OscConfig+0x114>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014aa:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80014ac:	4d60      	ldr	r5, [pc, #384]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 8110 	beq.w	80016d4 <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_LSI_ENABLE();
 80014b4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80014bc:	f7ff fd08 	bl	8000ed0 <HAL_GetTick>
 80014c0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014c2:	e005      	b.n	80014d0 <HAL_RCC_OscConfig+0x10c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c4:	f7ff fd04 	bl	8000ed0 <HAL_GetTick>
 80014c8:	1b80      	subs	r0, r0, r6
 80014ca:	2802      	cmp	r0, #2
 80014cc:	f200 80e6 	bhi.w	800169c <HAL_RCC_OscConfig+0x2d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014d0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80014d2:	0798      	lsls	r0, r3, #30
 80014d4:	d5f6      	bpl.n	80014c4 <HAL_RCC_OscConfig+0x100>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014d6:	6823      	ldr	r3, [r4, #0]
 80014d8:	069a      	lsls	r2, r3, #26
 80014da:	d516      	bpl.n	800150a <HAL_RCC_OscConfig+0x146>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80014dc:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 80014de:	4d54      	ldr	r5, [pc, #336]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 8108 	beq.w	80016f6 <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_HSI48_ENABLE();
 80014e6:	682b      	ldr	r3, [r5, #0]
 80014e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014ec:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80014ee:	f7ff fcef 	bl	8000ed0 <HAL_GetTick>
 80014f2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014f4:	e005      	b.n	8001502 <HAL_RCC_OscConfig+0x13e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80014f6:	f7ff fceb 	bl	8000ed0 <HAL_GetTick>
 80014fa:	1b80      	subs	r0, r0, r6
 80014fc:	2802      	cmp	r0, #2
 80014fe:	f200 80cd 	bhi.w	800169c <HAL_RCC_OscConfig+0x2d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001502:	682b      	ldr	r3, [r5, #0]
 8001504:	049f      	lsls	r7, r3, #18
 8001506:	d5f6      	bpl.n	80014f6 <HAL_RCC_OscConfig+0x132>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001508:	6823      	ldr	r3, [r4, #0]
 800150a:	0759      	lsls	r1, r3, #29
 800150c:	f100 8087 	bmi.w	800161e <HAL_RCC_OscConfig+0x25a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001510:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001512:	b1d0      	cbz	r0, 800154a <HAL_RCC_OscConfig+0x186>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001514:	4d46      	ldr	r5, [pc, #280]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001516:	692b      	ldr	r3, [r5, #16]
 8001518:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800151c:	2b18      	cmp	r3, #24
 800151e:	f000 8195 	beq.w	800184c <HAL_RCC_OscConfig+0x488>
        __HAL_RCC_PLL_DISABLE();
 8001522:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001524:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800152a:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800152c:	f000 811d 	beq.w	800176a <HAL_RCC_OscConfig+0x3a6>
        tickstart = HAL_GetTick();
 8001530:	f7ff fcce 	bl	8000ed0 <HAL_GetTick>
 8001534:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001536:	e005      	b.n	8001544 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001538:	f7ff fcca 	bl	8000ed0 <HAL_GetTick>
 800153c:	1b00      	subs	r0, r0, r4
 800153e:	2802      	cmp	r0, #2
 8001540:	f200 80ac 	bhi.w	800169c <HAL_RCC_OscConfig+0x2d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001544:	682b      	ldr	r3, [r5, #0]
 8001546:	019b      	lsls	r3, r3, #6
 8001548:	d4f6      	bmi.n	8001538 <HAL_RCC_OscConfig+0x174>
  return HAL_OK;
 800154a:	2000      	movs	r0, #0
}
 800154c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800154e:	4a38      	ldr	r2, [pc, #224]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001550:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001552:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001554:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8001558:	d122      	bne.n	80015a0 <HAL_RCC_OscConfig+0x1dc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800155a:	4b35      	ldr	r3, [pc, #212]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 800155c:	68e2      	ldr	r2, [r4, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	0759      	lsls	r1, r3, #29
 8001562:	d501      	bpl.n	8001568 <HAL_RCC_OscConfig+0x1a4>
 8001564:	2a00      	cmp	r2, #0
 8001566:	d043      	beq.n	80015f0 <HAL_RCC_OscConfig+0x22c>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001568:	4d31      	ldr	r5, [pc, #196]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 800156a:	682b      	ldr	r3, [r5, #0]
 800156c:	f023 0319 	bic.w	r3, r3, #25
 8001570:	4313      	orrs	r3, r2
 8001572:	602b      	str	r3, [r5, #0]
          tickstart = HAL_GetTick();
 8001574:	f7ff fcac 	bl	8000ed0 <HAL_GetTick>
 8001578:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800157a:	e005      	b.n	8001588 <HAL_RCC_OscConfig+0x1c4>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800157c:	f7ff fca8 	bl	8000ed0 <HAL_GetTick>
 8001580:	1b80      	subs	r0, r0, r6
 8001582:	2802      	cmp	r0, #2
 8001584:	f200 808a 	bhi.w	800169c <HAL_RCC_OscConfig+0x2d8>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001588:	682b      	ldr	r3, [r5, #0]
 800158a:	075b      	lsls	r3, r3, #29
 800158c:	d5f6      	bpl.n	800157c <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158e:	686b      	ldr	r3, [r5, #4]
 8001590:	6922      	ldr	r2, [r4, #16]
 8001592:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001596:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800159a:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800159c:	6823      	ldr	r3, [r4, #0]
 800159e:	e757      	b.n	8001450 <HAL_RCC_OscConfig+0x8c>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80015a0:	2b18      	cmp	r3, #24
 80015a2:	f000 80dc 	beq.w	800175e <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015a6:	4d22      	ldr	r5, [pc, #136]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015a8:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015aa:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015ac:	2a00      	cmp	r2, #0
 80015ae:	f000 80c5 	beq.w	800173c <HAL_RCC_OscConfig+0x378>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015b2:	f023 0319 	bic.w	r3, r3, #25
 80015b6:	4313      	orrs	r3, r2
 80015b8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80015ba:	f7ff fc89 	bl	8000ed0 <HAL_GetTick>
 80015be:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015c0:	e004      	b.n	80015cc <HAL_RCC_OscConfig+0x208>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c2:	f7ff fc85 	bl	8000ed0 <HAL_GetTick>
 80015c6:	1b80      	subs	r0, r0, r6
 80015c8:	2802      	cmp	r0, #2
 80015ca:	d867      	bhi.n	800169c <HAL_RCC_OscConfig+0x2d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015cc:	682b      	ldr	r3, [r5, #0]
 80015ce:	075f      	lsls	r7, r3, #29
 80015d0:	d5f7      	bpl.n	80015c2 <HAL_RCC_OscConfig+0x1fe>
 80015d2:	e7dc      	b.n	800158e <HAL_RCC_OscConfig+0x1ca>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80015d4:	f001 0103 	and.w	r1, r1, #3
 80015d8:	2902      	cmp	r1, #2
 80015da:	f47f af06 	bne.w	80013ea <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015de:	4a14      	ldr	r2, [pc, #80]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	0392      	lsls	r2, r2, #14
 80015e4:	f57f af32 	bpl.w	800144c <HAL_RCC_OscConfig+0x88>
 80015e8:	6862      	ldr	r2, [r4, #4]
 80015ea:	2a00      	cmp	r2, #0
 80015ec:	f47f af2e 	bne.w	800144c <HAL_RCC_OscConfig+0x88>
        return HAL_ERROR;
 80015f0:	2001      	movs	r0, #1
}
 80015f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80015f4:	f001 0103 	and.w	r1, r1, #3
 80015f8:	2901      	cmp	r1, #1
 80015fa:	f47f af36 	bne.w	800146a <HAL_RCC_OscConfig+0xa6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015fe:	4a0c      	ldr	r2, [pc, #48]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001600:	6812      	ldr	r2, [r2, #0]
 8001602:	05d2      	lsls	r2, r2, #23
 8001604:	d502      	bpl.n	800160c <HAL_RCC_OscConfig+0x248>
 8001606:	69e2      	ldr	r2, [r4, #28]
 8001608:	2a80      	cmp	r2, #128	; 0x80
 800160a:	d1f1      	bne.n	80015f0 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800160c:	4908      	ldr	r1, [pc, #32]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 800160e:	6a20      	ldr	r0, [r4, #32]
 8001610:	68ca      	ldr	r2, [r1, #12]
 8001612:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 8001616:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800161a:	60ca      	str	r2, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800161c:	e743      	b.n	80014a6 <HAL_RCC_OscConfig+0xe2>
    PWR->CR1 |= PWR_CR1_DBP;
 800161e:	4d05      	ldr	r5, [pc, #20]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001620:	682b      	ldr	r3, [r5, #0]
 8001622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001626:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001628:	f7ff fc52 	bl	8000ed0 <HAL_GetTick>
 800162c:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x27e>
 8001630:	58024400 	.word	0x58024400
 8001634:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001638:	f7ff fc4a 	bl	8000ed0 <HAL_GetTick>
 800163c:	1b80      	subs	r0, r0, r6
 800163e:	2864      	cmp	r0, #100	; 0x64
 8001640:	d82c      	bhi.n	800169c <HAL_RCC_OscConfig+0x2d8>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001642:	682b      	ldr	r3, [r5, #0]
 8001644:	05da      	lsls	r2, r3, #23
 8001646:	d5f7      	bpl.n	8001638 <HAL_RCC_OscConfig+0x274>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001648:	68a3      	ldr	r3, [r4, #8]
 800164a:	2b01      	cmp	r3, #1
 800164c:	f000 815e 	beq.w	800190c <HAL_RCC_OscConfig+0x548>
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 8137 	beq.w	80018c4 <HAL_RCC_OscConfig+0x500>
 8001656:	2b05      	cmp	r3, #5
 8001658:	f000 815e 	beq.w	8001918 <HAL_RCC_OscConfig+0x554>
 800165c:	2b85      	cmp	r3, #133	; 0x85
 800165e:	4ba8      	ldr	r3, [pc, #672]	; (8001900 <HAL_RCC_OscConfig+0x53c>)
 8001660:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001662:	f000 8167 	beq.w	8001934 <HAL_RCC_OscConfig+0x570>
 8001666:	f022 0201 	bic.w	r2, r2, #1
 800166a:	671a      	str	r2, [r3, #112]	; 0x70
 800166c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800166e:	f022 0204 	bic.w	r2, r2, #4
 8001672:	671a      	str	r2, [r3, #112]	; 0x70
 8001674:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001676:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800167a:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800167c:	f7ff fc28 	bl	8000ed0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001680:	4e9f      	ldr	r6, [pc, #636]	; (8001900 <HAL_RCC_OscConfig+0x53c>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001682:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001686:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001688:	e004      	b.n	8001694 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800168a:	f7ff fc21 	bl	8000ed0 <HAL_GetTick>
 800168e:	1b40      	subs	r0, r0, r5
 8001690:	42b8      	cmp	r0, r7
 8001692:	d803      	bhi.n	800169c <HAL_RCC_OscConfig+0x2d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001694:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001696:	079b      	lsls	r3, r3, #30
 8001698:	d5f7      	bpl.n	800168a <HAL_RCC_OscConfig+0x2c6>
 800169a:	e739      	b.n	8001510 <HAL_RCC_OscConfig+0x14c>
            return HAL_TIMEOUT;
 800169c:	2003      	movs	r0, #3
}
 800169e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a0:	4d97      	ldr	r5, [pc, #604]	; (8001900 <HAL_RCC_OscConfig+0x53c>)
 80016a2:	682b      	ldr	r3, [r5, #0]
 80016a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a8:	602b      	str	r3, [r5, #0]
 80016aa:	682b      	ldr	r3, [r5, #0]
 80016ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016b0:	602b      	str	r3, [r5, #0]
 80016b2:	682b      	ldr	r3, [r5, #0]
 80016b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80016ba:	f7ff fc09 	bl	8000ed0 <HAL_GetTick>
 80016be:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016c0:	e004      	b.n	80016cc <HAL_RCC_OscConfig+0x308>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c2:	f7ff fc05 	bl	8000ed0 <HAL_GetTick>
 80016c6:	1b80      	subs	r0, r0, r6
 80016c8:	2864      	cmp	r0, #100	; 0x64
 80016ca:	d8e7      	bhi.n	800169c <HAL_RCC_OscConfig+0x2d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016cc:	682b      	ldr	r3, [r5, #0]
 80016ce:	039f      	lsls	r7, r3, #14
 80016d0:	d4f7      	bmi.n	80016c2 <HAL_RCC_OscConfig+0x2fe>
 80016d2:	e6ba      	b.n	800144a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 80016d4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80016dc:	f7ff fbf8 	bl	8000ed0 <HAL_GetTick>
 80016e0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016e2:	e004      	b.n	80016ee <HAL_RCC_OscConfig+0x32a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016e4:	f7ff fbf4 	bl	8000ed0 <HAL_GetTick>
 80016e8:	1b80      	subs	r0, r0, r6
 80016ea:	2802      	cmp	r0, #2
 80016ec:	d8d6      	bhi.n	800169c <HAL_RCC_OscConfig+0x2d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016ee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80016f0:	0799      	lsls	r1, r3, #30
 80016f2:	d4f7      	bmi.n	80016e4 <HAL_RCC_OscConfig+0x320>
 80016f4:	e6ef      	b.n	80014d6 <HAL_RCC_OscConfig+0x112>
      __HAL_RCC_HSI48_DISABLE();
 80016f6:	682b      	ldr	r3, [r5, #0]
 80016f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016fc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80016fe:	f7ff fbe7 	bl	8000ed0 <HAL_GetTick>
 8001702:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001704:	e004      	b.n	8001710 <HAL_RCC_OscConfig+0x34c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001706:	f7ff fbe3 	bl	8000ed0 <HAL_GetTick>
 800170a:	1b80      	subs	r0, r0, r6
 800170c:	2802      	cmp	r0, #2
 800170e:	d8c5      	bhi.n	800169c <HAL_RCC_OscConfig+0x2d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001710:	682b      	ldr	r3, [r5, #0]
 8001712:	0498      	lsls	r0, r3, #18
 8001714:	d4f7      	bmi.n	8001706 <HAL_RCC_OscConfig+0x342>
 8001716:	e6f7      	b.n	8001508 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_CSI_DISABLE();
 8001718:	682b      	ldr	r3, [r5, #0]
 800171a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800171e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001720:	f7ff fbd6 	bl	8000ed0 <HAL_GetTick>
 8001724:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001726:	e004      	b.n	8001732 <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001728:	f7ff fbd2 	bl	8000ed0 <HAL_GetTick>
 800172c:	1b80      	subs	r0, r0, r6
 800172e:	2802      	cmp	r0, #2
 8001730:	d8b4      	bhi.n	800169c <HAL_RCC_OscConfig+0x2d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001732:	682b      	ldr	r3, [r5, #0]
 8001734:	05df      	lsls	r7, r3, #23
 8001736:	d4f7      	bmi.n	8001728 <HAL_RCC_OscConfig+0x364>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001738:	6823      	ldr	r3, [r4, #0]
 800173a:	e6b4      	b.n	80014a6 <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_DISABLE();
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001742:	f7ff fbc5 	bl	8000ed0 <HAL_GetTick>
 8001746:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001748:	e004      	b.n	8001754 <HAL_RCC_OscConfig+0x390>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800174a:	f7ff fbc1 	bl	8000ed0 <HAL_GetTick>
 800174e:	1b80      	subs	r0, r0, r6
 8001750:	2802      	cmp	r0, #2
 8001752:	d8a3      	bhi.n	800169c <HAL_RCC_OscConfig+0x2d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001754:	682b      	ldr	r3, [r5, #0]
 8001756:	0758      	lsls	r0, r3, #29
 8001758:	d4f7      	bmi.n	800174a <HAL_RCC_OscConfig+0x386>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	e678      	b.n	8001450 <HAL_RCC_OscConfig+0x8c>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800175e:	0790      	lsls	r0, r2, #30
 8001760:	f47f af21 	bne.w	80015a6 <HAL_RCC_OscConfig+0x1e2>
 8001764:	e6f9      	b.n	800155a <HAL_RCC_OscConfig+0x196>
    return HAL_ERROR;
 8001766:	2001      	movs	r0, #1
}
 8001768:	4770      	bx	lr
        tickstart = HAL_GetTick();
 800176a:	f7ff fbb1 	bl	8000ed0 <HAL_GetTick>
 800176e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001770:	e004      	b.n	800177c <HAL_RCC_OscConfig+0x3b8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001772:	f7ff fbad 	bl	8000ed0 <HAL_GetTick>
 8001776:	1b80      	subs	r0, r0, r6
 8001778:	2802      	cmp	r0, #2
 800177a:	d88f      	bhi.n	800169c <HAL_RCC_OscConfig+0x2d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800177c:	682b      	ldr	r3, [r5, #0]
 800177e:	0199      	lsls	r1, r3, #6
 8001780:	d4f7      	bmi.n	8001772 <HAL_RCC_OscConfig+0x3ae>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001782:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8001784:	4b5f      	ldr	r3, [pc, #380]	; (8001904 <HAL_RCC_OscConfig+0x540>)
 8001786:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001788:	400b      	ands	r3, r1
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800178a:	495f      	ldr	r1, [pc, #380]	; (8001908 <HAL_RCC_OscConfig+0x544>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800178c:	4e5c      	ldr	r6, [pc, #368]	; (8001900 <HAL_RCC_OscConfig+0x53c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800178e:	4313      	orrs	r3, r2
 8001790:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001792:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001796:	62ab      	str	r3, [r5, #40]	; 0x28
 8001798:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800179c:	3b01      	subs	r3, #1
 800179e:	3a01      	subs	r2, #1
 80017a0:	025b      	lsls	r3, r3, #9
 80017a2:	0412      	lsls	r2, r2, #16
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80017aa:	4313      	orrs	r3, r2
 80017ac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80017ae:	3a01      	subs	r2, #1
 80017b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80017b4:	4313      	orrs	r3, r2
 80017b6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80017b8:	3a01      	subs	r2, #1
 80017ba:	0612      	lsls	r2, r2, #24
 80017bc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80017c0:	4313      	orrs	r3, r2
 80017c2:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80017c4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80017c6:	f023 0301 	bic.w	r3, r3, #1
 80017ca:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80017cc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80017ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80017d0:	4011      	ands	r1, r2
 80017d2:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80017d6:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80017d8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80017da:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80017dc:	f023 030c 	bic.w	r3, r3, #12
 80017e0:	4313      	orrs	r3, r2
 80017e2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80017e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80017e6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80017e8:	f023 0302 	bic.w	r3, r3, #2
 80017ec:	4313      	orrs	r3, r2
 80017ee:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80017f0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80017f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f6:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80017f8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80017fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017fe:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001800:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001802:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001806:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8001808:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8001810:	682b      	ldr	r3, [r5, #0]
 8001812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001816:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001818:	f7ff fb5a 	bl	8000ed0 <HAL_GetTick>
 800181c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800181e:	e005      	b.n	800182c <HAL_RCC_OscConfig+0x468>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001820:	f7ff fb56 	bl	8000ed0 <HAL_GetTick>
 8001824:	1b00      	subs	r0, r0, r4
 8001826:	2802      	cmp	r0, #2
 8001828:	f63f af38 	bhi.w	800169c <HAL_RCC_OscConfig+0x2d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800182c:	6833      	ldr	r3, [r6, #0]
 800182e:	019a      	lsls	r2, r3, #6
 8001830:	d5f6      	bpl.n	8001820 <HAL_RCC_OscConfig+0x45c>
 8001832:	e68a      	b.n	800154a <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001834:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	e5f0      	b.n	800142e <HAL_RCC_OscConfig+0x6a>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800184c:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800184e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001850:	6b2d      	ldr	r5, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001852:	f43f ae7b 	beq.w	800154c <HAL_RCC_OscConfig+0x188>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001856:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800185a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800185c:	428b      	cmp	r3, r1
 800185e:	f47f aec7 	bne.w	80015f0 <HAL_RCC_OscConfig+0x22c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001862:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001866:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001868:	429a      	cmp	r2, r3
 800186a:	f47f aec1 	bne.w	80015f0 <HAL_RCC_OscConfig+0x22c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800186e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001870:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8001874:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001876:	429a      	cmp	r2, r3
 8001878:	f47f aeba 	bne.w	80015f0 <HAL_RCC_OscConfig+0x22c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800187c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800187e:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8001882:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001884:	429a      	cmp	r2, r3
 8001886:	f47f aeb3 	bne.w	80015f0 <HAL_RCC_OscConfig+0x22c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800188a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800188c:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8001890:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001892:	429a      	cmp	r2, r3
 8001894:	f47f aeac 	bne.w	80015f0 <HAL_RCC_OscConfig+0x22c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001898:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800189a:	f3c5 6506 	ubfx	r5, r5, #24, #7
 800189e:	3801      	subs	r0, #1
  return HAL_OK;
 80018a0:	1a28      	subs	r0, r5, r0
 80018a2:	bf18      	it	ne
 80018a4:	2001      	movne	r0, #1
}
 80018a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a8:	4b15      	ldr	r3, [pc, #84]	; (8001900 <HAL_RCC_OscConfig+0x53c>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	e5b4      	b.n	800142e <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c4:	4d0e      	ldr	r5, [pc, #56]	; (8001900 <HAL_RCC_OscConfig+0x53c>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c6:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ca:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018cc:	f023 0301 	bic.w	r3, r3, #1
 80018d0:	672b      	str	r3, [r5, #112]	; 0x70
 80018d2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018d8:	672b      	str	r3, [r5, #112]	; 0x70
 80018da:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018dc:	f023 0304 	bic.w	r3, r3, #4
 80018e0:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80018e2:	f7ff faf5 	bl	8000ed0 <HAL_GetTick>
 80018e6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018e8:	e005      	b.n	80018f6 <HAL_RCC_OscConfig+0x532>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ea:	f7ff faf1 	bl	8000ed0 <HAL_GetTick>
 80018ee:	1b80      	subs	r0, r0, r6
 80018f0:	42b8      	cmp	r0, r7
 80018f2:	f63f aed3 	bhi.w	800169c <HAL_RCC_OscConfig+0x2d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018f6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018f8:	0798      	lsls	r0, r3, #30
 80018fa:	d4f6      	bmi.n	80018ea <HAL_RCC_OscConfig+0x526>
 80018fc:	e608      	b.n	8001510 <HAL_RCC_OscConfig+0x14c>
 80018fe:	bf00      	nop
 8001900:	58024400 	.word	0x58024400
 8001904:	fffffc0c 	.word	0xfffffc0c
 8001908:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800190c:	4a0f      	ldr	r2, [pc, #60]	; (800194c <HAL_RCC_OscConfig+0x588>)
 800190e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001916:	e6b1      	b.n	800167c <HAL_RCC_OscConfig+0x2b8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <HAL_RCC_OscConfig+0x588>)
 800191a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800191c:	f042 0204 	orr.w	r2, r2, #4
 8001920:	671a      	str	r2, [r3, #112]	; 0x70
 8001922:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001924:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001928:	671a      	str	r2, [r3, #112]	; 0x70
 800192a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800192c:	f042 0201 	orr.w	r2, r2, #1
 8001930:	671a      	str	r2, [r3, #112]	; 0x70
 8001932:	e6a3      	b.n	800167c <HAL_RCC_OscConfig+0x2b8>
 8001934:	f042 0204 	orr.w	r2, r2, #4
 8001938:	671a      	str	r2, [r3, #112]	; 0x70
 800193a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800193c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001940:	671a      	str	r2, [r3, #112]	; 0x70
 8001942:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001944:	f042 0201 	orr.w	r2, r2, #1
 8001948:	671a      	str	r2, [r3, #112]	; 0x70
 800194a:	e697      	b.n	800167c <HAL_RCC_OscConfig+0x2b8>
 800194c:	58024400 	.word	0x58024400

08001950 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001950:	4a47      	ldr	r2, [pc, #284]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x120>)
 8001952:	6913      	ldr	r3, [r2, #16]
 8001954:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001958:	2b10      	cmp	r3, #16
 800195a:	d004      	beq.n	8001966 <HAL_RCC_GetSysClockFreq+0x16>
 800195c:	2b18      	cmp	r3, #24
 800195e:	d00d      	beq.n	800197c <HAL_RCC_GetSysClockFreq+0x2c>
 8001960:	b11b      	cbz	r3, 800196a <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 8001962:	4844      	ldr	r0, [pc, #272]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x124>)
 8001964:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001966:	4844      	ldr	r0, [pc, #272]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x128>)
 8001968:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800196a:	6813      	ldr	r3, [r2, #0]
 800196c:	0699      	lsls	r1, r3, #26
 800196e:	d54a      	bpl.n	8001a06 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001970:	6813      	ldr	r3, [r2, #0]
 8001972:	4842      	ldr	r0, [pc, #264]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001974:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001978:	40d8      	lsrs	r0, r3
 800197a:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800197c:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 800197e:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001980:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001982:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    if (pllm != 0U)
 8001984:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001988:	6b51      	ldr	r1, [r2, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800198a:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 800198e:	d038      	beq.n	8001a02 <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001990:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001994:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001998:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800199c:	fb05 f101 	mul.w	r1, r5, r1
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	ee07 1a90 	vmov	s15, r1
 80019a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      switch (pllsource)
 80019aa:	d002      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0x62>
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d02c      	beq.n	8001a0a <HAL_RCC_GetSysClockFreq+0xba>
 80019b0:	b393      	cbz	r3, 8001a18 <HAL_RCC_GetSysClockFreq+0xc8>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80019b2:	ee07 0a90 	vmov	s15, r0
 80019b6:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001a80 <HAL_RCC_GetSysClockFreq+0x130>
 80019ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019be:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80019c0:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80019c4:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8001a84 <HAL_RCC_GetSysClockFreq+0x134>
 80019c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019cc:	ee06 3a90 	vmov	s13, r3
 80019d0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80019d4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80019d8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80019dc:	eee7 6a25 	vfma.f32	s13, s14, s11
 80019e0:	ee66 6a26 	vmul.f32	s13, s12, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80019e4:	4b22      	ldr	r3, [pc, #136]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x120>)
 80019e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80019ec:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80019ee:	ee07 3a90 	vmov	s15, r3
 80019f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019fe:	ee17 0a90 	vmov	r0, s15
}
 8001a02:	bc30      	pop	{r4, r5}
 8001a04:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001a06:	481d      	ldr	r0, [pc, #116]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8001a08:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a0a:	ee07 0a90 	vmov	s15, r0
 8001a0e:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001a88 <HAL_RCC_GetSysClockFreq+0x138>
 8001a12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a16:	e7d2      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001a18:	6813      	ldr	r3, [r2, #0]
 8001a1a:	069b      	lsls	r3, r3, #26
 8001a1c:	d520      	bpl.n	8001a60 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001a1e:	6814      	ldr	r4, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a20:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001a24:	4915      	ldr	r1, [pc, #84]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a26:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001a2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001a2c:	f3c4 04c1 	ubfx	r4, r4, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a34:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8001a84 <HAL_RCC_GetSysClockFreq+0x134>
 8001a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001a3c:	40e1      	lsrs	r1, r4
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a3e:	ee06 3a90 	vmov	s13, r3
 8001a42:	ee05 1a90 	vmov	s11, r1
 8001a46:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001a4a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001a4e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001a52:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8001a56:	eee7 6a05 	vfma.f32	s13, s14, s10
 8001a5a:	ee66 6a26 	vmul.f32	s13, s12, s13
 8001a5e:	e7c1      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a60:	ee07 0a90 	vmov	s15, r0
 8001a64:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001a8c <HAL_RCC_GetSysClockFreq+0x13c>
 8001a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a6c:	e7a7      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x6e>
 8001a6e:	bf00      	nop
 8001a70:	58024400 	.word	0x58024400
 8001a74:	003d0900 	.word	0x003d0900
 8001a78:	007a1200 	.word	0x007a1200
 8001a7c:	03d09000 	.word	0x03d09000
 8001a80:	4a742400 	.word	0x4a742400
 8001a84:	39000000 	.word	0x39000000
 8001a88:	4af42400 	.word	0x4af42400
 8001a8c:	4c742400 	.word	0x4c742400

08001a90 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001a90:	2800      	cmp	r0, #0
 8001a92:	f000 810c 	beq.w	8001cae <HAL_RCC_ClockConfig+0x21e>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a96:	4a8c      	ldr	r2, [pc, #560]	; (8001cc8 <HAL_RCC_ClockConfig+0x238>)
 8001a98:	6813      	ldr	r3, [r2, #0]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	428b      	cmp	r3, r1
{
 8001aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001aa4:	4604      	mov	r4, r0
 8001aa6:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa8:	d20c      	bcs.n	8001ac4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aaa:	6813      	ldr	r3, [r2, #0]
 8001aac:	f023 030f 	bic.w	r3, r3, #15
 8001ab0:	430b      	orrs	r3, r1
 8001ab2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab4:	6813      	ldr	r3, [r2, #0]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	428b      	cmp	r3, r1
 8001abc:	d002      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8001abe:	2001      	movs	r0, #1
}
 8001ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ac4:	6823      	ldr	r3, [r4, #0]
 8001ac6:	075f      	lsls	r7, r3, #29
 8001ac8:	d50b      	bpl.n	8001ae2 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001aca:	4980      	ldr	r1, [pc, #512]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001acc:	6920      	ldr	r0, [r4, #16]
 8001ace:	698a      	ldr	r2, [r1, #24]
 8001ad0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001ad4:	4290      	cmp	r0, r2
 8001ad6:	d904      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ad8:	698a      	ldr	r2, [r1, #24]
 8001ada:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001ade:	4302      	orrs	r2, r0
 8001ae0:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae2:	071e      	lsls	r6, r3, #28
 8001ae4:	d50b      	bpl.n	8001afe <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001ae6:	4979      	ldr	r1, [pc, #484]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001ae8:	6960      	ldr	r0, [r4, #20]
 8001aea:	69ca      	ldr	r2, [r1, #28]
 8001aec:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001af0:	4290      	cmp	r0, r2
 8001af2:	d904      	bls.n	8001afe <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001af4:	69ca      	ldr	r2, [r1, #28]
 8001af6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001afa:	4302      	orrs	r2, r0
 8001afc:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001afe:	06d8      	lsls	r0, r3, #27
 8001b00:	d50b      	bpl.n	8001b1a <HAL_RCC_ClockConfig+0x8a>
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001b02:	4972      	ldr	r1, [pc, #456]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001b04:	69a0      	ldr	r0, [r4, #24]
 8001b06:	69ca      	ldr	r2, [r1, #28]
 8001b08:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001b0c:	4290      	cmp	r0, r2
 8001b0e:	d904      	bls.n	8001b1a <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b10:	69ca      	ldr	r2, [r1, #28]
 8001b12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b16:	4302      	orrs	r2, r0
 8001b18:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b1a:	0699      	lsls	r1, r3, #26
 8001b1c:	d50b      	bpl.n	8001b36 <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001b1e:	496b      	ldr	r1, [pc, #428]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001b20:	69e0      	ldr	r0, [r4, #28]
 8001b22:	6a0a      	ldr	r2, [r1, #32]
 8001b24:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001b28:	4290      	cmp	r0, r2
 8001b2a:	d904      	bls.n	8001b36 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001b2c:	6a0a      	ldr	r2, [r1, #32]
 8001b2e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b32:	4302      	orrs	r2, r0
 8001b34:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b36:	079a      	lsls	r2, r3, #30
 8001b38:	f140 80ab 	bpl.w	8001c92 <HAL_RCC_ClockConfig+0x202>
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001b3c:	4863      	ldr	r0, [pc, #396]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001b3e:	68e1      	ldr	r1, [r4, #12]
 8001b40:	6982      	ldr	r2, [r0, #24]
 8001b42:	f002 020f 	and.w	r2, r2, #15
 8001b46:	4291      	cmp	r1, r2
 8001b48:	d904      	bls.n	8001b54 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b4a:	6982      	ldr	r2, [r0, #24]
 8001b4c:	f022 020f 	bic.w	r2, r2, #15
 8001b50:	430a      	orrs	r2, r1
 8001b52:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b54:	07d8      	lsls	r0, r3, #31
 8001b56:	d530      	bpl.n	8001bba <HAL_RCC_ClockConfig+0x12a>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b58:	4a5c      	ldr	r2, [pc, #368]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001b5a:	68a1      	ldr	r1, [r4, #8]
 8001b5c:	6993      	ldr	r3, [r2, #24]
 8001b5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b62:	430b      	orrs	r3, r1
 8001b64:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b66:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b68:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b6a:	2902      	cmp	r1, #2
 8001b6c:	f000 80a1 	beq.w	8001cb2 <HAL_RCC_ClockConfig+0x222>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b70:	2903      	cmp	r1, #3
 8001b72:	f000 8098 	beq.w	8001ca6 <HAL_RCC_ClockConfig+0x216>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b76:	2901      	cmp	r1, #1
 8001b78:	f000 80a1 	beq.w	8001cbe <HAL_RCC_ClockConfig+0x22e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b7c:	0758      	lsls	r0, r3, #29
 8001b7e:	d59e      	bpl.n	8001abe <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b80:	4e52      	ldr	r6, [pc, #328]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b82:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b86:	6933      	ldr	r3, [r6, #16]
 8001b88:	f023 0307 	bic.w	r3, r3, #7
 8001b8c:	430b      	orrs	r3, r1
 8001b8e:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8001b90:	f7ff f99e 	bl	8000ed0 <HAL_GetTick>
 8001b94:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b96:	e005      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x114>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b98:	f7ff f99a 	bl	8000ed0 <HAL_GetTick>
 8001b9c:	1bc0      	subs	r0, r0, r7
 8001b9e:	4540      	cmp	r0, r8
 8001ba0:	f200 808b 	bhi.w	8001cba <HAL_RCC_ClockConfig+0x22a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba4:	6933      	ldr	r3, [r6, #16]
 8001ba6:	6862      	ldr	r2, [r4, #4]
 8001ba8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bac:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8001bb0:	d1f2      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	0799      	lsls	r1, r3, #30
 8001bb6:	d506      	bpl.n	8001bc6 <HAL_RCC_ClockConfig+0x136>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001bb8:	68e1      	ldr	r1, [r4, #12]
 8001bba:	4844      	ldr	r0, [pc, #272]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001bbc:	6982      	ldr	r2, [r0, #24]
 8001bbe:	f002 020f 	and.w	r2, r2, #15
 8001bc2:	428a      	cmp	r2, r1
 8001bc4:	d869      	bhi.n	8001c9a <HAL_RCC_ClockConfig+0x20a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc6:	4940      	ldr	r1, [pc, #256]	; (8001cc8 <HAL_RCC_ClockConfig+0x238>)
 8001bc8:	680a      	ldr	r2, [r1, #0]
 8001bca:	f002 020f 	and.w	r2, r2, #15
 8001bce:	42aa      	cmp	r2, r5
 8001bd0:	d90a      	bls.n	8001be8 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd2:	680a      	ldr	r2, [r1, #0]
 8001bd4:	f022 020f 	bic.w	r2, r2, #15
 8001bd8:	432a      	orrs	r2, r5
 8001bda:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bdc:	680a      	ldr	r2, [r1, #0]
 8001bde:	f002 020f 	and.w	r2, r2, #15
 8001be2:	42aa      	cmp	r2, r5
 8001be4:	f47f af6b 	bne.w	8001abe <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001be8:	075a      	lsls	r2, r3, #29
 8001bea:	d50b      	bpl.n	8001c04 <HAL_RCC_ClockConfig+0x174>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001bec:	4937      	ldr	r1, [pc, #220]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001bee:	6920      	ldr	r0, [r4, #16]
 8001bf0:	698a      	ldr	r2, [r1, #24]
 8001bf2:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001bf6:	4290      	cmp	r0, r2
 8001bf8:	d204      	bcs.n	8001c04 <HAL_RCC_ClockConfig+0x174>
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001bfa:	698a      	ldr	r2, [r1, #24]
 8001bfc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c00:	4302      	orrs	r2, r0
 8001c02:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c04:	071f      	lsls	r7, r3, #28
 8001c06:	d50b      	bpl.n	8001c20 <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001c08:	4930      	ldr	r1, [pc, #192]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001c0a:	6960      	ldr	r0, [r4, #20]
 8001c0c:	69ca      	ldr	r2, [r1, #28]
 8001c0e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001c12:	4290      	cmp	r0, r2
 8001c14:	d204      	bcs.n	8001c20 <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c16:	69ca      	ldr	r2, [r1, #28]
 8001c18:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c1c:	4302      	orrs	r2, r0
 8001c1e:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c20:	06de      	lsls	r6, r3, #27
 8001c22:	d50b      	bpl.n	8001c3c <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001c24:	4929      	ldr	r1, [pc, #164]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001c26:	69a0      	ldr	r0, [r4, #24]
 8001c28:	69ca      	ldr	r2, [r1, #28]
 8001c2a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001c2e:	4290      	cmp	r0, r2
 8001c30:	d204      	bcs.n	8001c3c <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c32:	69ca      	ldr	r2, [r1, #28]
 8001c34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c38:	4302      	orrs	r2, r0
 8001c3a:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c3c:	069d      	lsls	r5, r3, #26
 8001c3e:	d50b      	bpl.n	8001c58 <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001c40:	4a22      	ldr	r2, [pc, #136]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001c42:	69e1      	ldr	r1, [r4, #28]
 8001c44:	6a13      	ldr	r3, [r2, #32]
 8001c46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c4a:	4299      	cmp	r1, r3
 8001c4c:	d204      	bcs.n	8001c58 <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001c4e:	6a13      	ldr	r3, [r2, #32]
 8001c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c54:	430b      	orrs	r3, r1
 8001c56:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001c58:	f7ff fe7a 	bl	8001950 <HAL_RCC_GetSysClockFreq>
 8001c5c:	4a1b      	ldr	r2, [pc, #108]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001c5e:	4603      	mov	r3, r0
 8001c60:	481b      	ldr	r0, [pc, #108]	; (8001cd0 <HAL_RCC_ClockConfig+0x240>)
 8001c62:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001c64:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001c66:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8001c6a:	4d1a      	ldr	r5, [pc, #104]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001c6c:	f002 020f 	and.w	r2, r2, #15
 8001c70:	4c19      	ldr	r4, [pc, #100]	; (8001cd8 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001c72:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001c74:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001c76:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8001c7a:	4818      	ldr	r0, [pc, #96]	; (8001cdc <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001c7c:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001c80:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick (uwTickPrio);
 8001c82:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8001c84:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001c86:	40d3      	lsrs	r3, r2
 8001c88:	6023      	str	r3, [r4, #0]
}
 8001c8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8001c8e:	f7ff b8bd 	b.w	8000e0c <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c92:	07da      	lsls	r2, r3, #31
 8001c94:	f53f af60 	bmi.w	8001b58 <HAL_RCC_ClockConfig+0xc8>
 8001c98:	e795      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c9a:	6982      	ldr	r2, [r0, #24]
 8001c9c:	f022 020f 	bic.w	r2, r2, #15
 8001ca0:	4311      	orrs	r1, r2
 8001ca2:	6181      	str	r1, [r0, #24]
 8001ca4:	e78f      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x136>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ca6:	019f      	lsls	r7, r3, #6
 8001ca8:	f53f af6a 	bmi.w	8001b80 <HAL_RCC_ClockConfig+0xf0>
 8001cac:	e707      	b.n	8001abe <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001cae:	2001      	movs	r0, #1
}
 8001cb0:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cb2:	039b      	lsls	r3, r3, #14
 8001cb4:	f53f af64 	bmi.w	8001b80 <HAL_RCC_ClockConfig+0xf0>
 8001cb8:	e701      	b.n	8001abe <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8001cba:	2003      	movs	r0, #3
 8001cbc:	e700      	b.n	8001ac0 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cbe:	05de      	lsls	r6, r3, #23
 8001cc0:	f53f af5e 	bmi.w	8001b80 <HAL_RCC_ClockConfig+0xf0>
 8001cc4:	e6fb      	b.n	8001abe <HAL_RCC_ClockConfig+0x2e>
 8001cc6:	bf00      	nop
 8001cc8:	52002000 	.word	0x52002000
 8001ccc:	58024400 	.word	0x58024400
 8001cd0:	0800a30c 	.word	0x0800a30c
 8001cd4:	24000000 	.word	0x24000000
 8001cd8:	24000004 	.word	0x24000004
 8001cdc:	2400000c 	.word	0x2400000c

08001ce0 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ce0:	4a18      	ldr	r2, [pc, #96]	; (8001d44 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce2:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ce4:	6913      	ldr	r3, [r2, #16]
 8001ce6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cea:	2b10      	cmp	r3, #16
 8001cec:	d01a      	beq.n	8001d24 <HAL_RCC_GetHCLKFreq+0x44>
 8001cee:	2b18      	cmp	r3, #24
 8001cf0:	d023      	beq.n	8001d3a <HAL_RCC_GetHCLKFreq+0x5a>
 8001cf2:	b1cb      	cbz	r3, 8001d28 <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 8001cf4:	4814      	ldr	r0, [pc, #80]	; (8001d48 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8001cf6:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <HAL_RCC_GetHCLKFreq+0x64>)
 8001cf8:	4914      	ldr	r1, [pc, #80]	; (8001d4c <HAL_RCC_GetHCLKFreq+0x6c>)
 8001cfa:	699a      	ldr	r2, [r3, #24]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001cfc:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8001cfe:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001d02:	4c13      	ldr	r4, [pc, #76]	; (8001d50 <HAL_RCC_GetHCLKFreq+0x70>)
 8001d04:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d08:	4d12      	ldr	r5, [pc, #72]	; (8001d54 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8001d0a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001d0c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8001d0e:	f002 021f 	and.w	r2, r2, #31
 8001d12:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001d16:	f003 001f 	and.w	r0, r3, #31
 8001d1a:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 8001d1e:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001d20:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8001d22:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d24:	480c      	ldr	r0, [pc, #48]	; (8001d58 <HAL_RCC_GetHCLKFreq+0x78>)
 8001d26:	e7e6      	b.n	8001cf6 <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d28:	6813      	ldr	r3, [r2, #0]
 8001d2a:	069b      	lsls	r3, r3, #26
 8001d2c:	d508      	bpl.n	8001d40 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	480a      	ldr	r0, [pc, #40]	; (8001d5c <HAL_RCC_GetHCLKFreq+0x7c>)
 8001d32:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8001d36:	40d0      	lsrs	r0, r2
 8001d38:	e7dd      	b.n	8001cf6 <HAL_RCC_GetHCLKFreq+0x16>
 8001d3a:	f7ff fabf 	bl	80012bc <HAL_RCC_GetSysClockFreq.part.0>
 8001d3e:	e7da      	b.n	8001cf6 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001d40:	4806      	ldr	r0, [pc, #24]	; (8001d5c <HAL_RCC_GetHCLKFreq+0x7c>)
 8001d42:	e7d8      	b.n	8001cf6 <HAL_RCC_GetHCLKFreq+0x16>
 8001d44:	58024400 	.word	0x58024400
 8001d48:	003d0900 	.word	0x003d0900
 8001d4c:	0800a30c 	.word	0x0800a30c
 8001d50:	24000004 	.word	0x24000004
 8001d54:	24000000 	.word	0x24000000
 8001d58:	007a1200 	.word	0x007a1200
 8001d5c:	03d09000 	.word	0x03d09000

08001d60 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d60:	4a1c      	ldr	r2, [pc, #112]	; (8001dd4 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d62:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d64:	6913      	ldr	r3, [r2, #16]
 8001d66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d6a:	2b10      	cmp	r3, #16
 8001d6c:	d021      	beq.n	8001db2 <HAL_RCC_GetPCLK1Freq+0x52>
 8001d6e:	2b18      	cmp	r3, #24
 8001d70:	d02b      	beq.n	8001dca <HAL_RCC_GetPCLK1Freq+0x6a>
 8001d72:	b303      	cbz	r3, 8001db6 <HAL_RCC_GetPCLK1Freq+0x56>
    sysclockfreq = CSI_VALUE;
 8001d74:	4818      	ldr	r0, [pc, #96]	; (8001dd8 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8001d76:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <HAL_RCC_GetPCLK1Freq+0x74>)
 8001d78:	4918      	ldr	r1, [pc, #96]	; (8001ddc <HAL_RCC_GetPCLK1Freq+0x7c>)
 8001d7a:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 8001d7c:	4d18      	ldr	r5, [pc, #96]	; (8001de0 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8001d7e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001d82:	4c18      	ldr	r4, [pc, #96]	; (8001de4 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8001d84:	5ccb      	ldrb	r3, [r1, r3]
 8001d86:	f003 031f 	and.w	r3, r3, #31
 8001d8a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001d8e:	6990      	ldr	r0, [r2, #24]
 8001d90:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8001d94:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001d96:	5c08      	ldrb	r0, [r1, r0]
 8001d98:	f000 001f 	and.w	r0, r0, #31
 8001d9c:	40c3      	lsrs	r3, r0
 8001d9e:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8001da0:	69d2      	ldr	r2, [r2, #28]
 8001da2:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8001da6:	5c88      	ldrb	r0, [r1, r2]
 8001da8:	f000 001f 	and.w	r0, r0, #31
#endif
}
 8001dac:	fa23 f000 	lsr.w	r0, r3, r0
 8001db0:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001db2:	480d      	ldr	r0, [pc, #52]	; (8001de8 <HAL_RCC_GetPCLK1Freq+0x88>)
 8001db4:	e7df      	b.n	8001d76 <HAL_RCC_GetPCLK1Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001db6:	6813      	ldr	r3, [r2, #0]
 8001db8:	069b      	lsls	r3, r3, #26
 8001dba:	d509      	bpl.n	8001dd0 <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001dbc:	6810      	ldr	r0, [r2, #0]
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_RCC_GetPCLK1Freq+0x8c>)
 8001dc0:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8001dc4:	fa23 f000 	lsr.w	r0, r3, r0
 8001dc8:	e7d5      	b.n	8001d76 <HAL_RCC_GetPCLK1Freq+0x16>
 8001dca:	f7ff fa77 	bl	80012bc <HAL_RCC_GetSysClockFreq.part.0>
 8001dce:	e7d2      	b.n	8001d76 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001dd0:	4806      	ldr	r0, [pc, #24]	; (8001dec <HAL_RCC_GetPCLK1Freq+0x8c>)
 8001dd2:	e7d0      	b.n	8001d76 <HAL_RCC_GetPCLK1Freq+0x16>
 8001dd4:	58024400 	.word	0x58024400
 8001dd8:	003d0900 	.word	0x003d0900
 8001ddc:	0800a30c 	.word	0x0800a30c
 8001de0:	24000000 	.word	0x24000000
 8001de4:	24000004 	.word	0x24000004
 8001de8:	007a1200 	.word	0x007a1200
 8001dec:	03d09000 	.word	0x03d09000

08001df0 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001df0:	4a1c      	ldr	r2, [pc, #112]	; (8001e64 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001df2:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001df4:	6913      	ldr	r3, [r2, #16]
 8001df6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dfa:	2b10      	cmp	r3, #16
 8001dfc:	d021      	beq.n	8001e42 <HAL_RCC_GetPCLK2Freq+0x52>
 8001dfe:	2b18      	cmp	r3, #24
 8001e00:	d02b      	beq.n	8001e5a <HAL_RCC_GetPCLK2Freq+0x6a>
 8001e02:	b303      	cbz	r3, 8001e46 <HAL_RCC_GetPCLK2Freq+0x56>
    sysclockfreq = CSI_VALUE;
 8001e04:	4818      	ldr	r0, [pc, #96]	; (8001e68 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8001e06:	4a17      	ldr	r2, [pc, #92]	; (8001e64 <HAL_RCC_GetPCLK2Freq+0x74>)
 8001e08:	4918      	ldr	r1, [pc, #96]	; (8001e6c <HAL_RCC_GetPCLK2Freq+0x7c>)
 8001e0a:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 8001e0c:	4d18      	ldr	r5, [pc, #96]	; (8001e70 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8001e0e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001e12:	4c18      	ldr	r4, [pc, #96]	; (8001e74 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8001e14:	5ccb      	ldrb	r3, [r1, r3]
 8001e16:	f003 031f 	and.w	r3, r3, #31
 8001e1a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001e1e:	6990      	ldr	r0, [r2, #24]
 8001e20:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8001e24:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001e26:	5c08      	ldrb	r0, [r1, r0]
 8001e28:	f000 001f 	and.w	r0, r0, #31
 8001e2c:	40c3      	lsrs	r3, r0
 8001e2e:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8001e30:	69d2      	ldr	r2, [r2, #28]
 8001e32:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8001e36:	5c88      	ldrb	r0, [r1, r2]
 8001e38:	f000 001f 	and.w	r0, r0, #31
#endif
}
 8001e3c:	fa23 f000 	lsr.w	r0, r3, r0
 8001e40:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e42:	480d      	ldr	r0, [pc, #52]	; (8001e78 <HAL_RCC_GetPCLK2Freq+0x88>)
 8001e44:	e7df      	b.n	8001e06 <HAL_RCC_GetPCLK2Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e46:	6813      	ldr	r3, [r2, #0]
 8001e48:	069b      	lsls	r3, r3, #26
 8001e4a:	d509      	bpl.n	8001e60 <HAL_RCC_GetPCLK2Freq+0x70>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e4c:	6810      	ldr	r0, [r2, #0]
 8001e4e:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_RCC_GetPCLK2Freq+0x8c>)
 8001e50:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8001e54:	fa23 f000 	lsr.w	r0, r3, r0
 8001e58:	e7d5      	b.n	8001e06 <HAL_RCC_GetPCLK2Freq+0x16>
 8001e5a:	f7ff fa2f 	bl	80012bc <HAL_RCC_GetSysClockFreq.part.0>
 8001e5e:	e7d2      	b.n	8001e06 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e60:	4806      	ldr	r0, [pc, #24]	; (8001e7c <HAL_RCC_GetPCLK2Freq+0x8c>)
 8001e62:	e7d0      	b.n	8001e06 <HAL_RCC_GetPCLK2Freq+0x16>
 8001e64:	58024400 	.word	0x58024400
 8001e68:	003d0900 	.word	0x003d0900
 8001e6c:	0800a30c 	.word	0x0800a30c
 8001e70:	24000000 	.word	0x24000000
 8001e74:	24000004 	.word	0x24000004
 8001e78:	007a1200 	.word	0x007a1200
 8001e7c:	03d09000 	.word	0x03d09000

08001e80 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8001e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001e82:	4c3a      	ldr	r4, [pc, #232]	; (8001f6c <RCCEx_PLL2_Config+0xec>)
 8001e84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	d067      	beq.n	8001f5e <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8001e8e:	6823      	ldr	r3, [r4, #0]
 8001e90:	4606      	mov	r6, r0
 8001e92:	460f      	mov	r7, r1
 8001e94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e98:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e9a:	f7ff f819 	bl	8000ed0 <HAL_GetTick>
 8001e9e:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8001ea0:	e004      	b.n	8001eac <RCCEx_PLL2_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001ea2:	f7ff f815 	bl	8000ed0 <HAL_GetTick>
 8001ea6:	1b43      	subs	r3, r0, r5
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d856      	bhi.n	8001f5a <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8001eac:	6823      	ldr	r3, [r4, #0]
 8001eae:	011a      	lsls	r2, r3, #4
 8001eb0:	d4f7      	bmi.n	8001ea2 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8001eb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001eb4:	6832      	ldr	r2, [r6, #0]
 8001eb6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001eba:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001ebe:	62a3      	str	r3, [r4, #40]	; 0x28
 8001ec0:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	3a01      	subs	r2, #1
 8001ec8:	025b      	lsls	r3, r3, #9
 8001eca:	0412      	lsls	r2, r2, #16
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	6872      	ldr	r2, [r6, #4]
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001edc:	4313      	orrs	r3, r2
 8001ede:	6932      	ldr	r2, [r6, #16]
 8001ee0:	3a01      	subs	r2, #1
 8001ee2:	0612      	lsls	r2, r2, #24
 8001ee4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8001eec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001eee:	6972      	ldr	r2, [r6, #20]
 8001ef0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8001ef8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001efa:	69b3      	ldr	r3, [r6, #24]
 8001efc:	f022 0220 	bic.w	r2, r2, #32
 8001f00:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8001f02:	4b1b      	ldr	r3, [pc, #108]	; (8001f70 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8001f04:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8001f06:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f08:	f022 0210 	bic.w	r2, r2, #16
 8001f0c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8001f0e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001f10:	69f2      	ldr	r2, [r6, #28]
 8001f12:	400b      	ands	r3, r1
 8001f14:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f18:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8001f1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f1c:	f043 0310 	orr.w	r3, r3, #16
 8001f20:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001f22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001f24:	b1ef      	cbz	r7, 8001f62 <RCCEx_PLL2_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8001f26:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001f28:	bf0c      	ite	eq
 8001f2a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001f2e:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8001f32:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8001f34:	4c0d      	ldr	r4, [pc, #52]	; (8001f6c <RCCEx_PLL2_Config+0xec>)
 8001f36:	6823      	ldr	r3, [r4, #0]
 8001f38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f3c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f3e:	f7fe ffc7 	bl	8000ed0 <HAL_GetTick>
 8001f42:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8001f44:	e004      	b.n	8001f50 <RCCEx_PLL2_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001f46:	f7fe ffc3 	bl	8000ed0 <HAL_GetTick>
 8001f4a:	1b40      	subs	r0, r0, r5
 8001f4c:	2802      	cmp	r0, #2
 8001f4e:	d804      	bhi.n	8001f5a <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8001f50:	6823      	ldr	r3, [r4, #0]
 8001f52:	011b      	lsls	r3, r3, #4
 8001f54:	d5f7      	bpl.n	8001f46 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 8001f56:	2000      	movs	r0, #0
}
 8001f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8001f5a:	2003      	movs	r0, #3
}
 8001f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001f5e:	2001      	movs	r0, #1
}
 8001f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001f62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f66:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f68:	e7e4      	b.n	8001f34 <RCCEx_PLL2_Config+0xb4>
 8001f6a:	bf00      	nop
 8001f6c:	58024400 	.word	0x58024400
 8001f70:	ffff0007 	.word	0xffff0007

08001f74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8001f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001f76:	4c3a      	ldr	r4, [pc, #232]	; (8002060 <RCCEx_PLL3_Config+0xec>)
 8001f78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d067      	beq.n	8002052 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8001f82:	6823      	ldr	r3, [r4, #0]
 8001f84:	4606      	mov	r6, r0
 8001f86:	460f      	mov	r7, r1
 8001f88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f8e:	f7fe ff9f 	bl	8000ed0 <HAL_GetTick>
 8001f92:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8001f94:	e004      	b.n	8001fa0 <RCCEx_PLL3_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001f96:	f7fe ff9b 	bl	8000ed0 <HAL_GetTick>
 8001f9a:	1b43      	subs	r3, r0, r5
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d856      	bhi.n	800204e <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8001fa0:	6823      	ldr	r3, [r4, #0]
 8001fa2:	009a      	lsls	r2, r3, #2
 8001fa4:	d4f7      	bmi.n	8001f96 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8001fa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001fa8:	6832      	ldr	r2, [r6, #0]
 8001faa:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8001fae:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001fb2:	62a3      	str	r3, [r4, #40]	; 0x28
 8001fb4:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	3a01      	subs	r2, #1
 8001fbc:	025b      	lsls	r3, r3, #9
 8001fbe:	0412      	lsls	r2, r2, #16
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	6872      	ldr	r2, [r6, #4]
 8001fca:	3a01      	subs	r2, #1
 8001fcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	6932      	ldr	r2, [r6, #16]
 8001fd4:	3a01      	subs	r2, #1
 8001fd6:	0612      	lsls	r2, r2, #24
 8001fd8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8001fe0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001fe2:	6972      	ldr	r2, [r6, #20]
 8001fe4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8001fec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001fee:	69b3      	ldr	r3, [r6, #24]
 8001ff0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ff4:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8001ff6:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8001ff8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8001ffa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ffc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002000:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8002002:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002004:	69f2      	ldr	r2, [r6, #28]
 8002006:	400b      	ands	r3, r1
 8002008:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800200c:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800200e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002014:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8002016:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8002018:	b1ef      	cbz	r7, 8002056 <RCCEx_PLL3_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800201a:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800201c:	bf0c      	ite	eq
 800201e:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8002022:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8002026:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8002028:	4c0d      	ldr	r4, [pc, #52]	; (8002060 <RCCEx_PLL3_Config+0xec>)
 800202a:	6823      	ldr	r3, [r4, #0]
 800202c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002030:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002032:	f7fe ff4d 	bl	8000ed0 <HAL_GetTick>
 8002036:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002038:	e004      	b.n	8002044 <RCCEx_PLL3_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800203a:	f7fe ff49 	bl	8000ed0 <HAL_GetTick>
 800203e:	1b40      	subs	r0, r0, r5
 8002040:	2802      	cmp	r0, #2
 8002042:	d804      	bhi.n	800204e <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002044:	6823      	ldr	r3, [r4, #0]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	d5f7      	bpl.n	800203a <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 800204a:	2000      	movs	r0, #0
}
 800204c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800204e:	2003      	movs	r0, #3
}
 8002050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002052:	2001      	movs	r0, #1
}
 8002054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8002056:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800205a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800205c:	e7e4      	b.n	8002028 <RCCEx_PLL3_Config+0xb4>
 800205e:	bf00      	nop
 8002060:	58024400 	.word	0x58024400
 8002064:	ffff0007 	.word	0xffff0007

08002068 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800206c:	6803      	ldr	r3, [r0, #0]
{
 800206e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002070:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8002074:	d01c      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8002076:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8002078:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800207c:	f000 84ac 	beq.w	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x970>
 8002080:	d823      	bhi.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002082:	2a00      	cmp	r2, #0
 8002084:	f000 83b8 	beq.w	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x790>
 8002088:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800208c:	d120      	bne.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800208e:	2102      	movs	r1, #2
 8002090:	3004      	adds	r0, #4
 8002092:	f7ff fef5 	bl	8001e80 <RCCEx_PLL2_Config>
 8002096:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002098:	2e00      	cmp	r6, #0
 800209a:	f040 84a5 	bne.w	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x980>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800209e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80020a0:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80020a2:	489a      	ldr	r0, [pc, #616]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80020a4:	2600      	movs	r6, #0
 80020a6:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80020a8:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80020ac:	430a      	orrs	r2, r1
 80020ae:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80020b0:	05d8      	lsls	r0, r3, #23
 80020b2:	d511      	bpl.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 80020b4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80020b6:	2a04      	cmp	r2, #4
 80020b8:	f200 84e2 	bhi.w	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xa18>
 80020bc:	e8df f012 	tbh	[pc, r2, lsl #1]
 80020c0:	0473046c 	.word	0x0473046c
 80020c4:	02cd0458 	.word	0x02cd0458
 80020c8:	02cd      	.short	0x02cd
    switch(PeriphClkInit->SpdifrxClockSelection)
 80020ca:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80020ce:	d0e8      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80020d0:	05d8      	lsls	r0, r3, #23
    switch(PeriphClkInit->SpdifrxClockSelection)
 80020d2:	f04f 0601 	mov.w	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80020d6:	d4ed      	bmi.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 80020d8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80020da:	0599      	lsls	r1, r3, #22
 80020dc:	d51b      	bpl.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai2AClockSelection)
 80020de:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80020e0:	2a80      	cmp	r2, #128	; 0x80
 80020e2:	f000 8467 	beq.w	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 80020e6:	f200 80c7 	bhi.w	8002278 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80020ea:	2a00      	cmp	r2, #0
 80020ec:	f000 837e 	beq.w	80027ec <HAL_RCCEx_PeriphCLKConfig+0x784>
 80020f0:	2a40      	cmp	r2, #64	; 0x40
 80020f2:	f040 80ca 	bne.w	800228a <HAL_RCCEx_PeriphCLKConfig+0x222>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80020f6:	2100      	movs	r1, #0
 80020f8:	1d20      	adds	r0, r4, #4
 80020fa:	f7ff fec1 	bl	8001e80 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80020fe:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002100:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002102:	2d00      	cmp	r5, #0
 8002104:	f040 8354 	bne.w	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002108:	4980      	ldr	r1, [pc, #512]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800210a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800210c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800210e:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 8002112:	4302      	orrs	r2, r0
 8002114:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002116:	055a      	lsls	r2, r3, #21
 8002118:	d51d      	bpl.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0xee>
    switch(PeriphClkInit->Sai2BClockSelection)
 800211a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800211c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002120:	f000 8451 	beq.w	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x95e>
 8002124:	f200 80b4 	bhi.w	8002290 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8002128:	2a00      	cmp	r2, #0
 800212a:	f000 8353 	beq.w	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x76c>
 800212e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002132:	f040 80b7 	bne.w	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002136:	2100      	movs	r1, #0
 8002138:	1d20      	adds	r0, r4, #4
 800213a:	f7ff fea1 	bl	8001e80 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800213e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002140:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002142:	2d00      	cmp	r5, #0
 8002144:	f040 8330 	bne.w	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x740>
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002148:	4970      	ldr	r1, [pc, #448]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800214a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800214c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800214e:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8002152:	4302      	orrs	r2, r0
 8002154:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002156:	019f      	lsls	r7, r3, #6
 8002158:	d518      	bpl.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x124>
    switch(PeriphClkInit->OspiClockSelection)
 800215a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800215c:	2a20      	cmp	r2, #32
 800215e:	f000 83e3 	beq.w	8002928 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8002162:	f200 80a2 	bhi.w	80022aa <HAL_RCCEx_PeriphCLKConfig+0x242>
 8002166:	b13a      	cbz	r2, 8002178 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002168:	2a10      	cmp	r2, #16
 800216a:	f040 80a1 	bne.w	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x248>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800216e:	4967      	ldr	r1, [pc, #412]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002170:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002172:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002176:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8002178:	2d00      	cmp	r5, #0
 800217a:	f040 8345 	bne.w	8002808 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800217e:	4963      	ldr	r1, [pc, #396]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002180:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002182:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002184:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002188:	4302      	orrs	r2, r0
 800218a:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800218c:	04d8      	lsls	r0, r3, #19
 800218e:	d51d      	bpl.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi123ClockSelection)
 8002190:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002192:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002196:	f000 83f7 	beq.w	8002988 <HAL_RCCEx_PeriphCLKConfig+0x920>
 800219a:	f200 808c 	bhi.w	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800219e:	2a00      	cmp	r2, #0
 80021a0:	f000 831e 	beq.w	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x778>
 80021a4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80021a8:	f040 808d 	bne.w	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80021ac:	2100      	movs	r1, #0
 80021ae:	1d20      	adds	r0, r4, #4
 80021b0:	f7ff fe66 	bl	8001e80 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80021b4:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80021b6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80021b8:	2d00      	cmp	r5, #0
 80021ba:	f040 82f7 	bne.w	80027ac <HAL_RCCEx_PeriphCLKConfig+0x744>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80021be:	4953      	ldr	r1, [pc, #332]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80021c0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80021c2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80021c4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80021c8:	4302      	orrs	r2, r0
 80021ca:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80021cc:	0499      	lsls	r1, r3, #18
 80021ce:	d519      	bpl.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    switch(PeriphClkInit->Spi45ClockSelection)
 80021d0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80021d2:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80021d6:	f000 838b 	beq.w	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x888>
 80021da:	d877      	bhi.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x264>
 80021dc:	b142      	cbz	r2, 80021f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80021de:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80021e2:	d17b      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x274>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80021e4:	2101      	movs	r1, #1
 80021e6:	1d20      	adds	r0, r4, #4
 80021e8:	f7ff fe4a 	bl	8001e80 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80021ec:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80021ee:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80021f0:	2d00      	cmp	r5, #0
 80021f2:	f040 830b 	bne.w	800280c <HAL_RCCEx_PeriphCLKConfig+0x7a4>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80021f6:	4945      	ldr	r1, [pc, #276]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80021f8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80021fa:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80021fc:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8002200:	4302      	orrs	r2, r0
 8002202:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002204:	045a      	lsls	r2, r3, #17
 8002206:	d51b      	bpl.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    switch(PeriphClkInit->Spi6ClockSelection)
 8002208:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 800220c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002210:	f000 8380 	beq.w	8002914 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8002214:	d865      	bhi.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8002216:	b142      	cbz	r2, 800222a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002218:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800221c:	d168      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x288>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800221e:	2101      	movs	r1, #1
 8002220:	1d20      	adds	r0, r4, #4
 8002222:	f7ff fe2d 	bl	8001e80 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002226:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002228:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800222a:	2d00      	cmp	r5, #0
 800222c:	f040 8307 	bne.w	800283e <HAL_RCCEx_PeriphCLKConfig+0x7d6>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002230:	4936      	ldr	r1, [pc, #216]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002232:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8002236:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002238:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800223c:	4302      	orrs	r2, r0
 800223e:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002240:	041f      	lsls	r7, r3, #16
 8002242:	d50d      	bpl.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    switch(PeriphClkInit->FdcanClockSelection)
 8002244:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8002246:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800224a:	f000 835b 	beq.w	8002904 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 800224e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002252:	f000 8237 	beq.w	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8002256:	2a00      	cmp	r2, #0
 8002258:	f000 823a 	beq.w	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x668>
 800225c:	2601      	movs	r6, #1
 800225e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002260:	01d8      	lsls	r0, r3, #7
 8002262:	d55f      	bpl.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    switch(PeriphClkInit->FmcClockSelection)
 8002264:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002266:	2a03      	cmp	r2, #3
 8002268:	f200 8407 	bhi.w	8002a7a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800226c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002270:	03230056 	.word	0x03230056
 8002274:	00560050 	.word	0x00560050
    switch(PeriphClkInit->Sai2AClockSelection)
 8002278:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800227c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002280:	f43f af3f 	beq.w	8002102 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8002284:	2ac0      	cmp	r2, #192	; 0xc0
 8002286:	f43f af3c 	beq.w	8002102 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800228a:	2601      	movs	r6, #1
 800228c:	4635      	mov	r5, r6
 800228e:	e742      	b.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai2BClockSelection)
 8002290:	f422 7100 	bic.w	r1, r2, #512	; 0x200
 8002294:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8002298:	f43f af53 	beq.w	8002142 <HAL_RCCEx_PeriphCLKConfig+0xda>
 800229c:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 80022a0:	f43f af4f 	beq.w	8002142 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80022a4:	2601      	movs	r6, #1
 80022a6:	4635      	mov	r5, r6
 80022a8:	e755      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0xee>
    switch(PeriphClkInit->OspiClockSelection)
 80022aa:	2a30      	cmp	r2, #48	; 0x30
 80022ac:	f43f af64 	beq.w	8002178 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80022b0:	2601      	movs	r6, #1
 80022b2:	4635      	mov	r5, r6
 80022b4:	e76a      	b.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x124>
    switch(PeriphClkInit->Spi123ClockSelection)
 80022b6:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80022ba:	f43f af7d 	beq.w	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80022be:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80022c2:	f43f af79 	beq.w	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80022c6:	2601      	movs	r6, #1
 80022c8:	4635      	mov	r5, r6
 80022ca:	e77f      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi45ClockSelection)
 80022cc:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80022d0:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80022d4:	d08c      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80022d6:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80022da:	d089      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80022dc:	2601      	movs	r6, #1
 80022de:	4635      	mov	r5, r6
 80022e0:	e790      	b.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    switch(PeriphClkInit->Spi6ClockSelection)
 80022e2:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80022e6:	d0a0      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80022e8:	d905      	bls.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80022ea:	f1b2 4fc0 	cmp.w	r2, #1610612736	; 0x60000000
 80022ee:	d09c      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80022f0:	2601      	movs	r6, #1
 80022f2:	4635      	mov	r5, r6
 80022f4:	e7a4      	b.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80022f6:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80022fa:	d096      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80022fc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002300:	d1f6      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x288>
    if(ret == HAL_OK)
 8002302:	2d00      	cmp	r5, #0
 8002304:	f040 829b 	bne.w	800283e <HAL_RCCEx_PeriphCLKConfig+0x7d6>
 8002308:	e792      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800230a:	bf00      	nop
 800230c:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002310:	2102      	movs	r1, #2
 8002312:	1d20      	adds	r0, r4, #4
 8002314:	f7ff fdb4 	bl	8001e80 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002318:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800231a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800231c:	2d00      	cmp	r5, #0
 800231e:	f000 8290 	beq.w	8002842 <HAL_RCCEx_PeriphCLKConfig+0x7da>
 8002322:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002324:	0259      	lsls	r1, r3, #9
 8002326:	f100 81f1 	bmi.w	800270c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800232a:	07df      	lsls	r7, r3, #31
 800232c:	d530      	bpl.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x328>
    switch(PeriphClkInit->Usart16ClockSelection)
 800232e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8002332:	2a28      	cmp	r2, #40	; 0x28
 8002334:	d82a      	bhi.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002336:	e8df f012 	tbh	[pc, r2, lsl #1]
 800233a:	01dd      	.short	0x01dd
 800233c:	00290029 	.word	0x00290029
 8002340:	00290029 	.word	0x00290029
 8002344:	00290029 	.word	0x00290029
 8002348:	036e0029 	.word	0x036e0029
 800234c:	00290029 	.word	0x00290029
 8002350:	00290029 	.word	0x00290029
 8002354:	00290029 	.word	0x00290029
 8002358:	01d60029 	.word	0x01d60029
 800235c:	00290029 	.word	0x00290029
 8002360:	00290029 	.word	0x00290029
 8002364:	00290029 	.word	0x00290029
 8002368:	01dd0029 	.word	0x01dd0029
 800236c:	00290029 	.word	0x00290029
 8002370:	00290029 	.word	0x00290029
 8002374:	00290029 	.word	0x00290029
 8002378:	01dd0029 	.word	0x01dd0029
 800237c:	00290029 	.word	0x00290029
 8002380:	00290029 	.word	0x00290029
 8002384:	00290029 	.word	0x00290029
 8002388:	01dd0029 	.word	0x01dd0029
 800238c:	2601      	movs	r6, #1
 800238e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002390:	0798      	lsls	r0, r3, #30
 8002392:	d516      	bpl.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002394:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002396:	2a05      	cmp	r2, #5
 8002398:	f200 8375 	bhi.w	8002a86 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800239c:	e8df f012 	tbh	[pc, r2, lsl #1]
 80023a0:	0331000d 	.word	0x0331000d
 80023a4:	000d0006 	.word	0x000d0006
 80023a8:	000d000d 	.word	0x000d000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80023ac:	2101      	movs	r1, #1
 80023ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80023b2:	f7ff fddf 	bl	8001f74 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023b6:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80023b8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80023ba:	2d00      	cmp	r5, #0
 80023bc:	f000 8228 	beq.w	8002810 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
 80023c0:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023c2:	0759      	lsls	r1, r3, #29
 80023c4:	d517      	bpl.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80023c6:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80023ca:	2a05      	cmp	r2, #5
 80023cc:	f200 8352 	bhi.w	8002a74 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80023d0:	e8df f012 	tbh	[pc, r2, lsl #1]
 80023d4:	030d000d 	.word	0x030d000d
 80023d8:	000d0006 	.word	0x000d0006
 80023dc:	000d000d 	.word	0x000d000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80023e0:	2101      	movs	r1, #1
 80023e2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80023e6:	f7ff fdc5 	bl	8001f74 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023ea:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80023ec:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80023ee:	2d00      	cmp	r5, #0
 80023f0:	f000 821c 	beq.w	800282c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 80023f4:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023f6:	069a      	lsls	r2, r3, #26
 80023f8:	d51d      	bpl.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80023fa:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 80023fe:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002402:	f000 826b 	beq.w	80028dc <HAL_RCCEx_PeriphCLKConfig+0x874>
 8002406:	f200 80e5 	bhi.w	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 800240a:	b14a      	cbz	r2, 8002420 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 800240c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8002410:	f040 80ea 	bne.w	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002414:	2100      	movs	r1, #0
 8002416:	1d20      	adds	r0, r4, #4
 8002418:	f7ff fd32 	bl	8001e80 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800241c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800241e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002420:	2d00      	cmp	r5, #0
 8002422:	f040 81ef 	bne.w	8002804 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002426:	49a6      	ldr	r1, [pc, #664]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002428:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800242c:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800242e:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8002432:	4302      	orrs	r2, r0
 8002434:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002436:	065f      	lsls	r7, r3, #25
 8002438:	d51d      	bpl.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800243a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 800243e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002442:	f000 8241 	beq.w	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8002446:	f200 80d2 	bhi.w	80025ee <HAL_RCCEx_PeriphCLKConfig+0x586>
 800244a:	b14a      	cbz	r2, 8002460 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800244c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002450:	f040 80d7 	bne.w	8002602 <HAL_RCCEx_PeriphCLKConfig+0x59a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002454:	2100      	movs	r1, #0
 8002456:	1d20      	adds	r0, r4, #4
 8002458:	f7ff fd12 	bl	8001e80 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800245c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800245e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002460:	2d00      	cmp	r5, #0
 8002462:	f040 81f6 	bne.w	8002852 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002466:	4996      	ldr	r1, [pc, #600]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002468:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 800246c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800246e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8002472:	4302      	orrs	r2, r0
 8002474:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002476:	0618      	lsls	r0, r3, #24
 8002478:	d51d      	bpl.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800247a:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 800247e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002482:	f000 820e 	beq.w	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x83a>
 8002486:	f200 80bf 	bhi.w	8002608 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
 800248a:	b14a      	cbz	r2, 80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>
 800248c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002490:	f040 80c4 	bne.w	800261c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002494:	2100      	movs	r1, #0
 8002496:	1d20      	adds	r0, r4, #4
 8002498:	f7ff fcf2 	bl	8001e80 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800249c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800249e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80024a0:	2d00      	cmp	r5, #0
 80024a2:	f040 81bd 	bne.w	8002820 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80024a6:	4986      	ldr	r1, [pc, #536]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80024a8:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 80024ac:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80024ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024b2:	4302      	orrs	r2, r0
 80024b4:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80024b6:	0719      	lsls	r1, r3, #28
 80024b8:	d50b      	bpl.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80024ba:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80024be:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80024c2:	f000 8248 	beq.w	8002956 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80024c6:	487e      	ldr	r0, [pc, #504]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80024c8:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80024ca:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80024ce:	430a      	orrs	r2, r1
 80024d0:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80024d2:	06da      	lsls	r2, r3, #27
 80024d4:	d50b      	bpl.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x486>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80024d6:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 80024da:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80024de:	f000 822d 	beq.w	800293c <HAL_RCCEx_PeriphCLKConfig+0x8d4>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80024e2:	4877      	ldr	r0, [pc, #476]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80024e4:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80024e6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80024ea:	430a      	orrs	r2, r1
 80024ec:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024ee:	031f      	lsls	r7, r3, #12
 80024f0:	d50e      	bpl.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    switch(PeriphClkInit->AdcClockSelection)
 80024f2:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 80024f6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80024fa:	f000 80ba 	beq.w	8002672 <HAL_RCCEx_PeriphCLKConfig+0x60a>
 80024fe:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8002502:	f000 80bd 	beq.w	8002680 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8002506:	2900      	cmp	r1, #0
 8002508:	f000 81bb 	beq.w	8002882 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800250c:	2601      	movs	r6, #1
 800250e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002510:	0358      	lsls	r0, r3, #13
 8002512:	d50f      	bpl.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    switch(PeriphClkInit->UsbClockSelection)
 8002514:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002518:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800251c:	f000 80bc 	beq.w	8002698 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8002520:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8002524:	f000 80bf 	beq.w	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x63e>
 8002528:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800252c:	f000 81b1 	beq.w	8002892 <HAL_RCCEx_PeriphCLKConfig+0x82a>
 8002530:	2601      	movs	r6, #1
 8002532:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002534:	03d9      	lsls	r1, r3, #15
 8002536:	d509      	bpl.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    switch(PeriphClkInit->SdmmcClockSelection)
 8002538:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800253a:	2a00      	cmp	r2, #0
 800253c:	f000 8198 	beq.w	8002870 <HAL_RCCEx_PeriphCLKConfig+0x808>
 8002540:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002544:	f000 8136 	beq.w	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8002548:	2601      	movs	r6, #1
 800254a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800254c:	009a      	lsls	r2, r3, #2
 800254e:	f100 811e 	bmi.w	800278e <HAL_RCCEx_PeriphCLKConfig+0x726>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002552:	039f      	lsls	r7, r3, #14
 8002554:	d465      	bmi.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    return HAL_OK;
 8002556:	1e30      	subs	r0, r6, #0
 8002558:	bf18      	it	ne
 800255a:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800255c:	02de      	lsls	r6, r3, #11
 800255e:	d506      	bpl.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x506>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002560:	4957      	ldr	r1, [pc, #348]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002562:	6fa5      	ldr	r5, [r4, #120]	; 0x78
 8002564:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002566:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800256a:	432a      	orrs	r2, r5
 800256c:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800256e:	029d      	lsls	r5, r3, #10
 8002570:	d506      	bpl.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x518>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002572:	4953      	ldr	r1, [pc, #332]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002574:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8002576:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002578:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800257c:	432a      	orrs	r2, r5
 800257e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8002580:	0519      	lsls	r1, r3, #20
 8002582:	d506      	bpl.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8002584:	494e      	ldr	r1, [pc, #312]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002586:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8002588:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800258a:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 800258e:	432a      	orrs	r2, r5
 8002590:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002592:	005a      	lsls	r2, r3, #1
 8002594:	d509      	bpl.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x542>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002596:	4a4a      	ldr	r2, [pc, #296]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002598:	6911      	ldr	r1, [r2, #16]
 800259a:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800259e:	6111      	str	r1, [r2, #16]
 80025a0:	6911      	ldr	r1, [r2, #16]
 80025a2:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 80025a6:	4329      	orrs	r1, r5
 80025a8:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	da06      	bge.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x554>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80025ae:	4944      	ldr	r1, [pc, #272]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80025b0:	6d25      	ldr	r5, [r4, #80]	; 0x50
 80025b2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80025b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025b8:	432a      	orrs	r2, r5
 80025ba:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80025bc:	021b      	lsls	r3, r3, #8
 80025be:	d507      	bpl.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x568>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80025c0:	4a3f      	ldr	r2, [pc, #252]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80025c2:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80025c6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80025c8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80025cc:	430b      	orrs	r3, r1
 80025ce:	6553      	str	r3, [r2, #84]	; 0x54
}
 80025d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Lptim1ClockSelection)
 80025d4:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80025d8:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80025dc:	f43f af20 	beq.w	8002420 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 80025e0:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80025e4:	f43f af1c 	beq.w	8002420 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 80025e8:	2601      	movs	r6, #1
 80025ea:	4635      	mov	r5, r6
 80025ec:	e723      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80025ee:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 80025f2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80025f6:	f43f af33 	beq.w	8002460 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80025fa:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80025fe:	f43f af2f 	beq.w	8002460 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002602:	2601      	movs	r6, #1
 8002604:	4635      	mov	r5, r6
 8002606:	e736      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002608:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800260c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002610:	f43f af46 	beq.w	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8002614:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8002618:	f43f af42 	beq.w	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>
 800261c:	2601      	movs	r6, #1
 800261e:	4635      	mov	r5, r6
 8002620:	e749      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    switch(PeriphClkInit->RngClockSelection)
 8002622:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002626:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800262a:	f000 8118 	beq.w	800285e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800262e:	d906      	bls.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8002630:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 8002634:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002638:	d003      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x5da>
 800263a:	2001      	movs	r0, #1
 800263c:	e78e      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800263e:	2a00      	cmp	r2, #0
 8002640:	d1fb      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    if(ret == HAL_OK)
 8002642:	2d00      	cmp	r5, #0
 8002644:	d1f9      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002646:	4d1e      	ldr	r5, [pc, #120]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
    return HAL_OK;
 8002648:	1e30      	subs	r0, r6, #0
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800264a:	6d69      	ldr	r1, [r5, #84]	; 0x54
    return HAL_OK;
 800264c:	bf18      	it	ne
 800264e:	2001      	movne	r0, #1
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002650:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002654:	430a      	orrs	r2, r1
 8002656:	656a      	str	r2, [r5, #84]	; 0x54
 8002658:	e780      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    switch(PeriphClkInit->Sai1ClockSelection)
 800265a:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 800265c:	2d00      	cmp	r5, #0
 800265e:	f040 80a1 	bne.w	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x73c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002662:	4917      	ldr	r1, [pc, #92]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002664:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002666:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002668:	f022 0207 	bic.w	r2, r2, #7
 800266c:	4302      	orrs	r2, r0
 800266e:	650a      	str	r2, [r1, #80]	; 0x50
 8002670:	e533      	b.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x72>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002672:	2102      	movs	r1, #2
 8002674:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002678:	f7ff fc7c 	bl	8001f74 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800267c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800267e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002680:	2d00      	cmp	r5, #0
 8002682:	f040 80d1 	bne.w	8002828 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002686:	490e      	ldr	r1, [pc, #56]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002688:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800268c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800268e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002692:	4302      	orrs	r2, r0
 8002694:	658a      	str	r2, [r1, #88]	; 0x58
 8002696:	e73b      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002698:	2101      	movs	r1, #1
 800269a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800269e:	f7ff fc69 	bl	8001f74 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80026a2:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80026a4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80026a6:	2d00      	cmp	r5, #0
 80026a8:	f040 80bc 	bne.w	8002824 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026ac:	4904      	ldr	r1, [pc, #16]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80026ae:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80026b2:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80026b4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80026b8:	4302      	orrs	r2, r0
 80026ba:	654a      	str	r2, [r1, #84]	; 0x54
 80026bc:	e73a      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 80026be:	bf00      	nop
 80026c0:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80026c4:	2101      	movs	r1, #1
 80026c6:	1d20      	adds	r0, r4, #4
 80026c8:	f7ff fbda 	bl	8001e80 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80026cc:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80026ce:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80026d0:	2d00      	cmp	r5, #0
 80026d2:	f040 80c2 	bne.w	800285a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026d6:	49aa      	ldr	r1, [pc, #680]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80026d8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80026da:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80026dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026e0:	4302      	orrs	r2, r0
 80026e2:	650a      	str	r2, [r1, #80]	; 0x50
 80026e4:	e5bc      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80026e6:	2101      	movs	r1, #1
 80026e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80026ec:	f7ff fc42 	bl	8001f74 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80026f0:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80026f2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80026f4:	2d00      	cmp	r5, #0
 80026f6:	f040 80ae 	bne.w	8002856 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80026fa:	49a1      	ldr	r1, [pc, #644]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80026fc:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002700:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002702:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8002706:	4302      	orrs	r2, r0
 8002708:	654a      	str	r2, [r1, #84]	; 0x54
 800270a:	e641      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x328>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800270c:	4f9d      	ldr	r7, [pc, #628]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002714:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8002716:	f7fe fbdb 	bl	8000ed0 <HAL_GetTick>
 800271a:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800271c:	e006      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271e:	f7fe fbd7 	bl	8000ed0 <HAL_GetTick>
 8002722:	eba0 0008 	sub.w	r0, r0, r8
 8002726:	2864      	cmp	r0, #100	; 0x64
 8002728:	f200 817f 	bhi.w	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x9c2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	05da      	lsls	r2, r3, #23
 8002730:	d5f5      	bpl.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x6b6>
    if(ret == HAL_OK)
 8002732:	2d00      	cmp	r5, #0
 8002734:	f040 819b 	bne.w	8002a6e <HAL_RCCEx_PeriphCLKConfig+0xa06>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002738:	4a91      	ldr	r2, [pc, #580]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800273a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800273e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002740:	4059      	eors	r1, r3
 8002742:	f411 7f40 	tst.w	r1, #768	; 0x300
 8002746:	d00b      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002748:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800274a:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800274c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8002750:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8002754:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002756:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8002758:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800275c:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800275e:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002764:	f000 8165 	beq.w	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002768:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800276c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002770:	f000 8173 	beq.w	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8002774:	4982      	ldr	r1, [pc, #520]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002776:	690a      	ldr	r2, [r1, #16]
 8002778:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800277c:	610a      	str	r2, [r1, #16]
 800277e:	4a80      	ldr	r2, [pc, #512]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002784:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002786:	430b      	orrs	r3, r1
 8002788:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800278a:	6823      	ldr	r3, [r4, #0]
 800278c:	e5cd      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800278e:	2102      	movs	r1, #2
 8002790:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002794:	f7ff fbee 	bl	8001f74 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002798:	6823      	ldr	r3, [r4, #0]
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800279a:	2800      	cmp	r0, #0
 800279c:	f43f aed9 	beq.w	8002552 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      status=HAL_ERROR;
 80027a0:	2601      	movs	r6, #1
 80027a2:	e6d6      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 80027a4:	462e      	mov	r6, r5
 80027a6:	e498      	b.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x72>
 80027a8:	462e      	mov	r6, r5
 80027aa:	e4d4      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0xee>
 80027ac:	462e      	mov	r6, r5
 80027ae:	e50d      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x164>
 80027b0:	462e      	mov	r6, r5
 80027b2:	e4b0      	b.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0xae>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80027b4:	2102      	movs	r1, #2
 80027b6:	1d20      	adds	r0, r4, #4
 80027b8:	f7ff fb62 	bl	8001e80 <RCCEx_PLL2_Config>
 80027bc:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80027be:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80027c0:	2d00      	cmp	r5, #0
 80027c2:	d15c      	bne.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x816>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80027c4:	496e      	ldr	r1, [pc, #440]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80027c6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80027c8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80027ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027ce:	4302      	orrs	r2, r0
 80027d0:	64ca      	str	r2, [r1, #76]	; 0x4c
 80027d2:	e6bb      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027d4:	496a      	ldr	r1, [pc, #424]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80027d6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80027d8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80027dc:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80027de:	e4b0      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0xda>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027e0:	4967      	ldr	r1, [pc, #412]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80027e2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80027e4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80027e8:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80027ea:	e4e5      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027ec:	4964      	ldr	r1, [pc, #400]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80027ee:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80027f0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80027f4:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80027f6:	e484      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027f8:	4861      	ldr	r0, [pc, #388]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80027fa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80027fc:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002800:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8002802:	e44e      	b.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8002804:	462e      	mov	r6, r5
 8002806:	e616      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8002808:	462e      	mov	r6, r5
 800280a:	e4bf      	b.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x124>
 800280c:	462e      	mov	r6, r5
 800280e:	e4f9      	b.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002810:	495b      	ldr	r1, [pc, #364]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002812:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002814:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002816:	f022 0207 	bic.w	r2, r2, #7
 800281a:	4302      	orrs	r2, r0
 800281c:	654a      	str	r2, [r1, #84]	; 0x54
 800281e:	e5d0      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002820:	462e      	mov	r6, r5
 8002822:	e648      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002824:	462e      	mov	r6, r5
 8002826:	e685      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8002828:	462e      	mov	r6, r5
 800282a:	e671      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800282c:	4954      	ldr	r1, [pc, #336]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800282e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8002832:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002834:	f022 0207 	bic.w	r2, r2, #7
 8002838:	4302      	orrs	r2, r0
 800283a:	658a      	str	r2, [r1, #88]	; 0x58
 800283c:	e5db      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800283e:	462e      	mov	r6, r5
 8002840:	e4fe      	b.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002842:	494f      	ldr	r1, [pc, #316]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002844:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002846:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002848:	f022 0203 	bic.w	r2, r2, #3
 800284c:	4302      	orrs	r2, r0
 800284e:	64ca      	str	r2, [r1, #76]	; 0x4c
 8002850:	e568      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8002852:	462e      	mov	r6, r5
 8002854:	e60f      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002856:	462e      	mov	r6, r5
 8002858:	e59a      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x328>
 800285a:	462e      	mov	r6, r5
 800285c:	e500      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800285e:	4848      	ldr	r0, [pc, #288]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002860:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002862:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002866:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8002868:	2d00      	cmp	r5, #0
 800286a:	f47f aee6 	bne.w	800263a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800286e:	e6ea      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x5de>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002870:	4943      	ldr	r1, [pc, #268]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002872:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002874:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002878:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800287a:	2d00      	cmp	r5, #0
 800287c:	d0a2      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 800287e:	462e      	mov	r6, r5
 8002880:	e664      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002882:	1d20      	adds	r0, r4, #4
 8002884:	f7ff fafc 	bl	8001e80 <RCCEx_PLL2_Config>
 8002888:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800288a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800288c:	2d00      	cmp	r5, #0
 800288e:	d1cb      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8002890:	e6f9      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002892:	493b      	ldr	r1, [pc, #236]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002894:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002896:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800289a:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800289c:	2d00      	cmp	r5, #0
 800289e:	d1c1      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80028a0:	e704      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x644>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80028a2:	2102      	movs	r1, #2
 80028a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80028a8:	f7ff fb64 	bl	8001f74 <RCCEx_PLL3_Config>
 80028ac:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80028ae:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80028b0:	2d00      	cmp	r5, #0
 80028b2:	d1b5      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 80028b4:	e5f7      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028b6:	4932      	ldr	r1, [pc, #200]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80028b8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80028ba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80028be:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80028c0:	2d00      	cmp	r5, #0
 80028c2:	f47f ad2e 	bne.w	8002322 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80028c6:	e7bc      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x7da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80028c8:	2102      	movs	r1, #2
 80028ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80028ce:	f7ff fb51 	bl	8001f74 <RCCEx_PLL3_Config>
 80028d2:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80028d4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80028d6:	2d00      	cmp	r5, #0
 80028d8:	d1bb      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
 80028da:	e5c4      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80028dc:	2102      	movs	r1, #2
 80028de:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80028e2:	f7ff fb47 	bl	8001f74 <RCCEx_PLL3_Config>
 80028e6:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80028e8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80028ea:	2d00      	cmp	r5, #0
 80028ec:	d18a      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x79c>
 80028ee:	e59a      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x3be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80028f0:	2101      	movs	r1, #1
 80028f2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80028f6:	f7ff fb3d 	bl	8001f74 <RCCEx_PLL3_Config>
 80028fa:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80028fc:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80028fe:	2d00      	cmp	r5, #0
 8002900:	d184      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x7a4>
 8002902:	e478      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002904:	491e      	ldr	r1, [pc, #120]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002906:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002908:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800290c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800290e:	2d00      	cmp	r5, #0
 8002910:	d1a3      	bne.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8002912:	e6e0      	b.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002914:	2101      	movs	r1, #1
 8002916:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800291a:	f7ff fb2b 	bl	8001f74 <RCCEx_PLL3_Config>
 800291e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002920:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8002922:	2d00      	cmp	r5, #0
 8002924:	d18b      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x7d6>
 8002926:	e483      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002928:	2102      	movs	r1, #2
 800292a:	1d20      	adds	r0, r4, #4
 800292c:	f7ff faa8 	bl	8001e80 <RCCEx_PLL2_Config>
 8002930:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002932:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8002934:	2d00      	cmp	r5, #0
 8002936:	f47f af67 	bne.w	8002808 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
 800293a:	e420      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x116>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800293c:	2102      	movs	r1, #2
 800293e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002942:	f7ff fb17 	bl	8001f74 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002946:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800294a:	6823      	ldr	r3, [r4, #0]
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800294c:	2800      	cmp	r0, #0
 800294e:	f43f adc8 	beq.w	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
        status = HAL_ERROR;
 8002952:	2601      	movs	r6, #1
 8002954:	e5c5      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002956:	2102      	movs	r1, #2
 8002958:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800295c:	f7ff fb0a 	bl	8001f74 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002960:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002964:	6823      	ldr	r3, [r4, #0]
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002966:	2800      	cmp	r0, #0
 8002968:	f43f adad 	beq.w	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
          status = HAL_ERROR;
 800296c:	2601      	movs	r6, #1
 800296e:	e5aa      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002970:	2100      	movs	r1, #0
 8002972:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002976:	f7ff fafd 	bl	8001f74 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800297a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800297c:	4605      	mov	r5, r0
      break;
 800297e:	e66d      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8002980:	58024400 	.word	0x58024400
 8002984:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002988:	2100      	movs	r1, #0
 800298a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800298e:	f7ff faf1 	bl	8001f74 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002992:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002994:	4605      	mov	r5, r0
      break;
 8002996:	e40f      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002998:	493c      	ldr	r1, [pc, #240]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
      break;
 800299a:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800299c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800299e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80029a2:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80029a4:	e65a      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029a6:	2100      	movs	r1, #0
 80029a8:	1d20      	adds	r0, r4, #4
 80029aa:	f7ff fa69 	bl	8001e80 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80029ae:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029b0:	4605      	mov	r5, r0
      break;
 80029b2:	e653      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029b4:	2100      	movs	r1, #0
 80029b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80029ba:	f7ff fadb 	bl	8001f74 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80029be:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029c0:	4605      	mov	r5, r0
      break;
 80029c2:	f7ff bb9e 	b.w	8002102 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029c6:	2100      	movs	r1, #0
 80029c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80029cc:	f7ff fad2 	bl	8001f74 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80029d0:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029d2:	4605      	mov	r5, r0
      break;
 80029d4:	f7ff bbb5 	b.w	8002142 <HAL_RCCEx_PeriphCLKConfig+0xda>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80029d8:	2102      	movs	r1, #2
 80029da:	3024      	adds	r0, #36	; 0x24
 80029dc:	f7ff faca 	bl	8001f74 <RCCEx_PLL3_Config>
 80029e0:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80029e2:	2e00      	cmp	r6, #0
 80029e4:	f43f ab5b 	beq.w	800209e <HAL_RCCEx_PeriphCLKConfig+0x36>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029e8:	6823      	ldr	r3, [r4, #0]
 80029ea:	f7ff bb61 	b.w	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80029ee:	2101      	movs	r1, #1
 80029f0:	1d20      	adds	r0, r4, #4
 80029f2:	f7ff fa45 	bl	8001e80 <RCCEx_PLL2_Config>
 80029f6:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029f8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80029fa:	2d00      	cmp	r5, #0
 80029fc:	f47f acfa 	bne.w	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8002a00:	e714      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a02:	2101      	movs	r1, #1
 8002a04:	1d20      	adds	r0, r4, #4
 8002a06:	f7ff fa3b 	bl	8001e80 <RCCEx_PLL2_Config>
 8002a0a:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a0c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8002a0e:	2d00      	cmp	r5, #0
 8002a10:	f47f acd6 	bne.w	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8002a14:	e6fc      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a16:	2101      	movs	r1, #1
 8002a18:	1d20      	adds	r0, r4, #4
 8002a1a:	f7ff fa31 	bl	8001e80 <RCCEx_PLL2_Config>
 8002a1e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002a20:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8002a22:	2d00      	cmp	r5, #0
 8002a24:	f47f af17 	bne.w	8002856 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 8002a28:	e667      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x692>
            ret = HAL_TIMEOUT;
 8002a2a:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002a2c:	6823      	ldr	r3, [r4, #0]
            ret = HAL_TIMEOUT;
 8002a2e:	4635      	mov	r5, r6
 8002a30:	e47b      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
        tickstart = HAL_GetTick();
 8002a32:	f7fe fa4d 	bl	8000ed0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a36:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8002a8c <HAL_RCCEx_PeriphCLKConfig+0xa24>
        tickstart = HAL_GetTick();
 8002a3a:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3c:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a40:	e004      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a42:	f7fe fa45 	bl	8000ed0 <HAL_GetTick>
 8002a46:	1bc0      	subs	r0, r0, r7
 8002a48:	4548      	cmp	r0, r9
 8002a4a:	d8ee      	bhi.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x9c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a4c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8002a50:	079b      	lsls	r3, r3, #30
 8002a52:	d5f6      	bpl.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x9da>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a54:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8002a58:	e686      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002a5a:	480c      	ldr	r0, [pc, #48]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8002a5c:	4a0c      	ldr	r2, [pc, #48]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0xa28>)
 8002a5e:	6901      	ldr	r1, [r0, #16]
 8002a60:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8002a64:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	6102      	str	r2, [r0, #16]
 8002a6c:	e687      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x716>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	462e      	mov	r6, r5
 8002a72:	e45a      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002a74:	2601      	movs	r6, #1
 8002a76:	4635      	mov	r5, r6
 8002a78:	e4bd      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    switch(PeriphClkInit->FmcClockSelection)
 8002a7a:	2601      	movs	r6, #1
 8002a7c:	4635      	mov	r5, r6
 8002a7e:	e451      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002a80:	2601      	movs	r6, #1
 8002a82:	f7ff bb29 	b.w	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002a86:	2601      	movs	r6, #1
 8002a88:	4635      	mov	r5, r6
 8002a8a:	e49a      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002a8c:	58024400 	.word	0x58024400
 8002a90:	00ffffcf 	.word	0x00ffffcf

08002a94 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8002a94:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8002a96:	f7ff f923 	bl	8001ce0 <HAL_RCC_GetHCLKFreq>
 8002a9a:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8002a9c:	4a05      	ldr	r2, [pc, #20]	; (8002ab4 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002aa4:	5cd3      	ldrb	r3, [r2, r3]
 8002aa6:	f003 031f 	and.w	r3, r3, #31
}
 8002aaa:	40d8      	lsrs	r0, r3
 8002aac:	bd08      	pop	{r3, pc}
 8002aae:	bf00      	nop
 8002ab0:	58024400 	.word	0x58024400
 8002ab4:	0800a30c 	.word	0x0800a30c

08002ab8 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ab8:	4b4f      	ldr	r3, [pc, #316]	; (8002bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 8002aba:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002abc:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8002abe:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002ac0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 8002ac2:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8002ac6:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002aca:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 8002acc:	d05c      	beq.n	8002b88 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002ace:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002ad2:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ad6:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002ada:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8002ade:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002ae0:	ee07 4a90 	vmov	s15, r4
 8002ae4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8002ae8:	d003      	beq.n	8002af2 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8002aea:	2902      	cmp	r1, #2
 8002aec:	d075      	beq.n	8002bda <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 8002aee:	2900      	cmp	r1, #0
 8002af0:	d04f      	beq.n	8002b92 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002af2:	ee07 2a90 	vmov	s15, r2
 8002af6:	eddf 6a41 	vldr	s13, [pc, #260]	; 8002bfc <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8002afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b00:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8002b04:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002c00 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8002b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b0c:	ee06 3a90 	vmov	s13, r3
 8002b10:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8002b14:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002b18:	ee76 6a85 	vadd.f32	s13, s13, s10
 8002b1c:	eee7 6a25 	vfma.f32	s13, s14, s11
 8002b20:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8002b24:	4a34      	ldr	r2, [pc, #208]	; (8002bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8002b26:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002b2a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002b2c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002b30:	ee07 3a10 	vmov	s14, r3
 8002b34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8002b38:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8002b3a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b46:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8002b4a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002b4c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002b50:	ee07 3a10 	vmov	s14, r3
 8002b54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002b58:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002b5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b64:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8002b68:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002b6a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002b6e:	ee07 3a90 	vmov	s15, r3
 8002b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b76:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b7e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002b82:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8002b86:	4770      	bx	lr
 8002b88:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002b8a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002b8e:	6082      	str	r2, [r0, #8]
}
 8002b90:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b92:	6819      	ldr	r1, [r3, #0]
 8002b94:	0689      	lsls	r1, r1, #26
 8002b96:	d527      	bpl.n	8002be8 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002b98:	681c      	ldr	r4, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002b9a:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002b9e:	4919      	ldr	r1, [pc, #100]	; (8002c04 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002ba0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ba6:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002baa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bae:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8002c00 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8002bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002bb6:	40d1      	lsrs	r1, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002bb8:	ee06 3a90 	vmov	s13, r3
 8002bbc:	ee05 1a90 	vmov	s11, r1
 8002bc0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002bc4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8002bc8:	ee76 6a86 	vadd.f32	s13, s13, s12
 8002bcc:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8002bd0:	eee7 6a05 	vfma.f32	s13, s14, s10
 8002bd4:	ee66 6a26 	vmul.f32	s13, s12, s13
 8002bd8:	e7a4      	b.n	8002b24 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002bda:	ee07 2a90 	vmov	s15, r2
 8002bde:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002c08 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8002be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be6:	e78a      	b.n	8002afe <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002be8:	ee07 2a90 	vmov	s15, r2
 8002bec:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002c0c <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8002bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bf4:	e783      	b.n	8002afe <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8002bf6:	bf00      	nop
 8002bf8:	58024400 	.word	0x58024400
 8002bfc:	4a742400 	.word	0x4a742400
 8002c00:	39000000 	.word	0x39000000
 8002c04:	03d09000 	.word	0x03d09000
 8002c08:	4af42400 	.word	0x4af42400
 8002c0c:	4c742400 	.word	0x4c742400

08002c10 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c10:	4b4f      	ldr	r3, [pc, #316]	; (8002d50 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 8002c12:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c14:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8002c16:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002c18:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 8002c1a:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8002c1e:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002c22:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 8002c24:	d05c      	beq.n	8002ce0 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002c26:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002c2a:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c2e:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002c32:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8002c36:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002c38:	ee07 4a90 	vmov	s15, r4
 8002c3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8002c40:	d003      	beq.n	8002c4a <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8002c42:	2902      	cmp	r1, #2
 8002c44:	d075      	beq.n	8002d32 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 8002c46:	2900      	cmp	r1, #0
 8002c48:	d04f      	beq.n	8002cea <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002c4a:	ee07 2a90 	vmov	s15, r2
 8002c4e:	eddf 6a41 	vldr	s13, [pc, #260]	; 8002d54 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8002c52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8002c5c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002d58 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8002c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c64:	ee06 3a90 	vmov	s13, r3
 8002c68:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8002c6c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002c70:	ee76 6a85 	vadd.f32	s13, s13, s10
 8002c74:	eee7 6a25 	vfma.f32	s13, s14, s11
 8002c78:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8002c7c:	4a34      	ldr	r2, [pc, #208]	; (8002d50 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 8002c7e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002c82:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002c84:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002c88:	ee07 3a10 	vmov	s14, r3
 8002c8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8002c90:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8002c92:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c9e:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8002ca2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002ca4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002ca8:	ee07 3a10 	vmov	s14, r3
 8002cac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002cb0:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002cb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cbc:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8002cc0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002cc2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002cc6:	ee07 3a90 	vmov	s15, r3
 8002cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cce:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cd6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002cda:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8002cde:	4770      	bx	lr
 8002ce0:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002ce2:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002ce6:	6082      	str	r2, [r0, #8]
}
 8002ce8:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cea:	6819      	ldr	r1, [r3, #0]
 8002cec:	0689      	lsls	r1, r1, #26
 8002cee:	d527      	bpl.n	8002d40 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002cf0:	681c      	ldr	r4, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002cf2:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002cf6:	4919      	ldr	r1, [pc, #100]	; (8002d5c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002cf8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002cfe:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d06:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8002d58 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8002d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002d0e:	40d1      	lsrs	r1, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002d10:	ee06 3a90 	vmov	s13, r3
 8002d14:	ee05 1a90 	vmov	s11, r1
 8002d18:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002d1c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8002d20:	ee76 6a86 	vadd.f32	s13, s13, s12
 8002d24:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8002d28:	eee7 6a05 	vfma.f32	s13, s14, s10
 8002d2c:	ee66 6a26 	vmul.f32	s13, s12, s13
 8002d30:	e7a4      	b.n	8002c7c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002d32:	ee07 2a90 	vmov	s15, r2
 8002d36:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002d60 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8002d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d3e:	e78a      	b.n	8002c56 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002d40:	ee07 2a90 	vmov	s15, r2
 8002d44:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002d64 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8002d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d4c:	e783      	b.n	8002c56 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8002d4e:	bf00      	nop
 8002d50:	58024400 	.word	0x58024400
 8002d54:	4a742400 	.word	0x4a742400
 8002d58:	39000000 	.word	0x39000000
 8002d5c:	03d09000 	.word	0x03d09000
 8002d60:	4af42400 	.word	0x4af42400
 8002d64:	4c742400 	.word	0x4c742400

08002d68 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d68:	2800      	cmp	r0, #0
 8002d6a:	f000 80a5 	beq.w	8002eb8 <HAL_TIM_Base_Init+0x150>
{
 8002d6e:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d70:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d74:	4604      	mov	r4, r0
 8002d76:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d076      	beq.n	8002e6c <HAL_TIM_Base_Init+0x104>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d7e:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002d80:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d82:	494e      	ldr	r1, [pc, #312]	; (8002ebc <HAL_TIM_Base_Init+0x154>)
 8002d84:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 8002d88:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d8c:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8002d90:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d92:	fab1 f181 	clz	r1, r1
 8002d96:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8002d9a:	d027      	beq.n	8002dec <HAL_TIM_Base_Init+0x84>
 8002d9c:	bb31      	cbnz	r1, 8002dec <HAL_TIM_Base_Init+0x84>
 8002d9e:	4848      	ldr	r0, [pc, #288]	; (8002ec0 <HAL_TIM_Base_Init+0x158>)
 8002da0:	4d48      	ldr	r5, [pc, #288]	; (8002ec4 <HAL_TIM_Base_Init+0x15c>)
 8002da2:	4282      	cmp	r2, r0
 8002da4:	d067      	beq.n	8002e76 <HAL_TIM_Base_Init+0x10e>
 8002da6:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002daa:	4282      	cmp	r2, r0
 8002dac:	d063      	beq.n	8002e76 <HAL_TIM_Base_Init+0x10e>
 8002dae:	1b55      	subs	r5, r2, r5
 8002db0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002db4:	fab5 f585 	clz	r5, r5
 8002db8:	4282      	cmp	r2, r0
 8002dba:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8002dbe:	d063      	beq.n	8002e88 <HAL_TIM_Base_Init+0x120>
 8002dc0:	2d00      	cmp	r5, #0
 8002dc2:	d161      	bne.n	8002e88 <HAL_TIM_Base_Init+0x120>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dc4:	4840      	ldr	r0, [pc, #256]	; (8002ec8 <HAL_TIM_Base_Init+0x160>)
 8002dc6:	4941      	ldr	r1, [pc, #260]	; (8002ecc <HAL_TIM_Base_Init+0x164>)
 8002dc8:	428a      	cmp	r2, r1
 8002dca:	bf18      	it	ne
 8002dcc:	4282      	cmpne	r2, r0
 8002dce:	d065      	beq.n	8002e9c <HAL_TIM_Base_Init+0x134>
 8002dd0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002dd4:	428a      	cmp	r2, r1
 8002dd6:	d061      	beq.n	8002e9c <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dd8:	69a0      	ldr	r0, [r4, #24]
 8002dda:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dde:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002de0:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8002de2:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002de4:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002de6:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002de8:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dea:	e023      	b.n	8002e34 <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dec:	4d35      	ldr	r5, [pc, #212]	; (8002ec4 <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002df2:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002df4:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 8002df6:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002df8:	fab5 f585 	clz	r5, r5
 8002dfc:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dfe:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e04:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e06:	69a0      	ldr	r0, [r4, #24]
 8002e08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e0c:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8002e0e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e10:	68e3      	ldr	r3, [r4, #12]
 8002e12:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002e14:	6863      	ldr	r3, [r4, #4]
 8002e16:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e18:	b951      	cbnz	r1, 8002e30 <HAL_TIM_Base_Init+0xc8>
 8002e1a:	b94d      	cbnz	r5, 8002e30 <HAL_TIM_Base_Init+0xc8>
 8002e1c:	492a      	ldr	r1, [pc, #168]	; (8002ec8 <HAL_TIM_Base_Init+0x160>)
 8002e1e:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <HAL_TIM_Base_Init+0x164>)
 8002e20:	429a      	cmp	r2, r3
 8002e22:	bf18      	it	ne
 8002e24:	428a      	cmpne	r2, r1
 8002e26:	d003      	beq.n	8002e30 <HAL_TIM_Base_Init+0xc8>
 8002e28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d101      	bne.n	8002e34 <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e30:	6963      	ldr	r3, [r4, #20]
 8002e32:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e34:	2301      	movs	r3, #1
  return HAL_OK;
 8002e36:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8002e38:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e3a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e3e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002e42:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002e46:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002e4a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002e4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e56:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002e5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e5e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8002e62:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002e66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002e6a:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 8002e6c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002e70:	f7fd fe62 	bl	8000b38 <HAL_TIM_Base_MspInit>
 8002e74:	e783      	b.n	8002d7e <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e76:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e7c:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e7e:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
 8002e82:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e84:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e86:	e7ba      	b.n	8002dfe <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
 8002e88:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e8e:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e90:	480f      	ldr	r0, [pc, #60]	; (8002ed0 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e92:	4282      	cmp	r2, r0
 8002e94:	d0b3      	beq.n	8002dfe <HAL_TIM_Base_Init+0x96>
 8002e96:	2d00      	cmp	r5, #0
 8002e98:	d1b1      	bne.n	8002dfe <HAL_TIM_Base_Init+0x96>
 8002e9a:	e793      	b.n	8002dc4 <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e9c:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ea2:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ea4:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ea6:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ea8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eac:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8002eae:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8002eb0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eb2:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002eb4:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eb6:	e7b1      	b.n	8002e1c <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
 8002eb8:	2001      	movs	r0, #1
}
 8002eba:	4770      	bx	lr
 8002ebc:	40010000 	.word	0x40010000
 8002ec0:	40000400 	.word	0x40000400
 8002ec4:	40010400 	.word	0x40010400
 8002ec8:	40014000 	.word	0x40014000
 8002ecc:	40014400 	.word	0x40014400
 8002ed0:	40000c00 	.word	0x40000c00

08002ed4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002ed4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d141      	bne.n	8002f60 <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002edc:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002ede:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ee0:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <HAL_TIM_Base_Start_IT+0xa0>)
 8002ee2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002ee6:	bf18      	it	ne
 8002ee8:	429a      	cmpne	r2, r3
{
 8002eea:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eec:	bf0c      	ite	eq
 8002eee:	2301      	moveq	r3, #1
 8002ef0:	2300      	movne	r3, #0
 8002ef2:	4d21      	ldr	r5, [pc, #132]	; (8002f78 <HAL_TIM_Base_Start_IT+0xa4>)
 8002ef4:	4c21      	ldr	r4, [pc, #132]	; (8002f7c <HAL_TIM_Base_Start_IT+0xa8>)
 8002ef6:	42aa      	cmp	r2, r5
 8002ef8:	bf08      	it	eq
 8002efa:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002efe:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f02:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f04:	42a2      	cmp	r2, r4
 8002f06:	bf08      	it	eq
 8002f08:	f043 0301 	orreq.w	r3, r3, #1
 8002f0c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f10:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f14:	481a      	ldr	r0, [pc, #104]	; (8002f80 <HAL_TIM_Base_Start_IT+0xac>)
 8002f16:	42a2      	cmp	r2, r4
 8002f18:	bf08      	it	eq
 8002f1a:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f1e:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f20:	4282      	cmp	r2, r0
 8002f22:	bf08      	it	eq
 8002f24:	f043 0301 	orreq.w	r3, r3, #1
 8002f28:	4916      	ldr	r1, [pc, #88]	; (8002f84 <HAL_TIM_Base_Start_IT+0xb0>)
 8002f2a:	428a      	cmp	r2, r1
 8002f2c:	bf08      	it	eq
 8002f2e:	f043 0301 	orreq.w	r3, r3, #1
 8002f32:	b933      	cbnz	r3, 8002f42 <HAL_TIM_Base_Start_IT+0x6e>
 8002f34:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 8002f38:	1a10      	subs	r0, r2, r0
 8002f3a:	fab0 f080 	clz	r0, r0
 8002f3e:	0940      	lsrs	r0, r0, #5
 8002f40:	b198      	cbz	r0, 8002f6a <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f42:	6891      	ldr	r1, [r2, #8]
 8002f44:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <HAL_TIM_Base_Start_IT+0xb4>)
 8002f46:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f48:	2b06      	cmp	r3, #6
 8002f4a:	d00b      	beq.n	8002f64 <HAL_TIM_Base_Start_IT+0x90>
 8002f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f50:	d008      	beq.n	8002f64 <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
 8002f52:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 8002f54:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	6013      	str	r3, [r2, #0]
}
 8002f5c:	bc30      	pop	{r4, r5}
 8002f5e:	4770      	bx	lr
    return HAL_ERROR;
 8002f60:	2001      	movs	r0, #1
}
 8002f62:	4770      	bx	lr
  return HAL_OK;
 8002f64:	2000      	movs	r0, #0
}
 8002f66:	bc30      	pop	{r4, r5}
 8002f68:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8002f6a:	6813      	ldr	r3, [r2, #0]
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	e7f3      	b.n	8002f5c <HAL_TIM_Base_Start_IT+0x88>
 8002f74:	40010000 	.word	0x40010000
 8002f78:	40000400 	.word	0x40000400
 8002f7c:	40000800 	.word	0x40000800
 8002f80:	40010400 	.word	0x40010400
 8002f84:	40001800 	.word	0x40001800
 8002f88:	00010007 	.word	0x00010007

08002f8c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002f8c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	f000 8081 	beq.w	8003098 <HAL_TIM_ConfigClockSource+0x10c>
 8002f96:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8002f98:	2302      	movs	r3, #2
{
 8002f9a:	b470      	push	{r4, r5, r6}
  tmpsmcr = htim->Instance->SMCR;
 8002f9c:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(htim);
 8002f9e:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa0:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002fa4:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fa8:	4b5a      	ldr	r3, [pc, #360]	; (8003114 <HAL_TIM_ConfigClockSource+0x188>)
  tmpsmcr = htim->Instance->SMCR;
 8002faa:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fac:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8002fae:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8002fb0:	680b      	ldr	r3, [r1, #0]
 8002fb2:	2b70      	cmp	r3, #112	; 0x70
 8002fb4:	f000 809c 	beq.w	80030f0 <HAL_TIM_ConfigClockSource+0x164>
 8002fb8:	d825      	bhi.n	8003006 <HAL_TIM_ConfigClockSource+0x7a>
 8002fba:	2b50      	cmp	r3, #80	; 0x50
 8002fbc:	d06e      	beq.n	800309c <HAL_TIM_ConfigClockSource+0x110>
 8002fbe:	d939      	bls.n	8003034 <HAL_TIM_ConfigClockSource+0xa8>
 8002fc0:	2b60      	cmp	r3, #96	; 0x60
 8002fc2:	d118      	bne.n	8002ff6 <HAL_TIM_ConfigClockSource+0x6a>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fc4:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fc6:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fc8:	f020 0010 	bic.w	r0, r0, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fcc:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fce:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd0:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 8002fd2:	69a3      	ldr	r3, [r4, #24]
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fd8:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmpccer = TIMx->CCER;
 8002fdc:	6a21      	ldr	r1, [r4, #32]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fde:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fe2:	61a3      	str	r3, [r4, #24]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fe4:	4b4c      	ldr	r3, [pc, #304]	; (8003118 <HAL_TIM_ConfigClockSource+0x18c>)
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fe6:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCER = tmpccer;
 8002fea:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8002fec:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fee:	400b      	ands	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ff0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ff4:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002ff6:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8002ff8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002ffa:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002ffe:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8003002:	bc70      	pop	{r4, r5, r6}
 8003004:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800300a:	d060      	beq.n	80030ce <HAL_TIM_ConfigClockSource+0x142>
 800300c:	d933      	bls.n	8003076 <HAL_TIM_ConfigClockSource+0xea>
 800300e:	4943      	ldr	r1, [pc, #268]	; (800311c <HAL_TIM_ConfigClockSource+0x190>)
 8003010:	428b      	cmp	r3, r1
 8003012:	d006      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0x96>
 8003014:	d929      	bls.n	800306a <HAL_TIM_ConfigClockSource+0xde>
 8003016:	4942      	ldr	r1, [pc, #264]	; (8003120 <HAL_TIM_ConfigClockSource+0x194>)
 8003018:	428b      	cmp	r3, r1
 800301a:	d002      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0x96>
 800301c:	3110      	adds	r1, #16
 800301e:	428b      	cmp	r3, r1
 8003020:	d1e9      	bne.n	8002ff6 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr = TIMx->SMCR;
 8003022:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003024:	493c      	ldr	r1, [pc, #240]	; (8003118 <HAL_TIM_ConfigClockSource+0x18c>)
 8003026:	4001      	ands	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 8003028:	2000      	movs	r0, #0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800302a:	430b      	orrs	r3, r1
 800302c:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8003030:	60a3      	str	r3, [r4, #8]
}
 8003032:	e7e0      	b.n	8002ff6 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 8003034:	2b40      	cmp	r3, #64	; 0x40
 8003036:	d123      	bne.n	8003080 <HAL_TIM_ConfigClockSource+0xf4>
  tmpccer = TIMx->CCER;
 8003038:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800303a:	6a25      	ldr	r5, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800303c:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800303e:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003042:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003046:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8003048:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 800304a:	4b33      	ldr	r3, [pc, #204]	; (8003118 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800304c:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800304e:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003050:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003054:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003058:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800305a:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800305c:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 800305e:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003060:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003062:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003066:	60a3      	str	r3, [r4, #8]
}
 8003068:	e7c5      	b.n	8002ff6 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800306a:	f023 0110 	bic.w	r1, r3, #16
 800306e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003072:	d1c0      	bne.n	8002ff6 <HAL_TIM_ConfigClockSource+0x6a>
 8003074:	e7d5      	b.n	8003022 <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 8003076:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 800307a:	bf18      	it	ne
 800307c:	2001      	movne	r0, #1
 800307e:	e7ba      	b.n	8002ff6 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 8003080:	d8b9      	bhi.n	8002ff6 <HAL_TIM_ConfigClockSource+0x6a>
 8003082:	2b20      	cmp	r3, #32
 8003084:	d0cd      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0x96>
 8003086:	d903      	bls.n	8003090 <HAL_TIM_ConfigClockSource+0x104>
 8003088:	2b30      	cmp	r3, #48	; 0x30
 800308a:	d0ca      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0x96>
 800308c:	2001      	movs	r0, #1
 800308e:	e7b2      	b.n	8002ff6 <HAL_TIM_ConfigClockSource+0x6a>
 8003090:	f033 0110 	bics.w	r1, r3, #16
 8003094:	d1af      	bne.n	8002ff6 <HAL_TIM_ConfigClockSource+0x6a>
 8003096:	e7c4      	b.n	8003022 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8003098:	2002      	movs	r0, #2
}
 800309a:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 800309c:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800309e:	6a25      	ldr	r5, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a0:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030a2:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030a6:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030aa:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 80030ac:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 80030ae:	4b1a      	ldr	r3, [pc, #104]	; (8003118 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030b0:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030b2:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030b4:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030b8:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80030bc:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 80030be:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 80030c0:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 80030c2:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80030c4:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030c6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80030ca:	60a3      	str	r3, [r4, #8]
}
 80030cc:	e793      	b.n	8002ff6 <HAL_TIM_ConfigClockSource+0x6a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030ce:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80030d2:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030d4:	432b      	orrs	r3, r5
 80030d6:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030d8:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 80030dc:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030de:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80030e2:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030e4:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030e6:	68a3      	ldr	r3, [r4, #8]
 80030e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030ec:	60a3      	str	r3, [r4, #8]
      break;
 80030ee:	e782      	b.n	8002ff6 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030f0:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80030f4:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030f6:	432b      	orrs	r3, r5
 80030f8:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030fa:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 80030fe:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003100:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003104:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003106:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003108:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800310a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800310e:	60a3      	str	r3, [r4, #8]
      break;
 8003110:	e771      	b.n	8002ff6 <HAL_TIM_ConfigClockSource+0x6a>
 8003112:	bf00      	nop
 8003114:	ffce0088 	.word	0xffce0088
 8003118:	ffcfff8f 	.word	0xffcfff8f
 800311c:	00100020 	.word	0x00100020
 8003120:	00100030 	.word	0x00100030

08003124 <HAL_TIM_OC_DelayElapsedCallback>:
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop

08003128 <HAL_TIM_IC_CaptureCallback>:
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop

0800312c <HAL_TIM_PWM_PulseFinishedCallback>:
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop

08003130 <HAL_TIM_TriggerCallback>:
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop

08003134 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003134:	6803      	ldr	r3, [r0, #0]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	0791      	lsls	r1, r2, #30
{
 800313a:	b510      	push	{r4, lr}
 800313c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800313e:	d502      	bpl.n	8003146 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	0792      	lsls	r2, r2, #30
 8003144:	d468      	bmi.n	8003218 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003146:	691a      	ldr	r2, [r3, #16]
 8003148:	0752      	lsls	r2, r2, #29
 800314a:	d502      	bpl.n	8003152 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	0750      	lsls	r0, r2, #29
 8003150:	d44f      	bmi.n	80031f2 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	0711      	lsls	r1, r2, #28
 8003156:	d502      	bpl.n	800315e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	0712      	lsls	r2, r2, #28
 800315c:	d437      	bmi.n	80031ce <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	06d0      	lsls	r0, r2, #27
 8003162:	d502      	bpl.n	800316a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	06d1      	lsls	r1, r2, #27
 8003168:	d41e      	bmi.n	80031a8 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800316a:	691a      	ldr	r2, [r3, #16]
 800316c:	07d2      	lsls	r2, r2, #31
 800316e:	d502      	bpl.n	8003176 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	07d0      	lsls	r0, r2, #31
 8003174:	d469      	bmi.n	800324a <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	0611      	lsls	r1, r2, #24
 800317a:	d502      	bpl.n	8003182 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800317c:	68da      	ldr	r2, [r3, #12]
 800317e:	0612      	lsls	r2, r2, #24
 8003180:	d46b      	bmi.n	800325a <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	05d0      	lsls	r0, r2, #23
 8003186:	d502      	bpl.n	800318e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	0611      	lsls	r1, r2, #24
 800318c:	d46d      	bmi.n	800326a <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	0652      	lsls	r2, r2, #25
 8003192:	d502      	bpl.n	800319a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	0650      	lsls	r0, r2, #25
 8003198:	d46f      	bmi.n	800327a <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	0691      	lsls	r1, r2, #26
 800319e:	d502      	bpl.n	80031a6 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	0692      	lsls	r2, r2, #26
 80031a4:	d449      	bmi.n	800323a <HAL_TIM_IRQHandler+0x106>
}
 80031a6:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031a8:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031ac:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 80031ae:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031b0:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031b2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80031ba:	d16f      	bne.n	800329c <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031bc:	f7ff ffb2 	bl	8003124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c0:	4620      	mov	r0, r4
 80031c2:	f7ff ffb3 	bl	800312c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031c8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ca:	7722      	strb	r2, [r4, #28]
 80031cc:	e7cd      	b.n	800316a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031ce:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031d2:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 80031d4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031d6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031d8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	079b      	lsls	r3, r3, #30
 80031de:	d15a      	bne.n	8003296 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e0:	f7ff ffa0 	bl	8003124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e4:	4620      	mov	r0, r4
 80031e6:	f7ff ffa1 	bl	800312c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ea:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031ec:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ee:	7722      	strb	r2, [r4, #28]
 80031f0:	e7b5      	b.n	800315e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031f2:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031f6:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80031f8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031fa:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031fc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003204:	d144      	bne.n	8003290 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003206:	f7ff ff8d 	bl	8003124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800320a:	4620      	mov	r0, r4
 800320c:	f7ff ff8e 	bl	800312c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003210:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003212:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003214:	7722      	strb	r2, [r4, #28]
 8003216:	e79c      	b.n	8003152 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003218:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800321c:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800321e:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003220:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	0799      	lsls	r1, r3, #30
 8003226:	d130      	bne.n	800328a <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003228:	f7ff ff7c 	bl	8003124 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800322c:	4620      	mov	r0, r4
 800322e:	f7ff ff7d 	bl	800312c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003232:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003234:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003236:	7722      	strb	r2, [r4, #28]
 8003238:	e785      	b.n	8003146 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800323a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800323e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003240:	611a      	str	r2, [r3, #16]
}
 8003242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003246:	f000 b887 	b.w	8003358 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800324a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800324e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003250:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003252:	f7fd fc41 	bl	8000ad8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	e78d      	b.n	8003176 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800325a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800325e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003260:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003262:	f000 f87b 	bl	800335c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003266:	6823      	ldr	r3, [r4, #0]
 8003268:	e78b      	b.n	8003182 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800326a:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800326e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003270:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003272:	f000 f875 	bl	8003360 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003276:	6823      	ldr	r3, [r4, #0]
 8003278:	e789      	b.n	800318e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800327a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800327e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003280:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003282:	f7ff ff55 	bl	8003130 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	e787      	b.n	800319a <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800328a:	f7ff ff4d 	bl	8003128 <HAL_TIM_IC_CaptureCallback>
 800328e:	e7d0      	b.n	8003232 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8003290:	f7ff ff4a 	bl	8003128 <HAL_TIM_IC_CaptureCallback>
 8003294:	e7bc      	b.n	8003210 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8003296:	f7ff ff47 	bl	8003128 <HAL_TIM_IC_CaptureCallback>
 800329a:	e7a6      	b.n	80031ea <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800329c:	f7ff ff44 	bl	8003128 <HAL_TIM_IC_CaptureCallback>
 80032a0:	e791      	b.n	80031c6 <HAL_TIM_IRQHandler+0x92>
 80032a2:	bf00      	nop

080032a4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d04b      	beq.n	8003344 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032ac:	6803      	ldr	r3, [r0, #0]
 80032ae:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80032b0:	2002      	movs	r0, #2
{
 80032b2:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032b4:	4d24      	ldr	r5, [pc, #144]	; (8003348 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 80032b6:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032ba:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 80032bc:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80032be:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032c0:	d029      	beq.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80032c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80032c6:	42ab      	cmp	r3, r5
 80032c8:	d025      	beq.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ca:	4d20      	ldr	r5, [pc, #128]	; (800334c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 80032cc:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032d0:	42ab      	cmp	r3, r5
 80032d2:	bf18      	it	ne
 80032d4:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 80032d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80032dc:	bf0c      	ite	eq
 80032de:	f04f 0c01 	moveq.w	ip, #1
 80032e2:	f04f 0c00 	movne.w	ip, #0
 80032e6:	42ab      	cmp	r3, r5
 80032e8:	bf08      	it	eq
 80032ea:	f04c 0c01 	orreq.w	ip, ip, #1
 80032ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80032f2:	42ab      	cmp	r3, r5
 80032f4:	bf08      	it	eq
 80032f6:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032fa:	680d      	ldr	r5, [r1, #0]
 80032fc:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032fe:	4d14      	ldr	r5, [pc, #80]	; (8003350 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 8003300:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003302:	42ab      	cmp	r3, r5
 8003304:	bf14      	ite	ne
 8003306:	4660      	movne	r0, ip
 8003308:	f04c 0001 	orreq.w	r0, ip, #1
 800330c:	b960      	cbnz	r0, 8003328 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800330e:	4811      	ldr	r0, [pc, #68]	; (8003354 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003310:	4283      	cmp	r3, r0
 8003312:	d009      	beq.n	8003328 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003314:	e00d      	b.n	8003332 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003316:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003318:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800331c:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800331e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003320:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003324:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8003326:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003328:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800332a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800332e:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003330:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003332:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003334:	2101      	movs	r1, #1

  return HAL_OK;
 8003336:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8003338:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800333c:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8003340:	bc30      	pop	{r4, r5}
 8003342:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003344:	2002      	movs	r0, #2
}
 8003346:	4770      	bx	lr
 8003348:	40010000 	.word	0x40010000
 800334c:	40000400 	.word	0x40000400
 8003350:	40001800 	.word	0x40001800
 8003354:	40014000 	.word	0x40014000

08003358 <HAL_TIMEx_CommutCallback>:
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop

0800335c <HAL_TIMEx_BreakCallback>:
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop

08003360 <HAL_TIMEx_Break2Callback>:
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop

08003364 <UART_SetConfig>:
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003364:	6901      	ldr	r1, [r0, #16]
 8003366:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8003368:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800336a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800336c:	49ae      	ldr	r1, [pc, #696]	; (8003628 <UART_SetConfig+0x2c4>)
{
 800336e:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003370:	6945      	ldr	r5, [r0, #20]
{
 8003372:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003374:	69c0      	ldr	r0, [r0, #28]
{
 8003376:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003378:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800337a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800337c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800337e:	4029      	ands	r1, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003380:	4daa      	ldr	r5, [pc, #680]	; (800362c <UART_SetConfig+0x2c8>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003382:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003384:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003386:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003388:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003390:	ea42 0201 	orr.w	r2, r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003394:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003396:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003398:	d07d      	beq.n	8003496 <UART_SetConfig+0x132>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800339a:	6a22      	ldr	r2, [r4, #32]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800339c:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800339e:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033a0:	4aa3      	ldr	r2, [pc, #652]	; (8003630 <UART_SetConfig+0x2cc>)
 80033a2:	402a      	ands	r2, r5

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80033a4:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033a6:	4311      	orrs	r1, r2
 80033a8:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80033aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ac:	f022 020f 	bic.w	r2, r2, #15
 80033b0:	432a      	orrs	r2, r5
 80033b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033b4:	4a9f      	ldr	r2, [pc, #636]	; (8003634 <UART_SetConfig+0x2d0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d02a      	beq.n	8003410 <UART_SetConfig+0xac>
 80033ba:	4a9f      	ldr	r2, [pc, #636]	; (8003638 <UART_SetConfig+0x2d4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d05b      	beq.n	8003478 <UART_SetConfig+0x114>
 80033c0:	4a9e      	ldr	r2, [pc, #632]	; (800363c <UART_SetConfig+0x2d8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	f000 81ad 	beq.w	8003722 <UART_SetConfig+0x3be>
 80033c8:	4a9d      	ldr	r2, [pc, #628]	; (8003640 <UART_SetConfig+0x2dc>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	f000 81d2 	beq.w	8003774 <UART_SetConfig+0x410>
 80033d0:	4a9c      	ldr	r2, [pc, #624]	; (8003644 <UART_SetConfig+0x2e0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	f000 810c 	beq.w	80035f0 <UART_SetConfig+0x28c>
 80033d8:	4a9b      	ldr	r2, [pc, #620]	; (8003648 <UART_SetConfig+0x2e4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	f000 81d4 	beq.w	8003788 <UART_SetConfig+0x424>
 80033e0:	4a9a      	ldr	r2, [pc, #616]	; (800364c <UART_SetConfig+0x2e8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	f000 8225 	beq.w	8003832 <UART_SetConfig+0x4ce>
 80033e8:	4a99      	ldr	r2, [pc, #612]	; (8003650 <UART_SetConfig+0x2ec>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	f000 81d8 	beq.w	80037a0 <UART_SetConfig+0x43c>
 80033f0:	4a98      	ldr	r2, [pc, #608]	; (8003654 <UART_SetConfig+0x2f0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	f000 8229 	beq.w	800384a <UART_SetConfig+0x4e6>
 80033f8:	4a97      	ldr	r2, [pc, #604]	; (8003658 <UART_SetConfig+0x2f4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d142      	bne.n	8003484 <UART_SetConfig+0x120>
 80033fe:	4b97      	ldr	r3, [pc, #604]	; (800365c <UART_SetConfig+0x2f8>)
 8003400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003402:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003406:	2b28      	cmp	r3, #40	; 0x28
 8003408:	d83c      	bhi.n	8003484 <UART_SetConfig+0x120>
 800340a:	4a95      	ldr	r2, [pc, #596]	; (8003660 <UART_SetConfig+0x2fc>)
 800340c:	5cd3      	ldrb	r3, [r2, r3]
 800340e:	e007      	b.n	8003420 <UART_SetConfig+0xbc>
 8003410:	4b92      	ldr	r3, [pc, #584]	; (800365c <UART_SetConfig+0x2f8>)
 8003412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003414:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003418:	2b28      	cmp	r3, #40	; 0x28
 800341a:	d833      	bhi.n	8003484 <UART_SetConfig+0x120>
 800341c:	4a91      	ldr	r2, [pc, #580]	; (8003664 <UART_SetConfig+0x300>)
 800341e:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003420:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003424:	f000 809a 	beq.w	800355c <UART_SetConfig+0x1f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003428:	2b20      	cmp	r3, #32
 800342a:	f200 8133 	bhi.w	8003694 <UART_SetConfig+0x330>
 800342e:	2b20      	cmp	r3, #32
 8003430:	d828      	bhi.n	8003484 <UART_SetConfig+0x120>
 8003432:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003436:	012c      	.short	0x012c
 8003438:	00270129 	.word	0x00270129
 800343c:	01210027 	.word	0x01210027
 8003440:	00270027 	.word	0x00270027
 8003444:	00f20027 	.word	0x00f20027
 8003448:	00270027 	.word	0x00270027
 800344c:	00270027 	.word	0x00270027
 8003450:	00270027 	.word	0x00270027
 8003454:	00e70027 	.word	0x00e70027
 8003458:	00270027 	.word	0x00270027
 800345c:	00270027 	.word	0x00270027
 8003460:	00270027 	.word	0x00270027
 8003464:	00270027 	.word	0x00270027
 8003468:	00270027 	.word	0x00270027
 800346c:	00270027 	.word	0x00270027
 8003470:	00270027 	.word	0x00270027
 8003474:	01bf0027 	.word	0x01bf0027
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003478:	4b78      	ldr	r3, [pc, #480]	; (800365c <UART_SetConfig+0x2f8>)
 800347a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	2b05      	cmp	r3, #5
 8003482:	d965      	bls.n	8003550 <UART_SetConfig+0x1ec>
        ret = HAL_ERROR;
 8003484:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003486:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8003488:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 800348c:	6723      	str	r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 800348e:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8003490:	6763      	str	r3, [r4, #116]	; 0x74

  return ret;
}
 8003492:	b007      	add	sp, #28
 8003494:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003496:	6898      	ldr	r0, [r3, #8]
 8003498:	4a65      	ldr	r2, [pc, #404]	; (8003630 <UART_SetConfig+0x2cc>)
 800349a:	4002      	ands	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 800349c:	486f      	ldr	r0, [pc, #444]	; (800365c <UART_SetConfig+0x2f8>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800349e:	430a      	orrs	r2, r1
 80034a0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80034a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80034a6:	f022 020f 	bic.w	r2, r2, #15
 80034aa:	430a      	orrs	r2, r1
 80034ac:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034ae:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	2b05      	cmp	r3, #5
 80034b6:	d8e5      	bhi.n	8003484 <UART_SetConfig+0x120>
 80034b8:	4a6b      	ldr	r2, [pc, #428]	; (8003668 <UART_SetConfig+0x304>)
 80034ba:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 80034bc:	2b20      	cmp	r3, #32
 80034be:	f200 8103 	bhi.w	80036c8 <UART_SetConfig+0x364>
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d9de      	bls.n	8003484 <UART_SetConfig+0x120>
 80034c6:	3b02      	subs	r3, #2
 80034c8:	2b1e      	cmp	r3, #30
 80034ca:	d8db      	bhi.n	8003484 <UART_SetConfig+0x120>
 80034cc:	a201      	add	r2, pc, #4	; (adr r2, 80034d4 <UART_SetConfig+0x170>)
 80034ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d2:	bf00      	nop
 80034d4:	080037b9 	.word	0x080037b9
 80034d8:	08003485 	.word	0x08003485
 80034dc:	080037e5 	.word	0x080037e5
 80034e0:	08003485 	.word	0x08003485
 80034e4:	08003485 	.word	0x08003485
 80034e8:	08003485 	.word	0x08003485
 80034ec:	080037db 	.word	0x080037db
 80034f0:	08003485 	.word	0x08003485
 80034f4:	08003485 	.word	0x08003485
 80034f8:	08003485 	.word	0x08003485
 80034fc:	08003485 	.word	0x08003485
 8003500:	08003485 	.word	0x08003485
 8003504:	08003485 	.word	0x08003485
 8003508:	08003485 	.word	0x08003485
 800350c:	080037c7 	.word	0x080037c7
 8003510:	08003485 	.word	0x08003485
 8003514:	08003485 	.word	0x08003485
 8003518:	08003485 	.word	0x08003485
 800351c:	08003485 	.word	0x08003485
 8003520:	08003485 	.word	0x08003485
 8003524:	08003485 	.word	0x08003485
 8003528:	08003485 	.word	0x08003485
 800352c:	08003485 	.word	0x08003485
 8003530:	08003485 	.word	0x08003485
 8003534:	08003485 	.word	0x08003485
 8003538:	08003485 	.word	0x08003485
 800353c:	08003485 	.word	0x08003485
 8003540:	08003485 	.word	0x08003485
 8003544:	08003485 	.word	0x08003485
 8003548:	08003485 	.word	0x08003485
 800354c:	080037ef 	.word	0x080037ef
 8003550:	4a46      	ldr	r2, [pc, #280]	; (800366c <UART_SetConfig+0x308>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003552:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003556:	5cd3      	ldrb	r3, [r2, r3]
 8003558:	f47f af66 	bne.w	8003428 <UART_SetConfig+0xc4>
    switch (clocksource)
 800355c:	2b20      	cmp	r3, #32
 800355e:	f200 80ea 	bhi.w	8003736 <UART_SetConfig+0x3d2>
 8003562:	2b20      	cmp	r3, #32
 8003564:	d88e      	bhi.n	8003484 <UART_SetConfig+0x120>
 8003566:	a201      	add	r2, pc, #4	; (adr r2, 800356c <UART_SetConfig+0x208>)
 8003568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356c:	08003801 	.word	0x08003801
 8003570:	080037f3 	.word	0x080037f3
 8003574:	08003485 	.word	0x08003485
 8003578:	08003485 	.word	0x08003485
 800357c:	08003825 	.word	0x08003825
 8003580:	08003485 	.word	0x08003485
 8003584:	08003485 	.word	0x08003485
 8003588:	08003485 	.word	0x08003485
 800358c:	0800381b 	.word	0x0800381b
 8003590:	08003485 	.word	0x08003485
 8003594:	08003485 	.word	0x08003485
 8003598:	08003485 	.word	0x08003485
 800359c:	08003485 	.word	0x08003485
 80035a0:	08003485 	.word	0x08003485
 80035a4:	08003485 	.word	0x08003485
 80035a8:	08003485 	.word	0x08003485
 80035ac:	08003807 	.word	0x08003807
 80035b0:	08003485 	.word	0x08003485
 80035b4:	08003485 	.word	0x08003485
 80035b8:	08003485 	.word	0x08003485
 80035bc:	08003485 	.word	0x08003485
 80035c0:	08003485 	.word	0x08003485
 80035c4:	08003485 	.word	0x08003485
 80035c8:	08003485 	.word	0x08003485
 80035cc:	08003485 	.word	0x08003485
 80035d0:	08003485 	.word	0x08003485
 80035d4:	08003485 	.word	0x08003485
 80035d8:	08003485 	.word	0x08003485
 80035dc:	08003485 	.word	0x08003485
 80035e0:	08003485 	.word	0x08003485
 80035e4:	08003485 	.word	0x08003485
 80035e8:	08003485 	.word	0x08003485
 80035ec:	0800382f 	.word	0x0800382f
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035f0:	4b1a      	ldr	r3, [pc, #104]	; (800365c <UART_SetConfig+0x2f8>)
 80035f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	2b05      	cmp	r3, #5
 80035fa:	f63f af43 	bhi.w	8003484 <UART_SetConfig+0x120>
 80035fe:	4a1c      	ldr	r2, [pc, #112]	; (8003670 <UART_SetConfig+0x30c>)
 8003600:	5cd3      	ldrb	r3, [r2, r3]
 8003602:	e70d      	b.n	8003420 <UART_SetConfig+0xbc>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003604:	4b15      	ldr	r3, [pc, #84]	; (800365c <UART_SetConfig+0x2f8>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	0692      	lsls	r2, r2, #26
 800360a:	f140 80c7 	bpl.w	800379c <UART_SetConfig+0x438>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4818      	ldr	r0, [pc, #96]	; (8003674 <UART_SetConfig+0x310>)
 8003612:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003616:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8003618:	e041      	b.n	800369e <UART_SetConfig+0x33a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800361a:	a803      	add	r0, sp, #12
 800361c:	f7ff faf8 	bl	8002c10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003620:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8003622:	bb78      	cbnz	r0, 8003684 <UART_SetConfig+0x320>
          pclk = (uint32_t) HSI_VALUE;
 8003624:	2000      	movs	r0, #0
 8003626:	e72e      	b.n	8003486 <UART_SetConfig+0x122>
 8003628:	cfff69f3 	.word	0xcfff69f3
 800362c:	58000c00 	.word	0x58000c00
 8003630:	11fff4ff 	.word	0x11fff4ff
 8003634:	40011000 	.word	0x40011000
 8003638:	40004400 	.word	0x40004400
 800363c:	40004800 	.word	0x40004800
 8003640:	40004c00 	.word	0x40004c00
 8003644:	40005000 	.word	0x40005000
 8003648:	40011400 	.word	0x40011400
 800364c:	40007800 	.word	0x40007800
 8003650:	40007c00 	.word	0x40007c00
 8003654:	40011800 	.word	0x40011800
 8003658:	40011c00 	.word	0x40011c00
 800365c:	58024400 	.word	0x58024400
 8003660:	0800a31c 	.word	0x0800a31c
 8003664:	0800a31c 	.word	0x0800a31c
 8003668:	0800a350 	.word	0x0800a350
 800366c:	0800a348 	.word	0x0800a348
 8003670:	0800a348 	.word	0x0800a348
 8003674:	03d09000 	.word	0x03d09000
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003678:	4668      	mov	r0, sp
 800367a:	f7ff fa1d 	bl	8002ab8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800367e:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8003680:	2800      	cmp	r0, #0
 8003682:	d0cf      	beq.n	8003624 <UART_SetConfig+0x2c0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003684:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003686:	e00a      	b.n	800369e <UART_SetConfig+0x33a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003688:	f7fe fbb2 	bl	8001df0 <HAL_RCC_GetPCLK2Freq>
        break;
 800368c:	e7c9      	b.n	8003622 <UART_SetConfig+0x2be>
        pclk = HAL_RCC_GetPCLK1Freq();
 800368e:	f7fe fb67 	bl	8001d60 <HAL_RCC_GetPCLK1Freq>
        break;
 8003692:	e7c6      	b.n	8003622 <UART_SetConfig+0x2be>
    switch (clocksource)
 8003694:	2b40      	cmp	r3, #64	; 0x40
 8003696:	f47f aef5 	bne.w	8003484 <UART_SetConfig+0x120>
 800369a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800369e:	4b71      	ldr	r3, [pc, #452]	; (8003864 <UART_SetConfig+0x500>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036a0:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036a4:	6862      	ldr	r2, [r4, #4]
 80036a6:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 80036aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ae:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80036b2:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036b6:	f1a3 0210 	sub.w	r2, r3, #16
 80036ba:	428a      	cmp	r2, r1
 80036bc:	f63f aee2 	bhi.w	8003484 <UART_SetConfig+0x120>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036c0:	6822      	ldr	r2, [r4, #0]
 80036c2:	2000      	movs	r0, #0
 80036c4:	60d3      	str	r3, [r2, #12]
 80036c6:	e6de      	b.n	8003486 <UART_SetConfig+0x122>
    switch (clocksource)
 80036c8:	2b40      	cmp	r3, #64	; 0x40
 80036ca:	f47f aedb 	bne.w	8003484 <UART_SetConfig+0x120>
 80036ce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80036d2:	4b64      	ldr	r3, [pc, #400]	; (8003864 <UART_SetConfig+0x500>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036d4:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80036d6:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036da:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80036de:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036e2:	4299      	cmp	r1, r3
 80036e4:	f63f aece 	bhi.w	8003484 <UART_SetConfig+0x120>
 80036e8:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80036ec:	f63f aeca 	bhi.w	8003484 <UART_SetConfig+0x120>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036f0:	2300      	movs	r3, #0
 80036f2:	4619      	mov	r1, r3
 80036f4:	f7fc fe64 	bl	80003c0 <__aeabi_uldivmod>
 80036f8:	462a      	mov	r2, r5
 80036fa:	0209      	lsls	r1, r1, #8
 80036fc:	0203      	lsls	r3, r0, #8
 80036fe:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8003702:	0868      	lsrs	r0, r5, #1
 8003704:	1818      	adds	r0, r3, r0
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	f141 0100 	adc.w	r1, r1, #0
 800370e:	f7fc fe57 	bl	80003c0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003712:	4a55      	ldr	r2, [pc, #340]	; (8003868 <UART_SetConfig+0x504>)
 8003714:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003718:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800371a:	4291      	cmp	r1, r2
 800371c:	f63f aeb2 	bhi.w	8003484 <UART_SetConfig+0x120>
 8003720:	e7ce      	b.n	80036c0 <UART_SetConfig+0x35c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003722:	4b52      	ldr	r3, [pc, #328]	; (800386c <UART_SetConfig+0x508>)
 8003724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	2b05      	cmp	r3, #5
 800372c:	f63f aeaa 	bhi.w	8003484 <UART_SetConfig+0x120>
 8003730:	4a4f      	ldr	r2, [pc, #316]	; (8003870 <UART_SetConfig+0x50c>)
 8003732:	5cd3      	ldrb	r3, [r2, r3]
 8003734:	e674      	b.n	8003420 <UART_SetConfig+0xbc>
    switch (clocksource)
 8003736:	2b40      	cmp	r3, #64	; 0x40
 8003738:	f47f aea4 	bne.w	8003484 <UART_SetConfig+0x120>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800373c:	4b49      	ldr	r3, [pc, #292]	; (8003864 <UART_SetConfig+0x500>)
 800373e:	6862      	ldr	r2, [r4, #4]
 8003740:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 8003744:	0853      	lsrs	r3, r2, #1
 8003746:	fbb0 f0f1 	udiv	r0, r0, r1
 800374a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800374e:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003752:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003756:	f1a0 0210 	sub.w	r2, r0, #16
 800375a:	429a      	cmp	r2, r3
 800375c:	f63f ae92 	bhi.w	8003484 <UART_SetConfig+0x120>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003760:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003764:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8003768:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800376a:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 800376c:	4303      	orrs	r3, r0
 800376e:	2000      	movs	r0, #0
 8003770:	60d3      	str	r3, [r2, #12]
 8003772:	e688      	b.n	8003486 <UART_SetConfig+0x122>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003774:	4b3d      	ldr	r3, [pc, #244]	; (800386c <UART_SetConfig+0x508>)
 8003776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	2b05      	cmp	r3, #5
 800377e:	f63f ae81 	bhi.w	8003484 <UART_SetConfig+0x120>
 8003782:	4a3c      	ldr	r2, [pc, #240]	; (8003874 <UART_SetConfig+0x510>)
 8003784:	5cd3      	ldrb	r3, [r2, r3]
 8003786:	e64b      	b.n	8003420 <UART_SetConfig+0xbc>
 8003788:	4b38      	ldr	r3, [pc, #224]	; (800386c <UART_SetConfig+0x508>)
 800378a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003790:	2b28      	cmp	r3, #40	; 0x28
 8003792:	f63f ae77 	bhi.w	8003484 <UART_SetConfig+0x120>
 8003796:	4a38      	ldr	r2, [pc, #224]	; (8003878 <UART_SetConfig+0x514>)
 8003798:	5cd3      	ldrb	r3, [r2, r3]
 800379a:	e641      	b.n	8003420 <UART_SetConfig+0xbc>
          pclk = (uint32_t) HSI_VALUE;
 800379c:	4837      	ldr	r0, [pc, #220]	; (800387c <UART_SetConfig+0x518>)
 800379e:	e77e      	b.n	800369e <UART_SetConfig+0x33a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037a0:	4b32      	ldr	r3, [pc, #200]	; (800386c <UART_SetConfig+0x508>)
 80037a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	2b05      	cmp	r3, #5
 80037aa:	f63f ae6b 	bhi.w	8003484 <UART_SetConfig+0x120>
 80037ae:	4a34      	ldr	r2, [pc, #208]	; (8003880 <UART_SetConfig+0x51c>)
 80037b0:	5cd3      	ldrb	r3, [r2, r3]
 80037b2:	e635      	b.n	8003420 <UART_SetConfig+0xbc>
        pclk = (uint32_t) CSI_VALUE;
 80037b4:	4833      	ldr	r0, [pc, #204]	; (8003884 <UART_SetConfig+0x520>)
 80037b6:	e772      	b.n	800369e <UART_SetConfig+0x33a>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80037b8:	f7ff f96c 	bl	8002a94 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 80037bc:	2800      	cmp	r0, #0
 80037be:	f43f af31 	beq.w	8003624 <UART_SetConfig+0x2c0>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80037c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80037c4:	e785      	b.n	80036d2 <UART_SetConfig+0x36e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037c6:	4b29      	ldr	r3, [pc, #164]	; (800386c <UART_SetConfig+0x508>)
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	0690      	lsls	r0, r2, #26
 80037cc:	d53b      	bpl.n	8003846 <UART_SetConfig+0x4e2>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	482a      	ldr	r0, [pc, #168]	; (800387c <UART_SetConfig+0x518>)
 80037d2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80037d6:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80037d8:	e77b      	b.n	80036d2 <UART_SetConfig+0x36e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80037da:	a803      	add	r0, sp, #12
 80037dc:	f7ff fa18 	bl	8002c10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80037e0:	9804      	ldr	r0, [sp, #16]
        break;
 80037e2:	e7eb      	b.n	80037bc <UART_SetConfig+0x458>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80037e4:	4668      	mov	r0, sp
 80037e6:	f7ff f967 	bl	8002ab8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80037ea:	9801      	ldr	r0, [sp, #4]
        break;
 80037ec:	e7e6      	b.n	80037bc <UART_SetConfig+0x458>
        pclk = (uint32_t) CSI_VALUE;
 80037ee:	4825      	ldr	r0, [pc, #148]	; (8003884 <UART_SetConfig+0x520>)
 80037f0:	e76f      	b.n	80036d2 <UART_SetConfig+0x36e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80037f2:	f7fe fafd 	bl	8001df0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80037f6:	2800      	cmp	r0, #0
 80037f8:	f43f af14 	beq.w	8003624 <UART_SetConfig+0x2c0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037fc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80037fe:	e79d      	b.n	800373c <UART_SetConfig+0x3d8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003800:	f7fe faae 	bl	8001d60 <HAL_RCC_GetPCLK1Freq>
        break;
 8003804:	e7f7      	b.n	80037f6 <UART_SetConfig+0x492>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003806:	4b19      	ldr	r3, [pc, #100]	; (800386c <UART_SetConfig+0x508>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	0691      	lsls	r1, r2, #26
 800380c:	d527      	bpl.n	800385e <UART_SetConfig+0x4fa>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	481a      	ldr	r0, [pc, #104]	; (800387c <UART_SetConfig+0x518>)
 8003812:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003816:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8003818:	e790      	b.n	800373c <UART_SetConfig+0x3d8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800381a:	a803      	add	r0, sp, #12
 800381c:	f7ff f9f8 	bl	8002c10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003820:	9804      	ldr	r0, [sp, #16]
        break;
 8003822:	e7e8      	b.n	80037f6 <UART_SetConfig+0x492>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003824:	4668      	mov	r0, sp
 8003826:	f7ff f947 	bl	8002ab8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800382a:	9801      	ldr	r0, [sp, #4]
        break;
 800382c:	e7e3      	b.n	80037f6 <UART_SetConfig+0x492>
        pclk = (uint32_t) CSI_VALUE;
 800382e:	4815      	ldr	r0, [pc, #84]	; (8003884 <UART_SetConfig+0x520>)
 8003830:	e784      	b.n	800373c <UART_SetConfig+0x3d8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003832:	4b0e      	ldr	r3, [pc, #56]	; (800386c <UART_SetConfig+0x508>)
 8003834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	2b05      	cmp	r3, #5
 800383c:	f63f ae22 	bhi.w	8003484 <UART_SetConfig+0x120>
 8003840:	4a11      	ldr	r2, [pc, #68]	; (8003888 <UART_SetConfig+0x524>)
 8003842:	5cd3      	ldrb	r3, [r2, r3]
 8003844:	e5ec      	b.n	8003420 <UART_SetConfig+0xbc>
          pclk = (uint32_t) HSI_VALUE;
 8003846:	480d      	ldr	r0, [pc, #52]	; (800387c <UART_SetConfig+0x518>)
 8003848:	e743      	b.n	80036d2 <UART_SetConfig+0x36e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800384a:	4b08      	ldr	r3, [pc, #32]	; (800386c <UART_SetConfig+0x508>)
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003852:	2b28      	cmp	r3, #40	; 0x28
 8003854:	f63f ae16 	bhi.w	8003484 <UART_SetConfig+0x120>
 8003858:	4a0c      	ldr	r2, [pc, #48]	; (800388c <UART_SetConfig+0x528>)
 800385a:	5cd3      	ldrb	r3, [r2, r3]
 800385c:	e5e0      	b.n	8003420 <UART_SetConfig+0xbc>
          pclk = (uint32_t) HSI_VALUE;
 800385e:	4807      	ldr	r0, [pc, #28]	; (800387c <UART_SetConfig+0x518>)
 8003860:	e76c      	b.n	800373c <UART_SetConfig+0x3d8>
 8003862:	bf00      	nop
 8003864:	0800a358 	.word	0x0800a358
 8003868:	000ffcff 	.word	0x000ffcff
 800386c:	58024400 	.word	0x58024400
 8003870:	0800a348 	.word	0x0800a348
 8003874:	0800a348 	.word	0x0800a348
 8003878:	0800a31c 	.word	0x0800a31c
 800387c:	03d09000 	.word	0x03d09000
 8003880:	0800a348 	.word	0x0800a348
 8003884:	003d0900 	.word	0x003d0900
 8003888:	0800a348 	.word	0x0800a348
 800388c:	0800a31c 	.word	0x0800a31c

08003890 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003890:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003892:	07da      	lsls	r2, r3, #31
{
 8003894:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003896:	d506      	bpl.n	80038a6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003898:	6801      	ldr	r1, [r0, #0]
 800389a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800389c:	684a      	ldr	r2, [r1, #4]
 800389e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80038a2:	4322      	orrs	r2, r4
 80038a4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038a6:	079c      	lsls	r4, r3, #30
 80038a8:	d506      	bpl.n	80038b8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038aa:	6801      	ldr	r1, [r0, #0]
 80038ac:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80038ae:	684a      	ldr	r2, [r1, #4]
 80038b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038b4:	4322      	orrs	r2, r4
 80038b6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038b8:	0759      	lsls	r1, r3, #29
 80038ba:	d506      	bpl.n	80038ca <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038bc:	6801      	ldr	r1, [r0, #0]
 80038be:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80038c0:	684a      	ldr	r2, [r1, #4]
 80038c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038c6:	4322      	orrs	r2, r4
 80038c8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038ca:	071a      	lsls	r2, r3, #28
 80038cc:	d506      	bpl.n	80038dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038ce:	6801      	ldr	r1, [r0, #0]
 80038d0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80038d2:	684a      	ldr	r2, [r1, #4]
 80038d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038d8:	4322      	orrs	r2, r4
 80038da:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038dc:	06dc      	lsls	r4, r3, #27
 80038de:	d506      	bpl.n	80038ee <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038e0:	6801      	ldr	r1, [r0, #0]
 80038e2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80038e4:	688a      	ldr	r2, [r1, #8]
 80038e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038ea:	4322      	orrs	r2, r4
 80038ec:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038ee:	0699      	lsls	r1, r3, #26
 80038f0:	d506      	bpl.n	8003900 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038f2:	6801      	ldr	r1, [r0, #0]
 80038f4:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80038f6:	688a      	ldr	r2, [r1, #8]
 80038f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038fc:	4322      	orrs	r2, r4
 80038fe:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003900:	065a      	lsls	r2, r3, #25
 8003902:	d50a      	bpl.n	800391a <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003904:	6801      	ldr	r1, [r0, #0]
 8003906:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003908:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800390a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800390e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003912:	ea42 0204 	orr.w	r2, r2, r4
 8003916:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003918:	d00b      	beq.n	8003932 <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800391a:	061b      	lsls	r3, r3, #24
 800391c:	d506      	bpl.n	800392c <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800391e:	6802      	ldr	r2, [r0, #0]
 8003920:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003922:	6853      	ldr	r3, [r2, #4]
 8003924:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003928:	430b      	orrs	r3, r1
 800392a:	6053      	str	r3, [r2, #4]
  }
}
 800392c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003930:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003932:	684a      	ldr	r2, [r1, #4]
 8003934:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8003936:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800393a:	4322      	orrs	r2, r4
 800393c:	604a      	str	r2, [r1, #4]
 800393e:	e7ec      	b.n	800391a <UART_AdvFeatureConfig+0x8a>

08003940 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003944:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003948:	4607      	mov	r7, r0
 800394a:	460e      	mov	r6, r1
 800394c:	4615      	mov	r5, r2
 800394e:	4699      	mov	r9, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003950:	6804      	ldr	r4, [r0, #0]
 8003952:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8003956:	d10a      	bne.n	800396e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003958:	69e3      	ldr	r3, [r4, #28]
 800395a:	ea36 0303 	bics.w	r3, r6, r3
 800395e:	bf0c      	ite	eq
 8003960:	2301      	moveq	r3, #1
 8003962:	2300      	movne	r3, #0
 8003964:	429d      	cmp	r5, r3
 8003966:	d0f7      	beq.n	8003958 <UART_WaitOnFlagUntilTimeout+0x18>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8003968:	2000      	movs	r0, #0
}
 800396a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800396e:	69e3      	ldr	r3, [r4, #28]
 8003970:	ea36 0303 	bics.w	r3, r6, r3
 8003974:	bf0c      	ite	eq
 8003976:	2301      	moveq	r3, #1
 8003978:	2300      	movne	r3, #0
 800397a:	42ab      	cmp	r3, r5
 800397c:	d1f4      	bne.n	8003968 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800397e:	f7fd faa7 	bl	8000ed0 <HAL_GetTick>
 8003982:	eba0 0009 	sub.w	r0, r0, r9
 8003986:	4540      	cmp	r0, r8
 8003988:	d833      	bhi.n	80039f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800398a:	f1b8 0f00 	cmp.w	r8, #0
 800398e:	d030      	beq.n	80039f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003990:	683c      	ldr	r4, [r7, #0]
 8003992:	6823      	ldr	r3, [r4, #0]
 8003994:	4622      	mov	r2, r4
 8003996:	0759      	lsls	r1, r3, #29
 8003998:	d5db      	bpl.n	8003952 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800399a:	69e3      	ldr	r3, [r4, #28]
 800399c:	051b      	lsls	r3, r3, #20
 800399e:	d5d8      	bpl.n	8003952 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039a4:	6223      	str	r3, [r4, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a6:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80039aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ae:	e844 3100 	strex	r1, r3, [r4]
 80039b2:	b139      	cbz	r1, 80039c4 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b4:	e852 3f00 	ldrex	r3, [r2]
 80039b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039bc:	e842 3100 	strex	r1, r3, [r2]
 80039c0:	2900      	cmp	r1, #0
 80039c2:	d1f7      	bne.n	80039b4 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c4:	f102 0308 	add.w	r3, r2, #8
 80039c8:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039cc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d0:	f102 0008 	add.w	r0, r2, #8
 80039d4:	e840 3100 	strex	r1, r3, [r0]
 80039d8:	2900      	cmp	r1, #0
 80039da:	d1f3      	bne.n	80039c4 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 80039dc:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 80039de:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80039e0:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 80039e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80039e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 80039f0:	e7bb      	b.n	800396a <UART_WaitOnFlagUntilTimeout+0x2a>
 80039f2:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f4:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80039f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fc:	e842 3100 	strex	r1, r3, [r2]
 8003a00:	2900      	cmp	r1, #0
 8003a02:	d1f7      	bne.n	80039f4 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a04:	f102 0308 	add.w	r3, r2, #8
 8003a08:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a0c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a10:	f102 0008 	add.w	r0, r2, #8
 8003a14:	e840 3100 	strex	r1, r3, [r0]
 8003a18:	2900      	cmp	r1, #0
 8003a1a:	d1f3      	bne.n	8003a04 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 8003a1c:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8003a1e:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8003a20:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8003a24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003a28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 8003a2c:	e79d      	b.n	800396a <UART_WaitOnFlagUntilTimeout+0x2a>
 8003a2e:	bf00      	nop

08003a30 <HAL_UART_Transmit>:
{
 8003a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a34:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003a36:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8003a3a:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	f040 8095 	bne.w	8003b6c <HAL_UART_Transmit+0x13c>
    if ((pData == NULL) || (Size == 0U))
 8003a42:	4689      	mov	r9, r1
 8003a44:	2900      	cmp	r1, #0
 8003a46:	d04c      	beq.n	8003ae2 <HAL_UART_Transmit+0xb2>
 8003a48:	fab2 f782 	clz	r7, r2
 8003a4c:	4614      	mov	r4, r2
 8003a4e:	097f      	lsrs	r7, r7, #5
 8003a50:	2a00      	cmp	r2, #0
 8003a52:	d046      	beq.n	8003ae2 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8003a54:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8003a58:	4605      	mov	r5, r0
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	f000 8086 	beq.w	8003b6c <HAL_UART_Transmit+0x13c>
 8003a60:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a62:	f8c0 708c 	str.w	r7, [r0, #140]	; 0x8c
    __HAL_LOCK(huart);
 8003a66:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a6a:	2321      	movs	r3, #33	; 0x21
 8003a6c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 8003a70:	f7fd fa2e 	bl	8000ed0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a74:	68ab      	ldr	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8003a76:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 8003a78:	f8a5 4054 	strh.w	r4, [r5, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8003a80:	f8a5 4056 	strh.w	r4, [r5, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a84:	f000 8096 	beq.w	8003bb4 <HAL_UART_Transmit+0x184>
    while (huart->TxXferCount > 0U)
 8003a88:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    __HAL_UNLOCK(huart);
 8003a8c:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8003a8e:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8003a90:	f885 2080 	strb.w	r2, [r5, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8003a94:	b1b3      	cbz	r3, 8003ac4 <HAL_UART_Transmit+0x94>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a96:	682c      	ldr	r4, [r5, #0]
 8003a98:	1c71      	adds	r1, r6, #1
 8003a9a:	d126      	bne.n	8003aea <HAL_UART_Transmit+0xba>
 8003a9c:	69e2      	ldr	r2, [r4, #28]
 8003a9e:	0612      	lsls	r2, r2, #24
 8003aa0:	d5fc      	bpl.n	8003a9c <HAL_UART_Transmit+0x6c>
      if (pdata8bits == NULL)
 8003aa2:	f1b9 0f00 	cmp.w	r9, #0
 8003aa6:	d05c      	beq.n	8003b62 <HAL_UART_Transmit+0x132>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aa8:	f819 3b01 	ldrb.w	r3, [r9], #1
 8003aac:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 8003aae:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003aba:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1e9      	bne.n	8003a98 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ac4:	4643      	mov	r3, r8
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	2140      	movs	r1, #64	; 0x40
 8003aca:	4628      	mov	r0, r5
 8003acc:	9600      	str	r6, [sp, #0]
 8003ace:	f7ff ff37 	bl	8003940 <UART_WaitOnFlagUntilTimeout>
 8003ad2:	2800      	cmp	r0, #0
 8003ad4:	d175      	bne.n	8003bc2 <HAL_UART_Transmit+0x192>
    huart->gState = HAL_UART_STATE_READY;
 8003ad6:	2320      	movs	r3, #32
 8003ad8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 8003adc:	b003      	add	sp, #12
 8003ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8003ae2:	2001      	movs	r0, #1
}
 8003ae4:	b003      	add	sp, #12
 8003ae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aea:	69e3      	ldr	r3, [r4, #28]
 8003aec:	061b      	lsls	r3, r3, #24
 8003aee:	d4d8      	bmi.n	8003aa2 <HAL_UART_Transmit+0x72>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af0:	f7fd f9ee 	bl	8000ed0 <HAL_GetTick>
 8003af4:	eba0 0008 	sub.w	r0, r0, r8
 8003af8:	4286      	cmp	r6, r0
 8003afa:	d33b      	bcc.n	8003b74 <HAL_UART_Transmit+0x144>
 8003afc:	2e00      	cmp	r6, #0
 8003afe:	d039      	beq.n	8003b74 <HAL_UART_Transmit+0x144>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b00:	682c      	ldr	r4, [r5, #0]
 8003b02:	6822      	ldr	r2, [r4, #0]
 8003b04:	4623      	mov	r3, r4
 8003b06:	0752      	lsls	r2, r2, #29
 8003b08:	d5c6      	bpl.n	8003a98 <HAL_UART_Transmit+0x68>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b0a:	69e2      	ldr	r2, [r4, #28]
 8003b0c:	0510      	lsls	r0, r2, #20
 8003b0e:	d5c3      	bpl.n	8003a98 <HAL_UART_Transmit+0x68>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b14:	6222      	str	r2, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b16:	e854 2f00 	ldrex	r2, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b1a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1e:	e844 2100 	strex	r1, r2, [r4]
 8003b22:	b139      	cbz	r1, 8003b34 <HAL_UART_Transmit+0x104>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b24:	e853 2f00 	ldrex	r2, [r3]
 8003b28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2c:	e843 2100 	strex	r1, r2, [r3]
 8003b30:	2900      	cmp	r1, #0
 8003b32:	d1f7      	bne.n	8003b24 <HAL_UART_Transmit+0xf4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b34:	f103 0208 	add.w	r2, r3, #8
 8003b38:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b3c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b40:	f103 0008 	add.w	r0, r3, #8
 8003b44:	e840 2100 	strex	r1, r2, [r0]
 8003b48:	2900      	cmp	r1, #0
 8003b4a:	d1f3      	bne.n	8003b34 <HAL_UART_Transmit+0x104>
          huart->gState = HAL_UART_STATE_READY;
 8003b4c:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8003b4e:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8003b50:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 8003b54:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003b58:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b5c:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          return HAL_TIMEOUT;
 8003b60:	e7c0      	b.n	8003ae4 <HAL_UART_Transmit+0xb4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b62:	f837 3b02 	ldrh.w	r3, [r7], #2
 8003b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b6a:	e79f      	b.n	8003aac <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 8003b6c:	2002      	movs	r0, #2
}
 8003b6e:	b003      	add	sp, #12
 8003b70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b74:	682b      	ldr	r3, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b76:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b7a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7e:	e843 2100 	strex	r1, r2, [r3]
 8003b82:	2900      	cmp	r1, #0
 8003b84:	d1f7      	bne.n	8003b76 <HAL_UART_Transmit+0x146>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b86:	f103 0208 	add.w	r2, r3, #8
 8003b8a:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b8e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b92:	f103 0008 	add.w	r0, r3, #8
 8003b96:	e840 2100 	strex	r1, r2, [r0]
 8003b9a:	2900      	cmp	r1, #0
 8003b9c:	d1f3      	bne.n	8003b86 <HAL_UART_Transmit+0x156>
        huart->gState = HAL_UART_STATE_READY;
 8003b9e:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8003ba0:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8003ba2:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8003ba6:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003baa:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 8003bae:	b003      	add	sp, #12
 8003bb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bb4:	692b      	ldr	r3, [r5, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f47f af66 	bne.w	8003a88 <HAL_UART_Transmit+0x58>
 8003bbc:	464f      	mov	r7, r9
      pdata8bits  = NULL;
 8003bbe:	4699      	mov	r9, r3
 8003bc0:	e762      	b.n	8003a88 <HAL_UART_Transmit+0x58>
      return HAL_TIMEOUT;
 8003bc2:	2003      	movs	r0, #3
 8003bc4:	e78e      	b.n	8003ae4 <HAL_UART_Transmit+0xb4>
 8003bc6:	bf00      	nop

08003bc8 <HAL_UART_Init>:
  if (huart == NULL)
 8003bc8:	2800      	cmp	r0, #0
 8003bca:	d066      	beq.n	8003c9a <HAL_UART_Init+0xd2>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003bcc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8003bd0:	b570      	push	{r4, r5, r6, lr}
 8003bd2:	4604      	mov	r4, r0
 8003bd4:	b082      	sub	sp, #8
  if (huart->gState == HAL_UART_STATE_RESET)
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d04c      	beq.n	8003c74 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 8003bda:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003bdc:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bde:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8003be0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8003be4:	6813      	ldr	r3, [r2, #0]
 8003be6:	f023 0301 	bic.w	r3, r3, #1
 8003bea:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bec:	f7ff fbba 	bl	8003364 <UART_SetConfig>
 8003bf0:	2801      	cmp	r0, #1
 8003bf2:	d03c      	beq.n	8003c6e <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bf4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d135      	bne.n	8003c66 <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bfa:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bfc:	2500      	movs	r5, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bfe:	6859      	ldr	r1, [r3, #4]
 8003c00:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 8003c04:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c06:	6899      	ldr	r1, [r3, #8]
 8003c08:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 8003c0c:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003c0e:	6819      	ldr	r1, [r3, #0]
 8003c10:	f041 0101 	orr.w	r1, r1, #1
 8003c14:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c16:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8003c1a:	f7fd f959 	bl	8000ed0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c1e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003c20:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	0712      	lsls	r2, r2, #28
 8003c26:	d40e      	bmi.n	8003c46 <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	075b      	lsls	r3, r3, #29
 8003c2c:	d427      	bmi.n	8003c7e <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c2e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8003c30:	2220      	movs	r2, #32
  return HAL_OK;
 8003c32:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8003c34:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8003c38:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8003c3c:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c40:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8003c42:	b002      	add	sp, #8
 8003c44:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c46:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	462a      	mov	r2, r5
 8003c4e:	4620      	mov	r0, r4
 8003c50:	9100      	str	r1, [sp, #0]
 8003c52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c56:	f7ff fe73 	bl	8003940 <UART_WaitOnFlagUntilTimeout>
 8003c5a:	b9e0      	cbnz	r0, 8003c96 <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c5c:	6823      	ldr	r3, [r4, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	075b      	lsls	r3, r3, #29
 8003c62:	d40c      	bmi.n	8003c7e <HAL_UART_Init+0xb6>
 8003c64:	e7e3      	b.n	8003c2e <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 8003c66:	4620      	mov	r0, r4
 8003c68:	f7ff fe12 	bl	8003890 <UART_AdvFeatureConfig>
 8003c6c:	e7c5      	b.n	8003bfa <HAL_UART_Init+0x32>
    return HAL_ERROR;
 8003c6e:	2001      	movs	r0, #1
}
 8003c70:	b002      	add	sp, #8
 8003c72:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8003c74:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8003c78:	f7fc ff82 	bl	8000b80 <HAL_UART_MspInit>
 8003c7c:	e7ad      	b.n	8003bda <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c7e:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 8003c82:	4633      	mov	r3, r6
 8003c84:	2200      	movs	r2, #0
 8003c86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c8a:	9000      	str	r0, [sp, #0]
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	f7ff fe57 	bl	8003940 <UART_WaitOnFlagUntilTimeout>
 8003c92:	2800      	cmp	r0, #0
 8003c94:	d0cb      	beq.n	8003c2e <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 8003c96:	2003      	movs	r0, #3
 8003c98:	e7d3      	b.n	8003c42 <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 8003c9a:	2001      	movs	r0, #1
}
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop

08003ca0 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ca0:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8003ca4:	2a01      	cmp	r2, #1
 8003ca6:	d017      	beq.n	8003cd8 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ca8:	6802      	ldr	r2, [r0, #0]
 8003caa:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8003cac:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003cae:	2100      	movs	r1, #0
{
 8003cb0:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 8003cb2:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8003cb6:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cb8:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003cba:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003cbc:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8003cc0:	f024 0401 	bic.w	r4, r4, #1
 8003cc4:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003cc6:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cc8:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8003cca:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8003ccc:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8003cd0:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 8003cd4:	bc30      	pop	{r4, r5}
 8003cd6:	4770      	bx	lr
  __HAL_LOCK(huart);
 8003cd8:	2002      	movs	r0, #2
}
 8003cda:	4770      	bx	lr

08003cdc <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cdc:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8003ce0:	2a01      	cmp	r2, #1
 8003ce2:	d037      	beq.n	8003d54 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ce4:	6802      	ldr	r2, [r0, #0]
 8003ce6:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8003ce8:	2024      	movs	r0, #36	; 0x24
{
 8003cea:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8003cec:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cf0:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003cf2:	6810      	ldr	r0, [r2, #0]
 8003cf4:	f020 0001 	bic.w	r0, r0, #1
 8003cf8:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003cfa:	6890      	ldr	r0, [r2, #8]
 8003cfc:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8003d00:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d02:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003d04:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d06:	b310      	cbz	r0, 8003d4e <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003d08:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d0a:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d0c:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d10:	4911      	ldr	r1, [pc, #68]	; (8003d58 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d12:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d16:	4d11      	ldr	r5, [pc, #68]	; (8003d5c <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d18:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d1c:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d20:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d24:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8003d26:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d2a:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d2c:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d30:	fbb1 f1f5 	udiv	r1, r1, r5
 8003d34:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 8003d38:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d40:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8003d42:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8003d44:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8003d48:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 8003d4c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8003d4e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8003d50:	4608      	mov	r0, r1
 8003d52:	e7ef      	b.n	8003d34 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8003d54:	2002      	movs	r0, #2
}
 8003d56:	4770      	bx	lr
 8003d58:	0800a378 	.word	0x0800a378
 8003d5c:	0800a370 	.word	0x0800a370

08003d60 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8003d60:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8003d64:	2a01      	cmp	r2, #1
 8003d66:	d037      	beq.n	8003dd8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d68:	6802      	ldr	r2, [r0, #0]
 8003d6a:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8003d6c:	2024      	movs	r0, #36	; 0x24
{
 8003d6e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8003d70:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d74:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003d76:	6810      	ldr	r0, [r2, #0]
 8003d78:	f020 0001 	bic.w	r0, r0, #1
 8003d7c:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003d7e:	6890      	ldr	r0, [r2, #8]
 8003d80:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8003d84:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d86:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003d88:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d8a:	b310      	cbz	r0, 8003dd2 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003d8c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d8e:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d90:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d94:	4911      	ldr	r1, [pc, #68]	; (8003ddc <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d96:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d9a:	4d11      	ldr	r5, [pc, #68]	; (8003de0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d9c:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003da0:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8003da4:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003da8:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8003daa:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003dae:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003db0:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003db4:	fbb1 f1f5 	udiv	r1, r1, r5
 8003db8:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 8003dbc:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dc4:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8003dc6:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8003dc8:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8003dcc:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 8003dd0:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8003dd2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8003dd4:	4608      	mov	r0, r1
 8003dd6:	e7ef      	b.n	8003db8 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8003dd8:	2002      	movs	r0, #2
}
 8003dda:	4770      	bx	lr
 8003ddc:	0800a378 	.word	0x0800a378
 8003de0:	0800a370 	.word	0x0800a370

08003de4 <OpenNNA_Malloc>:
 * size: 要申请的内存长度
 * return: 内存地址
 */
void * OpenNNA_Malloc(unsigned long size)
{
    OpenNNA_Heap_Sum +=size;
 8003de4:	4a02      	ldr	r2, [pc, #8]	; (8003df0 <OpenNNA_Malloc+0xc>)
 8003de6:	6813      	ldr	r3, [r2, #0]
 8003de8:	4403      	add	r3, r0
 8003dea:	6013      	str	r3, [r2, #0]
#if(HEAP_MANAGER==0)
    return (void *)malloc(size);
#elif(HEAP_MANAGER==1)
    return (void *)pvPortMalloc(size);
 8003dec:	f003 b91c 	b.w	8007028 <pvPortMalloc>
 8003df0:	24050c10 	.word	0x24050c10

08003df4 <OpenNNA_CreateNetwork>:
    OpenNNA_Heap_Sum +=size;
 8003df4:	4a0a      	ldr	r2, [pc, #40]	; (8003e20 <OpenNNA_CreateNetwork+0x2c>)
    return (void *)pvPortMalloc(size);
 8003df6:	2030      	movs	r0, #48	; 0x30
    OpenNNA_Heap_Sum +=size;
 8003df8:	6813      	ldr	r3, [r2, #0]
 8003dfa:	4403      	add	r3, r0

/* Function :OpenNNA_CreateNetwork :创建一个神经网络对象
 * return: 神经网络对象
*/
struct layer * OpenNNA_CreateNetwork(void)
{
 8003dfc:	b510      	push	{r4, lr}
    OpenNNA_Heap_Sum +=size;
 8003dfe:	6013      	str	r3, [r2, #0]
    return (void *)pvPortMalloc(size);
 8003e00:	f003 f912 	bl	8007028 <pvPortMalloc>
    struct layer * Network = NULL;
    Network = OpenNNA_Malloc(sizeof(layers));//为神经网络对象申请堆内存
    Network->layer_next = NULL;
    Network->layer_prev = NULL;
    Network->Layer_Index = 0;
    Network->Layer_Name = LIB_NAME;
 8003e04:	4c07      	ldr	r4, [pc, #28]	; (8003e24 <OpenNNA_CreateNetwork+0x30>)
    Network->layer_next = NULL;
 8003e06:	2200      	movs	r2, #0
    Network->Layer_Name_Alias = Author;
 8003e08:	4907      	ldr	r1, [pc, #28]	; (8003e28 <OpenNNA_CreateNetwork+0x34>)
    Network->layer_next = NULL;
 8003e0a:	62c2      	str	r2, [r0, #44]	; 0x2c
    Network->Layer_Index = 0;
 8003e0c:	e9c0 2200 	strd	r2, r2, [r0]
    Network->Layer_Name_Alias = Author;
 8003e10:	e9c0 4102 	strd	r4, r1, [r0, #8]
    Network->Layer_Para_Base = NULL;
    Network->Layer_Para_Extra = NULL;
 8003e14:	e9c0 2204 	strd	r2, r2, [r0, #16]
    Network->Input_Feature_Map=NULL;
    Network->Output_Feature_Map=NULL;
 8003e18:	e9c0 2206 	strd	r2, r2, [r0, #24]
#if(DEBUG==1)
    OpenNNA_Logo();
#endif
    return Network;
}
 8003e1c:	bd10      	pop	{r4, pc}
 8003e1e:	bf00      	nop
 8003e20:	24050c10 	.word	0x24050c10
 8003e24:	0800a380 	.word	0x0800a380
 8003e28:	0800a3ac 	.word	0x0800a3ac

08003e2c <OpenNNA_Add_Layer>:
                            const void *Layer_Para_Base, \
                            const void *Layer_Para_Extra, \
                            const void *Weights, \
                            const void *Bias \
                            )
{
 8003e2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned int layer_index = 0;
    struct layer * layer_prev = NULL;
    if(NULL != Network) {
 8003e30:	4604      	mov	r4, r0
 8003e32:	2800      	cmp	r0, #0
 8003e34:	d03b      	beq.n	8003eae <OpenNNA_Add_Layer+0x82>
        while(NULL != Network->layer_next)
 8003e36:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8003e38:	460e      	mov	r6, r1
 8003e3a:	4693      	mov	fp, r2
 8003e3c:	469a      	mov	sl, r3
 8003e3e:	2d00      	cmp	r5, #0
 8003e40:	d037      	beq.n	8003eb2 <OpenNNA_Add_Layer+0x86>
        {
            Network = Network->layer_next;
            layer_index = Network->Layer_Index;
 8003e42:	6869      	ldr	r1, [r5, #4]
        while(NULL != Network->layer_next)
 8003e44:	462c      	mov	r4, r5
 8003e46:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 8003e48:	2d00      	cmp	r5, #0
 8003e4a:	d1fa      	bne.n	8003e42 <OpenNNA_Add_Layer+0x16>
            {
                Network->pfunc_Operator = operators[i].pfunc_Operator;//算子函数指针填入
                break;
            }
        }
        if(NULL == Network->pfunc_Operator && 0 != Network->Layer_Index)//未找到算子报错，index=0时忽略
 8003e4c:	f111 0901 	adds.w	r9, r1, #1
 8003e50:	bf14      	ite	ne
 8003e52:	2701      	movne	r7, #1
 8003e54:	2700      	moveq	r7, #0
    OpenNNA_Heap_Sum +=size;
 8003e56:	4a1a      	ldr	r2, [pc, #104]	; (8003ec0 <OpenNNA_Add_Layer+0x94>)
    return (void *)pvPortMalloc(size);
 8003e58:	2030      	movs	r0, #48	; 0x30
 8003e5a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8003ec4 <OpenNNA_Add_Layer+0x98>
    OpenNNA_Heap_Sum +=size;
 8003e5e:	6813      	ldr	r3, [r2, #0]
 8003e60:	4403      	add	r3, r0
 8003e62:	6013      	str	r3, [r2, #0]
    return (void *)pvPortMalloc(size);
 8003e64:	f003 f8e0 	bl	8007028 <pvPortMalloc>
        Network->Layer_Para_Extra = Layer_Para_Extra;
 8003e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    return (void *)pvPortMalloc(size);
 8003e6a:	4605      	mov	r5, r0
        Network->layer_next = OpenNNA_Malloc(sizeof(layers));//新建一个Layer
 8003e6c:	62e0      	str	r0, [r4, #44]	; 0x2c
        Network->Layer_Para_Extra = Layer_Para_Extra;
 8003e6e:	6143      	str	r3, [r0, #20]
        Network->layer_next = NULL;
 8003e70:	2300      	movs	r3, #0
        Network->Layer_Para_Base = Layer_Para_Base;
 8003e72:	f8c0 a010 	str.w	sl, [r0, #16]
        Network->Layer_Index = layer_index + 1;
 8003e76:	e9c0 4900 	strd	r4, r9, [r0]
        Network->Layer_Name = Layer_Name;
 8003e7a:	e9c0 6b02 	strd	r6, fp, [r0, #8]
        for (int i = 0; i < sizeof(operators); ++i) {
 8003e7e:	461c      	mov	r4, r3
        Network->pfunc_Operator = NULL;
 8003e80:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
        Network->Output_Feature_Map = NULL;
 8003e84:	e9c0 3306 	strd	r3, r3, [r0, #24]
        for (int i = 0; i < sizeof(operators); ++i) {
 8003e88:	e000      	b.n	8003e8c <OpenNNA_Add_Layer+0x60>
 8003e8a:	3401      	adds	r4, #1
            if (!strcmp(Layer_Name, operators[i].Operator_Name))//0找到
 8003e8c:	f858 1034 	ldr.w	r1, [r8, r4, lsl #3]
 8003e90:	4630      	mov	r0, r6
 8003e92:	f7fc fa2d 	bl	80002f0 <strcmp>
 8003e96:	2800      	cmp	r0, #0
 8003e98:	d1f7      	bne.n	8003e8a <OpenNNA_Add_Layer+0x5e>
                Network->pfunc_Operator = operators[i].pfunc_Operator;//算子函数指针填入
 8003e9a:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 8003e9e:	6863      	ldr	r3, [r4, #4]
 8003ea0:	62ab      	str	r3, [r5, #40]	; 0x28
        if(NULL == Network->pfunc_Operator && 0 != Network->Layer_Index)//未找到算子报错，index=0时忽略
 8003ea2:	b903      	cbnz	r3, 8003ea6 <OpenNNA_Add_Layer+0x7a>
 8003ea4:	b947      	cbnz	r7, 8003eb8 <OpenNNA_Add_Layer+0x8c>
            sprintf(mesg, "Layer %d Operator:%s NOT FOUND IN LIB!!!\n", Network->Layer_Index, Layer_Name);
            OpenNNA_Printf(mesg);
#endif
            return -1;
        }
        Network->Weights = Weights;
 8003ea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ea8:	622b      	str	r3, [r5, #32]
        Network->Bias =Bias;
 8003eaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003eac:	626b      	str	r3, [r5, #36]	; 0x24
    }
    return 0;
}
 8003eae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while(NULL != Network->layer_next)
 8003eb2:	2701      	movs	r7, #1
 8003eb4:	46b9      	mov	r9, r7
 8003eb6:	e7ce      	b.n	8003e56 <OpenNNA_Add_Layer+0x2a>
            return -1;
 8003eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ebc:	e7f7      	b.n	8003eae <OpenNNA_Add_Layer+0x82>
 8003ebe:	bf00      	nop
 8003ec0:	24050c10 	.word	0x24050c10
 8003ec4:	24000010 	.word	0x24000010

08003ec8 <OpenNNA_Init>:
 * 这个函数主要做以下几件事情:
 * 1.以网络为粒度，为每一层分配输入/输出堆内存
 * 2.将最后一层和第0层(Host节点)连接，构成循环链表。方便推理函数遍历干活
*/
void OpenNNA_Init(struct layer * Network)
{
 8003ec8:	b570      	push	{r4, r5, r6, lr}
#if(DYNAMIC_FMAP_HEAP == 1)//动态特征图堆内存(管理粒度:层)
    struct layer * Host = Network;//第0层
    struct layer * Last_Layer = NULL;//最后一层
    Network = Network->layer_next;//跳转到第一层
 8003eca:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
{
 8003ecc:	4605      	mov	r5, r0
    OpenNNA_Heap_Sum +=size;
 8003ece:	4e14      	ldr	r6, [pc, #80]	; (8003f20 <OpenNNA_Init+0x58>)
    //提示动态堆内存分配已开启
#if(DEBUG==1)
    OpenNNA_Printf("Dynamic Fmap Heap Enable!\n");
#endif
    Network->Input_Feature_Map= OpenNNA_Malloc(sizeof(data_t)*\
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Channel*\
 8003ed0:	6922      	ldr	r2, [r4, #16]
 8003ed2:	e9d2 3100 	ldrd	r3, r1, [r2]
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Row*\
 8003ed6:	6890      	ldr	r0, [r2, #8]
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Channel*\
 8003ed8:	fb01 f303 	mul.w	r3, r1, r3
    OpenNNA_Heap_Sum +=size;
 8003edc:	6832      	ldr	r2, [r6, #0]
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Row*\
 8003ede:	fb03 f000 	mul.w	r0, r3, r0
    OpenNNA_Heap_Sum +=size;
 8003ee2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    return (void *)pvPortMalloc(size);
 8003ee6:	0080      	lsls	r0, r0, #2
    OpenNNA_Heap_Sum +=size;
 8003ee8:	6032      	str	r2, [r6, #0]
    return (void *)pvPortMalloc(size);
 8003eea:	f003 f89d 	bl	8007028 <pvPortMalloc>
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Col\
    );
    //分配输出特征图的堆内存
    Network->Output_Feature_Map= OpenNNA_Malloc(sizeof(data_t)*\
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Channel*\
 8003eee:	6922      	ldr	r2, [r4, #16]
    Network->Input_Feature_Map= OpenNNA_Malloc(sizeof(data_t)*\
 8003ef0:	61a0      	str	r0, [r4, #24]
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Channel*\
 8003ef2:	e9d2 3003 	ldrd	r3, r0, [r2, #12]
 8003ef6:	fb00 f303 	mul.w	r3, r0, r3
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Row*\
 8003efa:	6950      	ldr	r0, [r2, #20]
    OpenNNA_Heap_Sum +=size;
 8003efc:	6832      	ldr	r2, [r6, #0]
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Row*\
 8003efe:	fb03 f000 	mul.w	r0, r3, r0
    OpenNNA_Heap_Sum +=size;
 8003f02:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    return (void *)pvPortMalloc(size);
 8003f06:	0080      	lsls	r0, r0, #2
    OpenNNA_Heap_Sum +=size;
 8003f08:	6032      	str	r2, [r6, #0]
    return (void *)pvPortMalloc(size);
 8003f0a:	f003 f88d 	bl	8007028 <pvPortMalloc>
    Network->Output_Feature_Map= OpenNNA_Malloc(sizeof(data_t)*\
 8003f0e:	61e0      	str	r0, [r4, #28]
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Col\
    );
    while(NULL != Network->layer_next)//遍历到最后一层
 8003f10:	4623      	mov	r3, r4
 8003f12:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8003f14:	2c00      	cmp	r4, #0
 8003f16:	d1fb      	bne.n	8003f10 <OpenNNA_Init+0x48>
    {
        Network = Network->layer_next;
    }
    //将最后一层和第0层(Host节点)连接，构成循环链表。方便推理函数遍历干活
    Network->layer_next = Host;
 8003f18:	62dd      	str	r5, [r3, #44]	; 0x2c
    //将第0层的prev和最后一层连接，构成双向循环链表
    Last_Layer = Network;
    Network = Network->layer_next;//跳转到第0层
    Network->layer_prev= Last_Layer;//第0层prev连接最后一层
 8003f1a:	602b      	str	r3, [r5, #0]
    Network->layer_prev= Last_Layer;//第0层prev连接最后一层
#if(DEBUG==1)
    OpenNNA_Printf("Init OK!\n");
#endif
#endif
}
 8003f1c:	bd70      	pop	{r4, r5, r6, pc}
 8003f1e:	bf00      	nop
 8003f20:	24050c10 	.word	0x24050c10

08003f24 <OpenNNA_Predict>:
#endif
/* Function :OpenNNA_Init :神经网络推理
 * struct layer * Network: 网络对象
*/
void OpenNNA_Predict(struct layer * Network, const void *Network_Input, void *Network_Output)
{
 8003f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (DYNAMIC_FMAP_HEAP==1)
    //跳转到第一层
    Network = Network->layer_next;
 8003f26:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
{
 8003f28:	4617      	mov	r7, r2
 8003f2a:	4d35      	ldr	r5, [pc, #212]	; (8004000 <OpenNNA_Predict+0xdc>)
    //将用户传入的神经网络输入copy到第一层的堆内存上
    memcpy(Network->Input_Feature_Map,Network_Input,\
    sizeof(data_t)*\
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Col\
 8003f2c:	6923      	ldr	r3, [r4, #16]
    *\
 8003f2e:	e9d3 0201 	ldrd	r0, r2, [r3, #4]
    memcpy(Network->Input_Feature_Map,Network_Input,\
 8003f32:	681b      	ldr	r3, [r3, #0]
    *\
 8003f34:	fb00 f202 	mul.w	r2, r0, r2
    memcpy(Network->Input_Feature_Map,Network_Input,\
 8003f38:	69a0      	ldr	r0, [r4, #24]
 8003f3a:	fb03 f202 	mul.w	r2, r3, r2
 8003f3e:	0092      	lsls	r2, r2, #2
 8003f40:	f003 f9ba 	bl	80072b8 <memcpy>
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Row\
    *\
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Channel\
    );
    //手动计算第一层结果
    Network->pfunc_Operator(Network);//将本层参数传入算子进行计算
 8003f44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003f46:	4620      	mov	r0, r4
 8003f48:	4798      	blx	r3
    //第一层计算完成，跳转到第二层
    Network = Network->layer_next;
 8003f4a:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
    //遍历每一层计算一次(从第二层开始)
    while(0!=Network->Layer_Index)
 8003f4c:	6863      	ldr	r3, [r4, #4]
 8003f4e:	b303      	cbz	r3, 8003f92 <OpenNNA_Predict+0x6e>
    {
        //Free上一层的输入
        OpenNNA_Free(Network->layer_prev->Input_Feature_Map);
        Network->layer_prev->Input_Feature_Map = NULL;
 8003f50:	2600      	movs	r6, #0
        OpenNNA_Free(Network->layer_prev->Input_Feature_Map);
 8003f52:	6823      	ldr	r3, [r4, #0]
    vPortFree(address);
 8003f54:	6998      	ldr	r0, [r3, #24]
 8003f56:	f003 f923 	bl	80071a0 <vPortFree>
        //将上一层的输出绑定到本层的输入
        Network->Input_Feature_Map=Network->layer_prev->Output_Feature_Map;
        //为本层输出特征图Malloc堆内存
        Network->Output_Feature_Map= OpenNNA_Malloc(sizeof(data_t)*\
        ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Channel*\
 8003f5a:	6922      	ldr	r2, [r4, #16]
        Network->layer_prev->Input_Feature_Map = NULL;
 8003f5c:	6821      	ldr	r1, [r4, #0]
        ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Channel*\
 8003f5e:	e9d2 0e03 	ldrd	r0, lr, [r2, #12]
        Network->Input_Feature_Map=Network->layer_prev->Output_Feature_Map;
 8003f62:	69cb      	ldr	r3, [r1, #28]
        ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Row*\
 8003f64:	6952      	ldr	r2, [r2, #20]
        ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Channel*\
 8003f66:	fb0e f000 	mul.w	r0, lr, r0
        Network->layer_prev->Input_Feature_Map = NULL;
 8003f6a:	618e      	str	r6, [r1, #24]
        ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Row*\
 8003f6c:	fb02 f000 	mul.w	r0, r2, r0
        Network->Input_Feature_Map=Network->layer_prev->Output_Feature_Map;
 8003f70:	61a3      	str	r3, [r4, #24]
    OpenNNA_Heap_Sum +=size;
 8003f72:	682b      	ldr	r3, [r5, #0]
 8003f74:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    return (void *)pvPortMalloc(size);
 8003f78:	0080      	lsls	r0, r0, #2
    OpenNNA_Heap_Sum +=size;
 8003f7a:	602b      	str	r3, [r5, #0]
    return (void *)pvPortMalloc(size);
 8003f7c:	f003 f854 	bl	8007028 <pvPortMalloc>
 8003f80:	4602      	mov	r2, r0
        ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Col\
        );
        Network->pfunc_Operator(Network);//将本层参数传入算子进行计算
 8003f82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003f84:	4620      	mov	r0, r4
        Network->Output_Feature_Map= OpenNNA_Malloc(sizeof(data_t)*\
 8003f86:	61e2      	str	r2, [r4, #28]
        Network->pfunc_Operator(Network);//将本层参数传入算子进行计算
 8003f88:	4798      	blx	r3
        Network = Network->layer_next;//计算完成跳转到下一层
 8003f8a:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
    while(0!=Network->Layer_Index)
 8003f8c:	6863      	ldr	r3, [r4, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1df      	bne.n	8003f52 <OpenNNA_Predict+0x2e>
    }
    //跳回最后一层取结果
    Network = Network->layer_prev;
 8003f92:	6824      	ldr	r4, [r4, #0]
    //把最后一层的结果取出
    memcpy(Network_Output,Network->Output_Feature_Map,\
 8003f94:	4638      	mov	r0, r7
    sizeof(data_t)*\
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Col\
 8003f96:	6923      	ldr	r3, [r4, #16]
    *\
 8003f98:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
    memcpy(Network_Output,Network->Output_Feature_Map,\
 8003f9c:	68db      	ldr	r3, [r3, #12]
    *\
 8003f9e:	fb01 f202 	mul.w	r2, r1, r2
    memcpy(Network_Output,Network->Output_Feature_Map,\
 8003fa2:	69e1      	ldr	r1, [r4, #28]
 8003fa4:	fb03 f202 	mul.w	r2, r3, r2
 8003fa8:	0092      	lsls	r2, r2, #2
 8003faa:	f003 f985 	bl	80072b8 <memcpy>
    vPortFree(address);
 8003fae:	69e0      	ldr	r0, [r4, #28]
 8003fb0:	f003 f8f6 	bl	80071a0 <vPortFree>
    );
    //把最后一层的输输出free
    OpenNNA_Free(Network->Output_Feature_Map);
    Network->Output_Feature_Map = NULL;
    //跳转到第一层
    Network = Network->layer_next;
 8003fb4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    Network->Output_Feature_Map = NULL;
 8003fb6:	2300      	movs	r3, #0
    Network = Network->layer_next;
 8003fb8:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
    Network->Output_Feature_Map = NULL;
 8003fba:	61e3      	str	r3, [r4, #28]
    //为第一层输入输出特征图申请堆内存
    //分配输入特征图的堆内存
    Network->Input_Feature_Map= OpenNNA_Malloc(sizeof(data_t)*\
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Channel*\
 8003fbc:	6933      	ldr	r3, [r6, #16]
 8003fbe:	e9d3 0100 	ldrd	r0, r1, [r3]
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Row*\
 8003fc2:	689a      	ldr	r2, [r3, #8]
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Channel*\
 8003fc4:	fb01 f000 	mul.w	r0, r1, r0
    OpenNNA_Heap_Sum +=size;
 8003fc8:	682b      	ldr	r3, [r5, #0]
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Row*\
 8003fca:	fb02 f000 	mul.w	r0, r2, r0
    OpenNNA_Heap_Sum +=size;
 8003fce:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    return (void *)pvPortMalloc(size);
 8003fd2:	0080      	lsls	r0, r0, #2
    OpenNNA_Heap_Sum +=size;
 8003fd4:	602b      	str	r3, [r5, #0]
    return (void *)pvPortMalloc(size);
 8003fd6:	f003 f827 	bl	8007028 <pvPortMalloc>
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Col\
    );
    //分配输出特征图的堆内存
    Network->Output_Feature_Map= OpenNNA_Malloc(sizeof(data_t)*\
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Channel*\
 8003fda:	6932      	ldr	r2, [r6, #16]
 8003fdc:	68d3      	ldr	r3, [r2, #12]
    Network->Input_Feature_Map= OpenNNA_Malloc(sizeof(data_t)*\
 8003fde:	61b0      	str	r0, [r6, #24]
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Row*\
 8003fe0:	e9d2 0204 	ldrd	r0, r2, [r2, #16]
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Channel*\
 8003fe4:	fb03 f000 	mul.w	r0, r3, r0
    OpenNNA_Heap_Sum +=size;
 8003fe8:	682b      	ldr	r3, [r5, #0]
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Row*\
 8003fea:	fb02 f000 	mul.w	r0, r2, r0
    OpenNNA_Heap_Sum +=size;
 8003fee:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    return (void *)pvPortMalloc(size);
 8003ff2:	0080      	lsls	r0, r0, #2
    OpenNNA_Heap_Sum +=size;
 8003ff4:	602b      	str	r3, [r5, #0]
    return (void *)pvPortMalloc(size);
 8003ff6:	f003 f817 	bl	8007028 <pvPortMalloc>
    Network->Output_Feature_Map= OpenNNA_Malloc(sizeof(data_t)*\
 8003ffa:	61f0      	str	r0, [r6, #28]
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Row\
    *\
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Channel\
    );
#endif
}
 8003ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ffe:	bf00      	nop
 8004000:	24050c10 	.word	0x24050c10

08004004 <OpenNNA_Demo_Conv_OpenNNAPaper>:

    data_t NN_Output_Fmap[1][1][10]={0};



int OpenNNA_Demo_Conv_OpenNNAPaper(struct layer * Network) {
 8004004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004008:	4605      	mov	r5, r0
 800400a:	b095      	sub	sp, #84	; 0x54
    /*****************第2步:配置网络层参数**********************/
    //第一层Padding(对称填充=4，Mnist 1,28,28 填充至 1,32,32
    struct Layer_Para_base *Layer_Para_Base1 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 800400c:	2018      	movs	r0, #24
    struct Layer_Para_Padding *Layer_Para_Padding1 = OpenNNA_Malloc(sizeof(Layer_Para_Padding));
    Layer_Para_Base1->Input_Fmap_Channel=1;
 800400e:	f04f 0a01 	mov.w	sl, #1
    struct Layer_Para_base *Layer_Para_Base1 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 8004012:	f7ff fee7 	bl	8003de4 <OpenNNA_Malloc>
 8004016:	4683      	mov	fp, r0
    struct Layer_Para_Padding *Layer_Para_Padding1 = OpenNNA_Malloc(sizeof(Layer_Para_Padding));
 8004018:	2004      	movs	r0, #4
    Layer_Para_Base1->Input_Fmap_Row=28;
    Layer_Para_Base1->Input_Fmap_Col=28;
    Layer_Para_Base1->Output_Fmap_Channel=1;
    Layer_Para_Base1->Output_Fmap_Row=32;
 800401a:	2420      	movs	r4, #32
    struct Layer_Para_Padding *Layer_Para_Padding1 = OpenNNA_Malloc(sizeof(Layer_Para_Padding));
 800401c:	f7ff fee2 	bl	8003de4 <OpenNNA_Malloc>
    Layer_Para_Base1->Output_Fmap_Col=32;

    //填充两圈
    Layer_Para_Padding1->padding = 2;
 8004020:	2702      	movs	r7, #2
    Layer_Para_Base1->Input_Fmap_Row=28;
 8004022:	231c      	movs	r3, #28
    Layer_Para_Base1->Input_Fmap_Channel=1;
 8004024:	f8cb a000 	str.w	sl, [fp]
    Layer_Para_Base1->Output_Fmap_Channel=1;
 8004028:	f8cb a00c 	str.w	sl, [fp, #12]
    struct Layer_Para_Conv2d *Layer_Para_Conv2d2 = OpenNNA_Malloc(sizeof(Layer_Para_Conv2d));
    Layer_Para_Base2->Input_Fmap_Channel=1;
    Layer_Para_Base2->Input_Fmap_Row=32;
    Layer_Para_Base2->Input_Fmap_Col=32;
    Layer_Para_Base2->Output_Fmap_Channel=16;
    Layer_Para_Base2->Output_Fmap_Row=30;
 800402c:	f04f 0810 	mov.w	r8, #16
    Layer_Para_Padding1->padding = 2;
 8004030:	9013      	str	r0, [sp, #76]	; 0x4c
    Layer_Para_Base2->Output_Fmap_Row=30;
 8004032:	261e      	movs	r6, #30
    Layer_Para_Base1->Input_Fmap_Col=28;
 8004034:	e9cb 3301 	strd	r3, r3, [fp, #4]
    Layer_Para_Base1->Output_Fmap_Col=32;
 8004038:	e9cb 4404 	strd	r4, r4, [fp, #16]
    Layer_Para_Padding1->padding = 2;
 800403c:	6007      	str	r7, [r0, #0]
    struct Layer_Para_base *Layer_Para_Base2 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 800403e:	2018      	movs	r0, #24
 8004040:	f7ff fed0 	bl	8003de4 <OpenNNA_Malloc>
 8004044:	4681      	mov	r9, r0
    struct Layer_Para_Conv2d *Layer_Para_Conv2d2 = OpenNNA_Malloc(sizeof(Layer_Para_Conv2d));
 8004046:	2018      	movs	r0, #24
 8004048:	f7ff fecc 	bl	8003de4 <OpenNNA_Malloc>
    Layer_Para_Base2->Output_Fmap_Col=30;

    Layer_Para_Conv2d2->kernel_row=3;
 800404c:	2303      	movs	r3, #3
    Layer_Para_Base2->Input_Fmap_Col=32;
 800404e:	f8c9 4008 	str.w	r4, [r9, #8]
    Layer_Para_Base2->Output_Fmap_Col=30;
 8004052:	f8c9 6014 	str.w	r6, [r9, #20]
    Layer_Para_Conv2d2->kernel_col=3;
 8004056:	9008      	str	r0, [sp, #32]
    Layer_Para_Base2->Input_Fmap_Row=32;
 8004058:	e9c9 a400 	strd	sl, r4, [r9]
    Layer_Para_Base2->Output_Fmap_Row=30;
 800405c:	e9c9 8603 	strd	r8, r6, [r9, #12]
    Layer_Para_Conv2d2->kernel_channel=1;
    Layer_Para_Conv2d2->filters=16;
 8004060:	e9c0 a802 	strd	sl, r8, [r0, #8]
    Layer_Para_Conv2d2->kernel_row=3;
 8004064:	6043      	str	r3, [r0, #4]
    Layer_Para_Conv2d2->kernel_col=3;
 8004066:	6003      	str	r3, [r0, #0]
    Layer_Para_Conv2d2->strides_row=1;
    Layer_Para_Conv2d2->strides_col=1;
 8004068:	e9c0 aa04 	strd	sl, sl, [r0, #16]

    //第三层ReLu激活函数
    struct Layer_Para_base *Layer_Para_Base3 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 800406c:	2018      	movs	r0, #24
 800406e:	f7ff feb9 	bl	8003de4 <OpenNNA_Malloc>
 8004072:	9004      	str	r0, [sp, #16]
    struct Layer_Para_ReLU *Layer_Para_ReLU3 = OpenNNA_Malloc(sizeof(Layer_Para_ReLU));
 8004074:	2000      	movs	r0, #0
 8004076:	f7ff feb5 	bl	8003de4 <OpenNNA_Malloc>
    Layer_Para_Base3->Input_Fmap_Channel=16;
 800407a:	9b04      	ldr	r3, [sp, #16]
    struct Layer_Para_ReLU *Layer_Para_ReLU3 = OpenNNA_Malloc(sizeof(Layer_Para_ReLU));
 800407c:	9009      	str	r0, [sp, #36]	; 0x24
    Layer_Para_Base3->Output_Fmap_Channel=16;
    Layer_Para_Base3->Output_Fmap_Row=30;
    Layer_Para_Base3->Output_Fmap_Col=30;

    //第四层maxpool
    struct Layer_Para_base *Layer_Para_Base4 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 800407e:	2018      	movs	r0, #24
    Layer_Para_Base3->Input_Fmap_Row=30;
 8004080:	e9c3 8600 	strd	r8, r6, [r3]
    Layer_Para_Base3->Output_Fmap_Channel=16;
 8004084:	e9c3 6802 	strd	r6, r8, [r3, #8]
    Layer_Para_Base3->Output_Fmap_Col=30;
 8004088:	e9c3 6604 	strd	r6, r6, [r3, #16]
    struct Layer_Para_base *Layer_Para_Base4 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 800408c:	f7ff feaa 	bl	8003de4 <OpenNNA_Malloc>
 8004090:	9005      	str	r0, [sp, #20]
    struct Layer_Para_MaxPool *Layer_Para_MaxPool4 = OpenNNA_Malloc(sizeof(Layer_Para_MaxPool));
 8004092:	4640      	mov	r0, r8
 8004094:	f7ff fea6 	bl	8003de4 <OpenNNA_Malloc>
    Layer_Para_Base4->Input_Fmap_Channel=16;
 8004098:	9905      	ldr	r1, [sp, #20]
    Layer_Para_Base4->Output_Fmap_Col=15;

    Layer_Para_MaxPool4->strides_col=2;
    Layer_Para_MaxPool4->strides_row=2;
    Layer_Para_MaxPool4->kernel_row=2;
    Layer_Para_MaxPool4->kernel_col=2;
 800409a:	900a      	str	r0, [sp, #40]	; 0x28
    Layer_Para_Base4->Input_Fmap_Row=30;
 800409c:	e9c1 8600 	strd	r8, r6, [r1]
    Layer_Para_Base4->Output_Fmap_Channel=16;
 80040a0:	e9c1 6802 	strd	r6, r8, [r1, #8]
    Layer_Para_Base4->Output_Fmap_Row=15;
 80040a4:	260f      	movs	r6, #15
    Layer_Para_Base4->Output_Fmap_Col=15;
 80040a6:	e9c1 6604 	strd	r6, r6, [r1, #16]
    Layer_Para_MaxPool4->strides_row=2;
 80040aa:	e9c0 7702 	strd	r7, r7, [r0, #8]
    Layer_Para_MaxPool4->kernel_row=2;
 80040ae:	6047      	str	r7, [r0, #4]
    Layer_Para_MaxPool4->kernel_col=2;
 80040b0:	6007      	str	r7, [r0, #0]

    //第五层Conv2d
    struct Layer_Para_base *Layer_Para_Base5 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 80040b2:	2018      	movs	r0, #24
 80040b4:	f7ff fe96 	bl	8003de4 <OpenNNA_Malloc>
 80040b8:	9006      	str	r0, [sp, #24]
    struct Layer_Para_Conv2d *Layer_Para_Conv2d5 = OpenNNA_Malloc(sizeof(Layer_Para_Conv2d));
 80040ba:	2018      	movs	r0, #24
 80040bc:	f7ff fe92 	bl	8003de4 <OpenNNA_Malloc>
    Layer_Para_Base5->Input_Fmap_Channel=16;
 80040c0:	9906      	ldr	r1, [sp, #24]
    Layer_Para_Base5->Input_Fmap_Col=15;
    Layer_Para_Base5->Output_Fmap_Channel=32;
    Layer_Para_Base5->Output_Fmap_Row=13;
    Layer_Para_Base5->Output_Fmap_Col=13;

    Layer_Para_Conv2d5->kernel_row=3;
 80040c2:	2303      	movs	r3, #3
    Layer_Para_Conv2d5->kernel_col=3;
    Layer_Para_Conv2d5->kernel_channel=16;
    Layer_Para_Conv2d5->filters=32;
    Layer_Para_Conv2d5->strides_row=1;
    Layer_Para_Conv2d5->strides_col=1;
 80040c4:	900b      	str	r0, [sp, #44]	; 0x2c
    Layer_Para_Base5->Input_Fmap_Col=15;
 80040c6:	608e      	str	r6, [r1, #8]
    Layer_Para_Base5->Output_Fmap_Channel=32;
 80040c8:	60cc      	str	r4, [r1, #12]
    Layer_Para_Base5->Input_Fmap_Row=15;
 80040ca:	e9c1 8600 	strd	r8, r6, [r1]
    Layer_Para_Base5->Output_Fmap_Row=13;
 80040ce:	260d      	movs	r6, #13
    Layer_Para_Base5->Output_Fmap_Col=13;
 80040d0:	e9c1 6604 	strd	r6, r6, [r1, #16]
    Layer_Para_Conv2d5->kernel_col=3;
 80040d4:	e9c0 3300 	strd	r3, r3, [r0]
    Layer_Para_Conv2d5->filters=32;
 80040d8:	e9c0 8402 	strd	r8, r4, [r0, #8]
    Layer_Para_Conv2d5->strides_row=1;
 80040dc:	f8c0 a014 	str.w	sl, [r0, #20]
    Layer_Para_Conv2d5->strides_col=1;
 80040e0:	f8c0 a010 	str.w	sl, [r0, #16]

    //第六层ReLU激活函数
    struct Layer_Para_base *Layer_Para_Base6 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 80040e4:	2018      	movs	r0, #24
 80040e6:	f7ff fe7d 	bl	8003de4 <OpenNNA_Malloc>
 80040ea:	9007      	str	r0, [sp, #28]
    struct Layer_Para_ReLU *Layer_Para_ReLU6 = OpenNNA_Malloc(sizeof(Layer_Para_ReLU));
 80040ec:	2000      	movs	r0, #0
 80040ee:	f7ff fe79 	bl	8003de4 <OpenNNA_Malloc>
    Layer_Para_Base6->Input_Fmap_Channel=32;
 80040f2:	9a07      	ldr	r2, [sp, #28]
    struct Layer_Para_ReLU *Layer_Para_ReLU6 = OpenNNA_Malloc(sizeof(Layer_Para_ReLU));
 80040f4:	900c      	str	r0, [sp, #48]	; 0x30
    Layer_Para_Base6->Output_Fmap_Channel=32;
    Layer_Para_Base6->Output_Fmap_Row=13;
    Layer_Para_Base6->Output_Fmap_Col=13;

    //第七层maxpool
    struct Layer_Para_base *Layer_Para_Base7 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 80040f6:	2018      	movs	r0, #24
    Layer_Para_Base6->Input_Fmap_Row=13;
 80040f8:	e9c2 4600 	strd	r4, r6, [r2]
    Layer_Para_Base6->Output_Fmap_Channel=32;
 80040fc:	e9c2 6402 	strd	r6, r4, [r2, #8]
    Layer_Para_Base6->Output_Fmap_Col=13;
 8004100:	e9c2 6604 	strd	r6, r6, [r2, #16]
    struct Layer_Para_base *Layer_Para_Base7 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 8004104:	f7ff fe6e 	bl	8003de4 <OpenNNA_Malloc>
 8004108:	4603      	mov	r3, r0
    struct Layer_Para_MaxPool *Layer_Para_MaxPool7 = OpenNNA_Malloc(sizeof(Layer_Para_MaxPool));
 800410a:	4640      	mov	r0, r8
    struct Layer_Para_base *Layer_Para_Base7 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 800410c:	4698      	mov	r8, r3
    struct Layer_Para_MaxPool *Layer_Para_MaxPool7 = OpenNNA_Malloc(sizeof(Layer_Para_MaxPool));
 800410e:	f7ff fe69 	bl	8003de4 <OpenNNA_Malloc>
    Layer_Para_Base7->Output_Fmap_Col=6;

    Layer_Para_MaxPool7->strides_col=2;
    Layer_Para_MaxPool7->strides_row=2;
    Layer_Para_MaxPool7->kernel_row=2;
    Layer_Para_MaxPool7->kernel_col=2;
 8004112:	900e      	str	r0, [sp, #56]	; 0x38
    Layer_Para_Base7->Input_Fmap_Col=13;
 8004114:	f8c8 6008 	str.w	r6, [r8, #8]
    Layer_Para_Base7->Output_Fmap_Channel=32;
 8004118:	f8c8 400c 	str.w	r4, [r8, #12]
    Layer_Para_Base7->Output_Fmap_Col=6;
 800411c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    Layer_Para_Base7->Input_Fmap_Row=13;
 8004120:	e9c8 4600 	strd	r4, r6, [r8]
    Layer_Para_Base7->Output_Fmap_Row=6;
 8004124:	2606      	movs	r6, #6
 8004126:	f8c8 6010 	str.w	r6, [r8, #16]
    Layer_Para_Base7->Output_Fmap_Col=6;
 800412a:	f8c8 6014 	str.w	r6, [r8, #20]
    Layer_Para_MaxPool7->kernel_row=2;
 800412e:	6047      	str	r7, [r0, #4]
    Layer_Para_MaxPool7->kernel_col=2;
 8004130:	6007      	str	r7, [r0, #0]
    Layer_Para_MaxPool7->strides_row=2;
 8004132:	e9c0 7702 	strd	r7, r7, [r0, #8]

    //第八层Dense 64
    struct Layer_Para_base *Layer_Para_Base8 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 8004136:	2018      	movs	r0, #24
 8004138:	f7ff fe54 	bl	8003de4 <OpenNNA_Malloc>
 800413c:	4607      	mov	r7, r0
    struct Layer_Para_Dense *Layer_Para_Dense8 = OpenNNA_Malloc(sizeof(Layer_Para_Dense));
 800413e:	2004      	movs	r0, #4
 8004140:	f7ff fe50 	bl	8003de4 <OpenNNA_Malloc>
    Layer_Para_Base8->Input_Fmap_Channel=32;
 8004144:	603c      	str	r4, [r7, #0]
    Layer_Para_Base8->Input_Fmap_Row=6;
    Layer_Para_Base8->Input_Fmap_Col=6;
    Layer_Para_Base8->Output_Fmap_Channel=1;
    Layer_Para_Base8->Output_Fmap_Row=1;
    Layer_Para_Base8->Output_Fmap_Col=64;
 8004146:	2440      	movs	r4, #64	; 0x40
    Layer_Para_Base8->Output_Fmap_Channel=1;
 8004148:	f8c7 a00c 	str.w	sl, [r7, #12]
    Layer_Para_Base8->Output_Fmap_Row=1;
 800414c:	f8c7 a010 	str.w	sl, [r7, #16]
    Layer_Para_Base8->Output_Fmap_Col=64;
 8004150:	617c      	str	r4, [r7, #20]

    Layer_Para_Dense8->units = 64;
 8004152:	9010      	str	r0, [sp, #64]	; 0x40
    Layer_Para_Base8->Output_Fmap_Col=64;
 8004154:	970f      	str	r7, [sp, #60]	; 0x3c
    Layer_Para_Base8->Input_Fmap_Col=6;
 8004156:	e9c7 6601 	strd	r6, r6, [r7, #4]
    Layer_Para_Dense8->units = 64;
 800415a:	6004      	str	r4, [r0, #0]

    //第九层ReLU激活函数
    struct Layer_Para_base *Layer_Para_Base9 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 800415c:	2018      	movs	r0, #24
 800415e:	f7ff fe41 	bl	8003de4 <OpenNNA_Malloc>
 8004162:	4680      	mov	r8, r0
    struct Layer_Para_ReLU *Layer_Para_ReLU9 = OpenNNA_Malloc(sizeof(Layer_Para_ReLU));
 8004164:	2000      	movs	r0, #0
 8004166:	f7ff fe3d 	bl	8003de4 <OpenNNA_Malloc>
 800416a:	9011      	str	r0, [sp, #68]	; 0x44
    Layer_Para_Base9->Output_Fmap_Channel=1;
    Layer_Para_Base9->Output_Fmap_Row=1;
    Layer_Para_Base9->Output_Fmap_Col=64;

    //第10层Dense 10
    struct Layer_Para_base *Layer_Para_Base10 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 800416c:	2018      	movs	r0, #24
    Layer_Para_Base9->Output_Fmap_Channel=1;
 800416e:	e9c8 4a02 	strd	r4, sl, [r8, #8]
    Layer_Para_Base9->Output_Fmap_Col=64;
 8004172:	e9c8 a404 	strd	sl, r4, [r8, #16]
    Layer_Para_Base9->Input_Fmap_Row=1;
 8004176:	e9c8 aa00 	strd	sl, sl, [r8]
    struct Layer_Para_base *Layer_Para_Base10 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 800417a:	f7ff fe33 	bl	8003de4 <OpenNNA_Malloc>
 800417e:	4607      	mov	r7, r0
    struct Layer_Para_Dense *Layer_Para_Dense10 = OpenNNA_Malloc(sizeof(Layer_Para_Dense));
 8004180:	2004      	movs	r0, #4
 8004182:	f7ff fe2f 	bl	8003de4 <OpenNNA_Malloc>
    Layer_Para_Base10->Input_Fmap_Channel=1;
    Layer_Para_Base10->Input_Fmap_Row=1;
    Layer_Para_Base10->Input_Fmap_Col=64;
    Layer_Para_Base10->Output_Fmap_Channel=1;
    Layer_Para_Base10->Output_Fmap_Row=1;
    Layer_Para_Base10->Output_Fmap_Col=10;
 8004186:	230a      	movs	r3, #10
    Layer_Para_Base10->Input_Fmap_Col=64;
 8004188:	60bc      	str	r4, [r7, #8]
    Layer_Para_Base11->Output_Fmap_Channel=1;
    Layer_Para_Base11->Output_Fmap_Row=1;
    Layer_Para_Base11->Output_Fmap_Col=10;

    /*****************第4步:添加网络层**********************/
    OpenNNA_Add_Layer(Network, "Padding", "OpenNNA-Paper", Layer_Para_Base1,Layer_Para_Padding1, NULL, NULL);
 800418a:	2400      	movs	r4, #0
    Layer_Para_Base10->Output_Fmap_Col=10;
 800418c:	617b      	str	r3, [r7, #20]
    Layer_Para_Base10->Input_Fmap_Channel=1;
 800418e:	f8c7 a000 	str.w	sl, [r7]
    Layer_Para_Base10->Input_Fmap_Row=1;
 8004192:	f8c7 a004 	str.w	sl, [r7, #4]
    Layer_Para_Dense10->units = 10;
 8004196:	9012      	str	r0, [sp, #72]	; 0x48
    Layer_Para_Base10->Output_Fmap_Row=1;
 8004198:	e9c7 aa03 	strd	sl, sl, [r7, #12]
    Layer_Para_Dense10->units = 10;
 800419c:	6003      	str	r3, [r0, #0]
    struct Layer_Para_base *Layer_Para_Base11 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 800419e:	2018      	movs	r0, #24
 80041a0:	f7ff fe20 	bl	8003de4 <OpenNNA_Malloc>
 80041a4:	4606      	mov	r6, r0
    struct Layer_Para_Softmax *Layer_Para_Softmax11 = OpenNNA_Malloc(sizeof(Layer_Para_Softmax));
 80041a6:	4620      	mov	r0, r4
 80041a8:	f7ff fe1c 	bl	8003de4 <OpenNNA_Malloc>
    OpenNNA_Add_Layer(Network, "Padding", "OpenNNA-Paper", Layer_Para_Base1,Layer_Para_Padding1, NULL, NULL);
 80041ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    Layer_Para_Base11->Input_Fmap_Col=10;
 80041ae:	230a      	movs	r3, #10
    struct Layer_Para_Softmax *Layer_Para_Softmax11 = OpenNNA_Malloc(sizeof(Layer_Para_Softmax));
 80041b0:	9013      	str	r0, [sp, #76]	; 0x4c
    OpenNNA_Add_Layer(Network, "Padding", "OpenNNA-Paper", Layer_Para_Base1,Layer_Para_Padding1, NULL, NULL);
 80041b2:	4945      	ldr	r1, [pc, #276]	; (80042c8 <OpenNNA_Demo_Conv_OpenNNAPaper+0x2c4>)
 80041b4:	4628      	mov	r0, r5
    Layer_Para_Base11->Input_Fmap_Col=10;
 80041b6:	60b3      	str	r3, [r6, #8]
    Layer_Para_Base11->Output_Fmap_Col=10;
 80041b8:	6173      	str	r3, [r6, #20]
    OpenNNA_Add_Layer(Network, "Padding", "OpenNNA-Paper", Layer_Para_Base1,Layer_Para_Padding1, NULL, NULL);
 80041ba:	465b      	mov	r3, fp
    OpenNNA_Add_Layer(Network, "Conv2d", "Chengsen", Layer_Para_Base2,Layer_Para_Conv2d2, Conv2d_2_Weights, Conv2d_2_Bias);
 80041bc:	f8df b15c 	ldr.w	fp, [pc, #348]	; 800431c <OpenNNA_Demo_Conv_OpenNNAPaper+0x318>
    Layer_Para_Base11->Input_Fmap_Row=1;
 80041c0:	e9c6 aa00 	strd	sl, sl, [r6]
    Layer_Para_Base11->Output_Fmap_Row=1;
 80041c4:	e9c6 aa03 	strd	sl, sl, [r6, #12]
    OpenNNA_Add_Layer(Network, "Padding", "OpenNNA-Paper", Layer_Para_Base1,Layer_Para_Padding1, NULL, NULL);
 80041c8:	9200      	str	r2, [sp, #0]
 80041ca:	4a40      	ldr	r2, [pc, #256]	; (80042cc <OpenNNA_Demo_Conv_OpenNNAPaper+0x2c8>)
    OpenNNA_Add_Layer(Network, "ReLU", "xddcore", Layer_Para_Base3,Layer_Para_ReLU3, NULL, NULL);
    OpenNNA_Add_Layer(Network, "MaxPool", "lululu~", Layer_Para_Base4,Layer_Para_MaxPool4, NULL, NULL);
 80041cc:	f8df a150 	ldr.w	sl, [pc, #336]	; 8004320 <OpenNNA_Demo_Conv_OpenNNAPaper+0x31c>
    OpenNNA_Add_Layer(Network, "Padding", "OpenNNA-Paper", Layer_Para_Base1,Layer_Para_Padding1, NULL, NULL);
 80041d0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80041d4:	f7ff fe2a 	bl	8003e2c <OpenNNA_Add_Layer>
    OpenNNA_Add_Layer(Network, "Conv2d", "Chengsen", Layer_Para_Base2,Layer_Para_Conv2d2, Conv2d_2_Weights, Conv2d_2_Bias);
 80041d8:	9a08      	ldr	r2, [sp, #32]
 80041da:	464b      	mov	r3, r9
 80041dc:	4659      	mov	r1, fp
 80041de:	9200      	str	r2, [sp, #0]
 80041e0:	4628      	mov	r0, r5
 80041e2:	4a3b      	ldr	r2, [pc, #236]	; (80042d0 <OpenNNA_Demo_Conv_OpenNNAPaper+0x2cc>)
    OpenNNA_Add_Layer(Network, "ReLU", "xddcore", Layer_Para_Base3,Layer_Para_ReLU3, NULL, NULL);
 80041e4:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8004324 <OpenNNA_Demo_Conv_OpenNNAPaper+0x320>
    OpenNNA_Add_Layer(Network, "Conv2d", "Chengsen", Layer_Para_Base2,Layer_Para_Conv2d2, Conv2d_2_Weights, Conv2d_2_Bias);
 80041e8:	9202      	str	r2, [sp, #8]
 80041ea:	4a3a      	ldr	r2, [pc, #232]	; (80042d4 <OpenNNA_Demo_Conv_OpenNNAPaper+0x2d0>)
 80041ec:	9201      	str	r2, [sp, #4]
 80041ee:	4a3a      	ldr	r2, [pc, #232]	; (80042d8 <OpenNNA_Demo_Conv_OpenNNAPaper+0x2d4>)
 80041f0:	f7ff fe1c 	bl	8003e2c <OpenNNA_Add_Layer>
    OpenNNA_Add_Layer(Network, "ReLU", "xddcore", Layer_Para_Base3,Layer_Para_ReLU3, NULL, NULL);
 80041f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041f6:	9b04      	ldr	r3, [sp, #16]
 80041f8:	4649      	mov	r1, r9
 80041fa:	9200      	str	r2, [sp, #0]
 80041fc:	4628      	mov	r0, r5
 80041fe:	4a37      	ldr	r2, [pc, #220]	; (80042dc <OpenNNA_Demo_Conv_OpenNNAPaper+0x2d8>)
 8004200:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004204:	f7ff fe12 	bl	8003e2c <OpenNNA_Add_Layer>
    OpenNNA_Add_Layer(Network, "MaxPool", "lululu~", Layer_Para_Base4,Layer_Para_MaxPool4, NULL, NULL);
 8004208:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800420a:	9b05      	ldr	r3, [sp, #20]
 800420c:	4651      	mov	r1, sl
 800420e:	9200      	str	r2, [sp, #0]
 8004210:	4628      	mov	r0, r5
 8004212:	4a33      	ldr	r2, [pc, #204]	; (80042e0 <OpenNNA_Demo_Conv_OpenNNAPaper+0x2dc>)
 8004214:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004218:	f7ff fe08 	bl	8003e2c <OpenNNA_Add_Layer>
    OpenNNA_Add_Layer(Network, "Conv2d", "lalala~", Layer_Para_Base5,Layer_Para_Conv2d5, Conv2d_5_Weights, Conv2d_5_Bias);
 800421c:	4a31      	ldr	r2, [pc, #196]	; (80042e4 <OpenNNA_Demo_Conv_OpenNNAPaper+0x2e0>)
 800421e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004220:	4628      	mov	r0, r5
 8004222:	9202      	str	r2, [sp, #8]
 8004224:	4a30      	ldr	r2, [pc, #192]	; (80042e8 <OpenNNA_Demo_Conv_OpenNNAPaper+0x2e4>)
 8004226:	9b06      	ldr	r3, [sp, #24]
 8004228:	9100      	str	r1, [sp, #0]
 800422a:	4659      	mov	r1, fp
 800422c:	9201      	str	r2, [sp, #4]
 800422e:	4a2f      	ldr	r2, [pc, #188]	; (80042ec <OpenNNA_Demo_Conv_OpenNNAPaper+0x2e8>)
 8004230:	f7ff fdfc 	bl	8003e2c <OpenNNA_Add_Layer>
    OpenNNA_Add_Layer(Network, "ReLU", "The", Layer_Para_Base6,Layer_Para_ReLU6, NULL, NULL);
 8004234:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004236:	9b07      	ldr	r3, [sp, #28]
 8004238:	4628      	mov	r0, r5
 800423a:	9100      	str	r1, [sp, #0]
 800423c:	4649      	mov	r1, r9
 800423e:	4a2c      	ldr	r2, [pc, #176]	; (80042f0 <OpenNNA_Demo_Conv_OpenNNAPaper+0x2ec>)
 8004240:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004244:	f7ff fdf2 	bl	8003e2c <OpenNNA_Add_Layer>
    OpenNNA_Add_Layer(Network, "MaxPool", "Future", Layer_Para_Base7,Layer_Para_MaxPool7, NULL, NULL);
 8004248:	990e      	ldr	r1, [sp, #56]	; 0x38
 800424a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800424c:	4628      	mov	r0, r5
 800424e:	9100      	str	r1, [sp, #0]
 8004250:	4651      	mov	r1, sl
 8004252:	4a28      	ldr	r2, [pc, #160]	; (80042f4 <OpenNNA_Demo_Conv_OpenNNAPaper+0x2f0>)
    OpenNNA_Add_Layer(Network, "Dense", "Of", Layer_Para_Base8,Layer_Para_Dense8, Dense_8_Weights, Dense_8_Bias);
 8004254:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8004328 <OpenNNA_Demo_Conv_OpenNNAPaper+0x324>
    OpenNNA_Add_Layer(Network, "MaxPool", "Future", Layer_Para_Base7,Layer_Para_MaxPool7, NULL, NULL);
 8004258:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800425c:	f7ff fde6 	bl	8003e2c <OpenNNA_Add_Layer>
    OpenNNA_Add_Layer(Network, "Dense", "Of", Layer_Para_Base8,Layer_Para_Dense8, Dense_8_Weights, Dense_8_Bias);
 8004260:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004262:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004264:	4651      	mov	r1, sl
 8004266:	9200      	str	r2, [sp, #0]
 8004268:	4628      	mov	r0, r5
 800426a:	4a23      	ldr	r2, [pc, #140]	; (80042f8 <OpenNNA_Demo_Conv_OpenNNAPaper+0x2f4>)
 800426c:	9202      	str	r2, [sp, #8]
 800426e:	4a23      	ldr	r2, [pc, #140]	; (80042fc <OpenNNA_Demo_Conv_OpenNNAPaper+0x2f8>)
 8004270:	9201      	str	r2, [sp, #4]
 8004272:	4a23      	ldr	r2, [pc, #140]	; (8004300 <OpenNNA_Demo_Conv_OpenNNAPaper+0x2fc>)
 8004274:	f7ff fdda 	bl	8003e2c <OpenNNA_Add_Layer>
    OpenNNA_Add_Layer(Network, "ReLU", "Possible", Layer_Para_Base9,Layer_Para_ReLU9, NULL, NULL);
 8004278:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800427a:	4643      	mov	r3, r8
 800427c:	4649      	mov	r1, r9
 800427e:	9200      	str	r2, [sp, #0]
 8004280:	4628      	mov	r0, r5
 8004282:	4a20      	ldr	r2, [pc, #128]	; (8004304 <OpenNNA_Demo_Conv_OpenNNAPaper+0x300>)
 8004284:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004288:	f7ff fdd0 	bl	8003e2c <OpenNNA_Add_Layer>
    OpenNNA_Add_Layer(Network, "Dense", "Think", Layer_Para_Base10,Layer_Para_Dense10, Dense_10_Weights, Dense_10_Bias);
 800428c:	4a1e      	ldr	r2, [pc, #120]	; (8004308 <OpenNNA_Demo_Conv_OpenNNAPaper+0x304>)
 800428e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004290:	4651      	mov	r1, sl
 8004292:	9202      	str	r2, [sp, #8]
 8004294:	4628      	mov	r0, r5
 8004296:	4a1d      	ldr	r2, [pc, #116]	; (800430c <OpenNNA_Demo_Conv_OpenNNAPaper+0x308>)
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	463b      	mov	r3, r7
 800429c:	9201      	str	r2, [sp, #4]
 800429e:	4a1c      	ldr	r2, [pc, #112]	; (8004310 <OpenNNA_Demo_Conv_OpenNNAPaper+0x30c>)
 80042a0:	f7ff fdc4 	bl	8003e2c <OpenNNA_Add_Layer>
    OpenNNA_Add_Layer(Network, "Softmax", "Different", Layer_Para_Base11,Layer_Para_Softmax11, NULL, NULL);
 80042a4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80042a6:	4633      	mov	r3, r6
 80042a8:	4a1a      	ldr	r2, [pc, #104]	; (8004314 <OpenNNA_Demo_Conv_OpenNNAPaper+0x310>)
 80042aa:	9100      	str	r1, [sp, #0]
 80042ac:	4628      	mov	r0, r5
 80042ae:	491a      	ldr	r1, [pc, #104]	; (8004318 <OpenNNA_Demo_Conv_OpenNNAPaper+0x314>)
 80042b0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80042b4:	f7ff fdba 	bl	8003e2c <OpenNNA_Add_Layer>
    /*****************第5步:初始化神经网络**********************/
    OpenNNA_Init(Network);
 80042b8:	4628      	mov	r0, r5
 80042ba:	f7ff fe05 	bl	8003ec8 <OpenNNA_Init>
    //OpenNNA_Predict(Network, NN_Input_Fmap, NN_Output_Fmap);

    /*****************第10步:推理结束释放网络结构+申请的特征图堆内存**********************/
    //OpenNNA_Free_Network(&Network);
    return 0;
}
 80042be:	4620      	mov	r0, r4
 80042c0:	b015      	add	sp, #84	; 0x54
 80042c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042c6:	bf00      	nop
 80042c8:	0800a3ec 	.word	0x0800a3ec
 80042cc:	0800a438 	.word	0x0800a438
 80042d0:	24000070 	.word	0x24000070
 80042d4:	240000b0 	.word	0x240000b0
 80042d8:	0800a448 	.word	0x0800a448
 80042dc:	0800a454 	.word	0x0800a454
 80042e0:	0800a45c 	.word	0x0800a45c
 80042e4:	240002f0 	.word	0x240002f0
 80042e8:	24000370 	.word	0x24000370
 80042ec:	0800a464 	.word	0x0800a464
 80042f0:	0800a46c 	.word	0x0800a46c
 80042f4:	0800a470 	.word	0x0800a470
 80042f8:	24005598 	.word	0x24005598
 80042fc:	24005698 	.word	0x24005698
 8004300:	0800a478 	.word	0x0800a478
 8004304:	0800a47c 	.word	0x0800a47c
 8004308:	24004b70 	.word	0x24004b70
 800430c:	24004b98 	.word	0x24004b98
 8004310:	0800a488 	.word	0x0800a488
 8004314:	0800a490 	.word	0x0800a490
 8004318:	0800a430 	.word	0x0800a430
 800431c:	0800a3d0 	.word	0x0800a3d0
 8004320:	0800a3f4 	.word	0x0800a3f4
 8004324:	0800a40c 	.word	0x0800a40c
 8004328:	0800a404 	.word	0x0800a404

0800432c <OpenNNA_Demo_Conv_OpenNNAPaper_Predict>:

void OpenNNA_Demo_Conv_OpenNNAPaper_Predict(struct layer * Network){
 800432c:	b510      	push	{r4, lr}
 800432e:	4604      	mov	r4, r0
OpenNNA_Predict(Network, NN_Input_Fmap_5, NN_Output_Fmap);
 8004330:	4a0a      	ldr	r2, [pc, #40]	; (800435c <OpenNNA_Demo_Conv_OpenNNAPaper_Predict+0x30>)
 8004332:	490b      	ldr	r1, [pc, #44]	; (8004360 <OpenNNA_Demo_Conv_OpenNNAPaper_Predict+0x34>)
 8004334:	f7ff fdf6 	bl	8003f24 <OpenNNA_Predict>
    printf("[%d]%f,   ",i,NN_Output_Fmap[0][0][i]*100);
}
printf("\r\n");
#endif

OpenNNA_Predict(Network, NN_Input_Fmap_0, NN_Output_Fmap);
 8004338:	4620      	mov	r0, r4
 800433a:	4a08      	ldr	r2, [pc, #32]	; (800435c <OpenNNA_Demo_Conv_OpenNNAPaper_Predict+0x30>)
 800433c:	4909      	ldr	r1, [pc, #36]	; (8004364 <OpenNNA_Demo_Conv_OpenNNAPaper_Predict+0x38>)
 800433e:	f7ff fdf1 	bl	8003f24 <OpenNNA_Predict>
    printf("[%d]%f,   ",i,NN_Output_Fmap[0][0][i]*100);
}
printf("\r\n");
#endif

OpenNNA_Predict(Network, NN_Input_Fmap_1, NN_Output_Fmap);
 8004342:	4620      	mov	r0, r4
 8004344:	4a05      	ldr	r2, [pc, #20]	; (800435c <OpenNNA_Demo_Conv_OpenNNAPaper_Predict+0x30>)
 8004346:	4908      	ldr	r1, [pc, #32]	; (8004368 <OpenNNA_Demo_Conv_OpenNNAPaper_Predict+0x3c>)
 8004348:	f7ff fdec 	bl	8003f24 <OpenNNA_Predict>
    printf("[%d]%f,   ",i,NN_Output_Fmap[0][0][i]*100);
}
printf("\r\n");
#endif

OpenNNA_Predict(Network, NN_Input_Fmap_8, NN_Output_Fmap);
 800434c:	4620      	mov	r0, r4
 800434e:	4a03      	ldr	r2, [pc, #12]	; (800435c <OpenNNA_Demo_Conv_OpenNNAPaper_Predict+0x30>)
 8004350:	4906      	ldr	r1, [pc, #24]	; (800436c <OpenNNA_Demo_Conv_OpenNNAPaper_Predict+0x40>)
{
    printf("[%d]%f,   ",i,NN_Output_Fmap[0][0][i]*100);
}
printf("\r\n");
#endif
}
 8004352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
OpenNNA_Predict(Network, NN_Input_Fmap_8, NN_Output_Fmap);
 8004356:	f7ff bde5 	b.w	8003f24 <OpenNNA_Predict>
 800435a:	bf00      	nop
 800435c:	24050c14 	.word	0x24050c14
 8004360:	2404ef18 	.word	0x2404ef18
 8004364:	2404d698 	.word	0x2404d698
 8004368:	2404e2d8 	.word	0x2404e2d8
 800436c:	2404fb58 	.word	0x2404fb58

08004370 <OpenNNA_Operator_AvgPool>:
#include "opennna_operator_avgpool.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_AvgPool(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Input_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Channel;
 8004370:	6903      	ldr	r3, [r0, #16]
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;

    //池化算子特有参数
    reg_t kernel_col = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->kernel_col;
 8004372:	6942      	ldr	r2, [r0, #20]
{
 8004374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8004378:	68dd      	ldr	r5, [r3, #12]
{
 800437a:	b093      	sub	sp, #76	; 0x4c
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 800437c:	695c      	ldr	r4, [r3, #20]
{
 800437e:	4680      	mov	r8, r0
    reg_t strides_col = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->strides_col;
    reg_t strides_row = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->strides_row;
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    data_t max_value=0;//在MaxPool时存储最大值,在AveragePool存储均值
    for (int i = 0; i < Output_Fmap_Channel; ++i)//output_fmap_channel
 8004380:	2d00      	cmp	r5, #0
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 8004382:	6918      	ldr	r0, [r3, #16]
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8004384:	950d      	str	r5, [sp, #52]	; 0x34
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 8004386:	900e      	str	r0, [sp, #56]	; 0x38
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8004388:	9409      	str	r4, [sp, #36]	; 0x24
    reg_t Input_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Col;
 800438a:	e9d3 1b01 	ldrd	r1, fp, [r3, #4]
    reg_t strides_col = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->strides_col;
 800438e:	6893      	ldr	r3, [r2, #8]
    reg_t kernel_row = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->kernel_row;
 8004390:	e9d2 9a00 	ldrd	r9, sl, [r2]
    reg_t strides_col = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->strides_col;
 8004394:	9303      	str	r3, [sp, #12]
    reg_t strides_row = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->strides_row;
 8004396:	68d3      	ldr	r3, [r2, #12]
    for (int i = 0; i < Output_Fmap_Channel; ++i)//output_fmap_channel
 8004398:	f340 808a 	ble.w	80044b0 <OpenNNA_Operator_AvgPool+0x140>
                                max_value = ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
                            else//求累加值
                                max_value += ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
                    }
                }
                ((data_t *)Layers->Output_Feature_Map)[(i*Output_Fmap_Col*Output_Fmap_Row) + (j*Output_Fmap_Col) + k] = (max_value/(kernel_col*kernel_row));//取平均
 800439c:	fb0a f209 	mul.w	r2, sl, r9
 80043a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043a4:	2800      	cmp	r0, #0
 80043a6:	ee07 2a90 	vmov	s15, r2
 80043aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80043b2:	dd7d      	ble.n	80044b0 <OpenNNA_Operator_AvgPool+0x140>
 80043b4:	fb0b f201 	mul.w	r2, fp, r1
    data_t max_value=0;//在MaxPool时存储最大值,在AveragePool存储均值
 80043b8:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80044b8 <OpenNNA_Operator_AvgPool+0x148>
 80043bc:	fb0b f303 	mul.w	r3, fp, r3
 80043c0:	920f      	str	r2, [sp, #60]	; 0x3c
 80043c2:	fb04 f200 	mul.w	r2, r4, r0
 80043c6:	9310      	str	r3, [sp, #64]	; 0x40
                ((data_t *)Layers->Output_Feature_Map)[(i*Output_Fmap_Col*Output_Fmap_Row) + (j*Output_Fmap_Col) + k] = (max_value/(kernel_col*kernel_row));//取平均
 80043c8:	2300      	movs	r3, #0
 80043ca:	920c      	str	r2, [sp, #48]	; 0x30
 80043cc:	00a2      	lsls	r2, r4, #2
 80043ce:	9306      	str	r3, [sp, #24]
 80043d0:	9211      	str	r2, [sp, #68]	; 0x44
 80043d2:	9307      	str	r3, [sp, #28]
    for (int i = 0; i < Output_Fmap_Channel; ++i)//output_fmap_channel
 80043d4:	930a      	str	r3, [sp, #40]	; 0x28
                ((data_t *)Layers->Output_Feature_Map)[(i*Output_Fmap_Col*Output_Fmap_Row) + (j*Output_Fmap_Col) + k] = (max_value/(kernel_col*kernel_row));//取平均
 80043d6:	9b06      	ldr	r3, [sp, #24]
 80043d8:	9302      	str	r3, [sp, #8]
 80043da:	9b07      	ldr	r3, [sp, #28]
 80043dc:	9308      	str	r3, [sp, #32]
        for (int j = 0; j < Output_Fmap_Row; ++j)//Output_Fmap_Row = (((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 80043de:	2300      	movs	r3, #0
 80043e0:	930b      	str	r3, [sp, #44]	; 0x2c
            for (int k = 0; k < Output_Fmap_Col; ++k)//(((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 80043e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	dd47      	ble.n	8004478 <OpenNNA_Operator_AvgPool+0x108>
 80043e8:	9a02      	ldr	r2, [sp, #8]
                ((data_t *)Layers->Output_Feature_Map)[(i*Output_Fmap_Col*Output_Fmap_Row) + (j*Output_Fmap_Col) + k] = (max_value/(kernel_col*kernel_row));//取平均
 80043ea:	f04f 0e00 	mov.w	lr, #0
 80043ee:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80043f2:	0092      	lsls	r2, r2, #2
 80043f4:	9908      	ldr	r1, [sp, #32]
 80043f6:	9205      	str	r2, [sp, #20]
 80043f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80043fa:	189a      	adds	r2, r3, r2
 80043fc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004400:	9301      	str	r3, [sp, #4]
 8004402:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 8004406:	9304      	str	r3, [sp, #16]
                for (int l = 0; l < kernel_row; ++l)//pool_Kernel_size_row
 8004408:	f1ba 0f00 	cmp.w	sl, #0
 800440c:	dd29      	ble.n	8004462 <OpenNNA_Operator_AvgPool+0xf2>
                                max_value = ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
 800440e:	9b05      	ldr	r3, [sp, #20]
 8004410:	ea4f 0c8e 	mov.w	ip, lr, lsl #2
 8004414:	9e02      	ldr	r6, [sp, #8]
                for (int l = 0; l < kernel_row; ++l)//pool_Kernel_size_row
 8004416:	2000      	movs	r0, #0
                                max_value = ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
 8004418:	eb03 078e 	add.w	r7, r3, lr, lsl #2
                    for (int m = 0; m < kernel_col; ++m)//pool_Kernel_size_col
 800441c:	f1b9 0f00 	cmp.w	r9, #0
 8004420:	dd1b      	ble.n	800445a <OpenNNA_Operator_AvgPool+0xea>
 8004422:	f8d8 4018 	ldr.w	r4, [r8, #24]
 8004426:	eb0c 0286 	add.w	r2, ip, r6, lsl #2
 800442a:	2300      	movs	r3, #0
                                max_value = ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
 800442c:	9600      	str	r6, [sp, #0]
 800442e:	19e5      	adds	r5, r4, r7
 8004430:	e005      	b.n	800443e <OpenNNA_Operator_AvgPool+0xce>
                    for (int m = 0; m < kernel_col; ++m)//pool_Kernel_size_col
 8004432:	3301      	adds	r3, #1
                                max_value = ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
 8004434:	edd5 7a00 	vldr	s15, [r5]
                    for (int m = 0; m < kernel_col; ++m)//pool_Kernel_size_col
 8004438:	3204      	adds	r2, #4
 800443a:	4599      	cmp	r9, r3
 800443c:	d00c      	beq.n	8004458 <OpenNNA_Operator_AvgPool+0xe8>
                            if ((l == 0 && m == 0))
 800443e:	ea50 0603 	orrs.w	r6, r0, r3
                                max_value += ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
 8004442:	eb04 0102 	add.w	r1, r4, r2
                            if ((l == 0 && m == 0))
 8004446:	d0f4      	beq.n	8004432 <OpenNNA_Operator_AvgPool+0xc2>
                    for (int m = 0; m < kernel_col; ++m)//pool_Kernel_size_col
 8004448:	3301      	adds	r3, #1
                                max_value += ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
 800444a:	ed91 7a00 	vldr	s14, [r1]
                    for (int m = 0; m < kernel_col; ++m)//pool_Kernel_size_col
 800444e:	3204      	adds	r2, #4
 8004450:	4599      	cmp	r9, r3
                                max_value += ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
 8004452:	ee77 7a87 	vadd.f32	s15, s15, s14
                    for (int m = 0; m < kernel_col; ++m)//pool_Kernel_size_col
 8004456:	d1f2      	bne.n	800443e <OpenNNA_Operator_AvgPool+0xce>
 8004458:	9e00      	ldr	r6, [sp, #0]
                for (int l = 0; l < kernel_row; ++l)//pool_Kernel_size_row
 800445a:	3001      	adds	r0, #1
 800445c:	445e      	add	r6, fp
 800445e:	4582      	cmp	sl, r0
 8004460:	d1dc      	bne.n	800441c <OpenNNA_Operator_AvgPool+0xac>
            for (int k = 0; k < Output_Fmap_Col; ++k)//(((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 8004462:	9b03      	ldr	r3, [sp, #12]
                ((data_t *)Layers->Output_Feature_Map)[(i*Output_Fmap_Col*Output_Fmap_Row) + (j*Output_Fmap_Col) + k] = (max_value/(kernel_col*kernel_row));//取平均
 8004464:	ee26 7aa7 	vmul.f32	s14, s13, s15
            for (int k = 0; k < Output_Fmap_Col; ++k)//(((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 8004468:	9a04      	ldr	r2, [sp, #16]
 800446a:	449e      	add	lr, r3
                ((data_t *)Layers->Output_Feature_Map)[(i*Output_Fmap_Col*Output_Fmap_Row) + (j*Output_Fmap_Col) + k] = (max_value/(kernel_col*kernel_row));//取平均
 800446c:	9b01      	ldr	r3, [sp, #4]
 800446e:	eca3 7a01 	vstmia	r3!, {s14}
            for (int k = 0; k < Output_Fmap_Col; ++k)//(((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 8004472:	429a      	cmp	r2, r3
                ((data_t *)Layers->Output_Feature_Map)[(i*Output_Fmap_Col*Output_Fmap_Row) + (j*Output_Fmap_Col) + k] = (max_value/(kernel_col*kernel_row));//取平均
 8004474:	9301      	str	r3, [sp, #4]
            for (int k = 0; k < Output_Fmap_Col; ++k)//(((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 8004476:	d1c7      	bne.n	8004408 <OpenNNA_Operator_AvgPool+0x98>
        for (int j = 0; j < Output_Fmap_Row; ++j)//Output_Fmap_Row = (((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 8004478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800447a:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 800447e:	3301      	adds	r3, #1
 8004480:	440a      	add	r2, r1
 8004482:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004484:	930b      	str	r3, [sp, #44]	; 0x2c
 8004486:	9208      	str	r2, [sp, #32]
 8004488:	9a02      	ldr	r2, [sp, #8]
 800448a:	440a      	add	r2, r1
 800448c:	9202      	str	r2, [sp, #8]
 800448e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004490:	429a      	cmp	r2, r3
 8004492:	d1a6      	bne.n	80043e2 <OpenNNA_Operator_AvgPool+0x72>
    for (int i = 0; i < Output_Fmap_Channel; ++i)//output_fmap_channel
 8004494:	9a07      	ldr	r2, [sp, #28]
 8004496:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800449a:	440a      	add	r2, r1
 800449c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800449e:	3301      	adds	r3, #1
 80044a0:	9207      	str	r2, [sp, #28]
 80044a2:	9a06      	ldr	r2, [sp, #24]
 80044a4:	930a      	str	r3, [sp, #40]	; 0x28
 80044a6:	440a      	add	r2, r1
 80044a8:	9206      	str	r2, [sp, #24]
 80044aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d192      	bne.n	80043d6 <OpenNNA_Operator_AvgPool+0x66>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 80044b0:	b013      	add	sp, #76	; 0x4c
 80044b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044b6:	bf00      	nop
 80044b8:	00000000 	.word	0x00000000

080044bc <OpenNNA_Operator_Conv2d>:
#include "opennna_operator_conv2d.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_Conv2d(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Input_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Channel;
 80044bc:	6903      	ldr	r3, [r0, #16]
{
 80044be:	4601      	mov	r1, r0
 80044c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    reg_t Input_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Row;
    reg_t Input_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Col;
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 80044c4:	691c      	ldr	r4, [r3, #16]
{
 80044c6:	b0a3      	sub	sp, #140	; 0x8c
    reg_t Input_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Col;
 80044c8:	e9d3 2901 	ldrd	r2, r9, [r3, #4]
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 80044cc:	695b      	ldr	r3, [r3, #20]
{
 80044ce:	9020      	str	r0, [sp, #128]	; 0x80
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 80044d0:	9319      	str	r3, [sp, #100]	; 0x64
 80044d2:	4618      	mov	r0, r3
    //卷积运算相关的参数
    reg_t kernel_col = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_col;
 80044d4:	694b      	ldr	r3, [r1, #20]
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 80044d6:	9418      	str	r4, [sp, #96]	; 0x60
    reg_t kernel_row = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_row;
    reg_t kernel_channel = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_channel;

    reg_t filters = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->filters;
 80044d8:	68dd      	ldr	r5, [r3, #12]
    reg_t kernel_channel = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_channel;
 80044da:	689e      	ldr	r6, [r3, #8]

    reg_t strides_col = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->strides_col;
 80044dc:	691f      	ldr	r7, [r3, #16]
    data_t multOutput = 0;  /* Intermediate output */
#endif
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    //以下这个卷积实现思路以输出特征图为导向，当输入特征图为图像数据时，乘加次数最优
    for (int i = 0; i < filters; ++i) {//filters must = Output_Fmap_Channel
 80044de:	2d00      	cmp	r5, #0
    reg_t filters = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->filters;
 80044e0:	951a      	str	r5, [sp, #104]	; 0x68
    reg_t kernel_channel = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_channel;
 80044e2:	9606      	str	r6, [sp, #24]
    reg_t strides_col = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->strides_col;
 80044e4:	9714      	str	r7, [sp, #80]	; 0x50
    reg_t kernel_row = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_row;
 80044e6:	e9d3 ba00 	ldrd	fp, sl, [r3]
    reg_t strides_row = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->strides_row;
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	9315      	str	r3, [sp, #84]	; 0x54
    for (int i = 0; i < filters; ++i) {//filters must = Output_Fmap_Channel
 80044ee:	f340 80bf 	ble.w	8004670 <OpenNNA_Operator_Conv2d+0x1b4>
        for (int j = 0; j < Output_Fmap_Row; ++j) {
            for (int k = 0; k < Output_Fmap_Col; ++k) {
                //顺道填入偏置
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 80044f2:	4603      	mov	r3, r0
 80044f4:	2c00      	cmp	r4, #0
 80044f6:	fb00 f004 	mul.w	r0, r0, r4
 80044fa:	901b      	str	r0, [sp, #108]	; 0x6c
 80044fc:	f340 80b8 	ble.w	8004670 <OpenNNA_Operator_Conv2d+0x1b4>
 8004500:	2b00      	cmp	r3, #0
 8004502:	f340 80b5 	ble.w	8004670 <OpenNNA_Operator_Conv2d+0x1b4>
 8004506:	fb0a f00b 	mul.w	r0, sl, fp
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	fb09 f202 	mul.w	r2, r9, r2
                =\
                ((data_t *)Layers->Bias)[i];
 8004510:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8004512:	931f      	str	r3, [sp, #124]	; 0x7c
 8004514:	fb00 f306 	mul.w	r3, r0, r6
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 8004518:	69c9      	ldr	r1, [r1, #28]
 800451a:	9208      	str	r2, [sp, #32]
 800451c:	2200      	movs	r2, #0
 800451e:	931d      	str	r3, [sp, #116]	; 0x74
 8004520:	4653      	mov	r3, sl
 8004522:	46ca      	mov	sl, r9
 8004524:	9205      	str	r2, [sp, #20]
 8004526:	4699      	mov	r9, r3
 8004528:	900b      	str	r0, [sp, #44]	; 0x2c
                ((data_t *)Layers->Bias)[i];
 800452a:	9416      	str	r4, [sp, #88]	; 0x58
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 800452c:	9112      	str	r1, [sp, #72]	; 0x48
 800452e:	9211      	str	r2, [sp, #68]	; 0x44
    for (int i = 0; i < filters; ++i) {//filters must = Output_Fmap_Channel
 8004530:	920c      	str	r2, [sp, #48]	; 0x30
        for (int j = 0; j < Output_Fmap_Row; ++j) {
 8004532:	9911      	ldr	r1, [sp, #68]	; 0x44
                ((data_t *)Layers->Bias)[i];
 8004534:	2200      	movs	r2, #0
 8004536:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004538:	9812      	ldr	r0, [sp, #72]	; 0x48
 800453a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800453e:	920e      	str	r2, [sp, #56]	; 0x38
 8004540:	920d      	str	r2, [sp, #52]	; 0x34
 8004542:	18c3      	adds	r3, r0, r3
 8004544:	980c      	ldr	r0, [sp, #48]	; 0x30
        for (int j = 0; j < Output_Fmap_Row; ++j) {
 8004546:	9213      	str	r2, [sp, #76]	; 0x4c
 8004548:	9321      	str	r3, [sp, #132]	; 0x84
                ((data_t *)Layers->Bias)[i];
 800454a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800454c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004550:	9317      	str	r3, [sp, #92]	; 0x5c
 8004552:	008b      	lsls	r3, r1, #2
 8004554:	931e      	str	r3, [sp, #120]	; 0x78
            for (int k = 0; k < Output_Fmap_Col; ++k) {
 8004556:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004558:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800455a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800455c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    reg_t kernel_col = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_col;
 8004560:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8004564:	eb01 0803 	add.w	r8, r1, r3
 8004568:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800456a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800456e:	931c      	str	r3, [sp, #112]	; 0x70
 8004570:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004572:	fb0a f303 	mul.w	r3, sl, r3
 8004576:	9307      	str	r3, [sp, #28]
 8004578:	2300      	movs	r3, #0
 800457a:	9310      	str	r3, [sp, #64]	; 0x40
                ((data_t *)Layers->Bias)[i];
 800457c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800457e:	681b      	ldr	r3, [r3, #0]
                =\
 8004580:	f848 3b04 	str.w	r3, [r8], #4
                //一个卷积核去卷一下输入特征图
                for (int l = 0; l < kernel_channel; ++l) {
 8004584:	9b06      	ldr	r3, [sp, #24]
 8004586:	2b00      	cmp	r3, #0
 8004588:	dd4b      	ble.n	8004622 <OpenNNA_Operator_Conv2d+0x166>
 800458a:	f1b9 0f00 	cmp.w	r9, #0
 800458e:	dd48      	ble.n	8004622 <OpenNNA_Operator_Conv2d+0x166>
 8004590:	f1bb 0f00 	cmp.w	fp, #0
 8004594:	dd45      	ble.n	8004622 <OpenNNA_Operator_Conv2d+0x166>
                        for (int n = 0; n < kernel_col; ++n) {
                          //输出特征图=输入特征图*卷积核权重
#if(HARDWARE_ACCELERATION==0)//不使用硬件加速，纯c推理，用户可自定义数据类型
                            ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
                            +=\
                            ((data_t *)Layers->Input_Feature_Map)[(n+k*strides_col)+(m+j*strides_row)*Input_Fmap_Col+l*Input_Fmap_Col*Input_Fmap_Row]\
 8004596:	9a20      	ldr	r2, [sp, #128]	; 0x80
                            *\
                            ((data_t *)Layers->Weights)[n+m*kernel_col+l*kernel_col*kernel_row+i*kernel_col*kernel_row*kernel_channel];
 8004598:	2300      	movs	r3, #0
                            ((data_t *)Layers->Input_Feature_Map)[(n+k*strides_col)+(m+j*strides_row)*Input_Fmap_Col+l*Input_Fmap_Col*Input_Fmap_Row]\
 800459a:	6997      	ldr	r7, [r2, #24]
                            ((data_t *)Layers->Weights)[n+m*kernel_col+l*kernel_col*kernel_row+i*kernel_col*kernel_row*kernel_channel];
 800459c:	6a12      	ldr	r2, [r2, #32]
 800459e:	9302      	str	r3, [sp, #8]
 80045a0:	9201      	str	r2, [sp, #4]
 80045a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80045a4:	0092      	lsls	r2, r2, #2
 80045a6:	920a      	str	r2, [sp, #40]	; 0x28
 80045a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80045aa:	0092      	lsls	r2, r2, #2
                for (int l = 0; l < kernel_channel; ++l) {
 80045ac:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80045b0:	9209      	str	r2, [sp, #36]	; 0x24
                    for (int m = 0; m < kernel_row; ++m) {
 80045b2:	9b03      	ldr	r3, [sp, #12]
    reg_t kernel_col = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_col;
 80045b4:	2400      	movs	r4, #0
 80045b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045b8:	9807      	ldr	r0, [sp, #28]
                    for (int m = 0; m < kernel_row; ++m) {
 80045ba:	4625      	mov	r5, r4
 80045bc:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 80045c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045c2:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80045c6:	9b02      	ldr	r3, [sp, #8]
 80045c8:	9a05      	ldr	r2, [sp, #20]
 80045ca:	443e      	add	r6, r7
 80045cc:	eb03 0c02 	add.w	ip, r3, r2
                        for (int n = 0; n < kernel_col; ++n) {
 80045d0:	9901      	ldr	r1, [sp, #4]
 80045d2:	eb0e 0380 	add.w	r3, lr, r0, lsl #2
 80045d6:	eb04 020c 	add.w	r2, r4, ip
                            +=\
 80045da:	ed58 7a01 	vldr	s15, [r8, #-4]
 80045de:	443b      	add	r3, r7
 80045e0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80045e4:	eb06 0180 	add.w	r1, r6, r0, lsl #2
                            ((data_t *)Layers->Input_Feature_Map)[(n+k*strides_col)+(m+j*strides_row)*Input_Fmap_Col+l*Input_Fmap_Col*Input_Fmap_Row]\
 80045e8:	ecf3 6a01 	vldmia	r3!, {s13}
                            ((data_t *)Layers->Weights)[n+m*kernel_col+l*kernel_col*kernel_row+i*kernel_col*kernel_row*kernel_channel];
 80045ec:	ecb2 7a01 	vldmia	r2!, {s14}
                        for (int n = 0; n < kernel_col; ++n) {
 80045f0:	4299      	cmp	r1, r3
                            +=\
 80045f2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80045f6:	ed48 7a01 	vstr	s15, [r8, #-4]
                        for (int n = 0; n < kernel_col; ++n) {
 80045fa:	d1f5      	bne.n	80045e8 <OpenNNA_Operator_Conv2d+0x12c>
                    for (int m = 0; m < kernel_row; ++m) {
 80045fc:	3501      	adds	r5, #1
 80045fe:	4450      	add	r0, sl
 8004600:	445c      	add	r4, fp
 8004602:	45a9      	cmp	r9, r5
 8004604:	d1e4      	bne.n	80045d0 <OpenNNA_Operator_Conv2d+0x114>
                for (int l = 0; l < kernel_channel; ++l) {
 8004606:	9a03      	ldr	r2, [sp, #12]
 8004608:	9908      	ldr	r1, [sp, #32]
 800460a:	9b04      	ldr	r3, [sp, #16]
 800460c:	440a      	add	r2, r1
 800460e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004610:	3301      	adds	r3, #1
 8004612:	9203      	str	r2, [sp, #12]
 8004614:	9a02      	ldr	r2, [sp, #8]
 8004616:	9304      	str	r3, [sp, #16]
 8004618:	440a      	add	r2, r1
 800461a:	9202      	str	r2, [sp, #8]
 800461c:	9a06      	ldr	r2, [sp, #24]
 800461e:	429a      	cmp	r2, r3
 8004620:	d1c7      	bne.n	80045b2 <OpenNNA_Operator_Conv2d+0xf6>
            for (int k = 0; k < Output_Fmap_Col; ++k) {
 8004622:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004624:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004626:	4413      	add	r3, r2
 8004628:	9310      	str	r3, [sp, #64]	; 0x40
 800462a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800462c:	4413      	add	r3, r2
 800462e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004630:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004632:	4598      	cmp	r8, r3
 8004634:	d1a2      	bne.n	800457c <OpenNNA_Operator_Conv2d+0xc0>
        for (int j = 0; j < Output_Fmap_Row; ++j) {
 8004636:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004638:	9919      	ldr	r1, [sp, #100]	; 0x64
 800463a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800463c:	440a      	add	r2, r1
 800463e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004640:	3301      	adds	r3, #1
 8004642:	920d      	str	r2, [sp, #52]	; 0x34
 8004644:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004646:	9313      	str	r3, [sp, #76]	; 0x4c
 8004648:	440a      	add	r2, r1
 800464a:	920e      	str	r2, [sp, #56]	; 0x38
 800464c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800464e:	429a      	cmp	r2, r3
 8004650:	d181      	bne.n	8004556 <OpenNNA_Operator_Conv2d+0x9a>
    for (int i = 0; i < filters; ++i) {//filters must = Output_Fmap_Channel
 8004652:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004654:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8004656:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004658:	440a      	add	r2, r1
 800465a:	991d      	ldr	r1, [sp, #116]	; 0x74
 800465c:	3301      	adds	r3, #1
 800465e:	9211      	str	r2, [sp, #68]	; 0x44
 8004660:	9a05      	ldr	r2, [sp, #20]
 8004662:	930c      	str	r3, [sp, #48]	; 0x30
 8004664:	440a      	add	r2, r1
 8004666:	9205      	str	r2, [sp, #20]
 8004668:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800466a:	429a      	cmp	r2, r3
 800466c:	f47f af61 	bne.w	8004532 <OpenNNA_Operator_Conv2d+0x76>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
}
 8004670:	b023      	add	sp, #140	; 0x8c
 8004672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004676:	bf00      	nop

08004678 <OpenNNA_Operator_Dense>:
#include "opennna_operator_dense.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_Dense(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Input_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Channel;
 8004678:	6902      	ldr	r2, [r0, #16]
{
 800467a:	b5f0      	push	{r4, r5, r6, r7, lr}
    reg_t Input_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Row;
 800467c:	e9d2 3100 	ldrd	r3, r1, [r2]
    reg_t Input_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Col;
 8004680:	6895      	ldr	r5, [r2, #8]
    //dense算子独有
    reg_t units = ((Layer_Para_Dense *)Layers->Layer_Para_Extra)->units;//神经元数量
 8004682:	6942      	ldr	r2, [r0, #20]
 8004684:	6816      	ldr	r6, [r2, #0]
#if(HARDWARE_ACCELERATION==1)//
    data_t multOutput = 0;  /* Intermediate output */
#endif
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    for (reg_t i = 0; i < units; ++i)//依次计算每个神经元
 8004686:	2e00      	cmp	r6, #0
 8004688:	dd23      	ble.n	80046d2 <OpenNNA_Operator_Dense+0x5a>
    {
        /*bias*/
        ((data_t *)Layers->Output_Feature_Map)[i] = ((data_t *)Layers->Bias)[i];
        for (reg_t j= 0; j < (Input_Fmap_Channel*Input_Fmap_Row*Input_Fmap_Col); ++j)
 800468a:	fb01 f303 	mul.w	r3, r1, r3
 800468e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004690:	69c1      	ldr	r1, [r0, #28]
 8004692:	f04f 0e00 	mov.w	lr, #0
 8004696:	fb03 f505 	mul.w	r5, r3, r5
 800469a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800469e:	00af      	lsls	r7, r5, #2
        ((data_t *)Layers->Output_Feature_Map)[i] = ((data_t *)Layers->Bias)[i];
 80046a0:	ecf4 7a01 	vldmia	r4!, {s15}
        for (reg_t j= 0; j < (Input_Fmap_Channel*Input_Fmap_Row*Input_Fmap_Col); ++j)
 80046a4:	2d00      	cmp	r5, #0
        ((data_t *)Layers->Output_Feature_Map)[i] = ((data_t *)Layers->Bias)[i];
 80046a6:	ece1 7a01 	vstmia	r1!, {s15}
        for (reg_t j= 0; j < (Input_Fmap_Channel*Input_Fmap_Row*Input_Fmap_Col); ++j)
 80046aa:	dd0f      	ble.n	80046cc <OpenNNA_Operator_Dense+0x54>
 80046ac:	6983      	ldr	r3, [r0, #24]
 80046ae:	6a02      	ldr	r2, [r0, #32]
 80046b0:	eb07 0c03 	add.w	ip, r7, r3
 80046b4:	eb02 028e 	add.w	r2, r2, lr, lsl #2
        {
            /*weights*/
#if(HARDWARE_ACCELERATION==0)//不使用硬件加速，纯c推理，用户可自定义数据类型
            ((data_t *)Layers->Output_Feature_Map)[i] += ((data_t *)Layers->Input_Feature_Map)[j] * ((data_t *)Layers->Weights)[i*(Input_Fmap_Channel*Input_Fmap_Row*Input_Fmap_Col)+j];
 80046b8:	ecf3 6a01 	vldmia	r3!, {s13}
 80046bc:	ecb2 7a01 	vldmia	r2!, {s14}
        for (reg_t j= 0; j < (Input_Fmap_Channel*Input_Fmap_Row*Input_Fmap_Col); ++j)
 80046c0:	459c      	cmp	ip, r3
            ((data_t *)Layers->Output_Feature_Map)[i] += ((data_t *)Layers->Input_Feature_Map)[j] * ((data_t *)Layers->Weights)[i*(Input_Fmap_Channel*Input_Fmap_Row*Input_Fmap_Col)+j];
 80046c2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80046c6:	ed41 7a01 	vstr	s15, [r1, #-4]
        for (reg_t j= 0; j < (Input_Fmap_Channel*Input_Fmap_Row*Input_Fmap_Col); ++j)
 80046ca:	d1f5      	bne.n	80046b8 <OpenNNA_Operator_Dense+0x40>
    for (reg_t i = 0; i < units; ++i)//依次计算每个神经元
 80046cc:	42b4      	cmp	r4, r6
 80046ce:	44ae      	add	lr, r5
 80046d0:	d1e6      	bne.n	80046a0 <OpenNNA_Operator_Dense+0x28>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
}
 80046d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046d4 <OpenNNA_Operator_DWConv2d>:
// Note: 深度可分离卷积= 一个逐通道卷积(提取特征)+一个逐点卷积(融合，四舍五入就是普通卷积)构成，
// 本算子实现逐通道卷积，后面再接一层普通的conv2d卷积层就可以实现dwconv2d
void OpenNNA_Operator_DWConv2d(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Input_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Channel;
 80046d4:	6903      	ldr	r3, [r0, #16]
{
 80046d6:	4601      	mov	r1, r0
 80046d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    reg_t Input_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Row;
    reg_t Input_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Col;
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 80046dc:	691c      	ldr	r4, [r3, #16]
{
 80046de:	b0a3      	sub	sp, #140	; 0x8c
    reg_t Input_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Col;
 80046e0:	e9d3 2901 	ldrd	r2, r9, [r3, #4]
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 80046e4:	695b      	ldr	r3, [r3, #20]
{
 80046e6:	9020      	str	r0, [sp, #128]	; 0x80
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 80046e8:	9315      	str	r3, [sp, #84]	; 0x54
 80046ea:	4618      	mov	r0, r3
    //卷积运算相关的参数
    reg_t kernel_col = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_col;
 80046ec:	694b      	ldr	r3, [r1, #20]
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 80046ee:	9414      	str	r4, [sp, #80]	; 0x50
    reg_t kernel_row = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_row;
    reg_t kernel_channel = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_channel;

    reg_t filters = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->filters;
 80046f0:	68dd      	ldr	r5, [r3, #12]
    reg_t kernel_channel = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_channel;
 80046f2:	689e      	ldr	r6, [r3, #8]

    reg_t strides_col = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->strides_col;
 80046f4:	691f      	ldr	r7, [r3, #16]
    reg_t strides_row = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->strides_row;
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    //以下这个卷积实现思路以输出特征图为导向，当输入特征图为图像数据时，乘加次数最优
    for (int i = 0; i < filters; ++i) {//filters must = Output_Fmap_Channel
 80046f6:	2d00      	cmp	r5, #0
    reg_t filters = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->filters;
 80046f8:	9516      	str	r5, [sp, #88]	; 0x58
    reg_t kernel_channel = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_channel;
 80046fa:	9605      	str	r6, [sp, #20]
    reg_t strides_col = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->strides_col;
 80046fc:	9710      	str	r7, [sp, #64]	; 0x40
    reg_t kernel_row = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_row;
 80046fe:	e9d3 ba00 	ldrd	fp, sl, [r3]
    reg_t strides_row = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->strides_row;
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	9311      	str	r3, [sp, #68]	; 0x44
    for (int i = 0; i < filters; ++i) {//filters must = Output_Fmap_Channel
 8004706:	f340 80bc 	ble.w	8004882 <OpenNNA_Operator_DWConv2d+0x1ae>
        for (int j = 0; j < Output_Fmap_Row; ++j) {
            for (int k = 0; k < Output_Fmap_Col; ++k) {
                //顺道填入偏置
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 800470a:	4603      	mov	r3, r0
 800470c:	2c00      	cmp	r4, #0
 800470e:	fb00 f004 	mul.w	r0, r0, r4
 8004712:	9018      	str	r0, [sp, #96]	; 0x60
 8004714:	f340 80b5 	ble.w	8004882 <OpenNNA_Operator_DWConv2d+0x1ae>
 8004718:	2b00      	cmp	r3, #0
 800471a:	f340 80b2 	ble.w	8004882 <OpenNNA_Operator_DWConv2d+0x1ae>
 800471e:	fb0a f00b 	mul.w	r0, sl, fp
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	fb09 f202 	mul.w	r2, r9, r2
                =\
                ((data_t *)Layers->Bias)[i];
 8004728:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800472a:	931f      	str	r3, [sp, #124]	; 0x7c
 800472c:	fb00 f306 	mul.w	r3, r0, r6
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 8004730:	69c9      	ldr	r1, [r1, #28]
 8004732:	9217      	str	r2, [sp, #92]	; 0x5c
 8004734:	2200      	movs	r2, #0
 8004736:	931b      	str	r3, [sp, #108]	; 0x6c
 8004738:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800473c:	9204      	str	r2, [sp, #16]
 800473e:	931d      	str	r3, [sp, #116]	; 0x74
 8004740:	4653      	mov	r3, sl
 8004742:	46ca      	mov	sl, r9
 8004744:	9007      	str	r0, [sp, #28]
 8004746:	4699      	mov	r9, r3
                ((data_t *)Layers->Bias)[i];
 8004748:	9412      	str	r4, [sp, #72]	; 0x48
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 800474a:	910e      	str	r1, [sp, #56]	; 0x38
 800474c:	9208      	str	r2, [sp, #32]
    for (int i = 0; i < filters; ++i) {//filters must = Output_Fmap_Channel
 800474e:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
        for (int j = 0; j < Output_Fmap_Row; ++j) {
 8004752:	990a      	ldr	r1, [sp, #40]	; 0x28
                ((data_t *)Layers->Bias)[i];
 8004754:	2200      	movs	r2, #0
 8004756:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004758:	980e      	ldr	r0, [sp, #56]	; 0x38
 800475a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800475e:	920c      	str	r2, [sp, #48]	; 0x30
 8004760:	920d      	str	r2, [sp, #52]	; 0x34
 8004762:	18c3      	adds	r3, r0, r3
 8004764:	9809      	ldr	r0, [sp, #36]	; 0x24
        for (int j = 0; j < Output_Fmap_Row; ++j) {
 8004766:	920f      	str	r2, [sp, #60]	; 0x3c
 8004768:	9321      	str	r3, [sp, #132]	; 0x84
                ((data_t *)Layers->Bias)[i];
 800476a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800476c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004770:	9313      	str	r3, [sp, #76]	; 0x4c
 8004772:	008b      	lsls	r3, r1, #2
 8004774:	931e      	str	r3, [sp, #120]	; 0x78
 8004776:	9b08      	ldr	r3, [sp, #32]
 8004778:	0099      	lsls	r1, r3, #2
 800477a:	911c      	str	r1, [sp, #112]	; 0x70
 800477c:	991d      	ldr	r1, [sp, #116]	; 0x74
 800477e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8004782:	9319      	str	r3, [sp, #100]	; 0x64
            for (int k = 0; k < Output_Fmap_Col; ++k) {
 8004784:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004786:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004788:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800478c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800478e:	4411      	add	r1, r2
 8004790:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004792:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004796:	931a      	str	r3, [sp, #104]	; 0x68
 8004798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800479a:	fb03 f30a 	mul.w	r3, r3, sl
 800479e:	9306      	str	r3, [sp, #24]
{
 80047a0:	2300      	movs	r3, #0
 80047a2:	930b      	str	r3, [sp, #44]	; 0x2c
                ((data_t *)Layers->Bias)[i];
 80047a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80047a6:	681b      	ldr	r3, [r3, #0]
                =\
 80047a8:	f841 3b04 	str.w	r3, [r1], #4
                //一个卷积核去卷一下输入特征图
                for (int l = 0; l < kernel_channel; ++l) {
 80047ac:	9b05      	ldr	r3, [sp, #20]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	dd3f      	ble.n	8004832 <OpenNNA_Operator_DWConv2d+0x15e>
 80047b2:	f1b9 0f00 	cmp.w	r9, #0
 80047b6:	dd3c      	ble.n	8004832 <OpenNNA_Operator_DWConv2d+0x15e>
 80047b8:	f1bb 0f00 	cmp.w	fp, #0
 80047bc:	dd39      	ble.n	8004832 <OpenNNA_Operator_DWConv2d+0x15e>
                            //输出特征图=输入特征图*卷积核权重
                            ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
                            +=\
                            //dw的实现主要修改下面这一行代码中输入特征图的load逻辑(以kernel channel参数进行内存偏移访问 改为 以filter参数进行内存偏移访问)
                            // (l*Input_Fmap_Col*Input_Fmap_Row->i*Input_Fmap_Col*Input_Fmap_Row)
                            ((data_t *)Layers->Input_Feature_Map)[(n+k*strides_col)+(m+j*strides_row)*Input_Fmap_Col+i*Input_Fmap_Col*Input_Fmap_Row]\
 80047be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80047c0:	9819      	ldr	r0, [sp, #100]	; 0x64
 80047c2:	f8d3 e018 	ldr.w	lr, [r3, #24]
 80047c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                            *\
                            ((data_t *)Layers->Weights)[n+m*kernel_col+l*kernel_col*kernel_row+i*kernel_col*kernel_row*kernel_channel];
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 80047ce:	2000      	movs	r0, #0
 80047d0:	9301      	str	r3, [sp, #4]
 80047d2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80047d4:	44f4      	add	ip, lr
 80047d6:	9002      	str	r0, [sp, #8]
 80047d8:	eb03 0882 	add.w	r8, r3, r2, lsl #2
                for (int l = 0; l < kernel_channel; ++l) {
 80047dc:	9003      	str	r0, [sp, #12]
{
 80047de:	2500      	movs	r5, #0
 80047e0:	9b04      	ldr	r3, [sp, #16]
 80047e2:	9a02      	ldr	r2, [sp, #8]
 80047e4:	9c06      	ldr	r4, [sp, #24]
                    for (int m = 0; m < kernel_row; ++m) {
 80047e6:	462e      	mov	r6, r5
 80047e8:	189f      	adds	r7, r3, r2
                        for (int n = 0; n < kernel_col; ++n) {
 80047ea:	9801      	ldr	r0, [sp, #4]
 80047ec:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80047f0:	197a      	adds	r2, r7, r5
                            +=\
 80047f2:	ed51 7a01 	vldr	s15, [r1, #-4]
 80047f6:	4473      	add	r3, lr
 80047f8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80047fc:	eb0c 0084 	add.w	r0, ip, r4, lsl #2
                            ((data_t *)Layers->Input_Feature_Map)[(n+k*strides_col)+(m+j*strides_row)*Input_Fmap_Col+i*Input_Fmap_Col*Input_Fmap_Row]\
 8004800:	ecf3 6a01 	vldmia	r3!, {s13}
                            ((data_t *)Layers->Weights)[n+m*kernel_col+l*kernel_col*kernel_row+i*kernel_col*kernel_row*kernel_channel];
 8004804:	ecb2 7a01 	vldmia	r2!, {s14}
                        for (int n = 0; n < kernel_col; ++n) {
 8004808:	4298      	cmp	r0, r3
                            +=\
 800480a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800480e:	ed41 7a01 	vstr	s15, [r1, #-4]
                        for (int n = 0; n < kernel_col; ++n) {
 8004812:	d1f5      	bne.n	8004800 <OpenNNA_Operator_DWConv2d+0x12c>
                    for (int m = 0; m < kernel_row; ++m) {
 8004814:	3601      	adds	r6, #1
 8004816:	4454      	add	r4, sl
 8004818:	445d      	add	r5, fp
 800481a:	45b1      	cmp	r9, r6
 800481c:	d1e5      	bne.n	80047ea <OpenNNA_Operator_DWConv2d+0x116>
                for (int l = 0; l < kernel_channel; ++l) {
 800481e:	9a02      	ldr	r2, [sp, #8]
 8004820:	9807      	ldr	r0, [sp, #28]
 8004822:	9b03      	ldr	r3, [sp, #12]
 8004824:	4402      	add	r2, r0
 8004826:	3301      	adds	r3, #1
 8004828:	9202      	str	r2, [sp, #8]
 800482a:	9a05      	ldr	r2, [sp, #20]
 800482c:	9303      	str	r3, [sp, #12]
 800482e:	429a      	cmp	r2, r3
 8004830:	d1d5      	bne.n	80047de <OpenNNA_Operator_DWConv2d+0x10a>
            for (int k = 0; k < Output_Fmap_Col; ++k) {
 8004832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004834:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004836:	4413      	add	r3, r2
 8004838:	930b      	str	r3, [sp, #44]	; 0x2c
 800483a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800483c:	428b      	cmp	r3, r1
 800483e:	d1b1      	bne.n	80047a4 <OpenNNA_Operator_DWConv2d+0xd0>
        for (int j = 0; j < Output_Fmap_Row; ++j) {
 8004840:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004842:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004844:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004846:	440a      	add	r2, r1
 8004848:	9911      	ldr	r1, [sp, #68]	; 0x44
 800484a:	3301      	adds	r3, #1
 800484c:	920d      	str	r2, [sp, #52]	; 0x34
 800484e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004850:	930f      	str	r3, [sp, #60]	; 0x3c
 8004852:	440a      	add	r2, r1
 8004854:	920c      	str	r2, [sp, #48]	; 0x30
 8004856:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004858:	429a      	cmp	r2, r3
 800485a:	d193      	bne.n	8004784 <OpenNNA_Operator_DWConv2d+0xb0>
    for (int i = 0; i < filters; ++i) {//filters must = Output_Fmap_Channel
 800485c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800485e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004862:	440a      	add	r2, r1
 8004864:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8004866:	3301      	adds	r3, #1
 8004868:	920a      	str	r2, [sp, #40]	; 0x28
 800486a:	9a08      	ldr	r2, [sp, #32]
 800486c:	9309      	str	r3, [sp, #36]	; 0x24
 800486e:	440a      	add	r2, r1
 8004870:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8004872:	9208      	str	r2, [sp, #32]
 8004874:	9a04      	ldr	r2, [sp, #16]
 8004876:	440a      	add	r2, r1
 8004878:	9204      	str	r2, [sp, #16]
 800487a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800487c:	429a      	cmp	r2, r3
 800487e:	f47f af68 	bne.w	8004752 <OpenNNA_Operator_DWConv2d+0x7e>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 8004882:	b023      	add	sp, #140	; 0x8c
 8004884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004888 <OpenNNA_Operator_Example>:
#include "opennna_operator_example.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_Example(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Input_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Channel;
 8004888:	6903      	ldr	r3, [r0, #16]
    reg_t Input_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Row;
    reg_t Input_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Col;
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 800488a:	68d9      	ldr	r1, [r3, #12]
{
 800488c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
    //printf("Example算子已被调用\n");
    //下方示例会实现 输出特征图 = 输入特征图 * Weights + Bias
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    for (int i = 0; i < Output_Fmap_Channel; ++i) {
 8004890:	2900      	cmp	r1, #0
{
 8004892:	b08b      	sub	sp, #44	; 0x2c
    reg_t Input_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Col;
 8004894:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8004898:	e9d3 ba04 	ldrd	fp, sl, [r3, #16]
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 800489c:	9108      	str	r1, [sp, #32]
    reg_t Input_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Col;
 800489e:	9404      	str	r4, [sp, #16]
    for (int i = 0; i < Output_Fmap_Channel; ++i) {
 80048a0:	dd50      	ble.n	8004944 <OpenNNA_Operator_Example+0xbc>
        for (int j = 0; j < Output_Fmap_Row; ++j) {
            for (int k = 0; k < Output_Fmap_Col; ++k) {
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
                =\
                ((data_t *)Layers->Input_Feature_Map)[k+Input_Fmap_Col*j+Input_Fmap_Col*Input_Fmap_Row*i]*\
 80048a2:	fb04 f302 	mul.w	r3, r4, r2
 80048a6:	f1bb 0f00 	cmp.w	fp, #0
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 80048aa:	fb0a f20b 	mul.w	r2, sl, fp
 80048ae:	9207      	str	r2, [sp, #28]
 80048b0:	dd48      	ble.n	8004944 <OpenNNA_Operator_Example+0xbc>
 80048b2:	f1ba 0f00 	cmp.w	sl, #0
 80048b6:	dd45      	ble.n	8004944 <OpenNNA_Operator_Example+0xbc>
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	2600      	movs	r6, #0
                ((data_t *)Layers->Input_Feature_Map)[k+Input_Fmap_Col*j+Input_Fmap_Col*Input_Fmap_Row*i]*\
 80048bc:	f8d0 8018 	ldr.w	r8, [r0, #24]
 80048c0:	9309      	str	r3, [sp, #36]	; 0x24
 80048c2:	ea4f 038a 	mov.w	r3, sl, lsl #2
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 80048c6:	4637      	mov	r7, r6
    for (int i = 0; i < Output_Fmap_Channel; ++i) {
 80048c8:	9606      	str	r6, [sp, #24]
 80048ca:	9305      	str	r3, [sp, #20]
                ((data_t *)Layers->Weights)[k+Input_Fmap_Col*j+Input_Fmap_Col*Input_Fmap_Row*i]+\
 80048cc:	6a03      	ldr	r3, [r0, #32]
 80048ce:	9301      	str	r3, [sp, #4]
                ((data_t *)Layers->Bias)[k+Input_Fmap_Col*j+Input_Fmap_Col*Input_Fmap_Row*i];
 80048d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80048d2:	9302      	str	r3, [sp, #8]
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 80048d4:	69c3      	ldr	r3, [r0, #28]
 80048d6:	9303      	str	r3, [sp, #12]
{
 80048d8:	f04f 0c00 	mov.w	ip, #0
 80048dc:	9b05      	ldr	r3, [sp, #20]
 80048de:	4665      	mov	r5, ip
 80048e0:	eb08 0903 	add.w	r9, r8, r3
        for (int j = 0; j < Output_Fmap_Row; ++j) {
 80048e4:	46e6      	mov	lr, ip
            for (int k = 0; k < Output_Fmap_Col; ++k) {
 80048e6:	eb06 0285 	add.w	r2, r6, r5, lsl #2
 80048ea:	9b03      	ldr	r3, [sp, #12]
 80048ec:	9c02      	ldr	r4, [sp, #8]
 80048ee:	eb07 010c 	add.w	r1, r7, ip
 80048f2:	9801      	ldr	r0, [sp, #4]
 80048f4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80048f8:	eb08 0302 	add.w	r3, r8, r2
 80048fc:	4410      	add	r0, r2
 80048fe:	4422      	add	r2, r4
 8004900:	eb09 0485 	add.w	r4, r9, r5, lsl #2
                ((data_t *)Layers->Input_Feature_Map)[k+Input_Fmap_Col*j+Input_Fmap_Col*Input_Fmap_Row*i]*\
 8004904:	ecf3 6a01 	vldmia	r3!, {s13}
                ((data_t *)Layers->Weights)[k+Input_Fmap_Col*j+Input_Fmap_Col*Input_Fmap_Row*i]+\
 8004908:	ecb0 7a01 	vldmia	r0!, {s14}
                ((data_t *)Layers->Bias)[k+Input_Fmap_Col*j+Input_Fmap_Col*Input_Fmap_Row*i];
 800490c:	ecf2 7a01 	vldmia	r2!, {s15}
            for (int k = 0; k < Output_Fmap_Col; ++k) {
 8004910:	42a3      	cmp	r3, r4
                ((data_t *)Layers->Weights)[k+Input_Fmap_Col*j+Input_Fmap_Col*Input_Fmap_Row*i]+\
 8004912:	eee6 7a87 	vfma.f32	s15, s13, s14
                =\
 8004916:	ece1 7a01 	vstmia	r1!, {s15}
            for (int k = 0; k < Output_Fmap_Col; ++k) {
 800491a:	d1f3      	bne.n	8004904 <OpenNNA_Operator_Example+0x7c>
        for (int j = 0; j < Output_Fmap_Row; ++j) {
 800491c:	f10e 0e01 	add.w	lr, lr, #1
 8004920:	9b04      	ldr	r3, [sp, #16]
 8004922:	44d4      	add	ip, sl
 8004924:	45f3      	cmp	fp, lr
 8004926:	441d      	add	r5, r3
 8004928:	d1dd      	bne.n	80048e6 <OpenNNA_Operator_Example+0x5e>
    for (int i = 0; i < Output_Fmap_Channel; ++i) {
 800492a:	9a07      	ldr	r2, [sp, #28]
 800492c:	9b06      	ldr	r3, [sp, #24]
 800492e:	9905      	ldr	r1, [sp, #20]
 8004930:	4417      	add	r7, r2
 8004932:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004934:	3301      	adds	r3, #1
 8004936:	4411      	add	r1, r2
 8004938:	4416      	add	r6, r2
 800493a:	9a08      	ldr	r2, [sp, #32]
 800493c:	9306      	str	r3, [sp, #24]
 800493e:	429a      	cmp	r2, r3
 8004940:	9105      	str	r1, [sp, #20]
 8004942:	d1c9      	bne.n	80048d8 <OpenNNA_Operator_Example+0x50>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 8004944:	b00b      	add	sp, #44	; 0x2c
 8004946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800494a:	bf00      	nop
 800494c:	0000      	movs	r0, r0
	...

08004950 <OpenNNA_Operator_LeakyReLU>:
#include "opennna_operator_leakyrelu.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_LeakyReLU(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8004950:	6903      	ldr	r3, [r0, #16]
{
 8004952:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 8004956:	e9d3 9503 	ldrd	r9, r5, [r3, #12]
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 800495a:	695c      	ldr	r4, [r3, #20]
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    for (int i = 0; i < Output_Fmap_Channel; i++)
 800495c:	f1b9 0f00 	cmp.w	r9, #0
 8004960:	dd2e      	ble.n	80049c0 <OpenNNA_Operator_LeakyReLU+0x70>
 8004962:	2d00      	cmp	r5, #0
 8004964:	dd2c      	ble.n	80049c0 <OpenNNA_Operator_LeakyReLU+0x70>
 8004966:	2c00      	cmp	r4, #0
 8004968:	dd2a      	ble.n	80049c0 <OpenNNA_Operator_LeakyReLU+0x70>
    {
        for (int j = 0; j < Output_Fmap_Row; j++)
        {
            for (int k = 0; k < Output_Fmap_Col; k++)
            {
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 800496a:	2700      	movs	r7, #0
 800496c:	fb04 fa05 	mul.w	sl, r4, r5
 8004970:	00a4      	lsls	r4, r4, #2
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004972:	46b8      	mov	r8, r7
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] > 0 ? \
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] \
                : \
                0.01*((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k];
 8004974:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 80049e0 <OpenNNA_Operator_LeakyReLU+0x90>
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8004978:	e9d0 e606 	ldrd	lr, r6, [r0, #24]
        for (int j = 0; j < Output_Fmap_Row; j++)
 800497c:	00b8      	lsls	r0, r7, #2
 800497e:	f04f 0c00 	mov.w	ip, #0
 8004982:	eb0e 0187 	add.w	r1, lr, r7, lsl #2
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004986:	1832      	adds	r2, r6, r0
 8004988:	4420      	add	r0, r4
 800498a:	460b      	mov	r3, r1
 800498c:	eb0e 0100 	add.w	r1, lr, r0
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] > 0 ? \
 8004990:	ecf3 6a01 	vldmia	r3!, {s13}
                : \
 8004994:	eef5 6ac0 	vcmpe.f32	s13, #0.0
                0.01*((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k];
 8004998:	eeb7 7ae6 	vcvt.f64.f32	d7, s13
                : \
 800499c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                0.01*((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k];
 80049a0:	ee27 7b05 	vmul.f64	d7, d7, d5
                : \
 80049a4:	dd0e      	ble.n	80049c4 <OpenNNA_Operator_LeakyReLU+0x74>
            for (int k = 0; k < Output_Fmap_Col; k++)
 80049a6:	4299      	cmp	r1, r3
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 80049a8:	ece2 6a01 	vstmia	r2!, {s13}
            for (int k = 0; k < Output_Fmap_Col; k++)
 80049ac:	d1f0      	bne.n	8004990 <OpenNNA_Operator_LeakyReLU+0x40>
        for (int j = 0; j < Output_Fmap_Row; j++)
 80049ae:	f10c 0c01 	add.w	ip, ip, #1
 80049b2:	45ac      	cmp	ip, r5
 80049b4:	d1e7      	bne.n	8004986 <OpenNNA_Operator_LeakyReLU+0x36>
    for (int i = 0; i < Output_Fmap_Channel; i++)
 80049b6:	f108 0801 	add.w	r8, r8, #1
 80049ba:	4457      	add	r7, sl
 80049bc:	45c1      	cmp	r9, r8
 80049be:	d1dd      	bne.n	800497c <OpenNNA_Operator_LeakyReLU+0x2c>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 80049c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                : \
 80049c4:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
            for (int k = 0; k < Output_Fmap_Col; k++)
 80049c8:	4299      	cmp	r1, r3
                : \
 80049ca:	eca2 7a01 	vstmia	r2!, {s14}
            for (int k = 0; k < Output_Fmap_Col; k++)
 80049ce:	d1df      	bne.n	8004990 <OpenNNA_Operator_LeakyReLU+0x40>
        for (int j = 0; j < Output_Fmap_Row; j++)
 80049d0:	f10c 0c01 	add.w	ip, ip, #1
 80049d4:	45ac      	cmp	ip, r5
 80049d6:	d1d6      	bne.n	8004986 <OpenNNA_Operator_LeakyReLU+0x36>
 80049d8:	e7ed      	b.n	80049b6 <OpenNNA_Operator_LeakyReLU+0x66>
 80049da:	bf00      	nop
 80049dc:	f3af 8000 	nop.w
 80049e0:	47ae147b 	.word	0x47ae147b
 80049e4:	3f847ae1 	.word	0x3f847ae1

080049e8 <OpenNNA_Operator_MaxPool>:
#include "opennna_operator_maxpool.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_MaxPool(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Input_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Channel;
 80049e8:	6903      	ldr	r3, [r0, #16]
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;

    //池化算子特有参数
    reg_t kernel_col = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->kernel_col;
 80049ea:	6942      	ldr	r2, [r0, #20]
{
 80049ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 80049f0:	68df      	ldr	r7, [r3, #12]
{
 80049f2:	b091      	sub	sp, #68	; 0x44
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 80049f4:	691e      	ldr	r6, [r3, #16]
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 80049f6:	695d      	ldr	r5, [r3, #20]

    data_t max_value=0;//在MaxPool时存储最大值,在AveragePool存储均值

#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    for (int i = 0; i < Output_Fmap_Channel; ++i)//output_fmap_channel
 80049f8:	2f00      	cmp	r7, #0
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 80049fa:	9707      	str	r7, [sp, #28]
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 80049fc:	9608      	str	r6, [sp, #32]
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 80049fe:	9509      	str	r5, [sp, #36]	; 0x24
    reg_t Input_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Col;
 8004a00:	e9d3 4101 	ldrd	r4, r1, [r3, #4]
    reg_t kernel_row = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->kernel_row;
 8004a04:	e9d2 ec00 	ldrd	lr, ip, [r2]
    reg_t strides_row = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->strides_row;
 8004a08:	e9d2 b302 	ldrd	fp, r3, [r2, #8]
    for (int i = 0; i < Output_Fmap_Channel; ++i)//output_fmap_channel
 8004a0c:	dd73      	ble.n	8004af6 <OpenNNA_Operator_MaxPool+0x10e>
 8004a0e:	2e00      	cmp	r6, #0
 8004a10:	dd71      	ble.n	8004af6 <OpenNNA_Operator_MaxPool+0x10e>
 8004a12:	2d00      	cmp	r5, #0
 8004a14:	dd6f      	ble.n	8004af6 <OpenNNA_Operator_MaxPool+0x10e>
 8004a16:	fb03 f301 	mul.w	r3, r3, r1
 8004a1a:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8004a1e:	fb01 f404 	mul.w	r4, r1, r4
                        max_value = \
                        (((data_t *)Layers->Input_Feature_Map)[(i*Input_Fmap_Col*Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)] > max_value) ? \
                       ((data_t *)Layers->Input_Feature_Map)[(i*Input_Fmap_Col*Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)] : max_value;
                    }
                }
                ((data_t *)Layers->Output_Feature_Map)[(i*Output_Fmap_Col*Output_Fmap_Row) + (j*Output_Fmap_Col) + k] = max_value;
 8004a22:	2100      	movs	r1, #0
 8004a24:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a26:	ebce 738e 	rsb	r3, lr, lr, lsl #30
 8004a2a:	940c      	str	r4, [sp, #48]	; 0x30
 8004a2c:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8004a30:	fb05 f306 	mul.w	r3, r5, r6
 8004a34:	9104      	str	r1, [sp, #16]
 8004a36:	930d      	str	r3, [sp, #52]	; 0x34
 8004a38:	9103      	str	r1, [sp, #12]
    for (int i = 0; i < Output_Fmap_Channel; ++i)//output_fmap_channel
 8004a3a:	9105      	str	r1, [sp, #20]
                ((data_t *)Layers->Output_Feature_Map)[(i*Output_Fmap_Col*Output_Fmap_Row) + (j*Output_Fmap_Col) + k] = max_value;
 8004a3c:	e9d0 9006 	ldrd	r9, r0, [r0, #24]
 8004a40:	eb00 0385 	add.w	r3, r0, r5, lsl #2
 8004a44:	900a      	str	r0, [sp, #40]	; 0x28
 8004a46:	930e      	str	r3, [sp, #56]	; 0x38
 8004a48:	eb09 038e 	add.w	r3, r9, lr, lsl #2
 8004a4c:	930f      	str	r3, [sp, #60]	; 0x3c
                for (int l = 0; l < kernel_row; ++l)//pool_Kernel_size_row
 8004a4e:	9b03      	ldr	r3, [sp, #12]
 8004a50:	9302      	str	r3, [sp, #8]
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	9b04      	ldr	r3, [sp, #16]
 8004a56:	9301      	str	r3, [sp, #4]
        for (int j = 0; j < Output_Fmap_Row; ++j)//Output_Fmap_Row = (((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 8004a58:	2300      	movs	r3, #0
 8004a5a:	9306      	str	r3, [sp, #24]
            for (int k = 0; k < Output_Fmap_Col; ++k)//(((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 8004a5c:	9b01      	ldr	r3, [sp, #4]
{
 8004a5e:	2000      	movs	r0, #0
 8004a60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a62:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 8004a66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a68:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8004a6c:	9b00      	ldr	r3, [sp, #0]
 8004a6e:	9a02      	ldr	r2, [sp, #8]
 8004a70:	009d      	lsls	r5, r3, #2
 8004a72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a74:	eb03 0782 	add.w	r7, r3, r2, lsl #2
            	max_value = ((data_t *)Layers->Input_Feature_Map)[(i*Input_Fmap_Col*Input_Fmap_Row) + ((j * strides_row) * Input_Fmap_Col) + (k * strides_col)];
 8004a78:	eb05 0380 	add.w	r3, r5, r0, lsl #2
                for (int l = 0; l < kernel_row; ++l)//pool_Kernel_size_row
 8004a7c:	f1bc 0f00 	cmp.w	ip, #0
 8004a80:	ea4f 0280 	mov.w	r2, r0, lsl #2
            	max_value = ((data_t *)Layers->Input_Feature_Map)[(i*Input_Fmap_Col*Input_Fmap_Row) + ((j * strides_row) * Input_Fmap_Col) + (k * strides_col)];
 8004a84:	444b      	add	r3, r9
 8004a86:	edd3 7a00 	vldr	s15, [r3]
                for (int l = 0; l < kernel_row; ++l)//pool_Kernel_size_row
 8004a8a:	dd10      	ble.n	8004aae <OpenNNA_Operator_MaxPool+0xc6>
 8004a8c:	443a      	add	r2, r7
 8004a8e:	2100      	movs	r1, #0
                    for (int m = 0; m < kernel_col; ++m)//pool_Kernel_size_col
 8004a90:	f1be 0f00 	cmp.w	lr, #0
 8004a94:	dd07      	ble.n	8004aa6 <OpenNNA_Operator_MaxPool+0xbe>
 8004a96:	eb08 0302 	add.w	r3, r8, r2
                        (((data_t *)Layers->Input_Feature_Map)[(i*Input_Fmap_Col*Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)] > max_value) ? \
 8004a9a:	ecb3 7a01 	vldmia	r3!, {s14}
                    for (int m = 0; m < kernel_col; ++m)//pool_Kernel_size_col
 8004a9e:	4293      	cmp	r3, r2
                        max_value = \
 8004aa0:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
                    for (int m = 0; m < kernel_col; ++m)//pool_Kernel_size_col
 8004aa4:	d1f9      	bne.n	8004a9a <OpenNNA_Operator_MaxPool+0xb2>
                for (int l = 0; l < kernel_row; ++l)//pool_Kernel_size_row
 8004aa6:	3101      	adds	r1, #1
 8004aa8:	4452      	add	r2, sl
 8004aaa:	458c      	cmp	ip, r1
 8004aac:	d1f0      	bne.n	8004a90 <OpenNNA_Operator_MaxPool+0xa8>
                ((data_t *)Layers->Output_Feature_Map)[(i*Output_Fmap_Col*Output_Fmap_Row) + (j*Output_Fmap_Col) + k] = max_value;
 8004aae:	ece4 7a01 	vstmia	r4!, {s15}
            for (int k = 0; k < Output_Fmap_Col; ++k)//(((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 8004ab2:	42a6      	cmp	r6, r4
 8004ab4:	4458      	add	r0, fp
 8004ab6:	d1df      	bne.n	8004a78 <OpenNNA_Operator_MaxPool+0x90>
        for (int j = 0; j < Output_Fmap_Row; ++j)//Output_Fmap_Row = (((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 8004ab8:	9a01      	ldr	r2, [sp, #4]
 8004aba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004abc:	9b06      	ldr	r3, [sp, #24]
 8004abe:	440a      	add	r2, r1
 8004ac0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	9201      	str	r2, [sp, #4]
 8004ac6:	9a00      	ldr	r2, [sp, #0]
 8004ac8:	9306      	str	r3, [sp, #24]
 8004aca:	440a      	add	r2, r1
 8004acc:	9200      	str	r2, [sp, #0]
 8004ace:	9a02      	ldr	r2, [sp, #8]
 8004ad0:	440a      	add	r2, r1
 8004ad2:	9202      	str	r2, [sp, #8]
 8004ad4:	9a08      	ldr	r2, [sp, #32]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d1c0      	bne.n	8004a5c <OpenNNA_Operator_MaxPool+0x74>
    for (int i = 0; i < Output_Fmap_Channel; ++i)//output_fmap_channel
 8004ada:	9a03      	ldr	r2, [sp, #12]
 8004adc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004ade:	9b05      	ldr	r3, [sp, #20]
 8004ae0:	440a      	add	r2, r1
 8004ae2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	9203      	str	r2, [sp, #12]
 8004ae8:	9a04      	ldr	r2, [sp, #16]
 8004aea:	9305      	str	r3, [sp, #20]
 8004aec:	440a      	add	r2, r1
 8004aee:	9204      	str	r2, [sp, #16]
 8004af0:	9a07      	ldr	r2, [sp, #28]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d1ab      	bne.n	8004a4e <OpenNNA_Operator_MaxPool+0x66>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
}
 8004af6:	b011      	add	sp, #68	; 0x44
 8004af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004afc <OpenNNA_Operator_Padding>:
#include "opennna_operator_padding.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_Padding(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Input_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Channel;
 8004afc:	6903      	ldr	r3, [r0, #16]
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;

    //Padding特有参数
    reg_t Padding = ((Layer_Para_Padding *)Layers->Layer_Para_Extra)->padding;//填充几圈0
 8004afe:	6942      	ldr	r2, [r0, #20]
{
 8004b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8004b04:	68dd      	ldr	r5, [r3, #12]
{
 8004b06:	b089      	sub	sp, #36	; 0x24
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 8004b08:	691c      	ldr	r4, [r3, #16]
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    for (int i = 0; i < Output_Fmap_Channel; i++)//Output_Fmap_Channel
 8004b0a:	2d00      	cmp	r5, #0
    reg_t Padding = ((Layer_Para_Padding *)Layers->Layer_Para_Extra)->padding;//填充几圈0
 8004b0c:	6812      	ldr	r2, [r2, #0]
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8004b0e:	695f      	ldr	r7, [r3, #20]
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8004b10:	9505      	str	r5, [sp, #20]
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 8004b12:	9402      	str	r4, [sp, #8]
    reg_t Input_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Col;
 8004b14:	e9d3 6101 	ldrd	r6, r1, [r3, #4]
    for (int i = 0; i < Output_Fmap_Channel; i++)//Output_Fmap_Channel
 8004b18:	dd5d      	ble.n	8004bd6 <OpenNNA_Operator_Padding+0xda>
                {
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)] = 0;
                }
                else if (j >= (Padding + Input_Fmap_Row))//底部padding
                {
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)] = 0;
 8004b1a:	4623      	mov	r3, r4
 8004b1c:	fb07 f404 	mul.w	r4, r7, r4
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	9406      	str	r4, [sp, #24]
 8004b24:	dd57      	ble.n	8004bd6 <OpenNNA_Operator_Padding+0xda>
 8004b26:	2f00      	cmp	r7, #0
 8004b28:	dd55      	ble.n	8004bd6 <OpenNNA_Operator_Padding+0xda>
 8004b2a:	fb01 f302 	mul.w	r3, r1, r2
 8004b2e:	eb02 0801 	add.w	r8, r2, r1
 8004b32:	f04f 0a00 	mov.w	sl, #0
 8004b36:	46b9      	mov	r9, r7
 8004b38:	425b      	negs	r3, r3
 8004b3a:	4547      	cmp	r7, r8
 8004b3c:	eddf 7a41 	vldr	s15, [pc, #260]	; 8004c44 <OpenNNA_Operator_Padding+0x148>
 8004b40:	eba3 0302 	sub.w	r3, r3, r2
 8004b44:	bfa8      	it	ge
 8004b46:	46c1      	movge	r9, r8
    for (int i = 0; i < Output_Fmap_Channel; i++)//Output_Fmap_Channel
 8004b48:	f8cd a010 	str.w	sl, [sp, #16]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	9303      	str	r3, [sp, #12]
 8004b50:	fb01 f306 	mul.w	r3, r1, r6
 8004b54:	4416      	add	r6, r2
 8004b56:	1b1b      	subs	r3, r3, r4
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	9307      	str	r3, [sp, #28]
 8004b5c:	1bcb      	subs	r3, r1, r7
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	9301      	str	r3, [sp, #4]
                else if (j >= (Padding + Input_Fmap_Row))//底部padding
 8004b62:	f04f 0c00 	mov.w	ip, #0
 8004b66:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8004b6a:	46d3      	mov	fp, sl
        for (int j = 0; j < Output_Fmap_Row; j++)//Output_Fmap_Row 行
 8004b6c:	4664      	mov	r4, ip
 8004b6e:	46f2      	mov	sl, lr
 8004b70:	46e6      	mov	lr, ip
            for (int k = 0; k < Output_Fmap_Col; k++)//Output_Fmap_Col 列
 8004b72:	f1b8 0f00 	cmp.w	r8, #0
 8004b76:	dc31      	bgt.n	8004bdc <OpenNNA_Operator_Padding+0xe0>
                else if (j >= (Padding + Input_Fmap_Row))//底部padding
 8004b78:	2300      	movs	r3, #0
 8004b7a:	eb0b 0c0e 	add.w	ip, fp, lr
 8004b7e:	449c      	add	ip, r3
 8004b80:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
                if ( j < Padding)//顶部padding
 8004b84:	42a2      	cmp	r2, r4
 8004b86:	dc01      	bgt.n	8004b8c <OpenNNA_Operator_Padding+0x90>
                else if (j >= (Padding + Input_Fmap_Row))//底部padding
 8004b88:	42a6      	cmp	r6, r4
 8004b8a:	dc03      	bgt.n	8004b94 <OpenNNA_Operator_Padding+0x98>
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)] = 0;
 8004b8c:	69c1      	ldr	r1, [r0, #28]
 8004b8e:	4461      	add	r1, ip
 8004b90:	edc1 7a00 	vstr	s15, [r1]
                }
                /*k遍历列,左边和右边填充*/
                if (k < Padding)//左边padding
 8004b94:	429a      	cmp	r2, r3
 8004b96:	dc01      	bgt.n	8004b9c <OpenNNA_Operator_Padding+0xa0>
                {
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)] = 0;
                }
                else if (k >= (Padding + Input_Fmap_Col))//右边padding
 8004b98:	4598      	cmp	r8, r3
 8004b9a:	dc03      	bgt.n	8004ba4 <OpenNNA_Operator_Padding+0xa8>
                {
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)] = 0;
 8004b9c:	69c1      	ldr	r1, [r0, #28]
 8004b9e:	4461      	add	r1, ip
 8004ba0:	edc1 7a00 	vstr	s15, [r1]
            for (int k = 0; k < Output_Fmap_Col; k++)//Output_Fmap_Col 列
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	f10c 0c04 	add.w	ip, ip, #4
 8004baa:	429f      	cmp	r7, r3
 8004bac:	dcea      	bgt.n	8004b84 <OpenNNA_Operator_Padding+0x88>
        for (int j = 0; j < Output_Fmap_Row; j++)//Output_Fmap_Row 行
 8004bae:	9b01      	ldr	r3, [sp, #4]
 8004bb0:	3401      	adds	r4, #1
 8004bb2:	44be      	add	lr, r7
 8004bb4:	449a      	add	sl, r3
 8004bb6:	9b02      	ldr	r3, [sp, #8]
 8004bb8:	42a3      	cmp	r3, r4
 8004bba:	d1da      	bne.n	8004b72 <OpenNNA_Operator_Padding+0x76>
    for (int i = 0; i < Output_Fmap_Channel; i++)//Output_Fmap_Channel
 8004bbc:	9906      	ldr	r1, [sp, #24]
 8004bbe:	46da      	mov	sl, fp
 8004bc0:	9c07      	ldr	r4, [sp, #28]
 8004bc2:	448a      	add	sl, r1
 8004bc4:	9903      	ldr	r1, [sp, #12]
 8004bc6:	9b04      	ldr	r3, [sp, #16]
 8004bc8:	4421      	add	r1, r4
 8004bca:	3301      	adds	r3, #1
 8004bcc:	9103      	str	r1, [sp, #12]
 8004bce:	9905      	ldr	r1, [sp, #20]
 8004bd0:	9304      	str	r3, [sp, #16]
 8004bd2:	4299      	cmp	r1, r3
 8004bd4:	d1c5      	bne.n	8004b62 <OpenNNA_Operator_Padding+0x66>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 8004bd6:	b009      	add	sp, #36	; 0x24
 8004bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bdc:	eb0b 0c0e 	add.w	ip, fp, lr
            for (int k = 0; k < Output_Fmap_Col; k++)//Output_Fmap_Col 列
 8004be0:	2300      	movs	r3, #0
 8004be2:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8004be6:	e007      	b.n	8004bf8 <OpenNNA_Operator_Padding+0xfc>
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)] = 0;
 8004be8:	69c5      	ldr	r5, [r0, #28]
 8004bea:	440d      	add	r5, r1
 8004bec:	edc5 7a00 	vstr	s15, [r5]
            for (int k = 0; k < Output_Fmap_Col; k++)//Output_Fmap_Col 列
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	3104      	adds	r1, #4
 8004bf4:	4599      	cmp	r9, r3
 8004bf6:	dd21      	ble.n	8004c3c <OpenNNA_Operator_Padding+0x140>
                if ( j < Padding)//顶部padding
 8004bf8:	42a2      	cmp	r2, r4
 8004bfa:	dc01      	bgt.n	8004c00 <OpenNNA_Operator_Padding+0x104>
                else if (j >= (Padding + Input_Fmap_Row))//底部padding
 8004bfc:	42a6      	cmp	r6, r4
 8004bfe:	dc03      	bgt.n	8004c08 <OpenNNA_Operator_Padding+0x10c>
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)] = 0;
 8004c00:	69c5      	ldr	r5, [r0, #28]
 8004c02:	440d      	add	r5, r1
 8004c04:	edc5 7a00 	vstr	s15, [r5]
                if (k < Padding)//左边padding
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	dced      	bgt.n	8004be8 <OpenNNA_Operator_Padding+0xec>
                else if (k >= (Padding + Input_Fmap_Col))//右边padding
 8004c0c:	4598      	cmp	r8, r3
 8004c0e:	dc03      	bgt.n	8004c18 <OpenNNA_Operator_Padding+0x11c>
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)] = 0;
 8004c10:	69c5      	ldr	r5, [r0, #28]
 8004c12:	440d      	add	r5, r1
 8004c14:	edc5 7a00 	vstr	s15, [r5]
                if(j >= Padding && j < (Padding + Input_Fmap_Row) && k >= Padding && k < (Padding + Input_Fmap_Col))
 8004c18:	42a2      	cmp	r2, r4
 8004c1a:	dce9      	bgt.n	8004bf0 <OpenNNA_Operator_Padding+0xf4>
 8004c1c:	42a6      	cmp	r6, r4
 8004c1e:	dde7      	ble.n	8004bf0 <OpenNNA_Operator_Padding+0xf4>
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)]  = ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Row * Input_Fmap_Col) + ((j-Padding) * Input_Fmap_Col) + (k-Padding)];
 8004c20:	6985      	ldr	r5, [r0, #24]
            for (int k = 0; k < Output_Fmap_Col; k++)//Output_Fmap_Col 列
 8004c22:	3301      	adds	r3, #1
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)]  = ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Row * Input_Fmap_Col) + ((j-Padding) * Input_Fmap_Col) + (k-Padding)];
 8004c24:	4455      	add	r5, sl
            for (int k = 0; k < Output_Fmap_Col; k++)//Output_Fmap_Col 列
 8004c26:	4599      	cmp	r9, r3
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)]  = ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Row * Input_Fmap_Col) + ((j-Padding) * Input_Fmap_Col) + (k-Padding)];
 8004c28:	440d      	add	r5, r1
 8004c2a:	ed95 7a00 	vldr	s14, [r5]
 8004c2e:	69c5      	ldr	r5, [r0, #28]
 8004c30:	440d      	add	r5, r1
            for (int k = 0; k < Output_Fmap_Col; k++)//Output_Fmap_Col 列
 8004c32:	f101 0104 	add.w	r1, r1, #4
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)]  = ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Row * Input_Fmap_Col) + ((j-Padding) * Input_Fmap_Col) + (k-Padding)];
 8004c36:	ed85 7a00 	vstr	s14, [r5]
            for (int k = 0; k < Output_Fmap_Col; k++)//Output_Fmap_Col 列
 8004c3a:	dcdd      	bgt.n	8004bf8 <OpenNNA_Operator_Padding+0xfc>
 8004c3c:	429f      	cmp	r7, r3
 8004c3e:	dc9e      	bgt.n	8004b7e <OpenNNA_Operator_Padding+0x82>
 8004c40:	e7b5      	b.n	8004bae <OpenNNA_Operator_Padding+0xb2>
 8004c42:	bf00      	nop
 8004c44:	00000000 	.word	0x00000000

08004c48 <OpenNNA_Operator_ReLU>:
#include "opennna_operator_relu.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_ReLU(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8004c48:	6903      	ldr	r3, [r0, #16]
{
 8004c4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 8004c4e:	e9d3 9503 	ldrd	r9, r5, [r3, #12]
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8004c52:	695c      	ldr	r4, [r3, #20]
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004c54:	f1b9 0f00 	cmp.w	r9, #0
 8004c58:	dd27      	ble.n	8004caa <OpenNNA_Operator_ReLU+0x62>
 8004c5a:	2d00      	cmp	r5, #0
 8004c5c:	dd25      	ble.n	8004caa <OpenNNA_Operator_ReLU+0x62>
 8004c5e:	2c00      	cmp	r4, #0
 8004c60:	dd23      	ble.n	8004caa <OpenNNA_Operator_ReLU+0x62>
    {
        for (int j = 0; j < Output_Fmap_Row; j++)
        {
            for (int k = 0; k < Output_Fmap_Col; k++)
            {
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8004c62:	2700      	movs	r7, #0
 8004c64:	fb04 fa05 	mul.w	sl, r4, r5
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] > 0 ? \
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] \
                : \
 8004c68:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004cb0 <OpenNNA_Operator_ReLU+0x68>
 8004c6c:	00a4      	lsls	r4, r4, #2
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004c6e:	46b8      	mov	r8, r7
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8004c70:	e9d0 e606 	ldrd	lr, r6, [r0, #24]
        for (int j = 0; j < Output_Fmap_Row; j++)
 8004c74:	00b8      	lsls	r0, r7, #2
 8004c76:	f04f 0c00 	mov.w	ip, #0
 8004c7a:	eb0e 0187 	add.w	r1, lr, r7, lsl #2
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004c7e:	1832      	adds	r2, r6, r0
 8004c80:	4420      	add	r0, r4
 8004c82:	460b      	mov	r3, r1
 8004c84:	eb0e 0100 	add.w	r1, lr, r0
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] > 0 ? \
 8004c88:	ecf3 7a01 	vldmia	r3!, {s15}
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004c8c:	4299      	cmp	r1, r3
                : \
 8004c8e:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8004c92:	ece2 7a01 	vstmia	r2!, {s15}
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004c96:	d1f7      	bne.n	8004c88 <OpenNNA_Operator_ReLU+0x40>
        for (int j = 0; j < Output_Fmap_Row; j++)
 8004c98:	f10c 0c01 	add.w	ip, ip, #1
 8004c9c:	4565      	cmp	r5, ip
 8004c9e:	d1ee      	bne.n	8004c7e <OpenNNA_Operator_ReLU+0x36>
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004ca0:	f108 0801 	add.w	r8, r8, #1
 8004ca4:	4457      	add	r7, sl
 8004ca6:	45c1      	cmp	r9, r8
 8004ca8:	d1e4      	bne.n	8004c74 <OpenNNA_Operator_ReLU+0x2c>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 8004caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cae:	bf00      	nop
 8004cb0:	00000000 	.word	0x00000000

08004cb4 <OpenNNA_Operator_ReLU6>:
#include "opennna_operator_relu6.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_ReLU6(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8004cb4:	6903      	ldr	r3, [r0, #16]
{
 8004cb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 8004cba:	e9d3 a603 	ldrd	sl, r6, [r3, #12]
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8004cbe:	695d      	ldr	r5, [r3, #20]
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004cc0:	f1ba 0f00 	cmp.w	sl, #0
 8004cc4:	dd2e      	ble.n	8004d24 <OpenNNA_Operator_ReLU6+0x70>
 8004cc6:	2e00      	cmp	r6, #0
 8004cc8:	dd2c      	ble.n	8004d24 <OpenNNA_Operator_ReLU6+0x70>
 8004cca:	2d00      	cmp	r5, #0
 8004ccc:	dd2a      	ble.n	8004d24 <OpenNNA_Operator_ReLU6+0x70>
    {
        for (int j = 0; j < Output_Fmap_Row; j++)
        {
            for (int k = 0; k < Output_Fmap_Col; k++)
            {
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8004cce:	f04f 0800 	mov.w	r8, #0
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] > 6 ? \
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] \
                : \
 8004cd2:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004cd6:	fb05 fb06 	mul.w	fp, r5, r6
 8004cda:	00ad      	lsls	r5, r5, #2
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004cdc:	46c1      	mov	r9, r8
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8004cde:	e9d0 4706 	ldrd	r4, r7, [r0, #24]
 8004ce2:	2000      	movs	r0, #0
        for (int j = 0; j < Output_Fmap_Row; j++)
 8004ce4:	ea4f 0c88 	mov.w	ip, r8, lsl #2
 8004ce8:	f04f 0e00 	mov.w	lr, #0
 8004cec:	eb04 0188 	add.w	r1, r4, r8, lsl #2
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004cf0:	eb07 020c 	add.w	r2, r7, ip
 8004cf4:	44ac      	add	ip, r5
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	eb04 010c 	add.w	r1, r4, ip
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] > 6 ? \
 8004cfc:	ecf3 7a01 	vldmia	r3!, {s15}
                : \
 8004d00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d08:	dc0e      	bgt.n	8004d28 <OpenNNA_Operator_ReLU6+0x74>
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004d0a:	4299      	cmp	r1, r3
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8004d0c:	f842 0b04 	str.w	r0, [r2], #4
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004d10:	d1f4      	bne.n	8004cfc <OpenNNA_Operator_ReLU6+0x48>
        for (int j = 0; j < Output_Fmap_Row; j++)
 8004d12:	f10e 0e01 	add.w	lr, lr, #1
 8004d16:	45b6      	cmp	lr, r6
 8004d18:	d1ea      	bne.n	8004cf0 <OpenNNA_Operator_ReLU6+0x3c>
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004d1a:	f109 0901 	add.w	r9, r9, #1
 8004d1e:	44d8      	add	r8, fp
 8004d20:	45ca      	cmp	sl, r9
 8004d22:	d1df      	bne.n	8004ce4 <OpenNNA_Operator_ReLU6+0x30>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 8004d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004d28:	4299      	cmp	r1, r3
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8004d2a:	ece2 7a01 	vstmia	r2!, {s15}
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004d2e:	d1e5      	bne.n	8004cfc <OpenNNA_Operator_ReLU6+0x48>
        for (int j = 0; j < Output_Fmap_Row; j++)
 8004d30:	f10e 0e01 	add.w	lr, lr, #1
 8004d34:	45b6      	cmp	lr, r6
 8004d36:	d1db      	bne.n	8004cf0 <OpenNNA_Operator_ReLU6+0x3c>
 8004d38:	e7ef      	b.n	8004d1a <OpenNNA_Operator_ReLU6+0x66>
 8004d3a:	bf00      	nop

08004d3c <OpenNNA_Operator_Softmax>:
#include "math.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_Softmax(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8004d3c:	6903      	ldr	r3, [r0, #16]
 8004d3e:	68da      	ldr	r2, [r3, #12]
{
 8004d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    //Softmax独有
    data_t exp_sum = 0;//exp求sum
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    //得到exp 和exp sum
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004d44:	2a00      	cmp	r2, #0
{
 8004d46:	ed2d 8b02 	vpush	{d8}
 8004d4a:	b087      	sub	sp, #28
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8004d4c:	e9d3 9804 	ldrd	r9, r8, [r3, #16]
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8004d50:	9204      	str	r2, [sp, #16]
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004d52:	dd70      	ble.n	8004e36 <OpenNNA_Operator_Softmax+0xfa>
 8004d54:	fb08 f309 	mul.w	r3, r8, r9
 8004d58:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8004d5c:	4682      	mov	sl, r0
    data_t exp_sum = 0;//exp求sum
 8004d5e:	ed9f 8a38 	vldr	s16, [pc, #224]	; 8004e40 <OpenNNA_Operator_Softmax+0x104>
 8004d62:	9305      	str	r3, [sp, #20]
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004d64:	2300      	movs	r3, #0
 8004d66:	9201      	str	r2, [sp, #4]
 8004d68:	9302      	str	r3, [sp, #8]
 8004d6a:	9303      	str	r3, [sp, #12]
    {
        for (int j = 0; j < Output_Fmap_Row; j++)
 8004d6c:	f1b9 0f00 	cmp.w	r9, #0
 8004d70:	dd2a      	ble.n	8004dc8 <OpenNNA_Operator_Softmax+0x8c>
 8004d72:	9e02      	ldr	r6, [sp, #8]
 8004d74:	2700      	movs	r7, #0
        {
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004d76:	f1b8 0f00 	cmp.w	r8, #0
 8004d7a:	dd21      	ble.n	8004dc0 <OpenNNA_Operator_Softmax+0x84>
 8004d7c:	9a01      	ldr	r2, [sp, #4]
 8004d7e:	e9da 3406 	ldrd	r3, r4, [sl, #24]
 8004d82:	189d      	adds	r5, r3, r2
 8004d84:	eb03 0b86 	add.w	fp, r3, r6, lsl #2
 8004d88:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8004d8c:	eb05 0586 	add.w	r5, r5, r6, lsl #2
            {
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
                exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]);
 8004d90:	ed9b 0a00 	vldr	s0, [fp]
                exp_sum += exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]);
 8004d94:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
                exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]);
 8004d98:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8004d9c:	f005 f96c 	bl	800a078 <exp>
 8004da0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8004da4:	eca4 0a01 	vstmia	r4!, {s0}
                exp_sum += exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]);
 8004da8:	ecbb 0a01 	vldmia	fp!, {s0}
 8004dac:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8004db0:	f005 f962 	bl	800a078 <exp>
 8004db4:	ee38 0b00 	vadd.f64	d0, d8, d0
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004db8:	45ab      	cmp	fp, r5
                exp_sum += exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]);
 8004dba:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004dbe:	d1e7      	bne.n	8004d90 <OpenNNA_Operator_Softmax+0x54>
        for (int j = 0; j < Output_Fmap_Row; j++)
 8004dc0:	3701      	adds	r7, #1
 8004dc2:	4446      	add	r6, r8
 8004dc4:	45b9      	cmp	r9, r7
 8004dc6:	d1d6      	bne.n	8004d76 <OpenNNA_Operator_Softmax+0x3a>
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004dc8:	9a02      	ldr	r2, [sp, #8]
 8004dca:	9905      	ldr	r1, [sp, #20]
 8004dcc:	9b03      	ldr	r3, [sp, #12]
 8004dce:	440a      	add	r2, r1
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	9202      	str	r2, [sp, #8]
 8004dd4:	9a04      	ldr	r2, [sp, #16]
 8004dd6:	9303      	str	r3, [sp, #12]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d1c7      	bne.n	8004d6c <OpenNNA_Operator_Softmax+0x30>
 8004ddc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004de0:	f1b9 0f00 	cmp.w	r9, #0
 8004de4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8004de8:	dd25      	ble.n	8004e36 <OpenNNA_Operator_Softmax+0xfa>
 8004dea:	f1b8 0f00 	cmp.w	r8, #0
 8004dee:	dd22      	ble.n	8004e36 <OpenNNA_Operator_Softmax+0xfa>
        for (int j = 0; j < Output_Fmap_Row; j++)
        {
            for (int k = 0; k < Output_Fmap_Col; k++)
            {
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] / exp_sum;
 8004df0:	f8da 501c 	ldr.w	r5, [sl, #28]
 8004df4:	2600      	movs	r6, #0
 8004df6:	f8dd a004 	ldr.w	sl, [sp, #4]
 8004dfa:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 8004dfe:	4637      	mov	r7, r6
 8004e00:	468b      	mov	fp, r1
 8004e02:	46d4      	mov	ip, sl
    data_t exp_sum = 0;//exp求sum
 8004e04:	4634      	mov	r4, r6
 8004e06:	4660      	mov	r0, ip
        for (int j = 0; j < Output_Fmap_Row; j++)
 8004e08:	2100      	movs	r1, #0
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004e0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e0e:	182a      	adds	r2, r5, r0
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] / exp_sum;
 8004e10:	edd3 7a00 	vldr	s15, [r3]
 8004e14:	ee67 7a87 	vmul.f32	s15, s15, s14
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8004e18:	ece3 7a01 	vstmia	r3!, {s15}
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d1f7      	bne.n	8004e10 <OpenNNA_Operator_Softmax+0xd4>
        for (int j = 0; j < Output_Fmap_Row; j++)
 8004e20:	3101      	adds	r1, #1
 8004e22:	4450      	add	r0, sl
 8004e24:	4444      	add	r4, r8
 8004e26:	4589      	cmp	r9, r1
 8004e28:	d1ef      	bne.n	8004e0a <OpenNNA_Operator_Softmax+0xce>
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004e2a:	3701      	adds	r7, #1
 8004e2c:	9b04      	ldr	r3, [sp, #16]
 8004e2e:	44f4      	add	ip, lr
 8004e30:	445e      	add	r6, fp
 8004e32:	42bb      	cmp	r3, r7
 8004e34:	d1e6      	bne.n	8004e04 <OpenNNA_Operator_Softmax+0xc8>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 8004e36:	b007      	add	sp, #28
 8004e38:	ecbd 8b02 	vpop	{d8}
 8004e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e40:	00000000 	.word	0x00000000

08004e44 <OpenNNA_Operator_tanh>:
#include "math.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_tanh(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8004e44:	6903      	ldr	r3, [r0, #16]
 8004e46:	68da      	ldr	r2, [r3, #12]
{
 8004e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004e4c:	2a00      	cmp	r2, #0
{
 8004e4e:	ed2d 8b04 	vpush	{d8-d9}
 8004e52:	b087      	sub	sp, #28
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8004e54:	e9d3 8704 	ldrd	r8, r7, [r3, #16]
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8004e58:	9204      	str	r2, [sp, #16]
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004e5a:	dd42      	ble.n	8004ee2 <OpenNNA_Operator_tanh+0x9e>
 8004e5c:	f1b8 0f00 	cmp.w	r8, #0
 8004e60:	dd3f      	ble.n	8004ee2 <OpenNNA_Operator_tanh+0x9e>
 8004e62:	2f00      	cmp	r7, #0
 8004e64:	dd3d      	ble.n	8004ee2 <OpenNNA_Operator_tanh+0x9e>
 8004e66:	fb07 f308 	mul.w	r3, r7, r8
 8004e6a:	9305      	str	r3, [sp, #20]
        for (int j = 0; j < Output_Fmap_Row; j++)
        {
            for (int k = 0; k < Output_Fmap_Col; k++)
            {
                //output = (np.exp(z)-np.exp(-z))/(np.exp(z)+np.exp(-z))
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8004e6c:	e9d0 9306 	ldrd	r9, r3, [r0, #24]
 8004e70:	eb09 0287 	add.w	r2, r9, r7, lsl #2
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	2300      	movs	r3, #0
 8004e78:	9201      	str	r2, [sp, #4]
 8004e7a:	9302      	str	r3, [sp, #8]
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004e7c:	9303      	str	r3, [sp, #12]
{
 8004e7e:	9d02      	ldr	r5, [sp, #8]
        for (int j = 0; j < Output_Fmap_Row; j++)
 8004e80:	2600      	movs	r6, #0
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004e82:	9b00      	ldr	r3, [sp, #0]
 8004e84:	eb09 0b85 	add.w	fp, r9, r5, lsl #2
 8004e88:	eb03 0a85 	add.w	sl, r3, r5, lsl #2
 8004e8c:	9b01      	ldr	r3, [sp, #4]
 8004e8e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
                (exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]) -\
 8004e92:	ecbb 9a01 	vldmia	fp!, {s18}
 8004e96:	eeb7 0ac9 	vcvt.f64.f32	d0, s18
 8004e9a:	f005 f8ed 	bl	800a078 <exp>
 8004e9e:	eeb0 8b40 	vmov.f64	d8, d0
                exp(-((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k])) / \
 8004ea2:	eeb1 0a49 	vneg.f32	s0, s18
 8004ea6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8004eaa:	f005 f8e5 	bl	800a078 <exp>
                (exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]) -\
 8004eae:	ee38 6b40 	vsub.f64	d6, d8, d0
                (exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]) +\
 8004eb2:	ee38 8b00 	vadd.f64	d8, d8, d0
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004eb6:	455c      	cmp	r4, fp
                exp(-((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k])) / \
 8004eb8:	ee86 7b08 	vdiv.f64	d7, d6, d8
 8004ebc:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8004ec0:	ecaa 7a01 	vstmia	sl!, {s14}
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004ec4:	d1e5      	bne.n	8004e92 <OpenNNA_Operator_tanh+0x4e>
        for (int j = 0; j < Output_Fmap_Row; j++)
 8004ec6:	3601      	adds	r6, #1
 8004ec8:	443d      	add	r5, r7
 8004eca:	45b0      	cmp	r8, r6
 8004ecc:	d1d9      	bne.n	8004e82 <OpenNNA_Operator_tanh+0x3e>
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004ece:	9a02      	ldr	r2, [sp, #8]
 8004ed0:	9905      	ldr	r1, [sp, #20]
 8004ed2:	9b03      	ldr	r3, [sp, #12]
 8004ed4:	440a      	add	r2, r1
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	9202      	str	r2, [sp, #8]
 8004eda:	9a04      	ldr	r2, [sp, #16]
 8004edc:	9303      	str	r3, [sp, #12]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d1cd      	bne.n	8004e7e <OpenNNA_Operator_tanh+0x3a>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 8004ee2:	b007      	add	sp, #28
 8004ee4:	ecbd 8b04 	vpop	{d8-d9}
 8004ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004eec <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eec:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ef0:	b92b      	cbnz	r3, 8004efe <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8004ef2:	4b06      	ldr	r3, [pc, #24]	; (8004f0c <osKernelInitialize+0x20>)
 8004ef4:	6818      	ldr	r0, [r3, #0]
 8004ef6:	b928      	cbnz	r0, 8004f04 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004ef8:	2201      	movs	r2, #1
 8004efa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004efc:	4770      	bx	lr
    stat = osErrorISR;
 8004efe:	f06f 0005 	mvn.w	r0, #5
 8004f02:	4770      	bx	lr
    } else {
      stat = osError;
 8004f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  }

  return (stat);
}
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	24050e9c 	.word	0x24050e9c

08004f10 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f10:	b510      	push	{r4, lr}
 8004f12:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f16:	b974      	cbnz	r4, 8004f36 <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8004f18:	4b08      	ldr	r3, [pc, #32]	; (8004f3c <osKernelStart+0x2c>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	2a01      	cmp	r2, #1
 8004f1e:	d107      	bne.n	8004f30 <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f20:	4907      	ldr	r1, [pc, #28]	; (8004f40 <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004f22:	2202      	movs	r2, #2
 8004f24:	77cc      	strb	r4, [r1, #31]
 8004f26:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004f28:	f001 f910 	bl	800614c <vTaskStartScheduler>
      stat = osOK;
 8004f2c:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8004f2e:	bd10      	pop	{r4, pc}
      stat = osError;
 8004f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004f34:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8004f36:	f06f 0005 	mvn.w	r0, #5
}
 8004f3a:	bd10      	pop	{r4, pc}
 8004f3c:	24050e9c 	.word	0x24050e9c
 8004f40:	e000ed00 	.word	0xe000ed00

08004f44 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f44:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004f46:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f48:	b087      	sub	sp, #28
 8004f4a:	4614      	mov	r4, r2
  hTask = NULL;
 8004f4c:	9505      	str	r5, [sp, #20]
 8004f4e:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8004f52:	bb4a      	cbnz	r2, 8004fa8 <osThreadNew+0x64>
 8004f54:	b340      	cbz	r0, 8004fa8 <osThreadNew+0x64>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8004f56:	b1e4      	cbz	r4, 8004f92 <osThreadNew+0x4e>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8004f58:	69a6      	ldr	r6, [r4, #24]
 8004f5a:	bb4e      	cbnz	r6, 8004fb0 <osThreadNew+0x6c>
 8004f5c:	2618      	movs	r6, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004f5e:	6863      	ldr	r3, [r4, #4]
 8004f60:	07db      	lsls	r3, r3, #31
 8004f62:	d421      	bmi.n	8004fa8 <osThreadNew+0x64>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8004f64:	6963      	ldr	r3, [r4, #20]
 8004f66:	b33b      	cbz	r3, 8004fb8 <osThreadNew+0x74>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004f68:	ea4f 0c93 	mov.w	ip, r3, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f6c:	68a5      	ldr	r5, [r4, #8]
      if (attr->name != NULL) {
 8004f6e:	6827      	ldr	r7, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f70:	b33d      	cbz	r5, 8004fc2 <osThreadNew+0x7e>
 8004f72:	68e2      	ldr	r2, [r4, #12]
 8004f74:	2a5f      	cmp	r2, #95	; 0x5f
 8004f76:	d917      	bls.n	8004fa8 <osThreadNew+0x64>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f78:	6924      	ldr	r4, [r4, #16]
 8004f7a:	b1ab      	cbz	r3, 8004fa8 <osThreadNew+0x64>
 8004f7c:	b1a4      	cbz	r4, 8004fa8 <osThreadNew+0x64>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4662      	mov	r2, ip
 8004f82:	4639      	mov	r1, r7
 8004f84:	9600      	str	r6, [sp, #0]
 8004f86:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8004f8a:	f001 f81d 	bl	8005fc8 <xTaskCreateStatic>
 8004f8e:	4605      	mov	r5, r0
 8004f90:	e00b      	b.n	8004faa <osThreadNew+0x66>
 8004f92:	2280      	movs	r2, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;
 8004f94:	2618      	movs	r6, #24
      #endif
    }
    else {
      if (mem == 0) {
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004f96:	460b      	mov	r3, r1
 8004f98:	4621      	mov	r1, r4
 8004f9a:	ac05      	add	r4, sp, #20
 8004f9c:	9600      	str	r6, [sp, #0]
 8004f9e:	9401      	str	r4, [sp, #4]
 8004fa0:	f001 f84c 	bl	800603c <xTaskCreate>
 8004fa4:	2801      	cmp	r0, #1
 8004fa6:	d00a      	beq.n	8004fbe <osThreadNew+0x7a>
        return (NULL);
 8004fa8:	2500      	movs	r5, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 8004faa:	4628      	mov	r0, r5
 8004fac:	b007      	add	sp, #28
 8004fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004fb0:	1e72      	subs	r2, r6, #1
 8004fb2:	2a37      	cmp	r2, #55	; 0x37
 8004fb4:	d9d3      	bls.n	8004f5e <osThreadNew+0x1a>
 8004fb6:	e7f8      	b.n	8004faa <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 8004fb8:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8004fbc:	e7d6      	b.n	8004f6c <osThreadNew+0x28>
  return ((osThreadId_t)hTask);
 8004fbe:	9d05      	ldr	r5, [sp, #20]
 8004fc0:	e7f3      	b.n	8004faa <osThreadNew+0x66>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004fc2:	68e3      	ldr	r3, [r4, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1f0      	bne.n	8004faa <osThreadNew+0x66>
 8004fc8:	6923      	ldr	r3, [r4, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1ed      	bne.n	8004faa <osThreadNew+0x66>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004fce:	fa1f f28c 	uxth.w	r2, ip
 8004fd2:	463c      	mov	r4, r7
 8004fd4:	e7df      	b.n	8004f96 <osThreadNew+0x52>
 8004fd6:	bf00      	nop

08004fd8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004fd8:	b510      	push	{r4, lr}
 8004fda:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fde:	b92c      	cbnz	r4, 8004fec <osDelay+0x14>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8004fe0:	b900      	cbnz	r0, 8004fe4 <osDelay+0xc>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8004fe2:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
 8004fe4:	f001 f85c 	bl	80060a0 <vTaskDelay>
    stat = osOK;
 8004fe8:	4620      	mov	r0, r4
}
 8004fea:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8004fec:	f06f 0005 	mvn.w	r0, #5
}
 8004ff0:	bd10      	pop	{r4, pc}
 8004ff2:	bf00      	nop

08004ff4 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ff4:	4b04      	ldr	r3, [pc, #16]	; (8005008 <vApplicationGetIdleTaskMemory+0x14>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004ff6:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ff8:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ffa:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ffc:	4c03      	ldr	r4, [pc, #12]	; (800500c <vApplicationGetIdleTaskMemory+0x18>)
 8004ffe:	600c      	str	r4, [r1, #0]
}
 8005000:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005004:	6013      	str	r3, [r2, #0]
}
 8005006:	4770      	bx	lr
 8005008:	24050e3c 	.word	0x24050e3c
 800500c:	24050c3c 	.word	0x24050c3c

08005010 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005010:	4b05      	ldr	r3, [pc, #20]	; (8005028 <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005012:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005014:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005016:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800501a:	4c04      	ldr	r4, [pc, #16]	; (800502c <vApplicationGetTimerTaskMemory+0x1c>)
 800501c:	600c      	str	r4, [r1, #0]
}
 800501e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005022:	6013      	str	r3, [r2, #0]
}
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	240512a0 	.word	0x240512a0
 800502c:	24050ea0 	.word	0x24050ea0

08005030 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005030:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005034:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005038:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800503a:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800503c:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800503e:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005040:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop

08005048 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005048:	2300      	movs	r3, #0
 800504a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop

08005050 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005050:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8005052:	6802      	ldr	r2, [r0, #0]
{
 8005054:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005056:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 8005058:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 800505a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800505c:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800505e:	689c      	ldr	r4, [r3, #8]
 8005060:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005062:	6099      	str	r1, [r3, #8]
}
 8005064:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8005068:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800506a:	6002      	str	r2, [r0, #0]
}
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop

08005070 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005070:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005072:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005074:	1c6b      	adds	r3, r5, #1
 8005076:	d010      	beq.n	800509a <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005078:	f100 0308 	add.w	r3, r0, #8
 800507c:	461c      	mov	r4, r3
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	42aa      	cmp	r2, r5
 8005084:	d9fa      	bls.n	800507c <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8005086:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8005088:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800508a:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800508c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800508e:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005090:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8005092:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005094:	6002      	str	r2, [r0, #0]
}
 8005096:	bc30      	pop	{r4, r5}
 8005098:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800509a:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800509c:	6863      	ldr	r3, [r4, #4]
 800509e:	e7f2      	b.n	8005086 <vListInsert+0x16>

080050a0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050a0:	6903      	ldr	r3, [r0, #16]
{
 80050a2:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050a4:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050a6:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 80050aa:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 80050ac:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050b0:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050b2:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 80050b4:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050b8:	bf08      	it	eq
 80050ba:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 80050bc:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 80050be:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80050c0:	3a01      	subs	r2, #1
 80050c2:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 80050c4:	6818      	ldr	r0, [r3, #0]
}
 80050c6:	4770      	bx	lr

080050c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80050c8:	b570      	push	{r4, r5, r6, lr}
 80050ca:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80050cc:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80050ce:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050d0:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80050d2:	b92a      	cbnz	r2, 80050e0 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050d4:	6805      	ldr	r5, [r0, #0]
 80050d6:	b365      	cbz	r5, 8005132 <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80050d8:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80050da:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80050dc:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80050de:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80050e0:	b97d      	cbnz	r5, 8005102 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050e2:	6840      	ldr	r0, [r0, #4]
 80050e4:	f002 f8e8 	bl	80072b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050e8:	6863      	ldr	r3, [r4, #4]
 80050ea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80050ec:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050ee:	68a2      	ldr	r2, [r4, #8]
 80050f0:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050f2:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050f4:	d319      	bcc.n	800512a <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80050f6:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80050f8:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80050fa:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80050fc:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80050fe:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8005100:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005102:	68c0      	ldr	r0, [r0, #12]
 8005104:	f002 f8d8 	bl	80072b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005108:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800510a:	68e3      	ldr	r3, [r4, #12]
 800510c:	4251      	negs	r1, r2
 800510e:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005110:	6822      	ldr	r2, [r4, #0]
 8005112:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005114:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005116:	d202      	bcs.n	800511e <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005118:	68a3      	ldr	r3, [r4, #8]
 800511a:	440b      	add	r3, r1
 800511c:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800511e:	2d02      	cmp	r5, #2
 8005120:	d00d      	beq.n	800513e <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005122:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8005124:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005126:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8005128:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800512a:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 800512c:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800512e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8005130:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005132:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005134:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005136:	f001 fb33 	bl	80067a0 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800513a:	60a5      	str	r5, [r4, #8]
 800513c:	e7ce      	b.n	80050dc <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800513e:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
 8005140:	f04f 0000 	mov.w	r0, #0
 8005144:	bf38      	it	cc
 8005146:	2601      	movcc	r6, #1
 8005148:	e7c8      	b.n	80050dc <prvCopyDataToQueue+0x14>
 800514a:	bf00      	nop

0800514c <xQueueGenericCreateStatic>:
	{
 800514c:	b530      	push	{r4, r5, lr}
 800514e:	b083      	sub	sp, #12
 8005150:	f89d 4018 	ldrb.w	r4, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005154:	b940      	cbnz	r0, 8005168 <xQueueGenericCreateStatic+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	e7fe      	b.n	8005166 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 8005168:	461d      	mov	r5, r3
 800516a:	b153      	cbz	r3, 8005182 <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800516c:	b30a      	cbz	r2, 80051b2 <xQueueGenericCreateStatic+0x66>
 800516e:	b989      	cbnz	r1, 8005194 <xQueueGenericCreateStatic+0x48>
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	e7fe      	b.n	8005180 <xQueueGenericCreateStatic+0x34>
 8005182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8005192:	e7fe      	b.n	8005192 <xQueueGenericCreateStatic+0x46>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005194:	b16a      	cbz	r2, 80051b2 <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005196:	2350      	movs	r3, #80	; 0x50
 8005198:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800519a:	9b01      	ldr	r3, [sp, #4]
 800519c:	2b50      	cmp	r3, #80	; 0x50
 800519e:	d013      	beq.n	80051c8 <xQueueGenericCreateStatic+0x7c>
 80051a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	e7fe      	b.n	80051b0 <xQueueGenericCreateStatic+0x64>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80051b2:	2900      	cmp	r1, #0
 80051b4:	d0ef      	beq.n	8005196 <xQueueGenericCreateStatic+0x4a>
 80051b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ba:	f383 8811 	msr	BASEPRI, r3
 80051be:	f3bf 8f6f 	isb	sy
 80051c2:	f3bf 8f4f 	dsb	sy
 80051c6:	e7fe      	b.n	80051c6 <xQueueGenericCreateStatic+0x7a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80051c8:	2900      	cmp	r1, #0
 80051ca:	bf08      	it	eq
 80051cc:	462a      	moveq	r2, r5
	pxNewQueue->uxLength = uxQueueLength;
 80051ce:	63e8      	str	r0, [r5, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80051d0:	6429      	str	r1, [r5, #64]	; 0x40
 80051d2:	602a      	str	r2, [r5, #0]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80051d4:	9a01      	ldr	r2, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80051d6:	2201      	movs	r2, #1
 80051d8:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
	taskENTER_CRITICAL();
 80051dc:	f001 fdf2 	bl	8006dc4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051e0:	6829      	ldr	r1, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051e2:	2300      	movs	r3, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80051e4:	6069      	str	r1, [r5, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051e6:	63ab      	str	r3, [r5, #56]	; 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051e8:	e9d5 200f 	ldrd	r2, r0, [r5, #60]	; 0x3c
 80051ec:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051f0:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051f2:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051f4:	4401      	add	r1, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051f6:	60aa      	str	r2, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 80051f8:	22ff      	movs	r2, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051fa:	f105 0010 	add.w	r0, r5, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051fe:	60e9      	str	r1, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005200:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005204:	f885 2045 	strb.w	r2, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005208:	f7ff ff12 	bl	8005030 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800520c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8005210:	f7ff ff0e 	bl	8005030 <vListInitialise>
	taskEXIT_CRITICAL();
 8005214:	f001 fdf8 	bl	8006e08 <vPortExitCritical>
	}
 8005218:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
 800521a:	f885 404c 	strb.w	r4, [r5, #76]	; 0x4c
	}
 800521e:	b003      	add	sp, #12
 8005220:	bd30      	pop	{r4, r5, pc}
 8005222:	bf00      	nop

08005224 <xQueueGenericSend>:
{
 8005224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005228:	b084      	sub	sp, #16
 800522a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800522c:	2800      	cmp	r0, #0
 800522e:	f000 8103 	beq.w	8005438 <xQueueGenericSend+0x214>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005232:	4688      	mov	r8, r1
 8005234:	4604      	mov	r4, r0
 8005236:	461f      	mov	r7, r3
 8005238:	2900      	cmp	r1, #0
 800523a:	f000 8097 	beq.w	800536c <xQueueGenericSend+0x148>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800523e:	2f02      	cmp	r7, #2
 8005240:	d10b      	bne.n	800525a <xQueueGenericSend+0x36>
 8005242:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005244:	2b01      	cmp	r3, #1
 8005246:	d008      	beq.n	800525a <xQueueGenericSend+0x36>
 8005248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	e7fe      	b.n	8005258 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800525a:	f001 fa91 	bl	8006780 <xTaskGetSchedulerState>
 800525e:	2800      	cmp	r0, #0
 8005260:	f000 80f3 	beq.w	800544a <xQueueGenericSend+0x226>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005264:	f1a7 0902 	sub.w	r9, r7, #2
 8005268:	2500      	movs	r5, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800526a:	f104 0624 	add.w	r6, r4, #36	; 0x24
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800526e:	fab9 f989 	clz	r9, r9
 8005272:	ea4f 1959 	mov.w	r9, r9, lsr #5
		taskENTER_CRITICAL();
 8005276:	f001 fda5 	bl	8006dc4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800527a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800527c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800527e:	429a      	cmp	r2, r3
 8005280:	f0c0 80f0 	bcc.w	8005464 <xQueueGenericSend+0x240>
 8005284:	f1b9 0f00 	cmp.w	r9, #0
 8005288:	f040 80ec 	bne.w	8005464 <xQueueGenericSend+0x240>
				if( xTicksToWait == ( TickType_t ) 0 )
 800528c:	9b01      	ldr	r3, [sp, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 8101 	beq.w	8005496 <xQueueGenericSend+0x272>
				else if( xEntryTimeSet == pdFALSE )
 8005294:	2d00      	cmp	r5, #0
 8005296:	f000 80cb 	beq.w	8005430 <xQueueGenericSend+0x20c>
		taskEXIT_CRITICAL();
 800529a:	f001 fdb5 	bl	8006e08 <vPortExitCritical>
		vTaskSuspendAll();
 800529e:	f000 ffe7 	bl	8006270 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052a2:	f001 fd8f 	bl	8006dc4 <vPortEnterCritical>
 80052a6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80052aa:	2bff      	cmp	r3, #255	; 0xff
 80052ac:	d102      	bne.n	80052b4 <xQueueGenericSend+0x90>
 80052ae:	2300      	movs	r3, #0
 80052b0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80052b4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80052b8:	2bff      	cmp	r3, #255	; 0xff
 80052ba:	d102      	bne.n	80052c2 <xQueueGenericSend+0x9e>
 80052bc:	2300      	movs	r3, #0
 80052be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052c2:	f001 fda1 	bl	8006e08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052c6:	a901      	add	r1, sp, #4
 80052c8:	a802      	add	r0, sp, #8
 80052ca:	f001 fa0b 	bl	80066e4 <xTaskCheckForTimeOut>
 80052ce:	2800      	cmp	r0, #0
 80052d0:	f040 80e5 	bne.w	800549e <xQueueGenericSend+0x27a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052d4:	f001 fd76 	bl	8006dc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80052d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80052da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80052dc:	429a      	cmp	r2, r3
 80052de:	d052      	beq.n	8005386 <xQueueGenericSend+0x162>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80052e0:	f001 fd92 	bl	8006e08 <vPortExitCritical>
	taskENTER_CRITICAL();
 80052e4:	f001 fd6e 	bl	8006dc4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80052e8:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 80052ec:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052ee:	2d00      	cmp	r5, #0
 80052f0:	dc04      	bgt.n	80052fc <xQueueGenericSend+0xd8>
 80052f2:	e011      	b.n	8005318 <xQueueGenericSend+0xf4>
			--cTxLock;
 80052f4:	1e6a      	subs	r2, r5, #1
 80052f6:	b2d3      	uxtb	r3, r2
 80052f8:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052fa:	b16b      	cbz	r3, 8005318 <xQueueGenericSend+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052fe:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005300:	b153      	cbz	r3, 8005318 <xQueueGenericSend+0xf4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005302:	f001 f999 	bl	8006638 <xTaskRemoveFromEventList>
 8005306:	2800      	cmp	r0, #0
 8005308:	d0f4      	beq.n	80052f4 <xQueueGenericSend+0xd0>
						vTaskMissedYield();
 800530a:	f001 fa33 	bl	8006774 <vTaskMissedYield>
			--cTxLock;
 800530e:	1e6a      	subs	r2, r5, #1
 8005310:	b2d3      	uxtb	r3, r2
 8005312:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1f1      	bne.n	80052fc <xQueueGenericSend+0xd8>
		pxQueue->cTxLock = queueUNLOCKED;
 8005318:	23ff      	movs	r3, #255	; 0xff
 800531a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800531e:	f001 fd73 	bl	8006e08 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005322:	f001 fd4f 	bl	8006dc4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005326:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800532a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800532c:	2d00      	cmp	r5, #0
 800532e:	dd14      	ble.n	800535a <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005330:	f104 0a10 	add.w	sl, r4, #16
 8005334:	e003      	b.n	800533e <xQueueGenericSend+0x11a>
				--cRxLock;
 8005336:	1e6a      	subs	r2, r5, #1
 8005338:	b2d3      	uxtb	r3, r2
 800533a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800533c:	b16b      	cbz	r3, 800535a <xQueueGenericSend+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800533e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005340:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005342:	b153      	cbz	r3, 800535a <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005344:	f001 f978 	bl	8006638 <xTaskRemoveFromEventList>
 8005348:	2800      	cmp	r0, #0
 800534a:	d0f4      	beq.n	8005336 <xQueueGenericSend+0x112>
					vTaskMissedYield();
 800534c:	f001 fa12 	bl	8006774 <vTaskMissedYield>
				--cRxLock;
 8005350:	1e6a      	subs	r2, r5, #1
 8005352:	b2d3      	uxtb	r3, r2
 8005354:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1f1      	bne.n	800533e <xQueueGenericSend+0x11a>
		pxQueue->cRxLock = queueUNLOCKED;
 800535a:	23ff      	movs	r3, #255	; 0xff
 800535c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005360:	f001 fd52 	bl	8006e08 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8005364:	f000 ff8c 	bl	8006280 <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005368:	2501      	movs	r5, #1
 800536a:	e784      	b.n	8005276 <xQueueGenericSend+0x52>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800536c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800536e:	2b00      	cmp	r3, #0
 8005370:	f43f af65 	beq.w	800523e <xQueueGenericSend+0x1a>
 8005374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	e7fe      	b.n	8005384 <xQueueGenericSend+0x160>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005386:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
 800538a:	f001 fd3d 	bl	8006e08 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800538e:	9901      	ldr	r1, [sp, #4]
 8005390:	4650      	mov	r0, sl
 8005392:	f001 f8c3 	bl	800651c <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8005396:	f001 fd15 	bl	8006dc4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800539a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800539e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053a0:	2d00      	cmp	r5, #0
 80053a2:	dc04      	bgt.n	80053ae <xQueueGenericSend+0x18a>
 80053a4:	e011      	b.n	80053ca <xQueueGenericSend+0x1a6>
			--cTxLock;
 80053a6:	1e6b      	subs	r3, r5, #1
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053ac:	b16a      	cbz	r2, 80053ca <xQueueGenericSend+0x1a6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053b0:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053b2:	b153      	cbz	r3, 80053ca <xQueueGenericSend+0x1a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053b4:	f001 f940 	bl	8006638 <xTaskRemoveFromEventList>
 80053b8:	2800      	cmp	r0, #0
 80053ba:	d0f4      	beq.n	80053a6 <xQueueGenericSend+0x182>
						vTaskMissedYield();
 80053bc:	f001 f9da 	bl	8006774 <vTaskMissedYield>
			--cTxLock;
 80053c0:	1e6b      	subs	r3, r5, #1
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053c6:	2a00      	cmp	r2, #0
 80053c8:	d1f1      	bne.n	80053ae <xQueueGenericSend+0x18a>
		pxQueue->cTxLock = queueUNLOCKED;
 80053ca:	23ff      	movs	r3, #255	; 0xff
 80053cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80053d0:	f001 fd1a 	bl	8006e08 <vPortExitCritical>
	taskENTER_CRITICAL();
 80053d4:	f001 fcf6 	bl	8006dc4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80053d8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80053dc:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053de:	2d00      	cmp	r5, #0
 80053e0:	dc04      	bgt.n	80053ec <xQueueGenericSend+0x1c8>
 80053e2:	e011      	b.n	8005408 <xQueueGenericSend+0x1e4>
				--cRxLock;
 80053e4:	1e6b      	subs	r3, r5, #1
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053ea:	b16a      	cbz	r2, 8005408 <xQueueGenericSend+0x1e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053ec:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053ee:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053f0:	b153      	cbz	r3, 8005408 <xQueueGenericSend+0x1e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053f2:	f001 f921 	bl	8006638 <xTaskRemoveFromEventList>
 80053f6:	2800      	cmp	r0, #0
 80053f8:	d0f4      	beq.n	80053e4 <xQueueGenericSend+0x1c0>
					vTaskMissedYield();
 80053fa:	f001 f9bb 	bl	8006774 <vTaskMissedYield>
				--cRxLock;
 80053fe:	1e6b      	subs	r3, r5, #1
 8005400:	b2da      	uxtb	r2, r3
 8005402:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005404:	2a00      	cmp	r2, #0
 8005406:	d1f1      	bne.n	80053ec <xQueueGenericSend+0x1c8>
		pxQueue->cRxLock = queueUNLOCKED;
 8005408:	23ff      	movs	r3, #255	; 0xff
 800540a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800540e:	f001 fcfb 	bl	8006e08 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8005412:	f000 ff35 	bl	8006280 <xTaskResumeAll>
 8005416:	2800      	cmp	r0, #0
 8005418:	d1a6      	bne.n	8005368 <xQueueGenericSend+0x144>
					portYIELD_WITHIN_API();
 800541a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800541e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005422:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	e79b      	b.n	8005368 <xQueueGenericSend+0x144>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005430:	a802      	add	r0, sp, #8
 8005432:	f001 f94b 	bl	80066cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005436:	e730      	b.n	800529a <xQueueGenericSend+0x76>
 8005438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543c:	f383 8811 	msr	BASEPRI, r3
 8005440:	f3bf 8f6f 	isb	sy
 8005444:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005448:	e7fe      	b.n	8005448 <xQueueGenericSend+0x224>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800544a:	9b01      	ldr	r3, [sp, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	f43f af09 	beq.w	8005264 <xQueueGenericSend+0x40>
 8005452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005456:	f383 8811 	msr	BASEPRI, r3
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	f3bf 8f4f 	dsb	sy
 8005462:	e7fe      	b.n	8005462 <xQueueGenericSend+0x23e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005464:	463a      	mov	r2, r7
 8005466:	4641      	mov	r1, r8
 8005468:	4620      	mov	r0, r4
 800546a:	f7ff fe2d 	bl	80050c8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800546e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005470:	2b00      	cmp	r3, #0
 8005472:	d152      	bne.n	800551a <xQueueGenericSend+0x2f6>
					else if( xYieldRequired != pdFALSE )
 8005474:	b148      	cbz	r0, 800548a <xQueueGenericSend+0x266>
						queueYIELD_IF_USING_PREEMPTION();
 8005476:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800547a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800547e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800548a:	f001 fcbd 	bl	8006e08 <vPortExitCritical>
				return pdPASS;
 800548e:	2001      	movs	r0, #1
}
 8005490:	b004      	add	sp, #16
 8005492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
 8005496:	f001 fcb7 	bl	8006e08 <vPortExitCritical>
					return errQUEUE_FULL;
 800549a:	4648      	mov	r0, r9
 800549c:	e7f8      	b.n	8005490 <xQueueGenericSend+0x26c>
	taskENTER_CRITICAL();
 800549e:	f001 fc91 	bl	8006dc4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80054a2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80054a6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054a8:	2d00      	cmp	r5, #0
 80054aa:	dd10      	ble.n	80054ce <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054ac:	f104 0624 	add.w	r6, r4, #36	; 0x24
 80054b0:	e003      	b.n	80054ba <xQueueGenericSend+0x296>
			--cTxLock;
 80054b2:	1e6b      	subs	r3, r5, #1
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054b8:	b14a      	cbz	r2, 80054ce <xQueueGenericSend+0x2aa>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054bc:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054be:	b133      	cbz	r3, 80054ce <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054c0:	f001 f8ba 	bl	8006638 <xTaskRemoveFromEventList>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	d0f4      	beq.n	80054b2 <xQueueGenericSend+0x28e>
						vTaskMissedYield();
 80054c8:	f001 f954 	bl	8006774 <vTaskMissedYield>
 80054cc:	e7f1      	b.n	80054b2 <xQueueGenericSend+0x28e>
		pxQueue->cTxLock = queueUNLOCKED;
 80054ce:	23ff      	movs	r3, #255	; 0xff
 80054d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80054d4:	f001 fc98 	bl	8006e08 <vPortExitCritical>
	taskENTER_CRITICAL();
 80054d8:	f001 fc74 	bl	8006dc4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80054dc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80054e0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054e2:	2d00      	cmp	r5, #0
 80054e4:	dd10      	ble.n	8005508 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054e6:	f104 0610 	add.w	r6, r4, #16
 80054ea:	e003      	b.n	80054f4 <xQueueGenericSend+0x2d0>
				--cRxLock;
 80054ec:	1e6b      	subs	r3, r5, #1
 80054ee:	b2da      	uxtb	r2, r3
 80054f0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054f2:	b14a      	cbz	r2, 8005508 <xQueueGenericSend+0x2e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054f4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054f6:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054f8:	b133      	cbz	r3, 8005508 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054fa:	f001 f89d 	bl	8006638 <xTaskRemoveFromEventList>
 80054fe:	2800      	cmp	r0, #0
 8005500:	d0f4      	beq.n	80054ec <xQueueGenericSend+0x2c8>
					vTaskMissedYield();
 8005502:	f001 f937 	bl	8006774 <vTaskMissedYield>
 8005506:	e7f1      	b.n	80054ec <xQueueGenericSend+0x2c8>
		pxQueue->cRxLock = queueUNLOCKED;
 8005508:	23ff      	movs	r3, #255	; 0xff
 800550a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800550e:	f001 fc7b 	bl	8006e08 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8005512:	f000 feb5 	bl	8006280 <xTaskResumeAll>
			return errQUEUE_FULL;
 8005516:	2000      	movs	r0, #0
 8005518:	e7ba      	b.n	8005490 <xQueueGenericSend+0x26c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800551a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800551e:	f001 f88b 	bl	8006638 <xTaskRemoveFromEventList>
 8005522:	2800      	cmp	r0, #0
 8005524:	d0b1      	beq.n	800548a <xQueueGenericSend+0x266>
 8005526:	e7a6      	b.n	8005476 <xQueueGenericSend+0x252>

08005528 <xQueueReceive>:
{
 8005528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800552c:	b085      	sub	sp, #20
 800552e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005530:	2800      	cmp	r0, #0
 8005532:	f000 815f 	beq.w	80057f4 <xQueueReceive+0x2cc>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005536:	460f      	mov	r7, r1
 8005538:	4604      	mov	r4, r0
 800553a:	2900      	cmp	r1, #0
 800553c:	f000 8094 	beq.w	8005668 <xQueueReceive+0x140>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005540:	f001 f91e 	bl	8006780 <xTaskGetSchedulerState>
 8005544:	2800      	cmp	r0, #0
 8005546:	f000 809c 	beq.w	8005682 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 800554a:	f001 fc3b 	bl	8006dc4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800554e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005550:	2d00      	cmp	r5, #0
 8005552:	d172      	bne.n	800563a <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005554:	9b01      	ldr	r3, [sp, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 80f1 	beq.w	800573e <xQueueReceive+0x216>
		prvLockQueue( pxQueue );
 800555c:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800555e:	f104 0624 	add.w	r6, r4, #36	; 0x24
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005562:	a802      	add	r0, sp, #8
 8005564:	f001 f8b2 	bl	80066cc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8005568:	f001 fc4e 	bl	8006e08 <vPortExitCritical>
		vTaskSuspendAll();
 800556c:	f000 fe80 	bl	8006270 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005570:	f001 fc28 	bl	8006dc4 <vPortEnterCritical>
 8005574:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005578:	2bff      	cmp	r3, #255	; 0xff
 800557a:	d101      	bne.n	8005580 <xQueueReceive+0x58>
 800557c:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8005580:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005584:	2bff      	cmp	r3, #255	; 0xff
 8005586:	d101      	bne.n	800558c <xQueueReceive+0x64>
 8005588:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800558c:	f001 fc3c 	bl	8006e08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005590:	a901      	add	r1, sp, #4
 8005592:	a802      	add	r0, sp, #8
 8005594:	f001 f8a6 	bl	80066e4 <xTaskCheckForTimeOut>
 8005598:	2800      	cmp	r0, #0
 800559a:	d17f      	bne.n	800569c <xQueueReceive+0x174>
	taskENTER_CRITICAL();
 800559c:	f001 fc12 	bl	8006dc4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80055a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f000 80d1 	beq.w	800574a <xQueueReceive+0x222>
	taskEXIT_CRITICAL();
 80055a8:	f001 fc2e 	bl	8006e08 <vPortExitCritical>
	taskENTER_CRITICAL();
 80055ac:	f001 fc0a 	bl	8006dc4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80055b0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80055b4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055b6:	2d00      	cmp	r5, #0
 80055b8:	dc04      	bgt.n	80055c4 <xQueueReceive+0x9c>
 80055ba:	e011      	b.n	80055e0 <xQueueReceive+0xb8>
			--cTxLock;
 80055bc:	1e6b      	subs	r3, r5, #1
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055c2:	b16a      	cbz	r2, 80055e0 <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055c6:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055c8:	b153      	cbz	r3, 80055e0 <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055ca:	f001 f835 	bl	8006638 <xTaskRemoveFromEventList>
 80055ce:	2800      	cmp	r0, #0
 80055d0:	d0f4      	beq.n	80055bc <xQueueReceive+0x94>
						vTaskMissedYield();
 80055d2:	f001 f8cf 	bl	8006774 <vTaskMissedYield>
			--cTxLock;
 80055d6:	1e6b      	subs	r3, r5, #1
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055dc:	2a00      	cmp	r2, #0
 80055de:	d1f1      	bne.n	80055c4 <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
 80055e0:	23ff      	movs	r3, #255	; 0xff
 80055e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80055e6:	f001 fc0f 	bl	8006e08 <vPortExitCritical>
	taskENTER_CRITICAL();
 80055ea:	f001 fbeb 	bl	8006dc4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80055ee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80055f2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055f4:	2d00      	cmp	r5, #0
 80055f6:	dd14      	ble.n	8005622 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055f8:	f104 0910 	add.w	r9, r4, #16
 80055fc:	e003      	b.n	8005606 <xQueueReceive+0xde>
				--cRxLock;
 80055fe:	1e6b      	subs	r3, r5, #1
 8005600:	b2da      	uxtb	r2, r3
 8005602:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005604:	b16a      	cbz	r2, 8005622 <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005606:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005608:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800560a:	b153      	cbz	r3, 8005622 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800560c:	f001 f814 	bl	8006638 <xTaskRemoveFromEventList>
 8005610:	2800      	cmp	r0, #0
 8005612:	d0f4      	beq.n	80055fe <xQueueReceive+0xd6>
					vTaskMissedYield();
 8005614:	f001 f8ae 	bl	8006774 <vTaskMissedYield>
				--cRxLock;
 8005618:	1e6b      	subs	r3, r5, #1
 800561a:	b2da      	uxtb	r2, r3
 800561c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800561e:	2a00      	cmp	r2, #0
 8005620:	d1f1      	bne.n	8005606 <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
 8005622:	23ff      	movs	r3, #255	; 0xff
 8005624:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005628:	f001 fbee 	bl	8006e08 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800562c:	f000 fe28 	bl	8006280 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8005630:	f001 fbc8 	bl	8006dc4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005634:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005636:	2d00      	cmp	r5, #0
 8005638:	d07d      	beq.n	8005736 <xQueueReceive+0x20e>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800563a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800563c:	b152      	cbz	r2, 8005654 <xQueueReceive+0x12c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800563e:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005640:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005642:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005644:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005646:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005648:	d301      	bcc.n	800564e <xQueueReceive+0x126>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800564a:	6821      	ldr	r1, [r4, #0]
 800564c:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800564e:	4638      	mov	r0, r7
 8005650:	f001 fe32 	bl	80072b8 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005654:	3d01      	subs	r5, #1
 8005656:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005658:	6923      	ldr	r3, [r4, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	f040 80d3 	bne.w	8005806 <xQueueReceive+0x2de>
				taskEXIT_CRITICAL();
 8005660:	f001 fbd2 	bl	8006e08 <vPortExitCritical>
				return pdPASS;
 8005664:	2001      	movs	r0, #1
 8005666:	e06d      	b.n	8005744 <xQueueReceive+0x21c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005668:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800566a:	2b00      	cmp	r3, #0
 800566c:	f43f af68 	beq.w	8005540 <xQueueReceive+0x18>
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	e7fe      	b.n	8005680 <xQueueReceive+0x158>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005682:	9b01      	ldr	r3, [sp, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	f43f af60 	beq.w	800554a <xQueueReceive+0x22>
 800568a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	e7fe      	b.n	800569a <xQueueReceive+0x172>
	taskENTER_CRITICAL();
 800569c:	f001 fb92 	bl	8006dc4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80056a0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80056a4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056a6:	2d00      	cmp	r5, #0
 80056a8:	dc04      	bgt.n	80056b4 <xQueueReceive+0x18c>
 80056aa:	e011      	b.n	80056d0 <xQueueReceive+0x1a8>
			--cTxLock;
 80056ac:	1e6b      	subs	r3, r5, #1
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056b2:	b16a      	cbz	r2, 80056d0 <xQueueReceive+0x1a8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056b6:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056b8:	b153      	cbz	r3, 80056d0 <xQueueReceive+0x1a8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056ba:	f000 ffbd 	bl	8006638 <xTaskRemoveFromEventList>
 80056be:	2800      	cmp	r0, #0
 80056c0:	d0f4      	beq.n	80056ac <xQueueReceive+0x184>
						vTaskMissedYield();
 80056c2:	f001 f857 	bl	8006774 <vTaskMissedYield>
			--cTxLock;
 80056c6:	1e6b      	subs	r3, r5, #1
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056cc:	2a00      	cmp	r2, #0
 80056ce:	d1f1      	bne.n	80056b4 <xQueueReceive+0x18c>
		pxQueue->cTxLock = queueUNLOCKED;
 80056d0:	23ff      	movs	r3, #255	; 0xff
 80056d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80056d6:	f001 fb97 	bl	8006e08 <vPortExitCritical>
	taskENTER_CRITICAL();
 80056da:	f001 fb73 	bl	8006dc4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80056de:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80056e2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056e4:	2d00      	cmp	r5, #0
 80056e6:	dd14      	ble.n	8005712 <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056e8:	f104 0910 	add.w	r9, r4, #16
 80056ec:	e003      	b.n	80056f6 <xQueueReceive+0x1ce>
				--cRxLock;
 80056ee:	1e6b      	subs	r3, r5, #1
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056f4:	b16a      	cbz	r2, 8005712 <xQueueReceive+0x1ea>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056f6:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056f8:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056fa:	b153      	cbz	r3, 8005712 <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056fc:	f000 ff9c 	bl	8006638 <xTaskRemoveFromEventList>
 8005700:	2800      	cmp	r0, #0
 8005702:	d0f4      	beq.n	80056ee <xQueueReceive+0x1c6>
					vTaskMissedYield();
 8005704:	f001 f836 	bl	8006774 <vTaskMissedYield>
				--cRxLock;
 8005708:	1e6b      	subs	r3, r5, #1
 800570a:	b2da      	uxtb	r2, r3
 800570c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800570e:	2a00      	cmp	r2, #0
 8005710:	d1f1      	bne.n	80056f6 <xQueueReceive+0x1ce>
		pxQueue->cRxLock = queueUNLOCKED;
 8005712:	23ff      	movs	r3, #255	; 0xff
 8005714:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005718:	f001 fb76 	bl	8006e08 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800571c:	f000 fdb0 	bl	8006280 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8005720:	f001 fb50 	bl	8006dc4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005724:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005726:	b153      	cbz	r3, 800573e <xQueueReceive+0x216>
	taskEXIT_CRITICAL();
 8005728:	f001 fb6e 	bl	8006e08 <vPortExitCritical>
		taskENTER_CRITICAL();
 800572c:	f001 fb4a 	bl	8006dc4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005730:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005732:	2d00      	cmp	r5, #0
 8005734:	d181      	bne.n	800563a <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005736:	9b01      	ldr	r3, [sp, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	f47f af15 	bne.w	8005568 <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
 800573e:	f001 fb63 	bl	8006e08 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005742:	2000      	movs	r0, #0
}
 8005744:	b005      	add	sp, #20
 8005746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800574a:	f001 fb5d 	bl	8006e08 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800574e:	9901      	ldr	r1, [sp, #4]
 8005750:	4630      	mov	r0, r6
 8005752:	f000 fee3 	bl	800651c <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8005756:	f001 fb35 	bl	8006dc4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800575a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800575e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005760:	2d00      	cmp	r5, #0
 8005762:	dc04      	bgt.n	800576e <xQueueReceive+0x246>
 8005764:	e011      	b.n	800578a <xQueueReceive+0x262>
			--cTxLock;
 8005766:	1e6b      	subs	r3, r5, #1
 8005768:	b2da      	uxtb	r2, r3
 800576a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800576c:	b16a      	cbz	r2, 800578a <xQueueReceive+0x262>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800576e:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005770:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005772:	b153      	cbz	r3, 800578a <xQueueReceive+0x262>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005774:	f000 ff60 	bl	8006638 <xTaskRemoveFromEventList>
 8005778:	2800      	cmp	r0, #0
 800577a:	d0f4      	beq.n	8005766 <xQueueReceive+0x23e>
						vTaskMissedYield();
 800577c:	f000 fffa 	bl	8006774 <vTaskMissedYield>
			--cTxLock;
 8005780:	1e6b      	subs	r3, r5, #1
 8005782:	b2da      	uxtb	r2, r3
 8005784:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005786:	2a00      	cmp	r2, #0
 8005788:	d1f1      	bne.n	800576e <xQueueReceive+0x246>
		pxQueue->cTxLock = queueUNLOCKED;
 800578a:	23ff      	movs	r3, #255	; 0xff
 800578c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005790:	f001 fb3a 	bl	8006e08 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005794:	f001 fb16 	bl	8006dc4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005798:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800579c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800579e:	2d00      	cmp	r5, #0
 80057a0:	dd14      	ble.n	80057cc <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057a2:	f104 0910 	add.w	r9, r4, #16
 80057a6:	e003      	b.n	80057b0 <xQueueReceive+0x288>
				--cRxLock;
 80057a8:	1e6b      	subs	r3, r5, #1
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057ae:	b16a      	cbz	r2, 80057cc <xQueueReceive+0x2a4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057b0:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057b2:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057b4:	b153      	cbz	r3, 80057cc <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057b6:	f000 ff3f 	bl	8006638 <xTaskRemoveFromEventList>
 80057ba:	2800      	cmp	r0, #0
 80057bc:	d0f4      	beq.n	80057a8 <xQueueReceive+0x280>
					vTaskMissedYield();
 80057be:	f000 ffd9 	bl	8006774 <vTaskMissedYield>
				--cRxLock;
 80057c2:	1e6b      	subs	r3, r5, #1
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057c8:	2a00      	cmp	r2, #0
 80057ca:	d1f1      	bne.n	80057b0 <xQueueReceive+0x288>
		pxQueue->cRxLock = queueUNLOCKED;
 80057cc:	23ff      	movs	r3, #255	; 0xff
 80057ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80057d2:	f001 fb19 	bl	8006e08 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 80057d6:	f000 fd53 	bl	8006280 <xTaskResumeAll>
 80057da:	2800      	cmp	r0, #0
 80057dc:	d1a6      	bne.n	800572c <xQueueReceive+0x204>
					portYIELD_WITHIN_API();
 80057de:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80057e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057e6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 80057f2:	e79b      	b.n	800572c <xQueueReceive+0x204>
 80057f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8005804:	e7fe      	b.n	8005804 <xQueueReceive+0x2dc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005806:	f104 0010 	add.w	r0, r4, #16
 800580a:	f000 ff15 	bl	8006638 <xTaskRemoveFromEventList>
 800580e:	2800      	cmp	r0, #0
 8005810:	f43f af26 	beq.w	8005660 <xQueueReceive+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 8005814:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800581c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	e71a      	b.n	8005660 <xQueueReceive+0x138>
 800582a:	bf00      	nop

0800582c <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800582c:	4b12      	ldr	r3, [pc, #72]	; (8005878 <vQueueAddToRegistry+0x4c>)
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	b17a      	cbz	r2, 8005852 <vQueueAddToRegistry+0x26>
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	b162      	cbz	r2, 8005850 <vQueueAddToRegistry+0x24>
 8005836:	691a      	ldr	r2, [r3, #16]
 8005838:	b192      	cbz	r2, 8005860 <vQueueAddToRegistry+0x34>
 800583a:	699a      	ldr	r2, [r3, #24]
 800583c:	b192      	cbz	r2, 8005864 <vQueueAddToRegistry+0x38>
 800583e:	6a1a      	ldr	r2, [r3, #32]
 8005840:	b192      	cbz	r2, 8005868 <vQueueAddToRegistry+0x3c>
 8005842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005844:	b192      	cbz	r2, 800586c <vQueueAddToRegistry+0x40>
 8005846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005848:	b192      	cbz	r2, 8005870 <vQueueAddToRegistry+0x44>
 800584a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800584c:	b192      	cbz	r2, 8005874 <vQueueAddToRegistry+0x48>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800584e:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005850:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005852:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005856:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800585a:	f8cc 0004 	str.w	r0, [ip, #4]
	}
 800585e:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005860:	2202      	movs	r2, #2
 8005862:	e7f6      	b.n	8005852 <vQueueAddToRegistry+0x26>
 8005864:	2203      	movs	r2, #3
 8005866:	e7f4      	b.n	8005852 <vQueueAddToRegistry+0x26>
 8005868:	2204      	movs	r2, #4
 800586a:	e7f2      	b.n	8005852 <vQueueAddToRegistry+0x26>
 800586c:	2205      	movs	r2, #5
 800586e:	e7f0      	b.n	8005852 <vQueueAddToRegistry+0x26>
 8005870:	2206      	movs	r2, #6
 8005872:	e7ee      	b.n	8005852 <vQueueAddToRegistry+0x26>
 8005874:	2207      	movs	r2, #7
 8005876:	e7ec      	b.n	8005852 <vQueueAddToRegistry+0x26>
 8005878:	24051300 	.word	0x24051300

0800587c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800587c:	b570      	push	{r4, r5, r6, lr}
 800587e:	4605      	mov	r5, r0
 8005880:	460e      	mov	r6, r1
 8005882:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005884:	f001 fa9e 	bl	8006dc4 <vPortEnterCritical>
 8005888:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 800588c:	2bff      	cmp	r3, #255	; 0xff
 800588e:	d102      	bne.n	8005896 <vQueueWaitForMessageRestricted+0x1a>
 8005890:	2300      	movs	r3, #0
 8005892:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8005896:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800589a:	2bff      	cmp	r3, #255	; 0xff
 800589c:	d102      	bne.n	80058a4 <vQueueWaitForMessageRestricted+0x28>
 800589e:	2300      	movs	r3, #0
 80058a0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 80058a4:	f001 fab0 	bl	8006e08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80058a8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d043      	beq.n	8005936 <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
 80058ae:	f001 fa89 	bl	8006dc4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80058b2:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 80058b6:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058b8:	2c00      	cmp	r4, #0
 80058ba:	dd14      	ble.n	80058e6 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058bc:	f105 0624 	add.w	r6, r5, #36	; 0x24
 80058c0:	e003      	b.n	80058ca <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
 80058c2:	1e63      	subs	r3, r4, #1
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058c8:	b16a      	cbz	r2, 80058e6 <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058cc:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058ce:	b153      	cbz	r3, 80058e6 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058d0:	f000 feb2 	bl	8006638 <xTaskRemoveFromEventList>
 80058d4:	2800      	cmp	r0, #0
 80058d6:	d0f4      	beq.n	80058c2 <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 80058d8:	f000 ff4c 	bl	8006774 <vTaskMissedYield>
			--cTxLock;
 80058dc:	1e63      	subs	r3, r4, #1
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058e2:	2a00      	cmp	r2, #0
 80058e4:	d1f1      	bne.n	80058ca <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 80058e6:	23ff      	movs	r3, #255	; 0xff
 80058e8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80058ec:	f001 fa8c 	bl	8006e08 <vPortExitCritical>
	taskENTER_CRITICAL();
 80058f0:	f001 fa68 	bl	8006dc4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80058f4:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 80058f8:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058fa:	2c00      	cmp	r4, #0
 80058fc:	dd14      	ble.n	8005928 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058fe:	f105 0610 	add.w	r6, r5, #16
 8005902:	e003      	b.n	800590c <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
 8005904:	1e63      	subs	r3, r4, #1
 8005906:	b2da      	uxtb	r2, r3
 8005908:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800590a:	b16a      	cbz	r2, 8005928 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800590c:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800590e:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005910:	b153      	cbz	r3, 8005928 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005912:	f000 fe91 	bl	8006638 <xTaskRemoveFromEventList>
 8005916:	2800      	cmp	r0, #0
 8005918:	d0f4      	beq.n	8005904 <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
 800591a:	f000 ff2b 	bl	8006774 <vTaskMissedYield>
				--cRxLock;
 800591e:	1e63      	subs	r3, r4, #1
 8005920:	b2da      	uxtb	r2, r3
 8005922:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005924:	2a00      	cmp	r2, #0
 8005926:	d1f1      	bne.n	800590c <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
 8005928:	23ff      	movs	r3, #255	; 0xff
 800592a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 800592e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8005932:	f001 ba69 	b.w	8006e08 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005936:	4622      	mov	r2, r4
 8005938:	4631      	mov	r1, r6
 800593a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800593e:	f000 fe31 	bl	80065a4 <vTaskPlaceOnEventListRestricted>
 8005942:	e7b4      	b.n	80058ae <vQueueWaitForMessageRestricted+0x32>

08005944 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005948:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800594a:	f001 fa3b 	bl	8006dc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800594e:	4a34      	ldr	r2, [pc, #208]	; (8005a20 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 8005950:	4e34      	ldr	r6, [pc, #208]	; (8005a24 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 8005952:	6813      	ldr	r3, [r2, #0]
 8005954:	3301      	adds	r3, #1
 8005956:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005958:	6833      	ldr	r3, [r6, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d032      	beq.n	80059c4 <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800595e:	4c32      	ldr	r4, [pc, #200]	; (8005a28 <prvAddNewTaskToReadyList+0xe4>)
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	b33b      	cbz	r3, 80059b4 <prvAddNewTaskToReadyList+0x70>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005964:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8005966:	4f31      	ldr	r7, [pc, #196]	; (8005a2c <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8005968:	4a31      	ldr	r2, [pc, #196]	; (8005a30 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 800596a:	4932      	ldr	r1, [pc, #200]	; (8005a34 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 800596c:	6813      	ldr	r3, [r2, #0]
 800596e:	3301      	adds	r3, #1
 8005970:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005972:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8005974:	680b      	ldr	r3, [r1, #0]
 8005976:	4283      	cmp	r3, r0
 8005978:	d200      	bcs.n	800597c <prvAddNewTaskToReadyList+0x38>
 800597a:	6008      	str	r0, [r1, #0]
 800597c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005980:	1d29      	adds	r1, r5, #4
 8005982:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8005986:	f7ff fb63 	bl	8005050 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800598a:	f001 fa3d 	bl	8006e08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	b173      	cbz	r3, 80059b0 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005992:	6832      	ldr	r2, [r6, #0]
 8005994:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005996:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005998:	429a      	cmp	r2, r3
 800599a:	d209      	bcs.n	80059b0 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800599c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80059a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059b4:	6833      	ldr	r3, [r6, #0]
 80059b6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80059b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ba:	4f1c      	ldr	r7, [pc, #112]	; (8005a2c <prvAddNewTaskToReadyList+0xe8>)
 80059bc:	4283      	cmp	r3, r0
 80059be:	d8d3      	bhi.n	8005968 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
 80059c0:	6035      	str	r5, [r6, #0]
 80059c2:	e7d1      	b.n	8005968 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 80059c4:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059c6:	6813      	ldr	r3, [r2, #0]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d003      	beq.n	80059d4 <prvAddNewTaskToReadyList+0x90>
		prvAddTaskToReadyList( pxNewTCB );
 80059cc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80059ce:	4f17      	ldr	r7, [pc, #92]	; (8005a2c <prvAddNewTaskToReadyList+0xe8>)
 80059d0:	4c15      	ldr	r4, [pc, #84]	; (8005a28 <prvAddNewTaskToReadyList+0xe4>)
 80059d2:	e7c9      	b.n	8005968 <prvAddNewTaskToReadyList+0x24>
 80059d4:	4f15      	ldr	r7, [pc, #84]	; (8005a2c <prvAddNewTaskToReadyList+0xe8>)
 80059d6:	463c      	mov	r4, r7
 80059d8:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059dc:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059de:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059e0:	f7ff fb26 	bl	8005030 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059e4:	45a0      	cmp	r8, r4
 80059e6:	d1f9      	bne.n	80059dc <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059e8:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8005a4c <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 80059ec:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8005a50 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
 80059f0:	4648      	mov	r0, r9
 80059f2:	4c0d      	ldr	r4, [pc, #52]	; (8005a28 <prvAddNewTaskToReadyList+0xe4>)
 80059f4:	f7ff fb1c 	bl	8005030 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059f8:	4640      	mov	r0, r8
 80059fa:	f7ff fb19 	bl	8005030 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059fe:	480e      	ldr	r0, [pc, #56]	; (8005a38 <prvAddNewTaskToReadyList+0xf4>)
 8005a00:	f7ff fb16 	bl	8005030 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a04:	480d      	ldr	r0, [pc, #52]	; (8005a3c <prvAddNewTaskToReadyList+0xf8>)
 8005a06:	f7ff fb13 	bl	8005030 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a0a:	480d      	ldr	r0, [pc, #52]	; (8005a40 <prvAddNewTaskToReadyList+0xfc>)
 8005a0c:	f7ff fb10 	bl	8005030 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a10:	4b0c      	ldr	r3, [pc, #48]	; (8005a44 <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
 8005a12:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a14:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a18:	4b0b      	ldr	r3, [pc, #44]	; (8005a48 <prvAddNewTaskToReadyList+0x104>)
 8005a1a:	f8c3 8000 	str.w	r8, [r3]
}
 8005a1e:	e7a3      	b.n	8005968 <prvAddNewTaskToReadyList+0x24>
 8005a20:	240517b0 	.word	0x240517b0
 8005a24:	24051340 	.word	0x24051340
 8005a28:	2405180c 	.word	0x2405180c
 8005a2c:	2405134c 	.word	0x2405134c
 8005a30:	240517bc 	.word	0x240517bc
 8005a34:	240517c0 	.word	0x240517c0
 8005a38:	240517f8 	.word	0x240517f8
 8005a3c:	24051824 	.word	0x24051824
 8005a40:	24051810 	.word	0x24051810
 8005a44:	24051344 	.word	0x24051344
 8005a48:	24051348 	.word	0x24051348
 8005a4c:	240517c4 	.word	0x240517c4
 8005a50:	240517d8 	.word	0x240517d8

08005a54 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a58:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005a5a:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005a5e:	4606      	mov	r6, r0
 8005a60:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005a62:	464a      	mov	r2, r9
 8005a64:	21a5      	movs	r1, #165	; 0xa5
 8005a66:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005a68:	461f      	mov	r7, r3
 8005a6a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a6e:	f1a9 0904 	sub.w	r9, r9, #4
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005a72:	f001 fc2f 	bl	80072d4 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a76:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a78:	4499      	add	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a7a:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 8005a7e:	2d00      	cmp	r5, #0
 8005a80:	d07f      	beq.n	8005b82 <prvInitialiseNewTask.constprop.0+0x12e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a82:	782b      	ldrb	r3, [r5, #0]
 8005a84:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8005a88:	782b      	ldrb	r3, [r5, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d04d      	beq.n	8005b2a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a8e:	786b      	ldrb	r3, [r5, #1]
 8005a90:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 8005a94:	786b      	ldrb	r3, [r5, #1]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d047      	beq.n	8005b2a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a9a:	78ab      	ldrb	r3, [r5, #2]
 8005a9c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 8005aa0:	78ab      	ldrb	r3, [r5, #2]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d041      	beq.n	8005b2a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005aa6:	78eb      	ldrb	r3, [r5, #3]
 8005aa8:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 8005aac:	78eb      	ldrb	r3, [r5, #3]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d03b      	beq.n	8005b2a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ab2:	792b      	ldrb	r3, [r5, #4]
 8005ab4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 8005ab8:	792b      	ldrb	r3, [r5, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d035      	beq.n	8005b2a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005abe:	796b      	ldrb	r3, [r5, #5]
 8005ac0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 8005ac4:	796b      	ldrb	r3, [r5, #5]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d02f      	beq.n	8005b2a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005aca:	79ab      	ldrb	r3, [r5, #6]
 8005acc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 8005ad0:	79ab      	ldrb	r3, [r5, #6]
 8005ad2:	b353      	cbz	r3, 8005b2a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ad4:	79eb      	ldrb	r3, [r5, #7]
 8005ad6:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 8005ada:	79eb      	ldrb	r3, [r5, #7]
 8005adc:	b32b      	cbz	r3, 8005b2a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ade:	7a2b      	ldrb	r3, [r5, #8]
 8005ae0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 8005ae4:	7a2b      	ldrb	r3, [r5, #8]
 8005ae6:	b303      	cbz	r3, 8005b2a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ae8:	7a6b      	ldrb	r3, [r5, #9]
 8005aea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 8005aee:	7a6b      	ldrb	r3, [r5, #9]
 8005af0:	b1db      	cbz	r3, 8005b2a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005af2:	7aab      	ldrb	r3, [r5, #10]
 8005af4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 8005af8:	7aab      	ldrb	r3, [r5, #10]
 8005afa:	b1b3      	cbz	r3, 8005b2a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005afc:	7aeb      	ldrb	r3, [r5, #11]
 8005afe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 8005b02:	7aeb      	ldrb	r3, [r5, #11]
 8005b04:	b18b      	cbz	r3, 8005b2a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b06:	7b2b      	ldrb	r3, [r5, #12]
 8005b08:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 8005b0c:	7b2b      	ldrb	r3, [r5, #12]
 8005b0e:	b163      	cbz	r3, 8005b2a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b10:	7b6b      	ldrb	r3, [r5, #13]
 8005b12:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 8005b16:	7b6b      	ldrb	r3, [r5, #13]
 8005b18:	b13b      	cbz	r3, 8005b2a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b1a:	7bab      	ldrb	r3, [r5, #14]
 8005b1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
 8005b20:	7bab      	ldrb	r3, [r5, #14]
 8005b22:	b113      	cbz	r3, 8005b2a <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b24:	7beb      	ldrb	r3, [r5, #15]
 8005b26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b30:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8005b32:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b36:	1d20      	adds	r0, r4, #4
 8005b38:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8005b3a:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 8005b3e:	bf28      	it	cs
 8005b40:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8005b42:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005b44:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b46:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b4a:	f7ff fa7d 	bl	8005048 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b4e:	f104 0018 	add.w	r0, r4, #24
 8005b52:	f7ff fa79 	bl	8005048 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8005b56:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b5a:	463a      	mov	r2, r7
 8005b5c:	4631      	mov	r1, r6
 8005b5e:	4648      	mov	r0, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b60:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b62:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b64:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 8005b66:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005b6a:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b6e:	f001 f8fd 	bl	8006d6c <pxPortInitialiseStack>
 8005b72:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8005b74:	f1b8 0f00 	cmp.w	r8, #0
 8005b78:	d001      	beq.n	8005b7e <prvInitialiseNewTask.constprop.0+0x12a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b7a:	f8c8 4000 	str.w	r4, [r8]
}
 8005b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b82:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8005b86:	e7d3      	b.n	8005b30 <prvInitialiseNewTask.constprop.0+0xdc>

08005b88 <prvIdleTask>:
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	4c21      	ldr	r4, [pc, #132]	; (8005c10 <prvIdleTask+0x88>)
				taskYIELD();
 8005b8c:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8005b90:	4e20      	ldr	r6, [pc, #128]	; (8005c14 <prvIdleTask+0x8c>)
 8005b92:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
 8005b96:	4d20      	ldr	r5, [pc, #128]	; (8005c18 <prvIdleTask+0x90>)
 8005b98:	4f20      	ldr	r7, [pc, #128]	; (8005c1c <prvIdleTask+0x94>)
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	b353      	cbz	r3, 8005bf4 <prvIdleTask+0x6c>
		{
			taskENTER_CRITICAL();
 8005b9e:	f001 f911 	bl	8006dc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ba2:	68f3      	ldr	r3, [r6, #12]
 8005ba4:	f8d3 a00c 	ldr.w	sl, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ba8:	f10a 0004 	add.w	r0, sl, #4
 8005bac:	f7ff fa78 	bl	80050a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005bb0:	682b      	ldr	r3, [r5, #0]
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005bb6:	6823      	ldr	r3, [r4, #0]
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
 8005bbc:	f001 f924 	bl	8006e08 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005bc0:	f89a 305d 	ldrb.w	r3, [sl, #93]	; 0x5d
 8005bc4:	b163      	cbz	r3, 8005be0 <prvIdleTask+0x58>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d01e      	beq.n	8005c08 <prvIdleTask+0x80>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d0e5      	beq.n	8005b9a <prvIdleTask+0x12>
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	e7fe      	b.n	8005bde <prvIdleTask+0x56>
				vPortFree( pxTCB->pxStack );
 8005be0:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
 8005be4:	f001 fadc 	bl	80071a0 <vPortFree>
				vPortFree( pxTCB );
 8005be8:	4650      	mov	r0, sl
 8005bea:	f001 fad9 	bl	80071a0 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1d4      	bne.n	8005b9e <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d9cf      	bls.n	8005b9a <prvIdleTask+0x12>
				taskYIELD();
 8005bfa:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	e7c8      	b.n	8005b9a <prvIdleTask+0x12>
				vPortFree( pxTCB );
 8005c08:	4650      	mov	r0, sl
 8005c0a:	f001 fac9 	bl	80071a0 <vPortFree>
 8005c0e:	e7c4      	b.n	8005b9a <prvIdleTask+0x12>
 8005c10:	240517b4 	.word	0x240517b4
 8005c14:	24051824 	.word	0x24051824
 8005c18:	240517b0 	.word	0x240517b0
 8005c1c:	2405134c 	.word	0x2405134c

08005c20 <xTaskIncrementTick.part.0>:
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c20:	4b4a      	ldr	r3, [pc, #296]	; (8005d4c <xTaskIncrementTick.part.0+0x12c>)
BaseType_t xTaskIncrementTick( void )
 8005c22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c26:	681e      	ldr	r6, [r3, #0]
BaseType_t xTaskIncrementTick( void )
 8005c28:	b083      	sub	sp, #12
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c2a:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8005c2c:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c2e:	2e00      	cmp	r6, #0
 8005c30:	d040      	beq.n	8005cb4 <xTaskIncrementTick.part.0+0x94>
 8005c32:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8005d60 <xTaskIncrementTick.part.0+0x140>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c36:	f8db 3000 	ldr.w	r3, [fp]
 8005c3a:	429e      	cmp	r6, r3
 8005c3c:	d347      	bcc.n	8005cce <xTaskIncrementTick.part.0+0xae>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c3e:	4f44      	ldr	r7, [pc, #272]	; (8005d50 <xTaskIncrementTick.part.0+0x130>)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681d      	ldr	r5, [r3, #0]
 8005c44:	2d00      	cmp	r5, #0
 8005c46:	d077      	beq.n	8005d38 <xTaskIncrementTick.part.0+0x118>
BaseType_t xSwitchRequired = pdFALSE;
 8005c48:	2500      	movs	r5, #0
 8005c4a:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8005d64 <xTaskIncrementTick.part.0+0x144>
 8005c4e:	f8df a118 	ldr.w	sl, [pc, #280]	; 8005d68 <xTaskIncrementTick.part.0+0x148>
					prvAddTaskToReadyList( pxTCB );
 8005c52:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8005d6c <xTaskIncrementTick.part.0+0x14c>
 8005c56:	e022      	b.n	8005c9e <xTaskIncrementTick.part.0+0x7e>
 8005c58:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c5a:	f7ff fa21 	bl	80050a0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c60:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c64:	9901      	ldr	r1, [sp, #4]
 8005c66:	b113      	cbz	r3, 8005c6e <xTaskIncrementTick.part.0+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c68:	f7ff fa1a 	bl	80050a0 <uxListRemove>
 8005c6c:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8005c6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005c70:	f8d8 2000 	ldr.w	r2, [r8]
 8005c74:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8005c7e:	d901      	bls.n	8005c84 <xTaskIncrementTick.part.0+0x64>
 8005c80:	f8c8 3000 	str.w	r3, [r8]
 8005c84:	f7ff f9e4 	bl	8005050 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c88:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c8c:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c8e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005c90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c92:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
 8005c94:	4291      	cmp	r1, r2
 8005c96:	bf28      	it	cs
 8005c98:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d050      	beq.n	8005d40 <xTaskIncrementTick.part.0+0x120>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ca4:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ca6:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
 8005ca8:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005caa:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 8005cac:	d2d4      	bcs.n	8005c58 <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
 8005cae:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005cb2:	e011      	b.n	8005cd8 <xTaskIncrementTick.part.0+0xb8>
			taskSWITCH_DELAYED_LISTS();
 8005cb4:	4b26      	ldr	r3, [pc, #152]	; (8005d50 <xTaskIncrementTick.part.0+0x130>)
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	6812      	ldr	r2, [r2, #0]
 8005cba:	b30a      	cbz	r2, 8005d00 <xTaskIncrementTick.part.0+0xe0>
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	e7fe      	b.n	8005ccc <xTaskIncrementTick.part.0+0xac>
BaseType_t xSwitchRequired = pdFALSE;
 8005cce:	2500      	movs	r5, #0
 8005cd0:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8005d64 <xTaskIncrementTick.part.0+0x144>
 8005cd4:	f8df a090 	ldr.w	sl, [pc, #144]	; 8005d68 <xTaskIncrementTick.part.0+0x148>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005cd8:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
 8005cdc:	491d      	ldr	r1, [pc, #116]	; (8005d54 <xTaskIncrementTick.part.0+0x134>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
 8005cea:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8005cec:	2a02      	cmp	r2, #2
 8005cee:	bf28      	it	cs
 8005cf0:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 8005cf2:	2b00      	cmp	r3, #0
}
 8005cf4:	bf0c      	ite	eq
 8005cf6:	4628      	moveq	r0, r5
 8005cf8:	2001      	movne	r0, #1
 8005cfa:	b003      	add	sp, #12
 8005cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8005d00:	4a15      	ldr	r2, [pc, #84]	; (8005d58 <xTaskIncrementTick.part.0+0x138>)
 8005d02:	6818      	ldr	r0, [r3, #0]
 8005d04:	6811      	ldr	r1, [r2, #0]
 8005d06:	6019      	str	r1, [r3, #0]
 8005d08:	4914      	ldr	r1, [pc, #80]	; (8005d5c <xTaskIncrementTick.part.0+0x13c>)
 8005d0a:	6010      	str	r0, [r2, #0]
 8005d0c:	680a      	ldr	r2, [r1, #0]
 8005d0e:	3201      	adds	r2, #1
 8005d10:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	6812      	ldr	r2, [r2, #0]
 8005d16:	b932      	cbnz	r2, 8005d26 <xTaskIncrementTick.part.0+0x106>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d18:	f8df b044 	ldr.w	fp, [pc, #68]	; 8005d60 <xTaskIncrementTick.part.0+0x140>
 8005d1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d20:	f8cb 3000 	str.w	r3, [fp]
 8005d24:	e787      	b.n	8005c36 <xTaskIncrementTick.part.0+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d26:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d28:	f8df b034 	ldr.w	fp, [pc, #52]	; 8005d60 <xTaskIncrementTick.part.0+0x140>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d2c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f8cb 3000 	str.w	r3, [fp]
	}
}
 8005d36:	e77e      	b.n	8005c36 <xTaskIncrementTick.part.0+0x16>
 8005d38:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8005d64 <xTaskIncrementTick.part.0+0x144>
 8005d3c:	f8df a028 	ldr.w	sl, [pc, #40]	; 8005d68 <xTaskIncrementTick.part.0+0x148>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d44:	f8cb 3000 	str.w	r3, [fp]
					break;
 8005d48:	e7c6      	b.n	8005cd8 <xTaskIncrementTick.part.0+0xb8>
 8005d4a:	bf00      	nop
 8005d4c:	24051838 	.word	0x24051838
 8005d50:	24051344 	.word	0x24051344
 8005d54:	2405183c 	.word	0x2405183c
 8005d58:	24051348 	.word	0x24051348
 8005d5c:	240517f0 	.word	0x240517f0
 8005d60:	240517ec 	.word	0x240517ec
 8005d64:	2405134c 	.word	0x2405134c
 8005d68:	24051340 	.word	0x24051340
 8005d6c:	240517c0 	.word	0x240517c0

08005d70 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8005d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
 8005d74:	4d41      	ldr	r5, [pc, #260]	; (8005e7c <xTaskResumeAll.part.0+0x10c>)
BaseType_t xTaskResumeAll( void )
 8005d76:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8005d78:	f001 f824 	bl	8006dc4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005d7c:	682b      	ldr	r3, [r5, #0]
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d82:	682b      	ldr	r3, [r5, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d161      	bne.n	8005e4c <xTaskResumeAll.part.0+0xdc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d88:	4b3d      	ldr	r3, [pc, #244]	; (8005e80 <xTaskResumeAll.part.0+0x110>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d05d      	beq.n	8005e4c <xTaskResumeAll.part.0+0xdc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d90:	4e3c      	ldr	r6, [pc, #240]	; (8005e84 <xTaskResumeAll.part.0+0x114>)
 8005d92:	6833      	ldr	r3, [r6, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d06e      	beq.n	8005e76 <xTaskResumeAll.part.0+0x106>
 8005d98:	4f3b      	ldr	r7, [pc, #236]	; (8005e88 <xTaskResumeAll.part.0+0x118>)
 8005d9a:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8005e98 <xTaskResumeAll.part.0+0x128>
 8005d9e:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8005e9c <xTaskResumeAll.part.0+0x12c>
 8005da2:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8005ea0 <xTaskResumeAll.part.0+0x130>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005da6:	68f3      	ldr	r3, [r6, #12]
 8005da8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005daa:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dae:	f104 0018 	add.w	r0, r4, #24
 8005db2:	f7ff f975 	bl	80050a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005db6:	4658      	mov	r0, fp
 8005db8:	f7ff f972 	bl	80050a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005dbc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	4659      	mov	r1, fp
 8005dc2:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8005dcc:	d900      	bls.n	8005dd0 <xTaskResumeAll.part.0+0x60>
 8005dce:	603b      	str	r3, [r7, #0]
 8005dd0:	f7ff f93e 	bl	8005050 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dd4:	f8d8 3000 	ldr.w	r3, [r8]
 8005dd8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d33d      	bcc.n	8005e5c <xTaskResumeAll.part.0+0xec>
						xYieldPending = pdTRUE;
 8005de0:	2301      	movs	r3, #1
 8005de2:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005de6:	6833      	ldr	r3, [r6, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1dc      	bne.n	8005da6 <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dec:	4b27      	ldr	r3, [pc, #156]	; (8005e8c <xTaskResumeAll.part.0+0x11c>)
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	6812      	ldr	r2, [r2, #0]
 8005df2:	2a00      	cmp	r2, #0
 8005df4:	d03a      	beq.n	8005e6c <xTaskResumeAll.part.0+0xfc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005df6:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005df8:	4b25      	ldr	r3, [pc, #148]	; (8005e90 <xTaskResumeAll.part.0+0x120>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dfa:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005dfc:	68d2      	ldr	r2, [r2, #12]
 8005dfe:	6852      	ldr	r2, [r2, #4]
 8005e00:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005e02:	4e24      	ldr	r6, [pc, #144]	; (8005e94 <xTaskResumeAll.part.0+0x124>)
 8005e04:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8005e06:	b194      	cbz	r4, 8005e2e <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
 8005e08:	2701      	movs	r7, #1
 8005e0a:	e006      	b.n	8005e1a <xTaskResumeAll.part.0+0xaa>
 8005e0c:	f7ff ff08 	bl	8005c20 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 8005e10:	b108      	cbz	r0, 8005e16 <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
 8005e12:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005e16:	3c01      	subs	r4, #1
 8005e18:	d008      	beq.n	8005e2c <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e1a:	682b      	ldr	r3, [r5, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0f5      	beq.n	8005e0c <xTaskResumeAll.part.0+0x9c>
		++xPendedTicks;
 8005e20:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005e22:	3c01      	subs	r4, #1
		++xPendedTicks;
 8005e24:	f103 0301 	add.w	r3, r3, #1
 8005e28:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005e2a:	d1f6      	bne.n	8005e1a <xTaskResumeAll.part.0+0xaa>
						xPendedTicks = 0;
 8005e2c:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8005e2e:	f8da 3000 	ldr.w	r3, [sl]
 8005e32:	b15b      	cbz	r3, 8005e4c <xTaskResumeAll.part.0+0xdc>
					taskYIELD_IF_USING_PREEMPTION();
 8005e34:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e3c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005e48:	2001      	movs	r0, #1
 8005e4a:	e000      	b.n	8005e4e <xTaskResumeAll.part.0+0xde>
BaseType_t xAlreadyYielded = pdFALSE;
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8005e50:	f000 ffda 	bl	8006e08 <vPortExitCritical>
}
 8005e54:	9801      	ldr	r0, [sp, #4]
 8005e56:	b003      	add	sp, #12
 8005e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e5c:	6833      	ldr	r3, [r6, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1a1      	bne.n	8005da6 <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e62:	4b0a      	ldr	r3, [pc, #40]	; (8005e8c <xTaskResumeAll.part.0+0x11c>)
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	6812      	ldr	r2, [r2, #0]
 8005e68:	2a00      	cmp	r2, #0
 8005e6a:	d1c4      	bne.n	8005df6 <xTaskResumeAll.part.0+0x86>
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e6c:	4b08      	ldr	r3, [pc, #32]	; (8005e90 <xTaskResumeAll.part.0+0x120>)
 8005e6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	e7c5      	b.n	8005e02 <xTaskResumeAll.part.0+0x92>
 8005e76:	f8df a028 	ldr.w	sl, [pc, #40]	; 8005ea0 <xTaskResumeAll.part.0+0x130>
 8005e7a:	e7c2      	b.n	8005e02 <xTaskResumeAll.part.0+0x92>
 8005e7c:	240517b8 	.word	0x240517b8
 8005e80:	240517b0 	.word	0x240517b0
 8005e84:	240517f8 	.word	0x240517f8
 8005e88:	240517c0 	.word	0x240517c0
 8005e8c:	24051344 	.word	0x24051344
 8005e90:	240517ec 	.word	0x240517ec
 8005e94:	240517f4 	.word	0x240517f4
 8005e98:	2405134c 	.word	0x2405134c
 8005e9c:	24051340 	.word	0x24051340
 8005ea0:	2405183c 	.word	0x2405183c

08005ea4 <prvListTasksWithinSingleList.part.0>:
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ea4:	684b      	ldr	r3, [r1, #4]
	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 8005ea6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f101 0708 	add.w	r7, r1, #8
 8005eb0:	4604      	mov	r4, r0
	UBaseType_t uxTask = 0;
 8005eb2:	2600      	movs	r6, #0
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eb4:	42bb      	cmp	r3, r7
	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8005fc0 <prvListTasksWithinSingleList.part.0+0x11c>
				pxTaskStatus->eCurrentState = eRunning;
 8005ebc:	46b3      	mov	fp, r6
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ebe:	bf08      	it	eq
 8005ec0:	68cb      	ldreq	r3, [r1, #12]
	++uxSchedulerSuspended;
 8005ec2:	f8df a100 	ldr.w	sl, [pc, #256]	; 8005fc4 <prvListTasksWithinSingleList.part.0+0x120>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ec6:	f8d3 900c 	ldr.w	r9, [r3, #12]
				pxTaskStatus->eCurrentState = eRunning;
 8005eca:	4618      	mov	r0, r3
 8005ecc:	464b      	mov	r3, r9
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ece:	6840      	ldr	r0, [r0, #4]
				pxTaskStatus->eCurrentState = eRunning;
 8005ed0:	46b9      	mov	r9, r7
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ed2:	6048      	str	r0, [r1, #4]
 8005ed4:	4581      	cmp	r9, r0
 8005ed6:	d035      	beq.n	8005f44 <prvListTasksWithinSingleList.part.0+0xa0>
 8005ed8:	68c7      	ldr	r7, [r0, #12]
		pxTCB = prvGetTCBFromHandle( xTask );
 8005eda:	2f00      	cmp	r7, #0
 8005edc:	d038      	beq.n	8005f50 <prvListTasksWithinSingleList.part.0+0xac>
 8005ede:	463d      	mov	r5, r7
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8005ee0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8005ee2:	f8d5 c030 	ldr.w	ip, [r5, #48]	; 0x30
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8005ee6:	6120      	str	r0, [r4, #16]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8005ee8:	6c68      	ldr	r0, [r5, #68]	; 0x44
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8005eea:	6025      	str	r5, [r4, #0]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8005eec:	60a0      	str	r0, [r4, #8]
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8005eee:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8005ef0:	f8c4 c01c 	str.w	ip, [r4, #28]
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8005ef4:	6160      	str	r0, [r4, #20]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8005ef6:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8005efa:	6060      	str	r0, [r4, #4]
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8005efc:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8005efe:	61a0      	str	r0, [r4, #24]
			if( pxTCB == pxCurrentTCB )
 8005f00:	f8d8 0000 	ldr.w	r0, [r8]
 8005f04:	42a8      	cmp	r0, r5
 8005f06:	d026      	beq.n	8005f56 <prvListTasksWithinSingleList.part.0+0xb2>
					if( eState == eSuspended )
 8005f08:	2a03      	cmp	r2, #3
				pxTaskStatus->eCurrentState = eState;
 8005f0a:	7322      	strb	r2, [r4, #12]
					if( eState == eSuspended )
 8005f0c:	d036      	beq.n	8005f7c <prvListTasksWithinSingleList.part.0+0xd8>
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005f0e:	f89c 0000 	ldrb.w	r0, [ip]
 8005f12:	28a5      	cmp	r0, #165	; 0xa5
 8005f14:	d125      	bne.n	8005f62 <prvListTasksWithinSingleList.part.0+0xbe>
 8005f16:	f1cc 0e01 	rsb	lr, ip, #1
			ulCount++;
 8005f1a:	eb0e 050c 	add.w	r5, lr, ip
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005f1e:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 8005f22:	28a5      	cmp	r0, #165	; 0xa5
 8005f24:	d0f9      	beq.n	8005f1a <prvListTasksWithinSingleList.part.0+0x76>
		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8005f26:	f3c5 058f 	ubfx	r5, r5, #2, #16
			} while( pxNextTCB != pxFirstTCB );
 8005f2a:	42bb      	cmp	r3, r7
				uxTask++;
 8005f2c:	f106 0601 	add.w	r6, r6, #1
			} while( pxNextTCB != pxFirstTCB );
 8005f30:	f104 0424 	add.w	r4, r4, #36	; 0x24
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8005f34:	f824 5c04 	strh.w	r5, [r4, #-4]
			} while( pxNextTCB != pxFirstTCB );
 8005f38:	d01c      	beq.n	8005f74 <prvListTasksWithinSingleList.part.0+0xd0>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f3a:	6848      	ldr	r0, [r1, #4]
 8005f3c:	6840      	ldr	r0, [r0, #4]
 8005f3e:	4581      	cmp	r9, r0
 8005f40:	6048      	str	r0, [r1, #4]
 8005f42:	d1c9      	bne.n	8005ed8 <prvListTasksWithinSingleList.part.0+0x34>
 8005f44:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8005f48:	68c7      	ldr	r7, [r0, #12]
 8005f4a:	6048      	str	r0, [r1, #4]
		pxTCB = prvGetTCBFromHandle( xTask );
 8005f4c:	2f00      	cmp	r7, #0
 8005f4e:	d1c6      	bne.n	8005ede <prvListTasksWithinSingleList.part.0+0x3a>
 8005f50:	f8d8 5000 	ldr.w	r5, [r8]
 8005f54:	e7c4      	b.n	8005ee0 <prvListTasksWithinSingleList.part.0+0x3c>
				pxTaskStatus->eCurrentState = eRunning;
 8005f56:	f884 b00c 	strb.w	fp, [r4, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005f5a:	f89c 0000 	ldrb.w	r0, [ip]
 8005f5e:	28a5      	cmp	r0, #165	; 0xa5
 8005f60:	d0d9      	beq.n	8005f16 <prvListTasksWithinSingleList.part.0+0x72>
 8005f62:	2500      	movs	r5, #0
			} while( pxNextTCB != pxFirstTCB );
 8005f64:	42bb      	cmp	r3, r7
				uxTask++;
 8005f66:	f106 0601 	add.w	r6, r6, #1
			} while( pxNextTCB != pxFirstTCB );
 8005f6a:	f104 0424 	add.w	r4, r4, #36	; 0x24
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8005f6e:	f824 5c04 	strh.w	r5, [r4, #-4]
			} while( pxNextTCB != pxFirstTCB );
 8005f72:	d1e2      	bne.n	8005f3a <prvListTasksWithinSingleList.part.0+0x96>
	}
 8005f74:	4630      	mov	r0, r6
 8005f76:	b005      	add	sp, #20
 8005f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	++uxSchedulerSuspended;
 8005f7c:	f8da 0000 	ldr.w	r0, [sl]
 8005f80:	3001      	adds	r0, #1
 8005f82:	f8ca 0000 	str.w	r0, [sl]
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f86:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8005f88:	b110      	cbz	r0, 8005f90 <prvListTasksWithinSingleList.part.0+0xec>
								pxTaskStatus->eCurrentState = eBlocked;
 8005f8a:	f04f 0002 	mov.w	r0, #2
 8005f8e:	7320      	strb	r0, [r4, #12]
	configASSERT( uxSchedulerSuspended );
 8005f90:	f8da 0000 	ldr.w	r0, [sl]
 8005f94:	b940      	cbnz	r0, 8005fa8 <prvListTasksWithinSingleList.part.0+0x104>
 8005f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	e7fe      	b.n	8005fa6 <prvListTasksWithinSingleList.part.0+0x102>
 8005fa8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8005fac:	9301      	str	r3, [sp, #4]
 8005fae:	f7ff fedf 	bl	8005d70 <xTaskResumeAll.part.0>
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8005fb2:	f8d5 c030 	ldr.w	ip, [r5, #48]	; 0x30
 8005fb6:	9b01      	ldr	r3, [sp, #4]
 8005fb8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8005fbc:	e7a7      	b.n	8005f0e <prvListTasksWithinSingleList.part.0+0x6a>
 8005fbe:	bf00      	nop
 8005fc0:	24051340 	.word	0x24051340
 8005fc4:	240517b8 	.word	0x240517b8

08005fc8 <xTaskCreateStatic>:
	{
 8005fc8:	b530      	push	{r4, r5, lr}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8005fce:	b1c4      	cbz	r4, 8006002 <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 8005fd0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005fd2:	b16d      	cbz	r5, 8005ff0 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005fd4:	2560      	movs	r5, #96	; 0x60
 8005fd6:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005fd8:	9d05      	ldr	r5, [sp, #20]
 8005fda:	2d60      	cmp	r5, #96	; 0x60
 8005fdc:	d01a      	beq.n	8006014 <xTaskCreateStatic+0x4c>
 8005fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	e7fe      	b.n	8005fee <xTaskCreateStatic+0x26>
 8005ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff4:	f383 8811 	msr	BASEPRI, r3
 8005ff8:	f3bf 8f6f 	isb	sy
 8005ffc:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8006000:	e7fe      	b.n	8006000 <xTaskCreateStatic+0x38>
 8006002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006006:	f383 8811 	msr	BASEPRI, r3
 800600a:	f3bf 8f6f 	isb	sy
 800600e:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8006012:	e7fe      	b.n	8006012 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006014:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006016:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006018:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800601a:	9502      	str	r5, [sp, #8]
 800601c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800601e:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006020:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006022:	f885 405d 	strb.w	r4, [r5, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006026:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006028:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800602a:	9401      	str	r4, [sp, #4]
 800602c:	f7ff fd12 	bl	8005a54 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006030:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006032:	f7ff fc87 	bl	8005944 <prvAddNewTaskToReadyList>
	}
 8006036:	9804      	ldr	r0, [sp, #16]
 8006038:	b007      	add	sp, #28
 800603a:	bd30      	pop	{r4, r5, pc}

0800603c <xTaskCreate>:
	{
 800603c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006040:	4607      	mov	r7, r0
 8006042:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006044:	0090      	lsls	r0, r2, #2
	{
 8006046:	4615      	mov	r5, r2
 8006048:	4688      	mov	r8, r1
 800604a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800604c:	f000 ffec 	bl	8007028 <pvPortMalloc>
			if( pxStack != NULL )
 8006050:	b1d8      	cbz	r0, 800608a <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006052:	4604      	mov	r4, r0
 8006054:	2060      	movs	r0, #96	; 0x60
 8006056:	f000 ffe7 	bl	8007028 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800605a:	4606      	mov	r6, r0
 800605c:	b1d0      	cbz	r0, 8006094 <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 800605e:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006060:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006062:	464b      	mov	r3, r9
 8006064:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006066:	f886 405d 	strb.w	r4, [r6, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800606a:	4641      	mov	r1, r8
 800606c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800606e:	4638      	mov	r0, r7
 8006070:	9602      	str	r6, [sp, #8]
 8006072:	9401      	str	r4, [sp, #4]
 8006074:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006076:	9400      	str	r4, [sp, #0]
 8006078:	f7ff fcec 	bl	8005a54 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800607c:	4630      	mov	r0, r6
 800607e:	f7ff fc61 	bl	8005944 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006082:	2001      	movs	r0, #1
	}
 8006084:	b005      	add	sp, #20
 8006086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800608a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 800608e:	b005      	add	sp, #20
 8006090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8006094:	4620      	mov	r0, r4
 8006096:	f001 f883 	bl	80071a0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800609a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800609e:	e7f1      	b.n	8006084 <xTaskCreate+0x48>

080060a0 <vTaskDelay>:
	{
 80060a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060a2:	b950      	cbnz	r0, 80060ba <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80060a4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80060a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ac:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80060b0:	f3bf 8f4f 	dsb	sy
 80060b4:	f3bf 8f6f 	isb	sy
	}
 80060b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80060ba:	4d1e      	ldr	r5, [pc, #120]	; (8006134 <vTaskDelay+0x94>)
 80060bc:	682b      	ldr	r3, [r5, #0]
 80060be:	b143      	cbz	r3, 80060d2 <vTaskDelay+0x32>
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	e7fe      	b.n	80060d0 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 80060d2:	682b      	ldr	r3, [r5, #0]
 80060d4:	4604      	mov	r4, r0
 80060d6:	3301      	adds	r3, #1
 80060d8:	602b      	str	r3, [r5, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060da:	4b17      	ldr	r3, [pc, #92]	; (8006138 <vTaskDelay+0x98>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060dc:	4e17      	ldr	r6, [pc, #92]	; (800613c <vTaskDelay+0x9c>)
const TickType_t xConstTickCount = xTickCount;
 80060de:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060e0:	6830      	ldr	r0, [r6, #0]
 80060e2:	3004      	adds	r0, #4
 80060e4:	f7fe ffdc 	bl	80050a0 <uxListRemove>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060e8:	19e4      	adds	r4, r4, r7

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060ea:	6833      	ldr	r3, [r6, #0]
 80060ec:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80060ee:	d315      	bcc.n	800611c <vTaskDelay+0x7c>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060f0:	4b13      	ldr	r3, [pc, #76]	; (8006140 <vTaskDelay+0xa0>)
 80060f2:	6818      	ldr	r0, [r3, #0]
 80060f4:	6831      	ldr	r1, [r6, #0]
 80060f6:	3104      	adds	r1, #4
 80060f8:	f7fe ffba 	bl	8005070 <vListInsert>
	configASSERT( uxSchedulerSuspended );
 80060fc:	682b      	ldr	r3, [r5, #0]
 80060fe:	b943      	cbnz	r3, 8006112 <vTaskDelay+0x72>
 8006100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	e7fe      	b.n	8006110 <vTaskDelay+0x70>
 8006112:	f7ff fe2d 	bl	8005d70 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8006116:	2800      	cmp	r0, #0
 8006118:	d0c4      	beq.n	80060a4 <vTaskDelay+0x4>
	}
 800611a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800611c:	4b09      	ldr	r3, [pc, #36]	; (8006144 <vTaskDelay+0xa4>)
 800611e:	6818      	ldr	r0, [r3, #0]
 8006120:	6831      	ldr	r1, [r6, #0]
 8006122:	3104      	adds	r1, #4
 8006124:	f7fe ffa4 	bl	8005070 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8006128:	4b07      	ldr	r3, [pc, #28]	; (8006148 <vTaskDelay+0xa8>)
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	4294      	cmp	r4, r2
 800612e:	d2e5      	bcs.n	80060fc <vTaskDelay+0x5c>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8006130:	601c      	str	r4, [r3, #0]
 8006132:	e7e3      	b.n	80060fc <vTaskDelay+0x5c>
 8006134:	240517b8 	.word	0x240517b8
 8006138:	24051838 	.word	0x24051838
 800613c:	24051340 	.word	0x24051340
 8006140:	24051348 	.word	0x24051348
 8006144:	24051344 	.word	0x24051344
 8006148:	240517ec 	.word	0x240517ec

0800614c <vTaskStartScheduler>:
{
 800614c:	b570      	push	{r4, r5, r6, lr}
 800614e:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006150:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006152:	4668      	mov	r0, sp
 8006154:	aa02      	add	r2, sp, #8
 8006156:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006158:	e9cd 4400 	strd	r4, r4, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800615c:	f7fe ff4a 	bl	8004ff4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006160:	9801      	ldr	r0, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
 8006162:	b1c8      	cbz	r0, 8006198 <vTaskStartScheduler+0x4c>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006164:	9d00      	ldr	r5, [sp, #0]
		configASSERT( pxTaskBuffer != NULL );
 8006166:	b175      	cbz	r5, 8006186 <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006168:	2260      	movs	r2, #96	; 0x60
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800616a:	9e02      	ldr	r6, [sp, #8]
			volatile size_t xSize = sizeof( StaticTask_t );
 800616c:	9203      	str	r2, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 800616e:	9a03      	ldr	r2, [sp, #12]
 8006170:	2a60      	cmp	r2, #96	; 0x60
 8006172:	d01a      	beq.n	80061aa <vTaskStartScheduler+0x5e>
 8006174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	e7fe      	b.n	8006184 <vTaskStartScheduler+0x38>
 8006186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618a:	f383 8811 	msr	BASEPRI, r3
 800618e:	f3bf 8f6f 	isb	sy
 8006192:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8006196:	e7fe      	b.n	8006196 <vTaskStartScheduler+0x4a>
 8006198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619c:	f383 8811 	msr	BASEPRI, r3
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80061a8:	e7fe      	b.n	80061a8 <vTaskStartScheduler+0x5c>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80061aa:	00b6      	lsls	r6, r6, #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061ac:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80061ae:	21a5      	movs	r1, #165	; 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061b0:	6328      	str	r0, [r5, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80061b2:	4632      	mov	r2, r6
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061b4:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80061b8:	9b03      	ldr	r3, [sp, #12]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80061ba:	f001 f88b 	bl	80072d4 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061be:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80061c0:	1f33      	subs	r3, r6, #4
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061c2:	4926      	ldr	r1, [pc, #152]	; (800625c <vTaskStartScheduler+0x110>)
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061c4:	1d28      	adds	r0, r5, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061c6:	18d6      	adds	r6, r2, r3
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061c8:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
 80061cc:	6369      	str	r1, [r5, #52]	; 0x34
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80061ce:	f885 4043 	strb.w	r4, [r5, #67]	; 0x43
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061d2:	f026 0607 	bic.w	r6, r6, #7
	pxNewTCB->uxPriority = uxPriority;
 80061d6:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 80061d8:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061dc:	f7fe ff34 	bl	8005048 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061e0:	f105 0018 	add.w	r0, r5, #24
 80061e4:	f7fe ff30 	bl	8005048 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061e8:	2338      	movs	r3, #56	; 0x38
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061ea:	4622      	mov	r2, r4
 80061ec:	491c      	ldr	r1, [pc, #112]	; (8006260 <vTaskStartScheduler+0x114>)
		pxNewTCB->ulNotifiedValue = 0;
 80061ee:	65ac      	str	r4, [r5, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061f0:	4630      	mov	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061f2:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061f4:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061f6:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 80061f8:	656c      	str	r4, [r5, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061fa:	f885 405c 	strb.w	r4, [r5, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061fe:	f000 fdb5 	bl	8006d6c <pxPortInitialiseStack>
 8006202:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
 8006204:	4628      	mov	r0, r5
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006206:	602b      	str	r3, [r5, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 8006208:	f7ff fb9c 	bl	8005944 <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
 800620c:	f000 fd12 	bl	8006c34 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8006210:	2801      	cmp	r0, #1
 8006212:	d00c      	beq.n	800622e <vTaskStartScheduler+0xe2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006214:	3001      	adds	r0, #1
 8006216:	d001      	beq.n	800621c <vTaskStartScheduler+0xd0>
}
 8006218:	b004      	add	sp, #16
 800621a:	bd70      	pop	{r4, r5, r6, pc}
 800621c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800622c:	e7fe      	b.n	800622c <vTaskStartScheduler+0xe0>
 800622e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800623e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006242:	4b08      	ldr	r3, [pc, #32]	; (8006264 <vTaskStartScheduler+0x118>)
		xSchedulerRunning = pdTRUE;
 8006244:	4a08      	ldr	r2, [pc, #32]	; (8006268 <vTaskStartScheduler+0x11c>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8006246:	6019      	str	r1, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006248:	4b08      	ldr	r3, [pc, #32]	; (800626c <vTaskStartScheduler+0x120>)
		xSchedulerRunning = pdTRUE;
 800624a:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800624c:	601c      	str	r4, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800624e:	f7fa fc2f 	bl	8000ab0 <configureTimerForRunTimeStats>
}
 8006252:	b004      	add	sp, #16
 8006254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
 8006258:	f000 be46 	b.w	8006ee8 <xPortStartScheduler>
 800625c:	454c4449 	.word	0x454c4449
 8006260:	08005b89 	.word	0x08005b89
 8006264:	240517ec 	.word	0x240517ec
 8006268:	2405180c 	.word	0x2405180c
 800626c:	24051838 	.word	0x24051838

08006270 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006270:	4a02      	ldr	r2, [pc, #8]	; (800627c <vTaskSuspendAll+0xc>)
 8006272:	6813      	ldr	r3, [r2, #0]
 8006274:	3301      	adds	r3, #1
 8006276:	6013      	str	r3, [r2, #0]
}
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	240517b8 	.word	0x240517b8

08006280 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8006280:	4b06      	ldr	r3, [pc, #24]	; (800629c <xTaskResumeAll+0x1c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	b943      	cbnz	r3, 8006298 <xTaskResumeAll+0x18>
 8006286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628a:	f383 8811 	msr	BASEPRI, r3
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	e7fe      	b.n	8006296 <xTaskResumeAll+0x16>
 8006298:	f7ff bd6a 	b.w	8005d70 <xTaskResumeAll.part.0>
 800629c:	240517b8 	.word	0x240517b8

080062a0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80062a0:	4b01      	ldr	r3, [pc, #4]	; (80062a8 <xTaskGetTickCount+0x8>)
 80062a2:	6818      	ldr	r0, [r3, #0]
}
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	24051838 	.word	0x24051838

080062ac <uxTaskGetSystemState>:
	{
 80062ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	++uxSchedulerSuspended;
 80062b0:	4c62      	ldr	r4, [pc, #392]	; (800643c <uxTaskGetSystemState+0x190>)
	{
 80062b2:	b083      	sub	sp, #12
	++uxSchedulerSuspended;
 80062b4:	6823      	ldr	r3, [r4, #0]
 80062b6:	3301      	adds	r3, #1
	{
 80062b8:	e9cd 0200 	strd	r0, r2, [sp]
	++uxSchedulerSuspended;
 80062bc:	6023      	str	r3, [r4, #0]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80062be:	4b60      	ldr	r3, [pc, #384]	; (8006440 <uxTaskGetSystemState+0x194>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	428b      	cmp	r3, r1
 80062c4:	f200 80ab 	bhi.w	800641e <uxTaskGetSystemState+0x172>
 80062c8:	f8df e188 	ldr.w	lr, [pc, #392]	; 8006454 <uxTaskGetSystemState+0x1a8>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80062cc:	2600      	movs	r6, #0
 80062ce:	f04f 0a38 	mov.w	sl, #56	; 0x38
 80062d2:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8006458 <uxTaskGetSystemState+0x1ac>
 80062d6:	f2ae 4b54 	subw	fp, lr, #1108	; 0x454
 80062da:	46b1      	mov	r9, r6
					uxQueue--;
 80062dc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80062e0:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
 80062e4:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d040      	beq.n	800636e <uxTaskGetSystemState+0xc2>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062ec:	f85e 3c04 	ldr.w	r3, [lr, #-4]
 80062f0:	685d      	ldr	r5, [r3, #4]
 80062f2:	45ae      	cmp	lr, r5
 80062f4:	f84e 5c04 	str.w	r5, [lr, #-4]
 80062f8:	f000 808b 	beq.w	8006412 <uxTaskGetSystemState+0x166>
 80062fc:	eb09 01c9 	add.w	r1, r9, r9, lsl #3
 8006300:	9b00      	ldr	r3, [sp, #0]
 8006302:	68ee      	ldr	r6, [r5, #12]
	UBaseType_t uxTask = 0;
 8006304:	f04f 0c00 	mov.w	ip, #0
 8006308:	eb03 0181 	add.w	r1, r3, r1, lsl #2
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800630c:	686d      	ldr	r5, [r5, #4]
 800630e:	45ae      	cmp	lr, r5
 8006310:	f84e 5c04 	str.w	r5, [lr, #-4]
 8006314:	d070      	beq.n	80063f8 <uxTaskGetSystemState+0x14c>
 8006316:	68ea      	ldr	r2, [r5, #12]
		pxTCB = prvGetTCBFromHandle( xTask );
 8006318:	2a00      	cmp	r2, #0
 800631a:	d075      	beq.n	8006408 <uxTaskGetSystemState+0x15c>
 800631c:	4613      	mov	r3, r2
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800631e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8006320:	600b      	str	r3, [r1, #0]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8006322:	6108      	str	r0, [r1, #16]
			if( pxTCB == pxCurrentTCB )
 8006324:	f8d8 7000 	ldr.w	r7, [r8]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8006328:	6c58      	ldr	r0, [r3, #68]	; 0x44
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800632a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
			if( pxTCB == pxCurrentTCB )
 800632c:	1bdf      	subs	r7, r3, r7
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800632e:	6088      	str	r0, [r1, #8]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8006330:	f103 0334 	add.w	r3, r3, #52	; 0x34
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8006334:	6998      	ldr	r0, [r3, #24]
			if( pxTCB == pxCurrentTCB )
 8006336:	bf18      	it	ne
 8006338:	2701      	movne	r7, #1
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800633a:	61cc      	str	r4, [r1, #28]
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800633c:	6148      	str	r0, [r1, #20]
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800633e:	6a18      	ldr	r0, [r3, #32]
			if( pxTCB == pxCurrentTCB )
 8006340:	730f      	strb	r7, [r1, #12]
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8006342:	6188      	str	r0, [r1, #24]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8006344:	604b      	str	r3, [r1, #4]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006346:	7823      	ldrb	r3, [r4, #0]
 8006348:	2ba5      	cmp	r3, #165	; 0xa5
 800634a:	d160      	bne.n	800640e <uxTaskGetSystemState+0x162>
 800634c:	f1c4 0701 	rsb	r7, r4, #1
			ulCount++;
 8006350:	1938      	adds	r0, r7, r4
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006352:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006356:	2ba5      	cmp	r3, #165	; 0xa5
 8006358:	d0fa      	beq.n	8006350 <uxTaskGetSystemState+0xa4>
		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800635a:	f3c0 008f 	ubfx	r0, r0, #2, #16
			} while( pxNextTCB != pxFirstTCB );
 800635e:	4296      	cmp	r6, r2
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8006360:	8408      	strh	r0, [r1, #32]
				uxTask++;
 8006362:	f10c 0c01 	add.w	ip, ip, #1
			} while( pxNextTCB != pxFirstTCB );
 8006366:	f101 0124 	add.w	r1, r1, #36	; 0x24
 800636a:	d1cf      	bne.n	800630c <uxTaskGetSystemState+0x60>
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800636c:	44e1      	add	r9, ip
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800636e:	f1ae 0e14 	sub.w	lr, lr, #20
 8006372:	f1ba 0f00 	cmp.w	sl, #0
 8006376:	d1b1      	bne.n	80062dc <uxTaskGetSystemState+0x30>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8006378:	4b32      	ldr	r3, [pc, #200]	; (8006444 <uxTaskGetSystemState+0x198>)
 800637a:	eb09 00c9 	add.w	r0, r9, r9, lsl #3
 800637e:	9c00      	ldr	r4, [sp, #0]
 8006380:	464e      	mov	r6, r9
 8006382:	6819      	ldr	r1, [r3, #0]
 8006384:	eb04 0080 	add.w	r0, r4, r0, lsl #2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8006388:	680b      	ldr	r3, [r1, #0]
 800638a:	b13b      	cbz	r3, 800639c <uxTaskGetSystemState+0xf0>
 800638c:	2202      	movs	r2, #2
 800638e:	f7ff fd89 	bl	8005ea4 <prvListTasksWithinSingleList.part.0>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8006392:	4406      	add	r6, r0
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8006394:	eb06 00c6 	add.w	r0, r6, r6, lsl #3
 8006398:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800639c:	4b2a      	ldr	r3, [pc, #168]	; (8006448 <uxTaskGetSystemState+0x19c>)
 800639e:	6819      	ldr	r1, [r3, #0]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80063a0:	680b      	ldr	r3, [r1, #0]
 80063a2:	b143      	cbz	r3, 80063b6 <uxTaskGetSystemState+0x10a>
 80063a4:	2202      	movs	r2, #2
 80063a6:	f7ff fd7d 	bl	8005ea4 <prvListTasksWithinSingleList.part.0>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 80063aa:	4406      	add	r6, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 80063ac:	9b00      	ldr	r3, [sp, #0]
 80063ae:	eb06 00c6 	add.w	r0, r6, r6, lsl #3
 80063b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80063b6:	4925      	ldr	r1, [pc, #148]	; (800644c <uxTaskGetSystemState+0x1a0>)
 80063b8:	680b      	ldr	r3, [r1, #0]
 80063ba:	b143      	cbz	r3, 80063ce <uxTaskGetSystemState+0x122>
 80063bc:	2204      	movs	r2, #4
 80063be:	f7ff fd71 	bl	8005ea4 <prvListTasksWithinSingleList.part.0>
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 80063c2:	4406      	add	r6, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 80063c4:	9b00      	ldr	r3, [sp, #0]
 80063c6:	eb06 00c6 	add.w	r0, r6, r6, lsl #3
 80063ca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80063ce:	4920      	ldr	r1, [pc, #128]	; (8006450 <uxTaskGetSystemState+0x1a4>)
 80063d0:	680b      	ldr	r3, [r1, #0]
 80063d2:	b11b      	cbz	r3, 80063dc <uxTaskGetSystemState+0x130>
 80063d4:	2203      	movs	r2, #3
 80063d6:	f7ff fd65 	bl	8005ea4 <prvListTasksWithinSingleList.part.0>
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 80063da:	4406      	add	r6, r0
					if( pulTotalRunTime != NULL )
 80063dc:	9c01      	ldr	r4, [sp, #4]
 80063de:	b1fc      	cbz	r4, 8006420 <uxTaskGetSystemState+0x174>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80063e0:	f7fa fb74 	bl	8000acc <getRunTimeCounterValue>
	configASSERT( uxSchedulerSuspended );
 80063e4:	4b15      	ldr	r3, [pc, #84]	; (800643c <uxTaskGetSystemState+0x190>)
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80063e6:	6020      	str	r0, [r4, #0]
	configASSERT( uxSchedulerSuspended );
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	b1eb      	cbz	r3, 8006428 <uxTaskGetSystemState+0x17c>
 80063ec:	f7ff fcc0 	bl	8005d70 <xTaskResumeAll.part.0>
	}
 80063f0:	4630      	mov	r0, r6
 80063f2:	b003      	add	sp, #12
 80063f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063f8:	f8de 3004 	ldr.w	r3, [lr, #4]
 80063fc:	461d      	mov	r5, r3
 80063fe:	f84e 3c04 	str.w	r3, [lr, #-4]
 8006402:	68ea      	ldr	r2, [r5, #12]
		pxTCB = prvGetTCBFromHandle( xTask );
 8006404:	2a00      	cmp	r2, #0
 8006406:	d189      	bne.n	800631c <uxTaskGetSystemState+0x70>
 8006408:	f8d8 3000 	ldr.w	r3, [r8]
 800640c:	e787      	b.n	800631e <uxTaskGetSystemState+0x72>
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800640e:	2000      	movs	r0, #0
 8006410:	e7a5      	b.n	800635e <uxTaskGetSystemState+0xb2>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006412:	f8de 3004 	ldr.w	r3, [lr, #4]
 8006416:	461d      	mov	r5, r3
 8006418:	f84e 3c04 	str.w	r3, [lr, #-4]
 800641c:	e76e      	b.n	80062fc <uxTaskGetSystemState+0x50>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800641e:	2600      	movs	r6, #0
	configASSERT( uxSchedulerSuspended );
 8006420:	4b06      	ldr	r3, [pc, #24]	; (800643c <uxTaskGetSystemState+0x190>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e1      	bne.n	80063ec <uxTaskGetSystemState+0x140>
 8006428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	e7fe      	b.n	8006438 <uxTaskGetSystemState+0x18c>
 800643a:	bf00      	nop
 800643c:	240517b8 	.word	0x240517b8
 8006440:	240517b0 	.word	0x240517b0
 8006444:	24051344 	.word	0x24051344
 8006448:	24051348 	.word	0x24051348
 800644c:	24051824 	.word	0x24051824
 8006450:	24051810 	.word	0x24051810
 8006454:	240517a0 	.word	0x240517a0
 8006458:	24051340 	.word	0x24051340

0800645c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800645c:	4b05      	ldr	r3, [pc, #20]	; (8006474 <xTaskIncrementTick+0x18>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	b90b      	cbnz	r3, 8006466 <xTaskIncrementTick+0xa>
 8006462:	f7ff bbdd 	b.w	8005c20 <xTaskIncrementTick.part.0>
		++xPendedTicks;
 8006466:	4a04      	ldr	r2, [pc, #16]	; (8006478 <xTaskIncrementTick+0x1c>)
}
 8006468:	2000      	movs	r0, #0
		++xPendedTicks;
 800646a:	6813      	ldr	r3, [r2, #0]
 800646c:	3301      	adds	r3, #1
 800646e:	6013      	str	r3, [r2, #0]
}
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	240517b8 	.word	0x240517b8
 8006478:	240517f4 	.word	0x240517f4

0800647c <vTaskSwitchContext>:
{
 800647c:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800647e:	4b21      	ldr	r3, [pc, #132]	; (8006504 <vTaskSwitchContext+0x88>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	b11b      	cbz	r3, 800648c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8006484:	4b20      	ldr	r3, [pc, #128]	; (8006508 <vTaskSwitchContext+0x8c>)
 8006486:	2201      	movs	r2, #1
 8006488:	601a      	str	r2, [r3, #0]
}
 800648a:	bd38      	pop	{r3, r4, r5, pc}
		xYieldPending = pdFALSE;
 800648c:	4a1e      	ldr	r2, [pc, #120]	; (8006508 <vTaskSwitchContext+0x8c>)
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800648e:	4c1f      	ldr	r4, [pc, #124]	; (800650c <vTaskSwitchContext+0x90>)
		xYieldPending = pdFALSE;
 8006490:	6013      	str	r3, [r2, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006492:	f7fa fb1b 	bl	8000acc <getRunTimeCounterValue>
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8006496:	4b1e      	ldr	r3, [pc, #120]	; (8006510 <vTaskSwitchContext+0x94>)
 8006498:	6819      	ldr	r1, [r3, #0]
 800649a:	4288      	cmp	r0, r1
 800649c:	d904      	bls.n	80064a8 <vTaskSwitchContext+0x2c>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800649e:	6825      	ldr	r5, [r4, #0]
 80064a0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 80064a2:	1a52      	subs	r2, r2, r1
 80064a4:	4402      	add	r2, r0
 80064a6:	656a      	str	r2, [r5, #84]	; 0x54
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064a8:	4d1a      	ldr	r5, [pc, #104]	; (8006514 <vTaskSwitchContext+0x98>)
			ulTaskSwitchedInTime = ulTotalRunTime;
 80064aa:	6018      	str	r0, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064ac:	682b      	ldr	r3, [r5, #0]
 80064ae:	491a      	ldr	r1, [pc, #104]	; (8006518 <vTaskSwitchContext+0x9c>)
 80064b0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80064b4:	0098      	lsls	r0, r3, #2
 80064b6:	0092      	lsls	r2, r2, #2
 80064b8:	588a      	ldr	r2, [r1, r2]
 80064ba:	b942      	cbnz	r2, 80064ce <vTaskSwitchContext+0x52>
 80064bc:	b1ab      	cbz	r3, 80064ea <vTaskSwitchContext+0x6e>
 80064be:	3b01      	subs	r3, #1
 80064c0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80064c4:	0098      	lsls	r0, r3, #2
 80064c6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80064ca:	2a00      	cmp	r2, #0
 80064cc:	d0f6      	beq.n	80064bc <vTaskSwitchContext+0x40>
 80064ce:	18c2      	adds	r2, r0, r3
 80064d0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 80064d4:	6841      	ldr	r1, [r0, #4]
 80064d6:	4602      	mov	r2, r0
 80064d8:	6849      	ldr	r1, [r1, #4]
 80064da:	3208      	adds	r2, #8
 80064dc:	4291      	cmp	r1, r2
 80064de:	6041      	str	r1, [r0, #4]
 80064e0:	d00c      	beq.n	80064fc <vTaskSwitchContext+0x80>
 80064e2:	68ca      	ldr	r2, [r1, #12]
 80064e4:	6022      	str	r2, [r4, #0]
 80064e6:	602b      	str	r3, [r5, #0]
}
 80064e8:	bd38      	pop	{r3, r4, r5, pc}
 80064ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ee:	f383 8811 	msr	BASEPRI, r3
 80064f2:	f3bf 8f6f 	isb	sy
 80064f6:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064fa:	e7fe      	b.n	80064fa <vTaskSwitchContext+0x7e>
 80064fc:	6849      	ldr	r1, [r1, #4]
 80064fe:	6041      	str	r1, [r0, #4]
 8006500:	e7ef      	b.n	80064e2 <vTaskSwitchContext+0x66>
 8006502:	bf00      	nop
 8006504:	240517b8 	.word	0x240517b8
 8006508:	2405183c 	.word	0x2405183c
 800650c:	24051340 	.word	0x24051340
 8006510:	240517ac 	.word	0x240517ac
 8006514:	240517c0 	.word	0x240517c0
 8006518:	2405134c 	.word	0x2405134c

0800651c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800651c:	b1f0      	cbz	r0, 800655c <vTaskPlaceOnEventList+0x40>
{
 800651e:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006520:	4d1a      	ldr	r5, [pc, #104]	; (800658c <vTaskPlaceOnEventList+0x70>)
 8006522:	460c      	mov	r4, r1
 8006524:	6829      	ldr	r1, [r5, #0]
 8006526:	3118      	adds	r1, #24
 8006528:	f7fe fda2 	bl	8005070 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 800652c:	4b18      	ldr	r3, [pc, #96]	; (8006590 <vTaskPlaceOnEventList+0x74>)
 800652e:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006530:	6828      	ldr	r0, [r5, #0]
 8006532:	3004      	adds	r0, #4
 8006534:	f7fe fdb4 	bl	80050a0 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006538:	1c63      	adds	r3, r4, #1
 800653a:	d020      	beq.n	800657e <vTaskPlaceOnEventList+0x62>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800653c:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800653e:	682b      	ldr	r3, [r5, #0]
 8006540:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006542:	d214      	bcs.n	800656e <vTaskPlaceOnEventList+0x52>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006544:	4b13      	ldr	r3, [pc, #76]	; (8006594 <vTaskPlaceOnEventList+0x78>)
 8006546:	6818      	ldr	r0, [r3, #0]
 8006548:	6829      	ldr	r1, [r5, #0]
 800654a:	3104      	adds	r1, #4
 800654c:	f7fe fd90 	bl	8005070 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006550:	4b11      	ldr	r3, [pc, #68]	; (8006598 <vTaskPlaceOnEventList+0x7c>)
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	4294      	cmp	r4, r2
 8006556:	d200      	bcs.n	800655a <vTaskPlaceOnEventList+0x3e>
					xNextTaskUnblockTime = xTimeToWake;
 8006558:	601c      	str	r4, [r3, #0]
}
 800655a:	bd70      	pop	{r4, r5, r6, pc}
 800655c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800656c:	e7fe      	b.n	800656c <vTaskPlaceOnEventList+0x50>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800656e:	4b0b      	ldr	r3, [pc, #44]	; (800659c <vTaskPlaceOnEventList+0x80>)
 8006570:	6818      	ldr	r0, [r3, #0]
 8006572:	6829      	ldr	r1, [r5, #0]
}
 8006574:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006578:	3104      	adds	r1, #4
 800657a:	f7fe bd79 	b.w	8005070 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800657e:	6829      	ldr	r1, [r5, #0]
 8006580:	4807      	ldr	r0, [pc, #28]	; (80065a0 <vTaskPlaceOnEventList+0x84>)
 8006582:	3104      	adds	r1, #4
}
 8006584:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006588:	f7fe bd62 	b.w	8005050 <vListInsertEnd>
 800658c:	24051340 	.word	0x24051340
 8006590:	24051838 	.word	0x24051838
 8006594:	24051344 	.word	0x24051344
 8006598:	240517ec 	.word	0x240517ec
 800659c:	24051348 	.word	0x24051348
 80065a0:	24051810 	.word	0x24051810

080065a4 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
 80065a4:	b358      	cbz	r0, 80065fe <vTaskPlaceOnEventListRestricted+0x5a>
	{
 80065a6:	b570      	push	{r4, r5, r6, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065a8:	4e1d      	ldr	r6, [pc, #116]	; (8006620 <vTaskPlaceOnEventListRestricted+0x7c>)
 80065aa:	460c      	mov	r4, r1
 80065ac:	4615      	mov	r5, r2
 80065ae:	6831      	ldr	r1, [r6, #0]
 80065b0:	3118      	adds	r1, #24
 80065b2:	f7fe fd4d 	bl	8005050 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 80065b6:	b165      	cbz	r5, 80065d2 <vTaskPlaceOnEventListRestricted+0x2e>
const TickType_t xConstTickCount = xTickCount;
 80065b8:	4b1a      	ldr	r3, [pc, #104]	; (8006624 <vTaskPlaceOnEventListRestricted+0x80>)
 80065ba:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065bc:	6830      	ldr	r0, [r6, #0]
 80065be:	3004      	adds	r0, #4
 80065c0:	f7fe fd6e 	bl	80050a0 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065c4:	6831      	ldr	r1, [r6, #0]
 80065c6:	4818      	ldr	r0, [pc, #96]	; (8006628 <vTaskPlaceOnEventListRestricted+0x84>)
 80065c8:	3104      	adds	r1, #4
	}
 80065ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065ce:	f7fe bd3f 	b.w	8005050 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 80065d2:	4b14      	ldr	r3, [pc, #80]	; (8006624 <vTaskPlaceOnEventListRestricted+0x80>)
 80065d4:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065d6:	6830      	ldr	r0, [r6, #0]
 80065d8:	3004      	adds	r0, #4
 80065da:	f7fe fd61 	bl	80050a0 <uxListRemove>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80065de:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80065e0:	6833      	ldr	r3, [r6, #0]
 80065e2:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80065e4:	d214      	bcs.n	8006610 <vTaskPlaceOnEventListRestricted+0x6c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065e6:	4b11      	ldr	r3, [pc, #68]	; (800662c <vTaskPlaceOnEventListRestricted+0x88>)
 80065e8:	6818      	ldr	r0, [r3, #0]
 80065ea:	6831      	ldr	r1, [r6, #0]
 80065ec:	3104      	adds	r1, #4
 80065ee:	f7fe fd3f 	bl	8005070 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065f2:	4b0f      	ldr	r3, [pc, #60]	; (8006630 <vTaskPlaceOnEventListRestricted+0x8c>)
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	4294      	cmp	r4, r2
 80065f8:	d200      	bcs.n	80065fc <vTaskPlaceOnEventListRestricted+0x58>
					xNextTaskUnblockTime = xTimeToWake;
 80065fa:	601c      	str	r4, [r3, #0]
	}
 80065fc:	bd70      	pop	{r4, r5, r6, pc}
 80065fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800660e:	e7fe      	b.n	800660e <vTaskPlaceOnEventListRestricted+0x6a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006610:	4b08      	ldr	r3, [pc, #32]	; (8006634 <vTaskPlaceOnEventListRestricted+0x90>)
 8006612:	6818      	ldr	r0, [r3, #0]
 8006614:	6831      	ldr	r1, [r6, #0]
	}
 8006616:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800661a:	3104      	adds	r1, #4
 800661c:	f7fe bd28 	b.w	8005070 <vListInsert>
 8006620:	24051340 	.word	0x24051340
 8006624:	24051838 	.word	0x24051838
 8006628:	24051810 	.word	0x24051810
 800662c:	24051344 	.word	0x24051344
 8006630:	240517ec 	.word	0x240517ec
 8006634:	24051348 	.word	0x24051348

08006638 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006638:	68c3      	ldr	r3, [r0, #12]
{
 800663a:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800663c:	68dc      	ldr	r4, [r3, #12]
{
 800663e:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 8006640:	b35c      	cbz	r4, 800669a <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006642:	f104 0518 	add.w	r5, r4, #24
 8006646:	4628      	mov	r0, r5
 8006648:	f7fe fd2a 	bl	80050a0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800664c:	4b19      	ldr	r3, [pc, #100]	; (80066b4 <xTaskRemoveFromEventList+0x7c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	b17b      	cbz	r3, 8006672 <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006652:	4629      	mov	r1, r5
 8006654:	4818      	ldr	r0, [pc, #96]	; (80066b8 <xTaskRemoveFromEventList+0x80>)
 8006656:	f7fe fcfb 	bl	8005050 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800665a:	4b18      	ldr	r3, [pc, #96]	; (80066bc <xTaskRemoveFromEventList+0x84>)
 800665c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006662:	429a      	cmp	r2, r3
 8006664:	d922      	bls.n	80066ac <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
 8006666:	2301      	movs	r3, #1
 8006668:	4a15      	ldr	r2, [pc, #84]	; (80066c0 <xTaskRemoveFromEventList+0x88>)
		xReturn = pdTRUE;
 800666a:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 800666c:	6013      	str	r3, [r2, #0]
}
 800666e:	b003      	add	sp, #12
 8006670:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006672:	1d21      	adds	r1, r4, #4
 8006674:	4608      	mov	r0, r1
 8006676:	9101      	str	r1, [sp, #4]
 8006678:	f7fe fd12 	bl	80050a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800667c:	4a11      	ldr	r2, [pc, #68]	; (80066c4 <xTaskRemoveFromEventList+0x8c>)
 800667e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006680:	6810      	ldr	r0, [r2, #0]
 8006682:	9901      	ldr	r1, [sp, #4]
 8006684:	4283      	cmp	r3, r0
 8006686:	d900      	bls.n	800668a <xTaskRemoveFromEventList+0x52>
 8006688:	6013      	str	r3, [r2, #0]
 800668a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800668e:	480e      	ldr	r0, [pc, #56]	; (80066c8 <xTaskRemoveFromEventList+0x90>)
 8006690:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8006694:	f7fe fcdc 	bl	8005050 <vListInsertEnd>
 8006698:	e7df      	b.n	800665a <xTaskRemoveFromEventList+0x22>
 800669a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80066aa:	e7fe      	b.n	80066aa <xTaskRemoveFromEventList+0x72>
		xReturn = pdFALSE;
 80066ac:	2000      	movs	r0, #0
}
 80066ae:	b003      	add	sp, #12
 80066b0:	bd30      	pop	{r4, r5, pc}
 80066b2:	bf00      	nop
 80066b4:	240517b8 	.word	0x240517b8
 80066b8:	240517f8 	.word	0x240517f8
 80066bc:	24051340 	.word	0x24051340
 80066c0:	2405183c 	.word	0x2405183c
 80066c4:	240517c0 	.word	0x240517c0
 80066c8:	2405134c 	.word	0x2405134c

080066cc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066cc:	4a03      	ldr	r2, [pc, #12]	; (80066dc <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066ce:	4b04      	ldr	r3, [pc, #16]	; (80066e0 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066d0:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	e9c0 2300 	strd	r2, r3, [r0]
}
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	240517f0 	.word	0x240517f0
 80066e0:	24051838 	.word	0x24051838

080066e4 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 80066e4:	b328      	cbz	r0, 8006732 <xTaskCheckForTimeOut+0x4e>
{
 80066e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066e8:	460d      	mov	r5, r1
 80066ea:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 80066ec:	b1c1      	cbz	r1, 8006720 <xTaskCheckForTimeOut+0x3c>
 80066ee:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80066f0:	f000 fb68 	bl	8006dc4 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 80066f4:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 80066f6:	4a1d      	ldr	r2, [pc, #116]	; (800676c <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
 80066f8:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 80066fa:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80066fc:	d030      	beq.n	8006760 <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80066fe:	f8df c070 	ldr.w	ip, [pc, #112]	; 8006770 <xTaskCheckForTimeOut+0x8c>
 8006702:	6826      	ldr	r6, [r4, #0]
 8006704:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006708:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800670a:	42be      	cmp	r6, r7
 800670c:	d01a      	beq.n	8006744 <xTaskCheckForTimeOut+0x60>
 800670e:	4288      	cmp	r0, r1
 8006710:	d818      	bhi.n	8006744 <xTaskCheckForTimeOut+0x60>
			xReturn = pdTRUE;
 8006712:	2001      	movs	r0, #1
 8006714:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8006716:	f000 fb77 	bl	8006e08 <vPortExitCritical>
}
 800671a:	9801      	ldr	r0, [sp, #4]
 800671c:	b003      	add	sp, #12
 800671e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8006730:	e7fe      	b.n	8006730 <xTaskCheckForTimeOut+0x4c>
 8006732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8006742:	e7fe      	b.n	8006742 <xTaskCheckForTimeOut+0x5e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006744:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006748:	4573      	cmp	r3, lr
 800674a:	d90b      	bls.n	8006764 <xTaskCheckForTimeOut+0x80>
			*pxTicksToWait -= xElapsedTime;
 800674c:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800674e:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006752:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 8006754:	4403      	add	r3, r0
			xReturn = pdFALSE;
 8006756:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
 8006758:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800675a:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 800675e:	e7d9      	b.n	8006714 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 8006760:	2000      	movs	r0, #0
 8006762:	e7d7      	b.n	8006714 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
 8006764:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8006766:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
 8006768:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 800676a:	e7d3      	b.n	8006714 <xTaskCheckForTimeOut+0x30>
 800676c:	24051838 	.word	0x24051838
 8006770:	240517f0 	.word	0x240517f0

08006774 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006774:	4b01      	ldr	r3, [pc, #4]	; (800677c <vTaskMissedYield+0x8>)
 8006776:	2201      	movs	r2, #1
 8006778:	601a      	str	r2, [r3, #0]
}
 800677a:	4770      	bx	lr
 800677c:	2405183c 	.word	0x2405183c

08006780 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006780:	4b05      	ldr	r3, [pc, #20]	; (8006798 <xTaskGetSchedulerState+0x18>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	b133      	cbz	r3, 8006794 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006786:	4b05      	ldr	r3, [pc, #20]	; (800679c <xTaskGetSchedulerState+0x1c>)
 8006788:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800678a:	2b00      	cmp	r3, #0
 800678c:	bf0c      	ite	eq
 800678e:	2002      	moveq	r0, #2
 8006790:	2000      	movne	r0, #0
 8006792:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006794:	2001      	movs	r0, #1
	}
 8006796:	4770      	bx	lr
 8006798:	2405180c 	.word	0x2405180c
 800679c:	240517b8 	.word	0x240517b8

080067a0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80067a0:	b318      	cbz	r0, 80067ea <xTaskPriorityDisinherit+0x4a>
			configASSERT( pxTCB == pxCurrentTCB );
 80067a2:	4b1f      	ldr	r3, [pc, #124]	; (8006820 <xTaskPriorityDisinherit+0x80>)
	{
 80067a4:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 80067a6:	681c      	ldr	r4, [r3, #0]
	{
 80067a8:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
 80067aa:	4284      	cmp	r4, r0
 80067ac:	d008      	beq.n	80067c0 <xTaskPriorityDisinherit+0x20>
 80067ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	e7fe      	b.n	80067be <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
 80067c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80067c2:	b14b      	cbz	r3, 80067d8 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80067c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 80067c6:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80067c8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 80067ca:	6523      	str	r3, [r4, #80]	; 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80067cc:	4291      	cmp	r1, r2
 80067ce:	d000      	beq.n	80067d2 <xTaskPriorityDisinherit+0x32>
 80067d0:	b16b      	cbz	r3, 80067ee <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
 80067d2:	2000      	movs	r0, #0
	}
 80067d4:	b002      	add	sp, #8
 80067d6:	bd10      	pop	{r4, pc}
 80067d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067dc:	f383 8811 	msr	BASEPRI, r3
 80067e0:	f3bf 8f6f 	isb	sy
 80067e4:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 80067e8:	e7fe      	b.n	80067e8 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80067ea:	2000      	movs	r0, #0
	}
 80067ec:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067ee:	1d21      	adds	r1, r4, #4
 80067f0:	4608      	mov	r0, r1
 80067f2:	9101      	str	r1, [sp, #4]
 80067f4:	f7fe fc54 	bl	80050a0 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80067f8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 80067fa:	4b0a      	ldr	r3, [pc, #40]	; (8006824 <xTaskPriorityDisinherit+0x84>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067fc:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
 8006800:	9901      	ldr	r1, [sp, #4]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006802:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006804:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	4290      	cmp	r0, r2
 800680a:	d900      	bls.n	800680e <xTaskPriorityDisinherit+0x6e>
 800680c:	6018      	str	r0, [r3, #0]
 800680e:	4b06      	ldr	r3, [pc, #24]	; (8006828 <xTaskPriorityDisinherit+0x88>)
 8006810:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006814:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006818:	f7fe fc1a 	bl	8005050 <vListInsertEnd>
					xReturn = pdTRUE;
 800681c:	2001      	movs	r0, #1
		return xReturn;
 800681e:	e7d9      	b.n	80067d4 <xTaskPriorityDisinherit+0x34>
 8006820:	24051340 	.word	0x24051340
 8006824:	240517c0 	.word	0x240517c0
 8006828:	2405134c 	.word	0x2405134c

0800682c <vTaskGetRunTimeStats>:
		uxArraySize = uxCurrentNumberOfTasks;
 800682c:	4a31      	ldr	r2, [pc, #196]	; (80068f4 <vTaskGetRunTimeStats+0xc8>)
	{
 800682e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		uxArraySize = uxCurrentNumberOfTasks;
 8006832:	6815      	ldr	r5, [r2, #0]
		*pcWriteBuffer = ( char ) 0x00;
 8006834:	2400      	movs	r4, #0
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8006836:	6812      	ldr	r2, [r2, #0]
	{
 8006838:	b083      	sub	sp, #12
 800683a:	4683      	mov	fp, r0
		*pcWriteBuffer = ( char ) 0x00;
 800683c:	7004      	strb	r4, [r0, #0]
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800683e:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8006842:	0090      	lsls	r0, r2, #2
 8006844:	f000 fbf0 	bl	8007028 <pvPortMalloc>
		if( pxTaskStatusArray != NULL )
 8006848:	2800      	cmp	r0, #0
 800684a:	d050      	beq.n	80068ee <vTaskGetRunTimeStats+0xc2>
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800684c:	aa01      	add	r2, sp, #4
 800684e:	4629      	mov	r1, r5
 8006850:	4681      	mov	r9, r0
			ulTotalTime /= 100UL;
 8006852:	4e29      	ldr	r6, [pc, #164]	; (80068f8 <vTaskGetRunTimeStats+0xcc>)
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8006854:	f7ff fd2a 	bl	80062ac <uxTaskGetSystemState>
			ulTotalTime /= 100UL;
 8006858:	9a01      	ldr	r2, [sp, #4]
 800685a:	fba6 3602 	umull	r3, r6, r6, r2
			if( ulTotalTime > 0UL )
 800685e:	2a63      	cmp	r2, #99	; 0x63
			ulTotalTime /= 100UL;
 8006860:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8006864:	9601      	str	r6, [sp, #4]
			if( ulTotalTime > 0UL )
 8006866:	d93f      	bls.n	80068e8 <vTaskGetRunTimeStats+0xbc>
				for( x = 0; x < uxArraySize; x++ )
 8006868:	2800      	cmp	r0, #0
 800686a:	d03d      	beq.n	80068e8 <vTaskGetRunTimeStats+0xbc>
 800686c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8006870:	464c      	mov	r4, r9
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8006872:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8006900 <vTaskGetRunTimeStats+0xd4>
 8006876:	eb09 0880 	add.w	r8, r9, r0, lsl #2
 800687a:	e00d      	b.n	8006898 <vTaskGetRunTimeStats+0x6c>
 800687c:	69a2      	ldr	r2, [r4, #24]
				for( x = 0; x < uxArraySize; x++ )
 800687e:	3424      	adds	r4, #36	; 0x24
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8006880:	fbb7 f3f6 	udiv	r3, r7, r6
 8006884:	f001 fa00 	bl	8007c88 <siprintf>
					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8006888:	4628      	mov	r0, r5
 800688a:	f7f9 fd3b 	bl	8000304 <strlen>
				for( x = 0; x < uxArraySize; x++ )
 800688e:	4544      	cmp	r4, r8
					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8006890:	eb05 0b00 	add.w	fp, r5, r0
				for( x = 0; x < uxArraySize; x++ )
 8006894:	d028      	beq.n	80068e8 <vTaskGetRunTimeStats+0xbc>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8006896:	9e01      	ldr	r6, [sp, #4]
		strcpy( pcBuffer, pcTaskName );
 8006898:	6861      	ldr	r1, [r4, #4]
 800689a:	4658      	mov	r0, fp
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800689c:	69a7      	ldr	r7, [r4, #24]
		strcpy( pcBuffer, pcTaskName );
 800689e:	f001 fa13 	bl	8007cc8 <stpcpy>
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80068a2:	eba0 0c0b 	sub.w	ip, r0, fp
			pcBuffer[ x ] = ' ';
 80068a6:	ebab 0200 	sub.w	r2, fp, r0
 80068aa:	2120      	movs	r1, #32
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80068ac:	f1bc 0f0e 	cmp.w	ip, #14
			pcBuffer[ x ] = ' ';
 80068b0:	f102 020f 	add.w	r2, r2, #15
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80068b4:	d803      	bhi.n	80068be <vTaskGetRunTimeStats+0x92>
			pcBuffer[ x ] = ' ';
 80068b6:	f000 fd0d 	bl	80072d4 <memset>
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80068ba:	f04f 0c0f 	mov.w	ip, #15
		pcBuffer[ x ] = ( char ) 0x00;
 80068be:	2200      	movs	r2, #0
 80068c0:	eb0b 050c 	add.w	r5, fp, ip
					if( ulStatsAsPercentage > 0UL )
 80068c4:	42b7      	cmp	r7, r6
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80068c6:	4651      	mov	r1, sl
 80068c8:	4628      	mov	r0, r5
		pcBuffer[ x ] = ( char ) 0x00;
 80068ca:	f80b 200c 	strb.w	r2, [fp, ip]
					if( ulStatsAsPercentage > 0UL )
 80068ce:	d2d5      	bcs.n	800687c <vTaskGetRunTimeStats+0x50>
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80068d0:	69a2      	ldr	r2, [r4, #24]
				for( x = 0; x < uxArraySize; x++ )
 80068d2:	3424      	adds	r4, #36	; 0x24
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80068d4:	4909      	ldr	r1, [pc, #36]	; (80068fc <vTaskGetRunTimeStats+0xd0>)
 80068d6:	f001 f9d7 	bl	8007c88 <siprintf>
					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 80068da:	4628      	mov	r0, r5
 80068dc:	f7f9 fd12 	bl	8000304 <strlen>
				for( x = 0; x < uxArraySize; x++ )
 80068e0:	4544      	cmp	r4, r8
					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 80068e2:	eb05 0b00 	add.w	fp, r5, r0
				for( x = 0; x < uxArraySize; x++ )
 80068e6:	d1d6      	bne.n	8006896 <vTaskGetRunTimeStats+0x6a>
			vPortFree( pxTaskStatusArray );
 80068e8:	4648      	mov	r0, r9
 80068ea:	f000 fc59 	bl	80071a0 <vPortFree>
	}
 80068ee:	b003      	add	sp, #12
 80068f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f4:	240517b0 	.word	0x240517b0
 80068f8:	51eb851f 	.word	0x51eb851f
 80068fc:	0800a4a8 	.word	0x0800a4a8
 8006900:	0800a49c 	.word	0x0800a49c

08006904 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006908:	4e22      	ldr	r6, [pc, #136]	; (8006994 <prvSwitchTimerLists+0x90>)
 800690a:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 800690c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800699c <prvSwitchTimerLists+0x98>
		xMessage.xMessageID = xCommandID;
 8006910:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006914:	e00d      	b.n	8006932 <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006916:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006918:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800691a:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800691c:	1d25      	adds	r5, r4, #4
 800691e:	4628      	mov	r0, r5
 8006920:	f7fe fbbe 	bl	80050a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006924:	6a23      	ldr	r3, [r4, #32]
 8006926:	4620      	mov	r0, r4
 8006928:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800692a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800692e:	075b      	lsls	r3, r3, #29
 8006930:	d40a      	bmi.n	8006948 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006932:	6833      	ldr	r3, [r6, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	2a00      	cmp	r2, #0
 8006938:	d1ed      	bne.n	8006916 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 800693a:	4a17      	ldr	r2, [pc, #92]	; (8006998 <prvSwitchTimerLists+0x94>)
 800693c:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800693e:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8006940:	6031      	str	r1, [r6, #0]
}
 8006942:	b005      	add	sp, #20
 8006944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006948:	69a3      	ldr	r3, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800694a:	4629      	mov	r1, r5
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800694c:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 800694e:	429f      	cmp	r7, r3
 8006950:	d205      	bcs.n	800695e <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006952:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006954:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006956:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006958:	f7fe fb8a 	bl	8005070 <vListInsert>
 800695c:	e7e9      	b.n	8006932 <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
 800695e:	f8d9 3000 	ldr.w	r3, [r9]
 8006962:	b16b      	cbz	r3, 8006980 <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006964:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006966:	e9cd 8700 	strd	r8, r7, [sp]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800696a:	f7ff ff09 	bl	8006780 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800696e:	2300      	movs	r3, #0
 8006970:	4669      	mov	r1, sp
 8006972:	f8d9 0000 	ldr.w	r0, [r9]
 8006976:	461a      	mov	r2, r3
 8006978:	f7fe fc54 	bl	8005224 <xQueueGenericSend>
				configASSERT( xResult );
 800697c:	2800      	cmp	r0, #0
 800697e:	d1d8      	bne.n	8006932 <prvSwitchTimerLists+0x2e>
 8006980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	e7fe      	b.n	8006990 <prvSwitchTimerLists+0x8c>
 8006992:	bf00      	nop
 8006994:	24051840 	.word	0x24051840
 8006998:	24051844 	.word	0x24051844
 800699c:	24051964 	.word	0x24051964

080069a0 <prvTimerTask>:
{
 80069a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a4:	4e9f      	ldr	r6, [pc, #636]	; (8006c24 <prvTimerTask+0x284>)
 80069a6:	b089      	sub	sp, #36	; 0x24
 80069a8:	4d9f      	ldr	r5, [pc, #636]	; (8006c28 <prvTimerTask+0x288>)
					portYIELD_WITHIN_API();
 80069aa:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 80069ae:	4c9f      	ldr	r4, [pc, #636]	; (8006c2c <prvTimerTask+0x28c>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80069b0:	6833      	ldr	r3, [r6, #0]
 80069b2:	681f      	ldr	r7, [r3, #0]
 80069b4:	2f00      	cmp	r7, #0
 80069b6:	f000 80b2 	beq.w	8006b1e <prvTimerTask+0x17e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 80069be:	f7ff fc57 	bl	8006270 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80069c2:	f7ff fc6d 	bl	80062a0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80069c6:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 80069c8:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80069ca:	4290      	cmp	r0, r2
 80069cc:	f0c0 80af 	bcc.w	8006b2e <prvTimerTask+0x18e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80069d0:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 80069d2:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80069d4:	f200 80d0 	bhi.w	8006b78 <prvTimerTask+0x1d8>
				( void ) xTaskResumeAll();
 80069d8:	f7ff fc52 	bl	8006280 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069dc:	6832      	ldr	r2, [r6, #0]
 80069de:	68d2      	ldr	r2, [r2, #12]
 80069e0:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069e4:	f10b 0804 	add.w	r8, fp, #4
 80069e8:	4640      	mov	r0, r8
 80069ea:	f7fe fb59 	bl	80050a0 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069ee:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
 80069f2:	0741      	lsls	r1, r0, #29
 80069f4:	f100 80d0 	bmi.w	8006b98 <prvTimerTask+0x1f8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069f8:	f020 0001 	bic.w	r0, r0, #1
 80069fc:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a00:	f8db 3020 	ldr.w	r3, [fp, #32]
 8006a04:	4658      	mov	r0, fp
 8006a06:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a08:	2200      	movs	r2, #0
 8006a0a:	4669      	mov	r1, sp
 8006a0c:	6820      	ldr	r0, [r4, #0]
 8006a0e:	f7fe fd8b 	bl	8005528 <xQueueReceive>
 8006a12:	2800      	cmp	r0, #0
 8006a14:	d0cc      	beq.n	80069b0 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006a16:	9b00      	ldr	r3, [sp, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	db77      	blt.n	8006b0c <prvTimerTask+0x16c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006a1c:	9f02      	ldr	r7, [sp, #8]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	b113      	cbz	r3, 8006a28 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a22:	1d38      	adds	r0, r7, #4
 8006a24:	f7fe fb3c 	bl	80050a0 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8006a28:	f7ff fc3a 	bl	80062a0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8006a2c:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8006a2e:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 8006a30:	4298      	cmp	r0, r3
 8006a32:	f0c0 8083 	bcc.w	8006b3c <prvTimerTask+0x19c>
			switch( xMessage.xMessageID )
 8006a36:	9b00      	ldr	r3, [sp, #0]
	xLastTime = xTimeNow;
 8006a38:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
 8006a3c:	2b09      	cmp	r3, #9
 8006a3e:	d8e3      	bhi.n	8006a08 <prvTimerTask+0x68>
 8006a40:	e8df f003 	tbb	[pc, r3]
 8006a44:	54050505 	.word	0x54050505
 8006a48:	05055b3e 	.word	0x05055b3e
 8006a4c:	3e54      	.short	0x3e54
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a52:	69ba      	ldr	r2, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a54:	f043 0301 	orr.w	r3, r3, #1
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a58:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a5a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a5e:	9b01      	ldr	r3, [sp, #4]
 8006a60:	1899      	adds	r1, r3, r2
 8006a62:	bf2c      	ite	cs
 8006a64:	2001      	movcs	r0, #1
 8006a66:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8006a68:	4541      	cmp	r1, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006a6a:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8006a6c:	f200 8086 	bhi.w	8006b7c <prvTimerTask+0x1dc>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a70:	eba8 0303 	sub.w	r3, r8, r3
 8006a74:	429a      	cmp	r2, r3
 8006a76:	f200 80c0 	bhi.w	8006bfa <prvTimerTask+0x25a>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	4638      	mov	r0, r7
 8006a7e:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a84:	075b      	lsls	r3, r3, #29
 8006a86:	d5bf      	bpl.n	8006a08 <prvTimerTask+0x68>
	if( xTimerQueue != NULL )
 8006a88:	6823      	ldr	r3, [r4, #0]
 8006a8a:	b183      	cbz	r3, 8006aae <prvTimerTask+0x10e>
		xMessage.xMessageID = xCommandID;
 8006a8c:	2200      	movs	r2, #0
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a8e:	69bb      	ldr	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006a90:	9706      	str	r7, [sp, #24]
		xMessage.xMessageID = xCommandID;
 8006a92:	9204      	str	r2, [sp, #16]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a94:	9a01      	ldr	r2, [sp, #4]
 8006a96:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006a98:	9305      	str	r3, [sp, #20]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006a9a:	f7ff fe71 	bl	8006780 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	a904      	add	r1, sp, #16
 8006aa2:	6820      	ldr	r0, [r4, #0]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	f7fe fbbd 	bl	8005224 <xQueueGenericSend>
							configASSERT( xResult );
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	d1ac      	bne.n	8006a08 <prvTimerTask+0x68>
 8006aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	e7fe      	b.n	8006abe <prvTimerTask+0x11e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ac0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006ac4:	f043 0301 	orr.w	r3, r3, #1
 8006ac8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006acc:	9b01      	ldr	r3, [sp, #4]
 8006ace:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 809e 	beq.w	8006c12 <prvTimerTask+0x272>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ad6:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006ad8:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ada:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 8006adc:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ade:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8006ae0:	d856      	bhi.n	8006b90 <prvTimerTask+0x1f0>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006ae2:	4b53      	ldr	r3, [pc, #332]	; (8006c30 <prvTimerTask+0x290>)
 8006ae4:	6818      	ldr	r0, [r3, #0]
 8006ae6:	f7fe fac3 	bl	8005070 <vListInsert>
	return xProcessTimerNow;
 8006aea:	e78d      	b.n	8006a08 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006aec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006af0:	f023 0301 	bic.w	r3, r3, #1
 8006af4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
 8006af8:	e786      	b.n	8006a08 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006afa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006afe:	079a      	lsls	r2, r3, #30
 8006b00:	d572      	bpl.n	8006be8 <prvTimerTask+0x248>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b02:	f023 0301 	bic.w	r3, r3, #1
 8006b06:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8006b0a:	e77d      	b.n	8006a08 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006b0c:	9b01      	ldr	r3, [sp, #4]
 8006b0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b12:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006b14:	9b00      	ldr	r3, [sp, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f6ff af76 	blt.w	8006a08 <prvTimerTask+0x68>
 8006b1c:	e77e      	b.n	8006a1c <prvTimerTask+0x7c>
	vTaskSuspendAll();
 8006b1e:	f7ff fba7 	bl	8006270 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8006b22:	f7ff fbbd 	bl	80062a0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8006b26:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8006b28:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8006b2a:	4282      	cmp	r2, r0
 8006b2c:	d909      	bls.n	8006b42 <prvTimerTask+0x1a2>
		prvSwitchTimerLists();
 8006b2e:	f7ff fee9 	bl	8006904 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8006b32:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 8006b36:	f7ff fba3 	bl	8006280 <xTaskResumeAll>
 8006b3a:	e765      	b.n	8006a08 <prvTimerTask+0x68>
		prvSwitchTimerLists();
 8006b3c:	f7ff fee2 	bl	8006904 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b40:	e779      	b.n	8006a36 <prvTimerTask+0x96>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b42:	4b3b      	ldr	r3, [pc, #236]	; (8006c30 <prvTimerTask+0x290>)
	xLastTime = xTimeNow;
 8006b44:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	6812      	ldr	r2, [r2, #0]
 8006b4c:	fab2 f282 	clz	r2, r2
 8006b50:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b52:	eba7 010a 	sub.w	r1, r7, sl
 8006b56:	6820      	ldr	r0, [r4, #0]
 8006b58:	f7fe fe90 	bl	800587c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006b5c:	f7ff fb90 	bl	8006280 <xTaskResumeAll>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	f47f af51 	bne.w	8006a08 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
 8006b66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006b6a:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 8006b6e:	f3bf 8f4f 	dsb	sy
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	e747      	b.n	8006a08 <prvTimerTask+0x68>
 8006b78:	2200      	movs	r2, #0
 8006b7a:	e7ea      	b.n	8006b52 <prvTimerTask+0x1b2>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b7c:	4543      	cmp	r3, r8
 8006b7e:	d902      	bls.n	8006b86 <prvTimerTask+0x1e6>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	f43f af7a 	beq.w	8006a7a <prvTimerTask+0xda>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b86:	1d39      	adds	r1, r7, #4
 8006b88:	6830      	ldr	r0, [r6, #0]
 8006b8a:	f7fe fa71 	bl	8005070 <vListInsert>
	return xProcessTimerNow;
 8006b8e:	e73b      	b.n	8006a08 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b90:	6830      	ldr	r0, [r6, #0]
 8006b92:	f7fe fa6d 	bl	8005070 <vListInsert>
 8006b96:	e737      	b.n	8006a08 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b98:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b9c:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006ba0:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 8006ba2:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ba4:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8006ba8:	d322      	bcc.n	8006bf0 <prvTimerTask+0x250>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006baa:	ebaa 0307 	sub.w	r3, sl, r7
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d829      	bhi.n	8006c06 <prvTimerTask+0x266>
	if( xTimerQueue != NULL )
 8006bb2:	6823      	ldr	r3, [r4, #0]
 8006bb4:	b17b      	cbz	r3, 8006bd6 <prvTimerTask+0x236>
		xMessage.xMessageID = xCommandID;
 8006bb6:	2300      	movs	r3, #0
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006bb8:	9705      	str	r7, [sp, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006bba:	f8cd b018 	str.w	fp, [sp, #24]
		xMessage.xMessageID = xCommandID;
 8006bbe:	9304      	str	r3, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006bc0:	f7ff fdde 	bl	8006780 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	a904      	add	r1, sp, #16
 8006bc8:	6820      	ldr	r0, [r4, #0]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	f7fe fb2a 	bl	8005224 <xQueueGenericSend>
			configASSERT( xResult );
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	f47f af15 	bne.w	8006a00 <prvTimerTask+0x60>
 8006bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bda:	f383 8811 	msr	BASEPRI, r3
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	e7fe      	b.n	8006be6 <prvTimerTask+0x246>
							vPortFree( pxTimer );
 8006be8:	4638      	mov	r0, r7
 8006bea:	f000 fad9 	bl	80071a0 <vPortFree>
 8006bee:	e70b      	b.n	8006a08 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bf0:	4641      	mov	r1, r8
 8006bf2:	6830      	ldr	r0, [r6, #0]
 8006bf4:	f7fe fa3c 	bl	8005070 <vListInsert>
	return xProcessTimerNow;
 8006bf8:	e702      	b.n	8006a00 <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006bfa:	4b0d      	ldr	r3, [pc, #52]	; (8006c30 <prvTimerTask+0x290>)
 8006bfc:	1d39      	adds	r1, r7, #4
 8006bfe:	6818      	ldr	r0, [r3, #0]
 8006c00:	f7fe fa36 	bl	8005070 <vListInsert>
	return xProcessTimerNow;
 8006c04:	e700      	b.n	8006a08 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006c06:	4b0a      	ldr	r3, [pc, #40]	; (8006c30 <prvTimerTask+0x290>)
 8006c08:	4641      	mov	r1, r8
 8006c0a:	6818      	ldr	r0, [r3, #0]
 8006c0c:	f7fe fa30 	bl	8005070 <vListInsert>
	return xProcessTimerNow;
 8006c10:	e6f6      	b.n	8006a00 <prvTimerTask+0x60>
 8006c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c16:	f383 8811 	msr	BASEPRI, r3
 8006c1a:	f3bf 8f6f 	isb	sy
 8006c1e:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006c22:	e7fe      	b.n	8006c22 <prvTimerTask+0x282>
 8006c24:	24051840 	.word	0x24051840
 8006c28:	24051910 	.word	0x24051910
 8006c2c:	24051964 	.word	0x24051964
 8006c30:	24051844 	.word	0x24051844

08006c34 <xTimerCreateTimerTask>:
{
 8006c34:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8006c36:	4c23      	ldr	r4, [pc, #140]	; (8006cc4 <xTimerCreateTimerTask+0x90>)
{
 8006c38:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
 8006c3a:	f000 f8c3 	bl	8006dc4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8006c3e:	6825      	ldr	r5, [r4, #0]
 8006c40:	b335      	cbz	r5, 8006c90 <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c42:	f000 f8e1 	bl	8006e08 <vPortExitCritical>
	if( xTimerQueue != NULL )
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	b1cb      	cbz	r3, 8006c7e <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006c4a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c4c:	aa07      	add	r2, sp, #28
 8006c4e:	a906      	add	r1, sp, #24
 8006c50:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c52:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c54:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c58:	f7fe f9da 	bl	8005010 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c5c:	4623      	mov	r3, r4
 8006c5e:	9a07      	ldr	r2, [sp, #28]
 8006c60:	9500      	str	r5, [sp, #0]
 8006c62:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8006c66:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8006c6a:	4917      	ldr	r1, [pc, #92]	; (8006cc8 <xTimerCreateTimerTask+0x94>)
 8006c6c:	4817      	ldr	r0, [pc, #92]	; (8006ccc <xTimerCreateTimerTask+0x98>)
 8006c6e:	f7ff f9ab 	bl	8005fc8 <xTaskCreateStatic>
 8006c72:	4b17      	ldr	r3, [pc, #92]	; (8006cd0 <xTimerCreateTimerTask+0x9c>)
 8006c74:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8006c76:	b110      	cbz	r0, 8006c7e <xTimerCreateTimerTask+0x4a>
}
 8006c78:	2001      	movs	r0, #1
 8006c7a:	b009      	add	sp, #36	; 0x24
 8006c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8006c8e:	e7fe      	b.n	8006c8e <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
 8006c90:	4f10      	ldr	r7, [pc, #64]	; (8006cd4 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
 8006c92:	4e11      	ldr	r6, [pc, #68]	; (8006cd8 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
 8006c94:	4638      	mov	r0, r7
 8006c96:	f7fe f9cb 	bl	8005030 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	f7fe f9c8 	bl	8005030 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006ca0:	4a0e      	ldr	r2, [pc, #56]	; (8006cdc <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006ca2:	9500      	str	r5, [sp, #0]
 8006ca4:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8006ca6:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006ca8:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8006caa:	4a0d      	ldr	r2, [pc, #52]	; (8006ce0 <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006cac:	4b0d      	ldr	r3, [pc, #52]	; (8006ce4 <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
 8006cae:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006cb0:	4a0d      	ldr	r2, [pc, #52]	; (8006ce8 <xTimerCreateTimerTask+0xb4>)
 8006cb2:	f7fe fa4b 	bl	800514c <xQueueGenericCreateStatic>
 8006cb6:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d0c2      	beq.n	8006c42 <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006cbc:	490b      	ldr	r1, [pc, #44]	; (8006cec <xTimerCreateTimerTask+0xb8>)
 8006cbe:	f7fe fdb5 	bl	800582c <vQueueAddToRegistry>
 8006cc2:	e7be      	b.n	8006c42 <xTimerCreateTimerTask+0xe>
 8006cc4:	24051964 	.word	0x24051964
 8006cc8:	0800a4bc 	.word	0x0800a4bc
 8006ccc:	080069a1 	.word	0x080069a1
 8006cd0:	24051968 	.word	0x24051968
 8006cd4:	240518e8 	.word	0x240518e8
 8006cd8:	240518fc 	.word	0x240518fc
 8006cdc:	24051840 	.word	0x24051840
 8006ce0:	24051844 	.word	0x24051844
 8006ce4:	24051914 	.word	0x24051914
 8006ce8:	24051848 	.word	0x24051848
 8006cec:	0800a4b4 	.word	0x0800a4b4

08006cf0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006cf0:	4808      	ldr	r0, [pc, #32]	; (8006d14 <prvPortStartFirstTask+0x24>)
 8006cf2:	6800      	ldr	r0, [r0, #0]
 8006cf4:	6800      	ldr	r0, [r0, #0]
 8006cf6:	f380 8808 	msr	MSP, r0
 8006cfa:	f04f 0000 	mov.w	r0, #0
 8006cfe:	f380 8814 	msr	CONTROL, r0
 8006d02:	b662      	cpsie	i
 8006d04:	b661      	cpsie	f
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	df00      	svc	0
 8006d10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d12:	0000      	.short	0x0000
 8006d14:	e000ed08 	.word	0xe000ed08

08006d18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d18:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d28 <vPortEnableVFP+0x10>
 8006d1c:	6801      	ldr	r1, [r0, #0]
 8006d1e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d22:	6001      	str	r1, [r0, #0]
 8006d24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d26:	0000      	.short	0x0000
 8006d28:	e000ed88 	.word	0xe000ed88

08006d2c <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8006d2c:	4b0e      	ldr	r3, [pc, #56]	; (8006d68 <prvTaskExitError+0x3c>)
{
 8006d2e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8006d30:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8006d32:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 8006d34:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8006d36:	3301      	adds	r3, #1
 8006d38:	d008      	beq.n	8006d4c <prvTaskExitError+0x20>
 8006d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3e:	f383 8811 	msr	BASEPRI, r3
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	e7fe      	b.n	8006d4a <prvTaskExitError+0x1e>
 8006d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d50:	f383 8811 	msr	BASEPRI, r3
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8006d5c:	9b01      	ldr	r3, [sp, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d0fc      	beq.n	8006d5c <prvTaskExitError+0x30>
}
 8006d62:	b002      	add	sp, #8
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	24050798 	.word	0x24050798

08006d6c <pxPortInitialiseStack>:
{
 8006d6c:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d6e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d72:	4809      	ldr	r0, [pc, #36]	; (8006d98 <pxPortInitialiseStack+0x2c>)
{
 8006d74:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d76:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d7a:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d7e:	f843 2c20 	str.w	r2, [r3, #-32]
}
 8006d82:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d86:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d8a:	f06f 0102 	mvn.w	r1, #2
}
 8006d8e:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d92:	f843 1c24 	str.w	r1, [r3, #-36]
}
 8006d96:	4770      	bx	lr
 8006d98:	08006d2d 	.word	0x08006d2d
 8006d9c:	00000000 	.word	0x00000000

08006da0 <SVC_Handler>:
	__asm volatile (
 8006da0:	4b07      	ldr	r3, [pc, #28]	; (8006dc0 <pxCurrentTCBConst2>)
 8006da2:	6819      	ldr	r1, [r3, #0]
 8006da4:	6808      	ldr	r0, [r1, #0]
 8006da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006daa:	f380 8809 	msr	PSP, r0
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f04f 0000 	mov.w	r0, #0
 8006db6:	f380 8811 	msr	BASEPRI, r0
 8006dba:	4770      	bx	lr
 8006dbc:	f3af 8000 	nop.w

08006dc0 <pxCurrentTCBConst2>:
 8006dc0:	24051340 	.word	0x24051340

08006dc4 <vPortEnterCritical>:
 8006dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8006dd4:	4a0b      	ldr	r2, [pc, #44]	; (8006e04 <vPortEnterCritical+0x40>)
 8006dd6:	6813      	ldr	r3, [r2, #0]
 8006dd8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8006dda:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8006ddc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8006dde:	d000      	beq.n	8006de2 <vPortEnterCritical+0x1e>
}
 8006de0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006de2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006de6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d0f7      	beq.n	8006de0 <vPortEnterCritical+0x1c>
 8006df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	e7fe      	b.n	8006e00 <vPortEnterCritical+0x3c>
 8006e02:	bf00      	nop
 8006e04:	24050798 	.word	0x24050798

08006e08 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006e08:	4a08      	ldr	r2, [pc, #32]	; (8006e2c <vPortExitCritical+0x24>)
 8006e0a:	6813      	ldr	r3, [r2, #0]
 8006e0c:	b943      	cbnz	r3, 8006e20 <vPortExitCritical+0x18>
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	e7fe      	b.n	8006e1e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006e20:	3b01      	subs	r3, #1
 8006e22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e24:	b90b      	cbnz	r3, 8006e2a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e26:	f383 8811 	msr	BASEPRI, r3
}
 8006e2a:	4770      	bx	lr
 8006e2c:	24050798 	.word	0x24050798

08006e30 <PendSV_Handler>:
	__asm volatile
 8006e30:	f3ef 8009 	mrs	r0, PSP
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	4b15      	ldr	r3, [pc, #84]	; (8006e90 <pxCurrentTCBConst>)
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	f01e 0f10 	tst.w	lr, #16
 8006e40:	bf08      	it	eq
 8006e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4a:	6010      	str	r0, [r2, #0]
 8006e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e54:	f380 8811 	msr	BASEPRI, r0
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	f7ff fb0c 	bl	800647c <vTaskSwitchContext>
 8006e64:	f04f 0000 	mov.w	r0, #0
 8006e68:	f380 8811 	msr	BASEPRI, r0
 8006e6c:	bc09      	pop	{r0, r3}
 8006e6e:	6819      	ldr	r1, [r3, #0]
 8006e70:	6808      	ldr	r0, [r1, #0]
 8006e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e76:	f01e 0f10 	tst.w	lr, #16
 8006e7a:	bf08      	it	eq
 8006e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e80:	f380 8809 	msr	PSP, r0
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	f3af 8000 	nop.w

08006e90 <pxCurrentTCBConst>:
 8006e90:	24051340 	.word	0x24051340

08006e94 <xPortSysTickHandler>:
{
 8006e94:	b508      	push	{r3, lr}
	__asm volatile
 8006e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9a:	f383 8811 	msr	BASEPRI, r3
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8006ea6:	f7ff fad9 	bl	800645c <xTaskIncrementTick>
 8006eaa:	b128      	cbz	r0, 8006eb8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006eac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eb4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f383 8811 	msr	BASEPRI, r3
}
 8006ebe:	bd08      	pop	{r3, pc}

08006ec0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ec0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8006ec4:	2100      	movs	r1, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ec6:	4b06      	ldr	r3, [pc, #24]	; (8006ee0 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ec8:	6111      	str	r1, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006eca:	4806      	ldr	r0, [pc, #24]	; (8006ee4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ecc:	6191      	str	r1, [r2, #24]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ece:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	fba0 0303 	umull	r0, r3, r0, r3
 8006ed6:	099b      	lsrs	r3, r3, #6
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006edc:	6111      	str	r1, [r2, #16]
}
 8006ede:	4770      	bx	lr
 8006ee0:	24000000 	.word	0x24000000
 8006ee4:	10624dd3 	.word	0x10624dd3

08006ee8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ee8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006eec:	4a48      	ldr	r2, [pc, #288]	; (8007010 <xPortStartScheduler+0x128>)
 8006eee:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8006ef2:	4291      	cmp	r1, r2
 8006ef4:	d041      	beq.n	8006f7a <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ef6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8006efa:	4b46      	ldr	r3, [pc, #280]	; (8007014 <xPortStartScheduler+0x12c>)
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d033      	beq.n	8006f68 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f00:	4b45      	ldr	r3, [pc, #276]	; (8007018 <xPortStartScheduler+0x130>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f02:	f04f 0cff 	mov.w	ip, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f06:	4845      	ldr	r0, [pc, #276]	; (800701c <xPortStartScheduler+0x134>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f08:	4945      	ldr	r1, [pc, #276]	; (8007020 <xPortStartScheduler+0x138>)
{
 8006f0a:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f0c:	781a      	ldrb	r2, [r3, #0]
{
 8006f0e:	b084      	sub	sp, #16
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f10:	b2d2      	uxtb	r2, r2
 8006f12:	9202      	str	r2, [sp, #8]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f14:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f16:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f1a:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f1c:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f24:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f28:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f30:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f32:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f34:	d50f      	bpl.n	8006f56 <xPortStartScheduler+0x6e>
 8006f36:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f38:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006f3c:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f3e:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f40:	005b      	lsls	r3, r3, #1
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f48:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006f4c:	061b      	lsls	r3, r3, #24
 8006f4e:	d4f3      	bmi.n	8006f38 <xPortStartScheduler+0x50>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f50:	2903      	cmp	r1, #3
 8006f52:	d01b      	beq.n	8006f8c <xPortStartScheduler+0xa4>
 8006f54:	6001      	str	r1, [r0, #0]
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	e7fe      	b.n	8006f66 <xPortStartScheduler+0x7e>
 8006f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6c:	f383 8811 	msr	BASEPRI, r3
 8006f70:	f3bf 8f6f 	isb	sy
 8006f74:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006f78:	e7fe      	b.n	8006f78 <xPortStartScheduler+0x90>
 8006f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006f8a:	e7fe      	b.n	8006f8a <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f8c:	9b02      	ldr	r3, [sp, #8]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f8e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f92:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f96:	4a20      	ldr	r2, [pc, #128]	; (8007018 <xPortStartScheduler+0x130>)
 8006f98:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
 8006f9a:	4e22      	ldr	r6, [pc, #136]	; (8007024 <xPortStartScheduler+0x13c>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f9c:	6001      	str	r1, [r0, #0]
	uxCriticalNesting = 0;
 8006f9e:	2500      	movs	r5, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006fa0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006fa2:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8006fa6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006faa:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006fae:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8006fb2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006fb6:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8006fba:	f7ff ff81 	bl	8006ec0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006fbe:	6035      	str	r5, [r6, #0]
	vPortEnableVFP();
 8006fc0:	f7ff feaa 	bl	8006d18 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006fc4:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8006fc8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006fcc:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8006fd0:	f7ff fe8e 	bl	8006cf0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006fd4:	f7ff fa52 	bl	800647c <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 8006fd8:	6833      	ldr	r3, [r6, #0]
volatile uint32_t ulDummy = 0;
 8006fda:	9503      	str	r5, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 8006fdc:	3301      	adds	r3, #1
 8006fde:	d008      	beq.n	8006ff2 <xPortStartScheduler+0x10a>
 8006fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	e7fe      	b.n	8006ff0 <xPortStartScheduler+0x108>
 8006ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff6:	f383 8811 	msr	BASEPRI, r3
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8007002:	9b03      	ldr	r3, [sp, #12]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d0fc      	beq.n	8007002 <xPortStartScheduler+0x11a>
}
 8007008:	2000      	movs	r0, #0
 800700a:	b004      	add	sp, #16
 800700c:	bd70      	pop	{r4, r5, r6, pc}
 800700e:	bf00      	nop
 8007010:	410fc271 	.word	0x410fc271
 8007014:	410fc270 	.word	0x410fc270
 8007018:	e000e400 	.word	0xe000e400
 800701c:	24051970 	.word	0x24051970
 8007020:	2405196c 	.word	0x2405196c
 8007024:	24050798 	.word	0x24050798

08007028 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800702c:	4606      	mov	r6, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 800702e:	f7ff f91f 	bl	8006270 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007032:	4b54      	ldr	r3, [pc, #336]	; (8007184 <pvPortMalloc+0x15c>)
 8007034:	681d      	ldr	r5, [r3, #0]
 8007036:	2d00      	cmp	r5, #0
 8007038:	d06f      	beq.n	800711a <pvPortMalloc+0xf2>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800703a:	4b53      	ldr	r3, [pc, #332]	; (8007188 <pvPortMalloc+0x160>)
 800703c:	681f      	ldr	r7, [r3, #0]
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800703e:	423e      	tst	r6, r7
 8007040:	d12e      	bne.n	80070a0 <pvPortMalloc+0x78>
 8007042:	b36e      	cbz	r6, 80070a0 <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
 8007044:	f106 0408 	add.w	r4, r6, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007048:	0776      	lsls	r6, r6, #29
 800704a:	d002      	beq.n	8007052 <pvPortMalloc+0x2a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800704c:	f024 0407 	bic.w	r4, r4, #7
 8007050:	3408      	adds	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007052:	b32c      	cbz	r4, 80070a0 <pvPortMalloc+0x78>
 8007054:	f8df c144 	ldr.w	ip, [pc, #324]	; 800719c <pvPortMalloc+0x174>
 8007058:	f8dc 6000 	ldr.w	r6, [ip]
 800705c:	42a6      	cmp	r6, r4
 800705e:	d31f      	bcc.n	80070a0 <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8007060:	484a      	ldr	r0, [pc, #296]	; (800718c <pvPortMalloc+0x164>)
 8007062:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007064:	e003      	b.n	800706e <pvPortMalloc+0x46>
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	b122      	cbz	r2, 8007074 <pvPortMalloc+0x4c>
 800706a:	4618      	mov	r0, r3
 800706c:	4613      	mov	r3, r2
 800706e:	6859      	ldr	r1, [r3, #4]
 8007070:	42a1      	cmp	r1, r4
 8007072:	d3f8      	bcc.n	8007066 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007074:	42ab      	cmp	r3, r5
 8007076:	d013      	beq.n	80070a0 <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007078:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800707a:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800707c:	f858 eb08 	ldr.w	lr, [r8], #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007080:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007082:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007086:	d929      	bls.n	80070dc <pvPortMalloc+0xb4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007088:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800708a:	0748      	lsls	r0, r1, #29
 800708c:	d00f      	beq.n	80070ae <pvPortMalloc+0x86>
 800708e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	e7fe      	b.n	800709e <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80070a0:	f04f 0800 	mov.w	r8, #0
 80070a4:	f7ff f8ec 	bl	8006280 <xTaskResumeAll>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 80070a8:	4640      	mov	r0, r8
 80070aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070ae:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80070b0:	4a36      	ldr	r2, [pc, #216]	; (800718c <pvPortMalloc+0x164>)
						pxBlock->xBlockSize = xWantedSize;
 80070b2:	605c      	str	r4, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80070b4:	4614      	mov	r4, r2
 80070b6:	6812      	ldr	r2, [r2, #0]
 80070b8:	4291      	cmp	r1, r2
 80070ba:	d8fb      	bhi.n	80070b4 <pvPortMalloc+0x8c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80070bc:	6860      	ldr	r0, [r4, #4]
 80070be:	eb04 0e00 	add.w	lr, r4, r0
 80070c2:	4571      	cmp	r1, lr
 80070c4:	d04e      	beq.n	8007164 <pvPortMalloc+0x13c>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80070c6:	f8d1 e004 	ldr.w	lr, [r1, #4]
 80070ca:	eb01 000e 	add.w	r0, r1, lr
 80070ce:	4282      	cmp	r2, r0
 80070d0:	d04f      	beq.n	8007172 <pvPortMalloc+0x14a>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80070d2:	600a      	str	r2, [r1, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80070d4:	428c      	cmp	r4, r1
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80070d6:	bf18      	it	ne
 80070d8:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070da:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070dc:	4a2c      	ldr	r2, [pc, #176]	; (8007190 <pvPortMalloc+0x168>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070de:	1a76      	subs	r6, r6, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070e0:	4339      	orrs	r1, r7
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070e2:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070e4:	f8cc 6000 	str.w	r6, [ip]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070e8:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 80070ea:	f04f 0000 	mov.w	r0, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80070ee:	bf38      	it	cc
 80070f0:	6016      	strcc	r6, [r2, #0]
					xNumberOfSuccessfulAllocations++;
 80070f2:	4a28      	ldr	r2, [pc, #160]	; (8007194 <pvPortMalloc+0x16c>)
					pxBlock->pxNextFreeBlock = NULL;
 80070f4:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
 80070f8:	6813      	ldr	r3, [r2, #0]
 80070fa:	3301      	adds	r3, #1
 80070fc:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 80070fe:	f7ff f8bf 	bl	8006280 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007102:	f018 0f07 	tst.w	r8, #7
 8007106:	d0cf      	beq.n	80070a8 <pvPortMalloc+0x80>
 8007108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710c:	f383 8811 	msr	BASEPRI, r3
 8007110:	f3bf 8f6f 	isb	sy
 8007114:	f3bf 8f4f 	dsb	sy
 8007118:	e7fe      	b.n	8007118 <pvPortMalloc+0xf0>
	uxAddress = ( size_t ) ucHeap;
 800711a:	491f      	ldr	r1, [pc, #124]	; (8007198 <pvPortMalloc+0x170>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800711c:	074f      	lsls	r7, r1, #29
 800711e:	d11a      	bne.n	8007156 <pvPortMalloc+0x12e>
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007120:	460a      	mov	r2, r1
 8007122:	f501 31c8 	add.w	r1, r1, #102400	; 0x19000
 8007126:	4610      	mov	r0, r2
	uxAddress -= xHeapStructSize;
 8007128:	f1a1 0508 	sub.w	r5, r1, #8
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800712c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007130:	4916      	ldr	r1, [pc, #88]	; (800718c <pvPortMalloc+0x164>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007132:	f025 0507 	bic.w	r5, r5, #7
	pxEnd = ( void * ) uxAddress;
 8007136:	601d      	str	r5, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007138:	1aab      	subs	r3, r5, r2
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800713a:	4a15      	ldr	r2, [pc, #84]	; (8007190 <pvPortMalloc+0x168>)
 800713c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800713e:	4a17      	ldr	r2, [pc, #92]	; (800719c <pvPortMalloc+0x174>)
 8007140:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007142:	4a11      	ldr	r2, [pc, #68]	; (8007188 <pvPortMalloc+0x160>)
 8007144:	6017      	str	r7, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007146:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007148:	e9c1 0200 	strd	r0, r2, [r1]
	pxEnd->pxNextFreeBlock = NULL;
 800714c:	e9c5 2200 	strd	r2, r2, [r5]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007150:	e9c0 5300 	strd	r5, r3, [r0]
}
 8007154:	e773      	b.n	800703e <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007156:	1dca      	adds	r2, r1, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007158:	f501 31c8 	add.w	r1, r1, #102400	; 0x19000
 800715c:	f022 0207 	bic.w	r2, r2, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007160:	4610      	mov	r0, r2
 8007162:	e7e1      	b.n	8007128 <pvPortMalloc+0x100>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007164:	6849      	ldr	r1, [r1, #4]
 8007166:	eb00 0e01 	add.w	lr, r0, r1
 800716a:	4621      	mov	r1, r4
 800716c:	f8c4 e004 	str.w	lr, [r4, #4]
		pxBlockToInsert = pxIterator;
 8007170:	e7ab      	b.n	80070ca <pvPortMalloc+0xa2>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007172:	42aa      	cmp	r2, r5
 8007174:	d0ad      	beq.n	80070d2 <pvPortMalloc+0xaa>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007176:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007178:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800717a:	4470      	add	r0, lr
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800717c:	600a      	str	r2, [r1, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800717e:	6048      	str	r0, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007180:	e7a8      	b.n	80070d4 <pvPortMalloc+0xac>
 8007182:	bf00      	nop
 8007184:	24051974 	.word	0x24051974
 8007188:	2406a978 	.word	0x2406a978
 800718c:	2406a98c 	.word	0x2406a98c
 8007190:	2406a980 	.word	0x2406a980
 8007194:	2406a984 	.word	0x2406a984
 8007198:	24051978 	.word	0x24051978
 800719c:	2406a97c 	.word	0x2406a97c

080071a0 <vPortFree>:
	if( pv != NULL )
 80071a0:	b1d0      	cbz	r0, 80071d8 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80071a2:	4a2b      	ldr	r2, [pc, #172]	; (8007250 <vPortFree+0xb0>)
 80071a4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80071a8:	6812      	ldr	r2, [r2, #0]
 80071aa:	4213      	tst	r3, r2
 80071ac:	d00b      	beq.n	80071c6 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80071ae:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80071b2:	b191      	cbz	r1, 80071da <vPortFree+0x3a>
 80071b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	e7fe      	b.n	80071c4 <vPortFree+0x24>
 80071c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80071d6:	e7fe      	b.n	80071d6 <vPortFree+0x36>
 80071d8:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071da:	ea23 0302 	bic.w	r3, r3, r2
{
 80071de:	b530      	push	{r4, r5, lr}
 80071e0:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071e2:	f840 3c04 	str.w	r3, [r0, #-4]
		puc -= xHeapStructSize;
 80071e6:	f1a0 0408 	sub.w	r4, r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071ea:	4d1a      	ldr	r5, [pc, #104]	; (8007254 <vPortFree+0xb4>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071ec:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 80071ee:	f7ff f83f 	bl	8006270 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071f2:	9801      	ldr	r0, [sp, #4]
 80071f4:	682a      	ldr	r2, [r5, #0]
 80071f6:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071fa:	4b17      	ldr	r3, [pc, #92]	; (8007258 <vPortFree+0xb8>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071fc:	440a      	add	r2, r1
 80071fe:	602a      	str	r2, [r5, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007200:	461a      	mov	r2, r3
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	429c      	cmp	r4, r3
 8007206:	d8fb      	bhi.n	8007200 <vPortFree+0x60>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007208:	6850      	ldr	r0, [r2, #4]
 800720a:	eb02 0c00 	add.w	ip, r2, r0
 800720e:	4564      	cmp	r4, ip
 8007210:	d019      	beq.n	8007246 <vPortFree+0xa6>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007212:	1860      	adds	r0, r4, r1
 8007214:	4283      	cmp	r3, r0
 8007216:	d00c      	beq.n	8007232 <vPortFree+0x92>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007218:	6023      	str	r3, [r4, #0]
	if( pxIterator != pxBlockToInsert )
 800721a:	42a2      	cmp	r2, r4
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800721c:	bf18      	it	ne
 800721e:	6014      	strne	r4, [r2, #0]
					xNumberOfSuccessfulFrees++;
 8007220:	4a0e      	ldr	r2, [pc, #56]	; (800725c <vPortFree+0xbc>)
 8007222:	6813      	ldr	r3, [r2, #0]
 8007224:	3301      	adds	r3, #1
 8007226:	6013      	str	r3, [r2, #0]
}
 8007228:	b003      	add	sp, #12
 800722a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				( void ) xTaskResumeAll();
 800722e:	f7ff b827 	b.w	8006280 <xTaskResumeAll>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007232:	480b      	ldr	r0, [pc, #44]	; (8007260 <vPortFree+0xc0>)
 8007234:	6800      	ldr	r0, [r0, #0]
 8007236:	4283      	cmp	r3, r0
 8007238:	d0ee      	beq.n	8007218 <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800723a:	e9d3 3000 	ldrd	r3, r0, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800723e:	4401      	add	r1, r0
 8007240:	e9c4 3100 	strd	r3, r1, [r4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007244:	e7e9      	b.n	800721a <vPortFree+0x7a>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007246:	4401      	add	r1, r0
 8007248:	4614      	mov	r4, r2
 800724a:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800724c:	e7e1      	b.n	8007212 <vPortFree+0x72>
 800724e:	bf00      	nop
 8007250:	2406a978 	.word	0x2406a978
 8007254:	2406a97c 	.word	0x2406a97c
 8007258:	2406a98c 	.word	0x2406a98c
 800725c:	2406a988 	.word	0x2406a988
 8007260:	24051974 	.word	0x24051974

08007264 <__errno>:
 8007264:	4b01      	ldr	r3, [pc, #4]	; (800726c <__errno+0x8>)
 8007266:	6818      	ldr	r0, [r3, #0]
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	2405079c 	.word	0x2405079c

08007270 <__libc_init_array>:
 8007270:	b570      	push	{r4, r5, r6, lr}
 8007272:	4d0d      	ldr	r5, [pc, #52]	; (80072a8 <__libc_init_array+0x38>)
 8007274:	4c0d      	ldr	r4, [pc, #52]	; (80072ac <__libc_init_array+0x3c>)
 8007276:	1b64      	subs	r4, r4, r5
 8007278:	10a4      	asrs	r4, r4, #2
 800727a:	2600      	movs	r6, #0
 800727c:	42a6      	cmp	r6, r4
 800727e:	d109      	bne.n	8007294 <__libc_init_array+0x24>
 8007280:	4d0b      	ldr	r5, [pc, #44]	; (80072b0 <__libc_init_array+0x40>)
 8007282:	4c0c      	ldr	r4, [pc, #48]	; (80072b4 <__libc_init_array+0x44>)
 8007284:	f003 f818 	bl	800a2b8 <_init>
 8007288:	1b64      	subs	r4, r4, r5
 800728a:	10a4      	asrs	r4, r4, #2
 800728c:	2600      	movs	r6, #0
 800728e:	42a6      	cmp	r6, r4
 8007290:	d105      	bne.n	800729e <__libc_init_array+0x2e>
 8007292:	bd70      	pop	{r4, r5, r6, pc}
 8007294:	f855 3b04 	ldr.w	r3, [r5], #4
 8007298:	4798      	blx	r3
 800729a:	3601      	adds	r6, #1
 800729c:	e7ee      	b.n	800727c <__libc_init_array+0xc>
 800729e:	f855 3b04 	ldr.w	r3, [r5], #4
 80072a2:	4798      	blx	r3
 80072a4:	3601      	adds	r6, #1
 80072a6:	e7f2      	b.n	800728e <__libc_init_array+0x1e>
 80072a8:	0800b118 	.word	0x0800b118
 80072ac:	0800b118 	.word	0x0800b118
 80072b0:	0800b118 	.word	0x0800b118
 80072b4:	0800b11c 	.word	0x0800b11c

080072b8 <memcpy>:
 80072b8:	440a      	add	r2, r1
 80072ba:	4291      	cmp	r1, r2
 80072bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80072c0:	d100      	bne.n	80072c4 <memcpy+0xc>
 80072c2:	4770      	bx	lr
 80072c4:	b510      	push	{r4, lr}
 80072c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072ce:	4291      	cmp	r1, r2
 80072d0:	d1f9      	bne.n	80072c6 <memcpy+0xe>
 80072d2:	bd10      	pop	{r4, pc}

080072d4 <memset>:
 80072d4:	4402      	add	r2, r0
 80072d6:	4603      	mov	r3, r0
 80072d8:	4293      	cmp	r3, r2
 80072da:	d100      	bne.n	80072de <memset+0xa>
 80072dc:	4770      	bx	lr
 80072de:	f803 1b01 	strb.w	r1, [r3], #1
 80072e2:	e7f9      	b.n	80072d8 <memset+0x4>

080072e4 <__cvt>:
 80072e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072e6:	ed2d 8b02 	vpush	{d8}
 80072ea:	eeb0 8b40 	vmov.f64	d8, d0
 80072ee:	b085      	sub	sp, #20
 80072f0:	4617      	mov	r7, r2
 80072f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80072f4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80072f6:	ee18 2a90 	vmov	r2, s17
 80072fa:	f025 0520 	bic.w	r5, r5, #32
 80072fe:	2a00      	cmp	r2, #0
 8007300:	bfb6      	itet	lt
 8007302:	222d      	movlt	r2, #45	; 0x2d
 8007304:	2200      	movge	r2, #0
 8007306:	eeb1 8b40 	vneglt.f64	d8, d0
 800730a:	2d46      	cmp	r5, #70	; 0x46
 800730c:	460c      	mov	r4, r1
 800730e:	701a      	strb	r2, [r3, #0]
 8007310:	d004      	beq.n	800731c <__cvt+0x38>
 8007312:	2d45      	cmp	r5, #69	; 0x45
 8007314:	d100      	bne.n	8007318 <__cvt+0x34>
 8007316:	3401      	adds	r4, #1
 8007318:	2102      	movs	r1, #2
 800731a:	e000      	b.n	800731e <__cvt+0x3a>
 800731c:	2103      	movs	r1, #3
 800731e:	ab03      	add	r3, sp, #12
 8007320:	9301      	str	r3, [sp, #4]
 8007322:	ab02      	add	r3, sp, #8
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	4622      	mov	r2, r4
 8007328:	4633      	mov	r3, r6
 800732a:	eeb0 0b48 	vmov.f64	d0, d8
 800732e:	f000 fe23 	bl	8007f78 <_dtoa_r>
 8007332:	2d47      	cmp	r5, #71	; 0x47
 8007334:	d101      	bne.n	800733a <__cvt+0x56>
 8007336:	07fb      	lsls	r3, r7, #31
 8007338:	d51a      	bpl.n	8007370 <__cvt+0x8c>
 800733a:	2d46      	cmp	r5, #70	; 0x46
 800733c:	eb00 0204 	add.w	r2, r0, r4
 8007340:	d10c      	bne.n	800735c <__cvt+0x78>
 8007342:	7803      	ldrb	r3, [r0, #0]
 8007344:	2b30      	cmp	r3, #48	; 0x30
 8007346:	d107      	bne.n	8007358 <__cvt+0x74>
 8007348:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800734c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007350:	bf1c      	itt	ne
 8007352:	f1c4 0401 	rsbne	r4, r4, #1
 8007356:	6034      	strne	r4, [r6, #0]
 8007358:	6833      	ldr	r3, [r6, #0]
 800735a:	441a      	add	r2, r3
 800735c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007364:	bf08      	it	eq
 8007366:	9203      	streq	r2, [sp, #12]
 8007368:	2130      	movs	r1, #48	; 0x30
 800736a:	9b03      	ldr	r3, [sp, #12]
 800736c:	4293      	cmp	r3, r2
 800736e:	d307      	bcc.n	8007380 <__cvt+0x9c>
 8007370:	9b03      	ldr	r3, [sp, #12]
 8007372:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007374:	1a1b      	subs	r3, r3, r0
 8007376:	6013      	str	r3, [r2, #0]
 8007378:	b005      	add	sp, #20
 800737a:	ecbd 8b02 	vpop	{d8}
 800737e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007380:	1c5c      	adds	r4, r3, #1
 8007382:	9403      	str	r4, [sp, #12]
 8007384:	7019      	strb	r1, [r3, #0]
 8007386:	e7f0      	b.n	800736a <__cvt+0x86>

08007388 <__exponent>:
 8007388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800738a:	4603      	mov	r3, r0
 800738c:	2900      	cmp	r1, #0
 800738e:	bfb8      	it	lt
 8007390:	4249      	neglt	r1, r1
 8007392:	f803 2b02 	strb.w	r2, [r3], #2
 8007396:	bfb4      	ite	lt
 8007398:	222d      	movlt	r2, #45	; 0x2d
 800739a:	222b      	movge	r2, #43	; 0x2b
 800739c:	2909      	cmp	r1, #9
 800739e:	7042      	strb	r2, [r0, #1]
 80073a0:	dd2a      	ble.n	80073f8 <__exponent+0x70>
 80073a2:	f10d 0407 	add.w	r4, sp, #7
 80073a6:	46a4      	mov	ip, r4
 80073a8:	270a      	movs	r7, #10
 80073aa:	46a6      	mov	lr, r4
 80073ac:	460a      	mov	r2, r1
 80073ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80073b2:	fb07 1516 	mls	r5, r7, r6, r1
 80073b6:	3530      	adds	r5, #48	; 0x30
 80073b8:	2a63      	cmp	r2, #99	; 0x63
 80073ba:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80073be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80073c2:	4631      	mov	r1, r6
 80073c4:	dcf1      	bgt.n	80073aa <__exponent+0x22>
 80073c6:	3130      	adds	r1, #48	; 0x30
 80073c8:	f1ae 0502 	sub.w	r5, lr, #2
 80073cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80073d0:	1c44      	adds	r4, r0, #1
 80073d2:	4629      	mov	r1, r5
 80073d4:	4561      	cmp	r1, ip
 80073d6:	d30a      	bcc.n	80073ee <__exponent+0x66>
 80073d8:	f10d 0209 	add.w	r2, sp, #9
 80073dc:	eba2 020e 	sub.w	r2, r2, lr
 80073e0:	4565      	cmp	r5, ip
 80073e2:	bf88      	it	hi
 80073e4:	2200      	movhi	r2, #0
 80073e6:	4413      	add	r3, r2
 80073e8:	1a18      	subs	r0, r3, r0
 80073ea:	b003      	add	sp, #12
 80073ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80073f6:	e7ed      	b.n	80073d4 <__exponent+0x4c>
 80073f8:	2330      	movs	r3, #48	; 0x30
 80073fa:	3130      	adds	r1, #48	; 0x30
 80073fc:	7083      	strb	r3, [r0, #2]
 80073fe:	70c1      	strb	r1, [r0, #3]
 8007400:	1d03      	adds	r3, r0, #4
 8007402:	e7f1      	b.n	80073e8 <__exponent+0x60>
 8007404:	0000      	movs	r0, r0
	...

08007408 <_printf_float>:
 8007408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800740c:	b08b      	sub	sp, #44	; 0x2c
 800740e:	460c      	mov	r4, r1
 8007410:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007414:	4616      	mov	r6, r2
 8007416:	461f      	mov	r7, r3
 8007418:	4605      	mov	r5, r0
 800741a:	f001 fcd3 	bl	8008dc4 <_localeconv_r>
 800741e:	f8d0 b000 	ldr.w	fp, [r0]
 8007422:	4658      	mov	r0, fp
 8007424:	f7f8 ff6e 	bl	8000304 <strlen>
 8007428:	2300      	movs	r3, #0
 800742a:	9308      	str	r3, [sp, #32]
 800742c:	f8d8 3000 	ldr.w	r3, [r8]
 8007430:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007434:	6822      	ldr	r2, [r4, #0]
 8007436:	3307      	adds	r3, #7
 8007438:	f023 0307 	bic.w	r3, r3, #7
 800743c:	f103 0108 	add.w	r1, r3, #8
 8007440:	f8c8 1000 	str.w	r1, [r8]
 8007444:	4682      	mov	sl, r0
 8007446:	e9d3 0100 	ldrd	r0, r1, [r3]
 800744a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800744e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80076b0 <_printf_float+0x2a8>
 8007452:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007456:	eeb0 6bc0 	vabs.f64	d6, d0
 800745a:	eeb4 6b47 	vcmp.f64	d6, d7
 800745e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007462:	dd24      	ble.n	80074ae <_printf_float+0xa6>
 8007464:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800746c:	d502      	bpl.n	8007474 <_printf_float+0x6c>
 800746e:	232d      	movs	r3, #45	; 0x2d
 8007470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007474:	4b90      	ldr	r3, [pc, #576]	; (80076b8 <_printf_float+0x2b0>)
 8007476:	4891      	ldr	r0, [pc, #580]	; (80076bc <_printf_float+0x2b4>)
 8007478:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800747c:	bf94      	ite	ls
 800747e:	4698      	movls	r8, r3
 8007480:	4680      	movhi	r8, r0
 8007482:	2303      	movs	r3, #3
 8007484:	6123      	str	r3, [r4, #16]
 8007486:	f022 0204 	bic.w	r2, r2, #4
 800748a:	2300      	movs	r3, #0
 800748c:	6022      	str	r2, [r4, #0]
 800748e:	9304      	str	r3, [sp, #16]
 8007490:	9700      	str	r7, [sp, #0]
 8007492:	4633      	mov	r3, r6
 8007494:	aa09      	add	r2, sp, #36	; 0x24
 8007496:	4621      	mov	r1, r4
 8007498:	4628      	mov	r0, r5
 800749a:	f000 f9d3 	bl	8007844 <_printf_common>
 800749e:	3001      	adds	r0, #1
 80074a0:	f040 808a 	bne.w	80075b8 <_printf_float+0x1b0>
 80074a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074a8:	b00b      	add	sp, #44	; 0x2c
 80074aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ae:	eeb4 0b40 	vcmp.f64	d0, d0
 80074b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b6:	d709      	bvc.n	80074cc <_printf_float+0xc4>
 80074b8:	ee10 3a90 	vmov	r3, s1
 80074bc:	2b00      	cmp	r3, #0
 80074be:	bfbc      	itt	lt
 80074c0:	232d      	movlt	r3, #45	; 0x2d
 80074c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80074c6:	487e      	ldr	r0, [pc, #504]	; (80076c0 <_printf_float+0x2b8>)
 80074c8:	4b7e      	ldr	r3, [pc, #504]	; (80076c4 <_printf_float+0x2bc>)
 80074ca:	e7d5      	b.n	8007478 <_printf_float+0x70>
 80074cc:	6863      	ldr	r3, [r4, #4]
 80074ce:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80074d2:	9104      	str	r1, [sp, #16]
 80074d4:	1c59      	adds	r1, r3, #1
 80074d6:	d13c      	bne.n	8007552 <_printf_float+0x14a>
 80074d8:	2306      	movs	r3, #6
 80074da:	6063      	str	r3, [r4, #4]
 80074dc:	2300      	movs	r3, #0
 80074de:	9303      	str	r3, [sp, #12]
 80074e0:	ab08      	add	r3, sp, #32
 80074e2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80074e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074ea:	ab07      	add	r3, sp, #28
 80074ec:	6861      	ldr	r1, [r4, #4]
 80074ee:	9300      	str	r3, [sp, #0]
 80074f0:	6022      	str	r2, [r4, #0]
 80074f2:	f10d 031b 	add.w	r3, sp, #27
 80074f6:	4628      	mov	r0, r5
 80074f8:	f7ff fef4 	bl	80072e4 <__cvt>
 80074fc:	9b04      	ldr	r3, [sp, #16]
 80074fe:	9907      	ldr	r1, [sp, #28]
 8007500:	2b47      	cmp	r3, #71	; 0x47
 8007502:	4680      	mov	r8, r0
 8007504:	d108      	bne.n	8007518 <_printf_float+0x110>
 8007506:	1cc8      	adds	r0, r1, #3
 8007508:	db02      	blt.n	8007510 <_printf_float+0x108>
 800750a:	6863      	ldr	r3, [r4, #4]
 800750c:	4299      	cmp	r1, r3
 800750e:	dd41      	ble.n	8007594 <_printf_float+0x18c>
 8007510:	f1a9 0902 	sub.w	r9, r9, #2
 8007514:	fa5f f989 	uxtb.w	r9, r9
 8007518:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800751c:	d820      	bhi.n	8007560 <_printf_float+0x158>
 800751e:	3901      	subs	r1, #1
 8007520:	464a      	mov	r2, r9
 8007522:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007526:	9107      	str	r1, [sp, #28]
 8007528:	f7ff ff2e 	bl	8007388 <__exponent>
 800752c:	9a08      	ldr	r2, [sp, #32]
 800752e:	9004      	str	r0, [sp, #16]
 8007530:	1813      	adds	r3, r2, r0
 8007532:	2a01      	cmp	r2, #1
 8007534:	6123      	str	r3, [r4, #16]
 8007536:	dc02      	bgt.n	800753e <_printf_float+0x136>
 8007538:	6822      	ldr	r2, [r4, #0]
 800753a:	07d2      	lsls	r2, r2, #31
 800753c:	d501      	bpl.n	8007542 <_printf_float+0x13a>
 800753e:	3301      	adds	r3, #1
 8007540:	6123      	str	r3, [r4, #16]
 8007542:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d0a2      	beq.n	8007490 <_printf_float+0x88>
 800754a:	232d      	movs	r3, #45	; 0x2d
 800754c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007550:	e79e      	b.n	8007490 <_printf_float+0x88>
 8007552:	9904      	ldr	r1, [sp, #16]
 8007554:	2947      	cmp	r1, #71	; 0x47
 8007556:	d1c1      	bne.n	80074dc <_printf_float+0xd4>
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1bf      	bne.n	80074dc <_printf_float+0xd4>
 800755c:	2301      	movs	r3, #1
 800755e:	e7bc      	b.n	80074da <_printf_float+0xd2>
 8007560:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007564:	d118      	bne.n	8007598 <_printf_float+0x190>
 8007566:	2900      	cmp	r1, #0
 8007568:	6863      	ldr	r3, [r4, #4]
 800756a:	dd0b      	ble.n	8007584 <_printf_float+0x17c>
 800756c:	6121      	str	r1, [r4, #16]
 800756e:	b913      	cbnz	r3, 8007576 <_printf_float+0x16e>
 8007570:	6822      	ldr	r2, [r4, #0]
 8007572:	07d0      	lsls	r0, r2, #31
 8007574:	d502      	bpl.n	800757c <_printf_float+0x174>
 8007576:	3301      	adds	r3, #1
 8007578:	440b      	add	r3, r1
 800757a:	6123      	str	r3, [r4, #16]
 800757c:	2300      	movs	r3, #0
 800757e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007580:	9304      	str	r3, [sp, #16]
 8007582:	e7de      	b.n	8007542 <_printf_float+0x13a>
 8007584:	b913      	cbnz	r3, 800758c <_printf_float+0x184>
 8007586:	6822      	ldr	r2, [r4, #0]
 8007588:	07d2      	lsls	r2, r2, #31
 800758a:	d501      	bpl.n	8007590 <_printf_float+0x188>
 800758c:	3302      	adds	r3, #2
 800758e:	e7f4      	b.n	800757a <_printf_float+0x172>
 8007590:	2301      	movs	r3, #1
 8007592:	e7f2      	b.n	800757a <_printf_float+0x172>
 8007594:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007598:	9b08      	ldr	r3, [sp, #32]
 800759a:	4299      	cmp	r1, r3
 800759c:	db05      	blt.n	80075aa <_printf_float+0x1a2>
 800759e:	6823      	ldr	r3, [r4, #0]
 80075a0:	6121      	str	r1, [r4, #16]
 80075a2:	07d8      	lsls	r0, r3, #31
 80075a4:	d5ea      	bpl.n	800757c <_printf_float+0x174>
 80075a6:	1c4b      	adds	r3, r1, #1
 80075a8:	e7e7      	b.n	800757a <_printf_float+0x172>
 80075aa:	2900      	cmp	r1, #0
 80075ac:	bfd4      	ite	le
 80075ae:	f1c1 0202 	rsble	r2, r1, #2
 80075b2:	2201      	movgt	r2, #1
 80075b4:	4413      	add	r3, r2
 80075b6:	e7e0      	b.n	800757a <_printf_float+0x172>
 80075b8:	6823      	ldr	r3, [r4, #0]
 80075ba:	055a      	lsls	r2, r3, #21
 80075bc:	d407      	bmi.n	80075ce <_printf_float+0x1c6>
 80075be:	6923      	ldr	r3, [r4, #16]
 80075c0:	4642      	mov	r2, r8
 80075c2:	4631      	mov	r1, r6
 80075c4:	4628      	mov	r0, r5
 80075c6:	47b8      	blx	r7
 80075c8:	3001      	adds	r0, #1
 80075ca:	d12a      	bne.n	8007622 <_printf_float+0x21a>
 80075cc:	e76a      	b.n	80074a4 <_printf_float+0x9c>
 80075ce:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80075d2:	f240 80e2 	bls.w	800779a <_printf_float+0x392>
 80075d6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80075da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80075de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e2:	d133      	bne.n	800764c <_printf_float+0x244>
 80075e4:	4a38      	ldr	r2, [pc, #224]	; (80076c8 <_printf_float+0x2c0>)
 80075e6:	2301      	movs	r3, #1
 80075e8:	4631      	mov	r1, r6
 80075ea:	4628      	mov	r0, r5
 80075ec:	47b8      	blx	r7
 80075ee:	3001      	adds	r0, #1
 80075f0:	f43f af58 	beq.w	80074a4 <_printf_float+0x9c>
 80075f4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	db02      	blt.n	8007602 <_printf_float+0x1fa>
 80075fc:	6823      	ldr	r3, [r4, #0]
 80075fe:	07d8      	lsls	r0, r3, #31
 8007600:	d50f      	bpl.n	8007622 <_printf_float+0x21a>
 8007602:	4653      	mov	r3, sl
 8007604:	465a      	mov	r2, fp
 8007606:	4631      	mov	r1, r6
 8007608:	4628      	mov	r0, r5
 800760a:	47b8      	blx	r7
 800760c:	3001      	adds	r0, #1
 800760e:	f43f af49 	beq.w	80074a4 <_printf_float+0x9c>
 8007612:	f04f 0800 	mov.w	r8, #0
 8007616:	f104 091a 	add.w	r9, r4, #26
 800761a:	9b08      	ldr	r3, [sp, #32]
 800761c:	3b01      	subs	r3, #1
 800761e:	4543      	cmp	r3, r8
 8007620:	dc09      	bgt.n	8007636 <_printf_float+0x22e>
 8007622:	6823      	ldr	r3, [r4, #0]
 8007624:	079b      	lsls	r3, r3, #30
 8007626:	f100 8108 	bmi.w	800783a <_printf_float+0x432>
 800762a:	68e0      	ldr	r0, [r4, #12]
 800762c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800762e:	4298      	cmp	r0, r3
 8007630:	bfb8      	it	lt
 8007632:	4618      	movlt	r0, r3
 8007634:	e738      	b.n	80074a8 <_printf_float+0xa0>
 8007636:	2301      	movs	r3, #1
 8007638:	464a      	mov	r2, r9
 800763a:	4631      	mov	r1, r6
 800763c:	4628      	mov	r0, r5
 800763e:	47b8      	blx	r7
 8007640:	3001      	adds	r0, #1
 8007642:	f43f af2f 	beq.w	80074a4 <_printf_float+0x9c>
 8007646:	f108 0801 	add.w	r8, r8, #1
 800764a:	e7e6      	b.n	800761a <_printf_float+0x212>
 800764c:	9b07      	ldr	r3, [sp, #28]
 800764e:	2b00      	cmp	r3, #0
 8007650:	dc3c      	bgt.n	80076cc <_printf_float+0x2c4>
 8007652:	4a1d      	ldr	r2, [pc, #116]	; (80076c8 <_printf_float+0x2c0>)
 8007654:	2301      	movs	r3, #1
 8007656:	4631      	mov	r1, r6
 8007658:	4628      	mov	r0, r5
 800765a:	47b8      	blx	r7
 800765c:	3001      	adds	r0, #1
 800765e:	f43f af21 	beq.w	80074a4 <_printf_float+0x9c>
 8007662:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007666:	4313      	orrs	r3, r2
 8007668:	d102      	bne.n	8007670 <_printf_float+0x268>
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	07d9      	lsls	r1, r3, #31
 800766e:	d5d8      	bpl.n	8007622 <_printf_float+0x21a>
 8007670:	4653      	mov	r3, sl
 8007672:	465a      	mov	r2, fp
 8007674:	4631      	mov	r1, r6
 8007676:	4628      	mov	r0, r5
 8007678:	47b8      	blx	r7
 800767a:	3001      	adds	r0, #1
 800767c:	f43f af12 	beq.w	80074a4 <_printf_float+0x9c>
 8007680:	f04f 0900 	mov.w	r9, #0
 8007684:	f104 0a1a 	add.w	sl, r4, #26
 8007688:	9b07      	ldr	r3, [sp, #28]
 800768a:	425b      	negs	r3, r3
 800768c:	454b      	cmp	r3, r9
 800768e:	dc01      	bgt.n	8007694 <_printf_float+0x28c>
 8007690:	9b08      	ldr	r3, [sp, #32]
 8007692:	e795      	b.n	80075c0 <_printf_float+0x1b8>
 8007694:	2301      	movs	r3, #1
 8007696:	4652      	mov	r2, sl
 8007698:	4631      	mov	r1, r6
 800769a:	4628      	mov	r0, r5
 800769c:	47b8      	blx	r7
 800769e:	3001      	adds	r0, #1
 80076a0:	f43f af00 	beq.w	80074a4 <_printf_float+0x9c>
 80076a4:	f109 0901 	add.w	r9, r9, #1
 80076a8:	e7ee      	b.n	8007688 <_printf_float+0x280>
 80076aa:	bf00      	nop
 80076ac:	f3af 8000 	nop.w
 80076b0:	ffffffff 	.word	0xffffffff
 80076b4:	7fefffff 	.word	0x7fefffff
 80076b8:	0800a4c8 	.word	0x0800a4c8
 80076bc:	0800a4cc 	.word	0x0800a4cc
 80076c0:	0800a4d4 	.word	0x0800a4d4
 80076c4:	0800a4d0 	.word	0x0800a4d0
 80076c8:	0800a4d8 	.word	0x0800a4d8
 80076cc:	9a08      	ldr	r2, [sp, #32]
 80076ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076d0:	429a      	cmp	r2, r3
 80076d2:	bfa8      	it	ge
 80076d4:	461a      	movge	r2, r3
 80076d6:	2a00      	cmp	r2, #0
 80076d8:	4691      	mov	r9, r2
 80076da:	dc38      	bgt.n	800774e <_printf_float+0x346>
 80076dc:	2300      	movs	r3, #0
 80076de:	9305      	str	r3, [sp, #20]
 80076e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076e4:	f104 021a 	add.w	r2, r4, #26
 80076e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076ea:	9905      	ldr	r1, [sp, #20]
 80076ec:	9304      	str	r3, [sp, #16]
 80076ee:	eba3 0309 	sub.w	r3, r3, r9
 80076f2:	428b      	cmp	r3, r1
 80076f4:	dc33      	bgt.n	800775e <_printf_float+0x356>
 80076f6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	db3c      	blt.n	8007778 <_printf_float+0x370>
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	07da      	lsls	r2, r3, #31
 8007702:	d439      	bmi.n	8007778 <_printf_float+0x370>
 8007704:	9b08      	ldr	r3, [sp, #32]
 8007706:	9a04      	ldr	r2, [sp, #16]
 8007708:	9907      	ldr	r1, [sp, #28]
 800770a:	1a9a      	subs	r2, r3, r2
 800770c:	eba3 0901 	sub.w	r9, r3, r1
 8007710:	4591      	cmp	r9, r2
 8007712:	bfa8      	it	ge
 8007714:	4691      	movge	r9, r2
 8007716:	f1b9 0f00 	cmp.w	r9, #0
 800771a:	dc35      	bgt.n	8007788 <_printf_float+0x380>
 800771c:	f04f 0800 	mov.w	r8, #0
 8007720:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007724:	f104 0a1a 	add.w	sl, r4, #26
 8007728:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800772c:	1a9b      	subs	r3, r3, r2
 800772e:	eba3 0309 	sub.w	r3, r3, r9
 8007732:	4543      	cmp	r3, r8
 8007734:	f77f af75 	ble.w	8007622 <_printf_float+0x21a>
 8007738:	2301      	movs	r3, #1
 800773a:	4652      	mov	r2, sl
 800773c:	4631      	mov	r1, r6
 800773e:	4628      	mov	r0, r5
 8007740:	47b8      	blx	r7
 8007742:	3001      	adds	r0, #1
 8007744:	f43f aeae 	beq.w	80074a4 <_printf_float+0x9c>
 8007748:	f108 0801 	add.w	r8, r8, #1
 800774c:	e7ec      	b.n	8007728 <_printf_float+0x320>
 800774e:	4613      	mov	r3, r2
 8007750:	4631      	mov	r1, r6
 8007752:	4642      	mov	r2, r8
 8007754:	4628      	mov	r0, r5
 8007756:	47b8      	blx	r7
 8007758:	3001      	adds	r0, #1
 800775a:	d1bf      	bne.n	80076dc <_printf_float+0x2d4>
 800775c:	e6a2      	b.n	80074a4 <_printf_float+0x9c>
 800775e:	2301      	movs	r3, #1
 8007760:	4631      	mov	r1, r6
 8007762:	4628      	mov	r0, r5
 8007764:	9204      	str	r2, [sp, #16]
 8007766:	47b8      	blx	r7
 8007768:	3001      	adds	r0, #1
 800776a:	f43f ae9b 	beq.w	80074a4 <_printf_float+0x9c>
 800776e:	9b05      	ldr	r3, [sp, #20]
 8007770:	9a04      	ldr	r2, [sp, #16]
 8007772:	3301      	adds	r3, #1
 8007774:	9305      	str	r3, [sp, #20]
 8007776:	e7b7      	b.n	80076e8 <_printf_float+0x2e0>
 8007778:	4653      	mov	r3, sl
 800777a:	465a      	mov	r2, fp
 800777c:	4631      	mov	r1, r6
 800777e:	4628      	mov	r0, r5
 8007780:	47b8      	blx	r7
 8007782:	3001      	adds	r0, #1
 8007784:	d1be      	bne.n	8007704 <_printf_float+0x2fc>
 8007786:	e68d      	b.n	80074a4 <_printf_float+0x9c>
 8007788:	9a04      	ldr	r2, [sp, #16]
 800778a:	464b      	mov	r3, r9
 800778c:	4442      	add	r2, r8
 800778e:	4631      	mov	r1, r6
 8007790:	4628      	mov	r0, r5
 8007792:	47b8      	blx	r7
 8007794:	3001      	adds	r0, #1
 8007796:	d1c1      	bne.n	800771c <_printf_float+0x314>
 8007798:	e684      	b.n	80074a4 <_printf_float+0x9c>
 800779a:	9a08      	ldr	r2, [sp, #32]
 800779c:	2a01      	cmp	r2, #1
 800779e:	dc01      	bgt.n	80077a4 <_printf_float+0x39c>
 80077a0:	07db      	lsls	r3, r3, #31
 80077a2:	d537      	bpl.n	8007814 <_printf_float+0x40c>
 80077a4:	2301      	movs	r3, #1
 80077a6:	4642      	mov	r2, r8
 80077a8:	4631      	mov	r1, r6
 80077aa:	4628      	mov	r0, r5
 80077ac:	47b8      	blx	r7
 80077ae:	3001      	adds	r0, #1
 80077b0:	f43f ae78 	beq.w	80074a4 <_printf_float+0x9c>
 80077b4:	4653      	mov	r3, sl
 80077b6:	465a      	mov	r2, fp
 80077b8:	4631      	mov	r1, r6
 80077ba:	4628      	mov	r0, r5
 80077bc:	47b8      	blx	r7
 80077be:	3001      	adds	r0, #1
 80077c0:	f43f ae70 	beq.w	80074a4 <_printf_float+0x9c>
 80077c4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80077c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80077cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077d0:	d01b      	beq.n	800780a <_printf_float+0x402>
 80077d2:	9b08      	ldr	r3, [sp, #32]
 80077d4:	f108 0201 	add.w	r2, r8, #1
 80077d8:	3b01      	subs	r3, #1
 80077da:	4631      	mov	r1, r6
 80077dc:	4628      	mov	r0, r5
 80077de:	47b8      	blx	r7
 80077e0:	3001      	adds	r0, #1
 80077e2:	d10e      	bne.n	8007802 <_printf_float+0x3fa>
 80077e4:	e65e      	b.n	80074a4 <_printf_float+0x9c>
 80077e6:	2301      	movs	r3, #1
 80077e8:	464a      	mov	r2, r9
 80077ea:	4631      	mov	r1, r6
 80077ec:	4628      	mov	r0, r5
 80077ee:	47b8      	blx	r7
 80077f0:	3001      	adds	r0, #1
 80077f2:	f43f ae57 	beq.w	80074a4 <_printf_float+0x9c>
 80077f6:	f108 0801 	add.w	r8, r8, #1
 80077fa:	9b08      	ldr	r3, [sp, #32]
 80077fc:	3b01      	subs	r3, #1
 80077fe:	4543      	cmp	r3, r8
 8007800:	dcf1      	bgt.n	80077e6 <_printf_float+0x3de>
 8007802:	9b04      	ldr	r3, [sp, #16]
 8007804:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007808:	e6db      	b.n	80075c2 <_printf_float+0x1ba>
 800780a:	f04f 0800 	mov.w	r8, #0
 800780e:	f104 091a 	add.w	r9, r4, #26
 8007812:	e7f2      	b.n	80077fa <_printf_float+0x3f2>
 8007814:	2301      	movs	r3, #1
 8007816:	4642      	mov	r2, r8
 8007818:	e7df      	b.n	80077da <_printf_float+0x3d2>
 800781a:	2301      	movs	r3, #1
 800781c:	464a      	mov	r2, r9
 800781e:	4631      	mov	r1, r6
 8007820:	4628      	mov	r0, r5
 8007822:	47b8      	blx	r7
 8007824:	3001      	adds	r0, #1
 8007826:	f43f ae3d 	beq.w	80074a4 <_printf_float+0x9c>
 800782a:	f108 0801 	add.w	r8, r8, #1
 800782e:	68e3      	ldr	r3, [r4, #12]
 8007830:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007832:	1a5b      	subs	r3, r3, r1
 8007834:	4543      	cmp	r3, r8
 8007836:	dcf0      	bgt.n	800781a <_printf_float+0x412>
 8007838:	e6f7      	b.n	800762a <_printf_float+0x222>
 800783a:	f04f 0800 	mov.w	r8, #0
 800783e:	f104 0919 	add.w	r9, r4, #25
 8007842:	e7f4      	b.n	800782e <_printf_float+0x426>

08007844 <_printf_common>:
 8007844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007848:	4616      	mov	r6, r2
 800784a:	4699      	mov	r9, r3
 800784c:	688a      	ldr	r2, [r1, #8]
 800784e:	690b      	ldr	r3, [r1, #16]
 8007850:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007854:	4293      	cmp	r3, r2
 8007856:	bfb8      	it	lt
 8007858:	4613      	movlt	r3, r2
 800785a:	6033      	str	r3, [r6, #0]
 800785c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007860:	4607      	mov	r7, r0
 8007862:	460c      	mov	r4, r1
 8007864:	b10a      	cbz	r2, 800786a <_printf_common+0x26>
 8007866:	3301      	adds	r3, #1
 8007868:	6033      	str	r3, [r6, #0]
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	0699      	lsls	r1, r3, #26
 800786e:	bf42      	ittt	mi
 8007870:	6833      	ldrmi	r3, [r6, #0]
 8007872:	3302      	addmi	r3, #2
 8007874:	6033      	strmi	r3, [r6, #0]
 8007876:	6825      	ldr	r5, [r4, #0]
 8007878:	f015 0506 	ands.w	r5, r5, #6
 800787c:	d106      	bne.n	800788c <_printf_common+0x48>
 800787e:	f104 0a19 	add.w	sl, r4, #25
 8007882:	68e3      	ldr	r3, [r4, #12]
 8007884:	6832      	ldr	r2, [r6, #0]
 8007886:	1a9b      	subs	r3, r3, r2
 8007888:	42ab      	cmp	r3, r5
 800788a:	dc26      	bgt.n	80078da <_printf_common+0x96>
 800788c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007890:	1e13      	subs	r3, r2, #0
 8007892:	6822      	ldr	r2, [r4, #0]
 8007894:	bf18      	it	ne
 8007896:	2301      	movne	r3, #1
 8007898:	0692      	lsls	r2, r2, #26
 800789a:	d42b      	bmi.n	80078f4 <_printf_common+0xb0>
 800789c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078a0:	4649      	mov	r1, r9
 80078a2:	4638      	mov	r0, r7
 80078a4:	47c0      	blx	r8
 80078a6:	3001      	adds	r0, #1
 80078a8:	d01e      	beq.n	80078e8 <_printf_common+0xa4>
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	68e5      	ldr	r5, [r4, #12]
 80078ae:	6832      	ldr	r2, [r6, #0]
 80078b0:	f003 0306 	and.w	r3, r3, #6
 80078b4:	2b04      	cmp	r3, #4
 80078b6:	bf08      	it	eq
 80078b8:	1aad      	subeq	r5, r5, r2
 80078ba:	68a3      	ldr	r3, [r4, #8]
 80078bc:	6922      	ldr	r2, [r4, #16]
 80078be:	bf0c      	ite	eq
 80078c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078c4:	2500      	movne	r5, #0
 80078c6:	4293      	cmp	r3, r2
 80078c8:	bfc4      	itt	gt
 80078ca:	1a9b      	subgt	r3, r3, r2
 80078cc:	18ed      	addgt	r5, r5, r3
 80078ce:	2600      	movs	r6, #0
 80078d0:	341a      	adds	r4, #26
 80078d2:	42b5      	cmp	r5, r6
 80078d4:	d11a      	bne.n	800790c <_printf_common+0xc8>
 80078d6:	2000      	movs	r0, #0
 80078d8:	e008      	b.n	80078ec <_printf_common+0xa8>
 80078da:	2301      	movs	r3, #1
 80078dc:	4652      	mov	r2, sl
 80078de:	4649      	mov	r1, r9
 80078e0:	4638      	mov	r0, r7
 80078e2:	47c0      	blx	r8
 80078e4:	3001      	adds	r0, #1
 80078e6:	d103      	bne.n	80078f0 <_printf_common+0xac>
 80078e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078f0:	3501      	adds	r5, #1
 80078f2:	e7c6      	b.n	8007882 <_printf_common+0x3e>
 80078f4:	18e1      	adds	r1, r4, r3
 80078f6:	1c5a      	adds	r2, r3, #1
 80078f8:	2030      	movs	r0, #48	; 0x30
 80078fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078fe:	4422      	add	r2, r4
 8007900:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007904:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007908:	3302      	adds	r3, #2
 800790a:	e7c7      	b.n	800789c <_printf_common+0x58>
 800790c:	2301      	movs	r3, #1
 800790e:	4622      	mov	r2, r4
 8007910:	4649      	mov	r1, r9
 8007912:	4638      	mov	r0, r7
 8007914:	47c0      	blx	r8
 8007916:	3001      	adds	r0, #1
 8007918:	d0e6      	beq.n	80078e8 <_printf_common+0xa4>
 800791a:	3601      	adds	r6, #1
 800791c:	e7d9      	b.n	80078d2 <_printf_common+0x8e>
	...

08007920 <_printf_i>:
 8007920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007924:	7e0f      	ldrb	r7, [r1, #24]
 8007926:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007928:	2f78      	cmp	r7, #120	; 0x78
 800792a:	4691      	mov	r9, r2
 800792c:	4680      	mov	r8, r0
 800792e:	460c      	mov	r4, r1
 8007930:	469a      	mov	sl, r3
 8007932:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007936:	d807      	bhi.n	8007948 <_printf_i+0x28>
 8007938:	2f62      	cmp	r7, #98	; 0x62
 800793a:	d80a      	bhi.n	8007952 <_printf_i+0x32>
 800793c:	2f00      	cmp	r7, #0
 800793e:	f000 80d8 	beq.w	8007af2 <_printf_i+0x1d2>
 8007942:	2f58      	cmp	r7, #88	; 0x58
 8007944:	f000 80a3 	beq.w	8007a8e <_printf_i+0x16e>
 8007948:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800794c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007950:	e03a      	b.n	80079c8 <_printf_i+0xa8>
 8007952:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007956:	2b15      	cmp	r3, #21
 8007958:	d8f6      	bhi.n	8007948 <_printf_i+0x28>
 800795a:	a101      	add	r1, pc, #4	; (adr r1, 8007960 <_printf_i+0x40>)
 800795c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007960:	080079b9 	.word	0x080079b9
 8007964:	080079cd 	.word	0x080079cd
 8007968:	08007949 	.word	0x08007949
 800796c:	08007949 	.word	0x08007949
 8007970:	08007949 	.word	0x08007949
 8007974:	08007949 	.word	0x08007949
 8007978:	080079cd 	.word	0x080079cd
 800797c:	08007949 	.word	0x08007949
 8007980:	08007949 	.word	0x08007949
 8007984:	08007949 	.word	0x08007949
 8007988:	08007949 	.word	0x08007949
 800798c:	08007ad9 	.word	0x08007ad9
 8007990:	080079fd 	.word	0x080079fd
 8007994:	08007abb 	.word	0x08007abb
 8007998:	08007949 	.word	0x08007949
 800799c:	08007949 	.word	0x08007949
 80079a0:	08007afb 	.word	0x08007afb
 80079a4:	08007949 	.word	0x08007949
 80079a8:	080079fd 	.word	0x080079fd
 80079ac:	08007949 	.word	0x08007949
 80079b0:	08007949 	.word	0x08007949
 80079b4:	08007ac3 	.word	0x08007ac3
 80079b8:	682b      	ldr	r3, [r5, #0]
 80079ba:	1d1a      	adds	r2, r3, #4
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	602a      	str	r2, [r5, #0]
 80079c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079c8:	2301      	movs	r3, #1
 80079ca:	e0a3      	b.n	8007b14 <_printf_i+0x1f4>
 80079cc:	6820      	ldr	r0, [r4, #0]
 80079ce:	6829      	ldr	r1, [r5, #0]
 80079d0:	0606      	lsls	r6, r0, #24
 80079d2:	f101 0304 	add.w	r3, r1, #4
 80079d6:	d50a      	bpl.n	80079ee <_printf_i+0xce>
 80079d8:	680e      	ldr	r6, [r1, #0]
 80079da:	602b      	str	r3, [r5, #0]
 80079dc:	2e00      	cmp	r6, #0
 80079de:	da03      	bge.n	80079e8 <_printf_i+0xc8>
 80079e0:	232d      	movs	r3, #45	; 0x2d
 80079e2:	4276      	negs	r6, r6
 80079e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079e8:	485e      	ldr	r0, [pc, #376]	; (8007b64 <_printf_i+0x244>)
 80079ea:	230a      	movs	r3, #10
 80079ec:	e019      	b.n	8007a22 <_printf_i+0x102>
 80079ee:	680e      	ldr	r6, [r1, #0]
 80079f0:	602b      	str	r3, [r5, #0]
 80079f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80079f6:	bf18      	it	ne
 80079f8:	b236      	sxthne	r6, r6
 80079fa:	e7ef      	b.n	80079dc <_printf_i+0xbc>
 80079fc:	682b      	ldr	r3, [r5, #0]
 80079fe:	6820      	ldr	r0, [r4, #0]
 8007a00:	1d19      	adds	r1, r3, #4
 8007a02:	6029      	str	r1, [r5, #0]
 8007a04:	0601      	lsls	r1, r0, #24
 8007a06:	d501      	bpl.n	8007a0c <_printf_i+0xec>
 8007a08:	681e      	ldr	r6, [r3, #0]
 8007a0a:	e002      	b.n	8007a12 <_printf_i+0xf2>
 8007a0c:	0646      	lsls	r6, r0, #25
 8007a0e:	d5fb      	bpl.n	8007a08 <_printf_i+0xe8>
 8007a10:	881e      	ldrh	r6, [r3, #0]
 8007a12:	4854      	ldr	r0, [pc, #336]	; (8007b64 <_printf_i+0x244>)
 8007a14:	2f6f      	cmp	r7, #111	; 0x6f
 8007a16:	bf0c      	ite	eq
 8007a18:	2308      	moveq	r3, #8
 8007a1a:	230a      	movne	r3, #10
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a22:	6865      	ldr	r5, [r4, #4]
 8007a24:	60a5      	str	r5, [r4, #8]
 8007a26:	2d00      	cmp	r5, #0
 8007a28:	bfa2      	ittt	ge
 8007a2a:	6821      	ldrge	r1, [r4, #0]
 8007a2c:	f021 0104 	bicge.w	r1, r1, #4
 8007a30:	6021      	strge	r1, [r4, #0]
 8007a32:	b90e      	cbnz	r6, 8007a38 <_printf_i+0x118>
 8007a34:	2d00      	cmp	r5, #0
 8007a36:	d04d      	beq.n	8007ad4 <_printf_i+0x1b4>
 8007a38:	4615      	mov	r5, r2
 8007a3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a3e:	fb03 6711 	mls	r7, r3, r1, r6
 8007a42:	5dc7      	ldrb	r7, [r0, r7]
 8007a44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a48:	4637      	mov	r7, r6
 8007a4a:	42bb      	cmp	r3, r7
 8007a4c:	460e      	mov	r6, r1
 8007a4e:	d9f4      	bls.n	8007a3a <_printf_i+0x11a>
 8007a50:	2b08      	cmp	r3, #8
 8007a52:	d10b      	bne.n	8007a6c <_printf_i+0x14c>
 8007a54:	6823      	ldr	r3, [r4, #0]
 8007a56:	07de      	lsls	r6, r3, #31
 8007a58:	d508      	bpl.n	8007a6c <_printf_i+0x14c>
 8007a5a:	6923      	ldr	r3, [r4, #16]
 8007a5c:	6861      	ldr	r1, [r4, #4]
 8007a5e:	4299      	cmp	r1, r3
 8007a60:	bfde      	ittt	le
 8007a62:	2330      	movle	r3, #48	; 0x30
 8007a64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a68:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007a6c:	1b52      	subs	r2, r2, r5
 8007a6e:	6122      	str	r2, [r4, #16]
 8007a70:	f8cd a000 	str.w	sl, [sp]
 8007a74:	464b      	mov	r3, r9
 8007a76:	aa03      	add	r2, sp, #12
 8007a78:	4621      	mov	r1, r4
 8007a7a:	4640      	mov	r0, r8
 8007a7c:	f7ff fee2 	bl	8007844 <_printf_common>
 8007a80:	3001      	adds	r0, #1
 8007a82:	d14c      	bne.n	8007b1e <_printf_i+0x1fe>
 8007a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a88:	b004      	add	sp, #16
 8007a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a8e:	4835      	ldr	r0, [pc, #212]	; (8007b64 <_printf_i+0x244>)
 8007a90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007a94:	6829      	ldr	r1, [r5, #0]
 8007a96:	6823      	ldr	r3, [r4, #0]
 8007a98:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a9c:	6029      	str	r1, [r5, #0]
 8007a9e:	061d      	lsls	r5, r3, #24
 8007aa0:	d514      	bpl.n	8007acc <_printf_i+0x1ac>
 8007aa2:	07df      	lsls	r7, r3, #31
 8007aa4:	bf44      	itt	mi
 8007aa6:	f043 0320 	orrmi.w	r3, r3, #32
 8007aaa:	6023      	strmi	r3, [r4, #0]
 8007aac:	b91e      	cbnz	r6, 8007ab6 <_printf_i+0x196>
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	f023 0320 	bic.w	r3, r3, #32
 8007ab4:	6023      	str	r3, [r4, #0]
 8007ab6:	2310      	movs	r3, #16
 8007ab8:	e7b0      	b.n	8007a1c <_printf_i+0xfc>
 8007aba:	6823      	ldr	r3, [r4, #0]
 8007abc:	f043 0320 	orr.w	r3, r3, #32
 8007ac0:	6023      	str	r3, [r4, #0]
 8007ac2:	2378      	movs	r3, #120	; 0x78
 8007ac4:	4828      	ldr	r0, [pc, #160]	; (8007b68 <_printf_i+0x248>)
 8007ac6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007aca:	e7e3      	b.n	8007a94 <_printf_i+0x174>
 8007acc:	0659      	lsls	r1, r3, #25
 8007ace:	bf48      	it	mi
 8007ad0:	b2b6      	uxthmi	r6, r6
 8007ad2:	e7e6      	b.n	8007aa2 <_printf_i+0x182>
 8007ad4:	4615      	mov	r5, r2
 8007ad6:	e7bb      	b.n	8007a50 <_printf_i+0x130>
 8007ad8:	682b      	ldr	r3, [r5, #0]
 8007ada:	6826      	ldr	r6, [r4, #0]
 8007adc:	6961      	ldr	r1, [r4, #20]
 8007ade:	1d18      	adds	r0, r3, #4
 8007ae0:	6028      	str	r0, [r5, #0]
 8007ae2:	0635      	lsls	r5, r6, #24
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	d501      	bpl.n	8007aec <_printf_i+0x1cc>
 8007ae8:	6019      	str	r1, [r3, #0]
 8007aea:	e002      	b.n	8007af2 <_printf_i+0x1d2>
 8007aec:	0670      	lsls	r0, r6, #25
 8007aee:	d5fb      	bpl.n	8007ae8 <_printf_i+0x1c8>
 8007af0:	8019      	strh	r1, [r3, #0]
 8007af2:	2300      	movs	r3, #0
 8007af4:	6123      	str	r3, [r4, #16]
 8007af6:	4615      	mov	r5, r2
 8007af8:	e7ba      	b.n	8007a70 <_printf_i+0x150>
 8007afa:	682b      	ldr	r3, [r5, #0]
 8007afc:	1d1a      	adds	r2, r3, #4
 8007afe:	602a      	str	r2, [r5, #0]
 8007b00:	681d      	ldr	r5, [r3, #0]
 8007b02:	6862      	ldr	r2, [r4, #4]
 8007b04:	2100      	movs	r1, #0
 8007b06:	4628      	mov	r0, r5
 8007b08:	f7f8 fc0a 	bl	8000320 <memchr>
 8007b0c:	b108      	cbz	r0, 8007b12 <_printf_i+0x1f2>
 8007b0e:	1b40      	subs	r0, r0, r5
 8007b10:	6060      	str	r0, [r4, #4]
 8007b12:	6863      	ldr	r3, [r4, #4]
 8007b14:	6123      	str	r3, [r4, #16]
 8007b16:	2300      	movs	r3, #0
 8007b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b1c:	e7a8      	b.n	8007a70 <_printf_i+0x150>
 8007b1e:	6923      	ldr	r3, [r4, #16]
 8007b20:	462a      	mov	r2, r5
 8007b22:	4649      	mov	r1, r9
 8007b24:	4640      	mov	r0, r8
 8007b26:	47d0      	blx	sl
 8007b28:	3001      	adds	r0, #1
 8007b2a:	d0ab      	beq.n	8007a84 <_printf_i+0x164>
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	079b      	lsls	r3, r3, #30
 8007b30:	d413      	bmi.n	8007b5a <_printf_i+0x23a>
 8007b32:	68e0      	ldr	r0, [r4, #12]
 8007b34:	9b03      	ldr	r3, [sp, #12]
 8007b36:	4298      	cmp	r0, r3
 8007b38:	bfb8      	it	lt
 8007b3a:	4618      	movlt	r0, r3
 8007b3c:	e7a4      	b.n	8007a88 <_printf_i+0x168>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	4632      	mov	r2, r6
 8007b42:	4649      	mov	r1, r9
 8007b44:	4640      	mov	r0, r8
 8007b46:	47d0      	blx	sl
 8007b48:	3001      	adds	r0, #1
 8007b4a:	d09b      	beq.n	8007a84 <_printf_i+0x164>
 8007b4c:	3501      	adds	r5, #1
 8007b4e:	68e3      	ldr	r3, [r4, #12]
 8007b50:	9903      	ldr	r1, [sp, #12]
 8007b52:	1a5b      	subs	r3, r3, r1
 8007b54:	42ab      	cmp	r3, r5
 8007b56:	dcf2      	bgt.n	8007b3e <_printf_i+0x21e>
 8007b58:	e7eb      	b.n	8007b32 <_printf_i+0x212>
 8007b5a:	2500      	movs	r5, #0
 8007b5c:	f104 0619 	add.w	r6, r4, #25
 8007b60:	e7f5      	b.n	8007b4e <_printf_i+0x22e>
 8007b62:	bf00      	nop
 8007b64:	0800a4da 	.word	0x0800a4da
 8007b68:	0800a4eb 	.word	0x0800a4eb

08007b6c <iprintf>:
 8007b6c:	b40f      	push	{r0, r1, r2, r3}
 8007b6e:	4b0a      	ldr	r3, [pc, #40]	; (8007b98 <iprintf+0x2c>)
 8007b70:	b513      	push	{r0, r1, r4, lr}
 8007b72:	681c      	ldr	r4, [r3, #0]
 8007b74:	b124      	cbz	r4, 8007b80 <iprintf+0x14>
 8007b76:	69a3      	ldr	r3, [r4, #24]
 8007b78:	b913      	cbnz	r3, 8007b80 <iprintf+0x14>
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f001 f884 	bl	8008c88 <__sinit>
 8007b80:	ab05      	add	r3, sp, #20
 8007b82:	9a04      	ldr	r2, [sp, #16]
 8007b84:	68a1      	ldr	r1, [r4, #8]
 8007b86:	9301      	str	r3, [sp, #4]
 8007b88:	4620      	mov	r0, r4
 8007b8a:	f001 ff8f 	bl	8009aac <_vfiprintf_r>
 8007b8e:	b002      	add	sp, #8
 8007b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b94:	b004      	add	sp, #16
 8007b96:	4770      	bx	lr
 8007b98:	2405079c 	.word	0x2405079c

08007b9c <_puts_r>:
 8007b9c:	b570      	push	{r4, r5, r6, lr}
 8007b9e:	460e      	mov	r6, r1
 8007ba0:	4605      	mov	r5, r0
 8007ba2:	b118      	cbz	r0, 8007bac <_puts_r+0x10>
 8007ba4:	6983      	ldr	r3, [r0, #24]
 8007ba6:	b90b      	cbnz	r3, 8007bac <_puts_r+0x10>
 8007ba8:	f001 f86e 	bl	8008c88 <__sinit>
 8007bac:	69ab      	ldr	r3, [r5, #24]
 8007bae:	68ac      	ldr	r4, [r5, #8]
 8007bb0:	b913      	cbnz	r3, 8007bb8 <_puts_r+0x1c>
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	f001 f868 	bl	8008c88 <__sinit>
 8007bb8:	4b2c      	ldr	r3, [pc, #176]	; (8007c6c <_puts_r+0xd0>)
 8007bba:	429c      	cmp	r4, r3
 8007bbc:	d120      	bne.n	8007c00 <_puts_r+0x64>
 8007bbe:	686c      	ldr	r4, [r5, #4]
 8007bc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bc2:	07db      	lsls	r3, r3, #31
 8007bc4:	d405      	bmi.n	8007bd2 <_puts_r+0x36>
 8007bc6:	89a3      	ldrh	r3, [r4, #12]
 8007bc8:	0598      	lsls	r0, r3, #22
 8007bca:	d402      	bmi.n	8007bd2 <_puts_r+0x36>
 8007bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bce:	f001 f8fe 	bl	8008dce <__retarget_lock_acquire_recursive>
 8007bd2:	89a3      	ldrh	r3, [r4, #12]
 8007bd4:	0719      	lsls	r1, r3, #28
 8007bd6:	d51d      	bpl.n	8007c14 <_puts_r+0x78>
 8007bd8:	6923      	ldr	r3, [r4, #16]
 8007bda:	b1db      	cbz	r3, 8007c14 <_puts_r+0x78>
 8007bdc:	3e01      	subs	r6, #1
 8007bde:	68a3      	ldr	r3, [r4, #8]
 8007be0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007be4:	3b01      	subs	r3, #1
 8007be6:	60a3      	str	r3, [r4, #8]
 8007be8:	bb39      	cbnz	r1, 8007c3a <_puts_r+0x9e>
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	da38      	bge.n	8007c60 <_puts_r+0xc4>
 8007bee:	4622      	mov	r2, r4
 8007bf0:	210a      	movs	r1, #10
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	f000 f872 	bl	8007cdc <__swbuf_r>
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	d011      	beq.n	8007c20 <_puts_r+0x84>
 8007bfc:	250a      	movs	r5, #10
 8007bfe:	e011      	b.n	8007c24 <_puts_r+0x88>
 8007c00:	4b1b      	ldr	r3, [pc, #108]	; (8007c70 <_puts_r+0xd4>)
 8007c02:	429c      	cmp	r4, r3
 8007c04:	d101      	bne.n	8007c0a <_puts_r+0x6e>
 8007c06:	68ac      	ldr	r4, [r5, #8]
 8007c08:	e7da      	b.n	8007bc0 <_puts_r+0x24>
 8007c0a:	4b1a      	ldr	r3, [pc, #104]	; (8007c74 <_puts_r+0xd8>)
 8007c0c:	429c      	cmp	r4, r3
 8007c0e:	bf08      	it	eq
 8007c10:	68ec      	ldreq	r4, [r5, #12]
 8007c12:	e7d5      	b.n	8007bc0 <_puts_r+0x24>
 8007c14:	4621      	mov	r1, r4
 8007c16:	4628      	mov	r0, r5
 8007c18:	f000 f8b2 	bl	8007d80 <__swsetup_r>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	d0dd      	beq.n	8007bdc <_puts_r+0x40>
 8007c20:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007c24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c26:	07da      	lsls	r2, r3, #31
 8007c28:	d405      	bmi.n	8007c36 <_puts_r+0x9a>
 8007c2a:	89a3      	ldrh	r3, [r4, #12]
 8007c2c:	059b      	lsls	r3, r3, #22
 8007c2e:	d402      	bmi.n	8007c36 <_puts_r+0x9a>
 8007c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c32:	f001 f8cd 	bl	8008dd0 <__retarget_lock_release_recursive>
 8007c36:	4628      	mov	r0, r5
 8007c38:	bd70      	pop	{r4, r5, r6, pc}
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	da04      	bge.n	8007c48 <_puts_r+0xac>
 8007c3e:	69a2      	ldr	r2, [r4, #24]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	dc06      	bgt.n	8007c52 <_puts_r+0xb6>
 8007c44:	290a      	cmp	r1, #10
 8007c46:	d004      	beq.n	8007c52 <_puts_r+0xb6>
 8007c48:	6823      	ldr	r3, [r4, #0]
 8007c4a:	1c5a      	adds	r2, r3, #1
 8007c4c:	6022      	str	r2, [r4, #0]
 8007c4e:	7019      	strb	r1, [r3, #0]
 8007c50:	e7c5      	b.n	8007bde <_puts_r+0x42>
 8007c52:	4622      	mov	r2, r4
 8007c54:	4628      	mov	r0, r5
 8007c56:	f000 f841 	bl	8007cdc <__swbuf_r>
 8007c5a:	3001      	adds	r0, #1
 8007c5c:	d1bf      	bne.n	8007bde <_puts_r+0x42>
 8007c5e:	e7df      	b.n	8007c20 <_puts_r+0x84>
 8007c60:	6823      	ldr	r3, [r4, #0]
 8007c62:	250a      	movs	r5, #10
 8007c64:	1c5a      	adds	r2, r3, #1
 8007c66:	6022      	str	r2, [r4, #0]
 8007c68:	701d      	strb	r5, [r3, #0]
 8007c6a:	e7db      	b.n	8007c24 <_puts_r+0x88>
 8007c6c:	0800a5ac 	.word	0x0800a5ac
 8007c70:	0800a5cc 	.word	0x0800a5cc
 8007c74:	0800a58c 	.word	0x0800a58c

08007c78 <puts>:
 8007c78:	4b02      	ldr	r3, [pc, #8]	; (8007c84 <puts+0xc>)
 8007c7a:	4601      	mov	r1, r0
 8007c7c:	6818      	ldr	r0, [r3, #0]
 8007c7e:	f7ff bf8d 	b.w	8007b9c <_puts_r>
 8007c82:	bf00      	nop
 8007c84:	2405079c 	.word	0x2405079c

08007c88 <siprintf>:
 8007c88:	b40e      	push	{r1, r2, r3}
 8007c8a:	b500      	push	{lr}
 8007c8c:	b09c      	sub	sp, #112	; 0x70
 8007c8e:	ab1d      	add	r3, sp, #116	; 0x74
 8007c90:	9002      	str	r0, [sp, #8]
 8007c92:	9006      	str	r0, [sp, #24]
 8007c94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c98:	4809      	ldr	r0, [pc, #36]	; (8007cc0 <siprintf+0x38>)
 8007c9a:	9107      	str	r1, [sp, #28]
 8007c9c:	9104      	str	r1, [sp, #16]
 8007c9e:	4909      	ldr	r1, [pc, #36]	; (8007cc4 <siprintf+0x3c>)
 8007ca0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ca4:	9105      	str	r1, [sp, #20]
 8007ca6:	6800      	ldr	r0, [r0, #0]
 8007ca8:	9301      	str	r3, [sp, #4]
 8007caa:	a902      	add	r1, sp, #8
 8007cac:	f001 fdd4 	bl	8009858 <_svfiprintf_r>
 8007cb0:	9b02      	ldr	r3, [sp, #8]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	701a      	strb	r2, [r3, #0]
 8007cb6:	b01c      	add	sp, #112	; 0x70
 8007cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cbc:	b003      	add	sp, #12
 8007cbe:	4770      	bx	lr
 8007cc0:	2405079c 	.word	0x2405079c
 8007cc4:	ffff0208 	.word	0xffff0208

08007cc8 <stpcpy>:
 8007cc8:	4603      	mov	r3, r0
 8007cca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f803 2b01 	strb.w	r2, [r3], #1
 8007cd4:	2a00      	cmp	r2, #0
 8007cd6:	d1f8      	bne.n	8007cca <stpcpy+0x2>
 8007cd8:	4770      	bx	lr
	...

08007cdc <__swbuf_r>:
 8007cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cde:	460e      	mov	r6, r1
 8007ce0:	4614      	mov	r4, r2
 8007ce2:	4605      	mov	r5, r0
 8007ce4:	b118      	cbz	r0, 8007cee <__swbuf_r+0x12>
 8007ce6:	6983      	ldr	r3, [r0, #24]
 8007ce8:	b90b      	cbnz	r3, 8007cee <__swbuf_r+0x12>
 8007cea:	f000 ffcd 	bl	8008c88 <__sinit>
 8007cee:	4b21      	ldr	r3, [pc, #132]	; (8007d74 <__swbuf_r+0x98>)
 8007cf0:	429c      	cmp	r4, r3
 8007cf2:	d12b      	bne.n	8007d4c <__swbuf_r+0x70>
 8007cf4:	686c      	ldr	r4, [r5, #4]
 8007cf6:	69a3      	ldr	r3, [r4, #24]
 8007cf8:	60a3      	str	r3, [r4, #8]
 8007cfa:	89a3      	ldrh	r3, [r4, #12]
 8007cfc:	071a      	lsls	r2, r3, #28
 8007cfe:	d52f      	bpl.n	8007d60 <__swbuf_r+0x84>
 8007d00:	6923      	ldr	r3, [r4, #16]
 8007d02:	b36b      	cbz	r3, 8007d60 <__swbuf_r+0x84>
 8007d04:	6923      	ldr	r3, [r4, #16]
 8007d06:	6820      	ldr	r0, [r4, #0]
 8007d08:	1ac0      	subs	r0, r0, r3
 8007d0a:	6963      	ldr	r3, [r4, #20]
 8007d0c:	b2f6      	uxtb	r6, r6
 8007d0e:	4283      	cmp	r3, r0
 8007d10:	4637      	mov	r7, r6
 8007d12:	dc04      	bgt.n	8007d1e <__swbuf_r+0x42>
 8007d14:	4621      	mov	r1, r4
 8007d16:	4628      	mov	r0, r5
 8007d18:	f000 ff22 	bl	8008b60 <_fflush_r>
 8007d1c:	bb30      	cbnz	r0, 8007d6c <__swbuf_r+0x90>
 8007d1e:	68a3      	ldr	r3, [r4, #8]
 8007d20:	3b01      	subs	r3, #1
 8007d22:	60a3      	str	r3, [r4, #8]
 8007d24:	6823      	ldr	r3, [r4, #0]
 8007d26:	1c5a      	adds	r2, r3, #1
 8007d28:	6022      	str	r2, [r4, #0]
 8007d2a:	701e      	strb	r6, [r3, #0]
 8007d2c:	6963      	ldr	r3, [r4, #20]
 8007d2e:	3001      	adds	r0, #1
 8007d30:	4283      	cmp	r3, r0
 8007d32:	d004      	beq.n	8007d3e <__swbuf_r+0x62>
 8007d34:	89a3      	ldrh	r3, [r4, #12]
 8007d36:	07db      	lsls	r3, r3, #31
 8007d38:	d506      	bpl.n	8007d48 <__swbuf_r+0x6c>
 8007d3a:	2e0a      	cmp	r6, #10
 8007d3c:	d104      	bne.n	8007d48 <__swbuf_r+0x6c>
 8007d3e:	4621      	mov	r1, r4
 8007d40:	4628      	mov	r0, r5
 8007d42:	f000 ff0d 	bl	8008b60 <_fflush_r>
 8007d46:	b988      	cbnz	r0, 8007d6c <__swbuf_r+0x90>
 8007d48:	4638      	mov	r0, r7
 8007d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d4c:	4b0a      	ldr	r3, [pc, #40]	; (8007d78 <__swbuf_r+0x9c>)
 8007d4e:	429c      	cmp	r4, r3
 8007d50:	d101      	bne.n	8007d56 <__swbuf_r+0x7a>
 8007d52:	68ac      	ldr	r4, [r5, #8]
 8007d54:	e7cf      	b.n	8007cf6 <__swbuf_r+0x1a>
 8007d56:	4b09      	ldr	r3, [pc, #36]	; (8007d7c <__swbuf_r+0xa0>)
 8007d58:	429c      	cmp	r4, r3
 8007d5a:	bf08      	it	eq
 8007d5c:	68ec      	ldreq	r4, [r5, #12]
 8007d5e:	e7ca      	b.n	8007cf6 <__swbuf_r+0x1a>
 8007d60:	4621      	mov	r1, r4
 8007d62:	4628      	mov	r0, r5
 8007d64:	f000 f80c 	bl	8007d80 <__swsetup_r>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	d0cb      	beq.n	8007d04 <__swbuf_r+0x28>
 8007d6c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007d70:	e7ea      	b.n	8007d48 <__swbuf_r+0x6c>
 8007d72:	bf00      	nop
 8007d74:	0800a5ac 	.word	0x0800a5ac
 8007d78:	0800a5cc 	.word	0x0800a5cc
 8007d7c:	0800a58c 	.word	0x0800a58c

08007d80 <__swsetup_r>:
 8007d80:	4b32      	ldr	r3, [pc, #200]	; (8007e4c <__swsetup_r+0xcc>)
 8007d82:	b570      	push	{r4, r5, r6, lr}
 8007d84:	681d      	ldr	r5, [r3, #0]
 8007d86:	4606      	mov	r6, r0
 8007d88:	460c      	mov	r4, r1
 8007d8a:	b125      	cbz	r5, 8007d96 <__swsetup_r+0x16>
 8007d8c:	69ab      	ldr	r3, [r5, #24]
 8007d8e:	b913      	cbnz	r3, 8007d96 <__swsetup_r+0x16>
 8007d90:	4628      	mov	r0, r5
 8007d92:	f000 ff79 	bl	8008c88 <__sinit>
 8007d96:	4b2e      	ldr	r3, [pc, #184]	; (8007e50 <__swsetup_r+0xd0>)
 8007d98:	429c      	cmp	r4, r3
 8007d9a:	d10f      	bne.n	8007dbc <__swsetup_r+0x3c>
 8007d9c:	686c      	ldr	r4, [r5, #4]
 8007d9e:	89a3      	ldrh	r3, [r4, #12]
 8007da0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007da4:	0719      	lsls	r1, r3, #28
 8007da6:	d42c      	bmi.n	8007e02 <__swsetup_r+0x82>
 8007da8:	06dd      	lsls	r5, r3, #27
 8007daa:	d411      	bmi.n	8007dd0 <__swsetup_r+0x50>
 8007dac:	2309      	movs	r3, #9
 8007dae:	6033      	str	r3, [r6, #0]
 8007db0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007db4:	81a3      	strh	r3, [r4, #12]
 8007db6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dba:	e03e      	b.n	8007e3a <__swsetup_r+0xba>
 8007dbc:	4b25      	ldr	r3, [pc, #148]	; (8007e54 <__swsetup_r+0xd4>)
 8007dbe:	429c      	cmp	r4, r3
 8007dc0:	d101      	bne.n	8007dc6 <__swsetup_r+0x46>
 8007dc2:	68ac      	ldr	r4, [r5, #8]
 8007dc4:	e7eb      	b.n	8007d9e <__swsetup_r+0x1e>
 8007dc6:	4b24      	ldr	r3, [pc, #144]	; (8007e58 <__swsetup_r+0xd8>)
 8007dc8:	429c      	cmp	r4, r3
 8007dca:	bf08      	it	eq
 8007dcc:	68ec      	ldreq	r4, [r5, #12]
 8007dce:	e7e6      	b.n	8007d9e <__swsetup_r+0x1e>
 8007dd0:	0758      	lsls	r0, r3, #29
 8007dd2:	d512      	bpl.n	8007dfa <__swsetup_r+0x7a>
 8007dd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dd6:	b141      	cbz	r1, 8007dea <__swsetup_r+0x6a>
 8007dd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ddc:	4299      	cmp	r1, r3
 8007dde:	d002      	beq.n	8007de6 <__swsetup_r+0x66>
 8007de0:	4630      	mov	r0, r6
 8007de2:	f001 fbfd 	bl	80095e0 <_free_r>
 8007de6:	2300      	movs	r3, #0
 8007de8:	6363      	str	r3, [r4, #52]	; 0x34
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007df0:	81a3      	strh	r3, [r4, #12]
 8007df2:	2300      	movs	r3, #0
 8007df4:	6063      	str	r3, [r4, #4]
 8007df6:	6923      	ldr	r3, [r4, #16]
 8007df8:	6023      	str	r3, [r4, #0]
 8007dfa:	89a3      	ldrh	r3, [r4, #12]
 8007dfc:	f043 0308 	orr.w	r3, r3, #8
 8007e00:	81a3      	strh	r3, [r4, #12]
 8007e02:	6923      	ldr	r3, [r4, #16]
 8007e04:	b94b      	cbnz	r3, 8007e1a <__swsetup_r+0x9a>
 8007e06:	89a3      	ldrh	r3, [r4, #12]
 8007e08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e10:	d003      	beq.n	8007e1a <__swsetup_r+0x9a>
 8007e12:	4621      	mov	r1, r4
 8007e14:	4630      	mov	r0, r6
 8007e16:	f001 f801 	bl	8008e1c <__smakebuf_r>
 8007e1a:	89a0      	ldrh	r0, [r4, #12]
 8007e1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e20:	f010 0301 	ands.w	r3, r0, #1
 8007e24:	d00a      	beq.n	8007e3c <__swsetup_r+0xbc>
 8007e26:	2300      	movs	r3, #0
 8007e28:	60a3      	str	r3, [r4, #8]
 8007e2a:	6963      	ldr	r3, [r4, #20]
 8007e2c:	425b      	negs	r3, r3
 8007e2e:	61a3      	str	r3, [r4, #24]
 8007e30:	6923      	ldr	r3, [r4, #16]
 8007e32:	b943      	cbnz	r3, 8007e46 <__swsetup_r+0xc6>
 8007e34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e38:	d1ba      	bne.n	8007db0 <__swsetup_r+0x30>
 8007e3a:	bd70      	pop	{r4, r5, r6, pc}
 8007e3c:	0781      	lsls	r1, r0, #30
 8007e3e:	bf58      	it	pl
 8007e40:	6963      	ldrpl	r3, [r4, #20]
 8007e42:	60a3      	str	r3, [r4, #8]
 8007e44:	e7f4      	b.n	8007e30 <__swsetup_r+0xb0>
 8007e46:	2000      	movs	r0, #0
 8007e48:	e7f7      	b.n	8007e3a <__swsetup_r+0xba>
 8007e4a:	bf00      	nop
 8007e4c:	2405079c 	.word	0x2405079c
 8007e50:	0800a5ac 	.word	0x0800a5ac
 8007e54:	0800a5cc 	.word	0x0800a5cc
 8007e58:	0800a58c 	.word	0x0800a58c

08007e5c <quorem>:
 8007e5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e60:	6903      	ldr	r3, [r0, #16]
 8007e62:	690c      	ldr	r4, [r1, #16]
 8007e64:	42a3      	cmp	r3, r4
 8007e66:	4607      	mov	r7, r0
 8007e68:	f2c0 8081 	blt.w	8007f6e <quorem+0x112>
 8007e6c:	3c01      	subs	r4, #1
 8007e6e:	f101 0814 	add.w	r8, r1, #20
 8007e72:	f100 0514 	add.w	r5, r0, #20
 8007e76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e7a:	9301      	str	r3, [sp, #4]
 8007e7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e84:	3301      	adds	r3, #1
 8007e86:	429a      	cmp	r2, r3
 8007e88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e90:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e94:	d331      	bcc.n	8007efa <quorem+0x9e>
 8007e96:	f04f 0e00 	mov.w	lr, #0
 8007e9a:	4640      	mov	r0, r8
 8007e9c:	46ac      	mov	ip, r5
 8007e9e:	46f2      	mov	sl, lr
 8007ea0:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ea4:	b293      	uxth	r3, r2
 8007ea6:	fb06 e303 	mla	r3, r6, r3, lr
 8007eaa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	ebaa 0303 	sub.w	r3, sl, r3
 8007eb4:	f8dc a000 	ldr.w	sl, [ip]
 8007eb8:	0c12      	lsrs	r2, r2, #16
 8007eba:	fa13 f38a 	uxtah	r3, r3, sl
 8007ebe:	fb06 e202 	mla	r2, r6, r2, lr
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	9b00      	ldr	r3, [sp, #0]
 8007ec6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007eca:	b292      	uxth	r2, r2
 8007ecc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007ed0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ed4:	f8bd 3000 	ldrh.w	r3, [sp]
 8007ed8:	4581      	cmp	r9, r0
 8007eda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ede:	f84c 3b04 	str.w	r3, [ip], #4
 8007ee2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ee6:	d2db      	bcs.n	8007ea0 <quorem+0x44>
 8007ee8:	f855 300b 	ldr.w	r3, [r5, fp]
 8007eec:	b92b      	cbnz	r3, 8007efa <quorem+0x9e>
 8007eee:	9b01      	ldr	r3, [sp, #4]
 8007ef0:	3b04      	subs	r3, #4
 8007ef2:	429d      	cmp	r5, r3
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	d32e      	bcc.n	8007f56 <quorem+0xfa>
 8007ef8:	613c      	str	r4, [r7, #16]
 8007efa:	4638      	mov	r0, r7
 8007efc:	f001 fa58 	bl	80093b0 <__mcmp>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	db24      	blt.n	8007f4e <quorem+0xf2>
 8007f04:	3601      	adds	r6, #1
 8007f06:	4628      	mov	r0, r5
 8007f08:	f04f 0c00 	mov.w	ip, #0
 8007f0c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f10:	f8d0 e000 	ldr.w	lr, [r0]
 8007f14:	b293      	uxth	r3, r2
 8007f16:	ebac 0303 	sub.w	r3, ip, r3
 8007f1a:	0c12      	lsrs	r2, r2, #16
 8007f1c:	fa13 f38e 	uxtah	r3, r3, lr
 8007f20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f2e:	45c1      	cmp	r9, r8
 8007f30:	f840 3b04 	str.w	r3, [r0], #4
 8007f34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f38:	d2e8      	bcs.n	8007f0c <quorem+0xb0>
 8007f3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f42:	b922      	cbnz	r2, 8007f4e <quorem+0xf2>
 8007f44:	3b04      	subs	r3, #4
 8007f46:	429d      	cmp	r5, r3
 8007f48:	461a      	mov	r2, r3
 8007f4a:	d30a      	bcc.n	8007f62 <quorem+0x106>
 8007f4c:	613c      	str	r4, [r7, #16]
 8007f4e:	4630      	mov	r0, r6
 8007f50:	b003      	add	sp, #12
 8007f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f56:	6812      	ldr	r2, [r2, #0]
 8007f58:	3b04      	subs	r3, #4
 8007f5a:	2a00      	cmp	r2, #0
 8007f5c:	d1cc      	bne.n	8007ef8 <quorem+0x9c>
 8007f5e:	3c01      	subs	r4, #1
 8007f60:	e7c7      	b.n	8007ef2 <quorem+0x96>
 8007f62:	6812      	ldr	r2, [r2, #0]
 8007f64:	3b04      	subs	r3, #4
 8007f66:	2a00      	cmp	r2, #0
 8007f68:	d1f0      	bne.n	8007f4c <quorem+0xf0>
 8007f6a:	3c01      	subs	r4, #1
 8007f6c:	e7eb      	b.n	8007f46 <quorem+0xea>
 8007f6e:	2000      	movs	r0, #0
 8007f70:	e7ee      	b.n	8007f50 <quorem+0xf4>
 8007f72:	0000      	movs	r0, r0
 8007f74:	0000      	movs	r0, r0
	...

08007f78 <_dtoa_r>:
 8007f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7c:	ed2d 8b02 	vpush	{d8}
 8007f80:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f82:	b091      	sub	sp, #68	; 0x44
 8007f84:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007f88:	ec59 8b10 	vmov	r8, r9, d0
 8007f8c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007f8e:	9106      	str	r1, [sp, #24]
 8007f90:	4606      	mov	r6, r0
 8007f92:	9208      	str	r2, [sp, #32]
 8007f94:	930c      	str	r3, [sp, #48]	; 0x30
 8007f96:	b975      	cbnz	r5, 8007fb6 <_dtoa_r+0x3e>
 8007f98:	2010      	movs	r0, #16
 8007f9a:	f000 ff7f 	bl	8008e9c <malloc>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	6270      	str	r0, [r6, #36]	; 0x24
 8007fa2:	b920      	cbnz	r0, 8007fae <_dtoa_r+0x36>
 8007fa4:	4baa      	ldr	r3, [pc, #680]	; (8008250 <_dtoa_r+0x2d8>)
 8007fa6:	21ea      	movs	r1, #234	; 0xea
 8007fa8:	48aa      	ldr	r0, [pc, #680]	; (8008254 <_dtoa_r+0x2dc>)
 8007faa:	f001 ff15 	bl	8009dd8 <__assert_func>
 8007fae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007fb2:	6005      	str	r5, [r0, #0]
 8007fb4:	60c5      	str	r5, [r0, #12]
 8007fb6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007fb8:	6819      	ldr	r1, [r3, #0]
 8007fba:	b151      	cbz	r1, 8007fd2 <_dtoa_r+0x5a>
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	604a      	str	r2, [r1, #4]
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	4093      	lsls	r3, r2
 8007fc4:	608b      	str	r3, [r1, #8]
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	f000 ffb0 	bl	8008f2c <_Bfree>
 8007fcc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007fce:	2200      	movs	r2, #0
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	f1b9 0300 	subs.w	r3, r9, #0
 8007fd6:	bfbb      	ittet	lt
 8007fd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007fdc:	9303      	strlt	r3, [sp, #12]
 8007fde:	2300      	movge	r3, #0
 8007fe0:	2201      	movlt	r2, #1
 8007fe2:	bfac      	ite	ge
 8007fe4:	6023      	strge	r3, [r4, #0]
 8007fe6:	6022      	strlt	r2, [r4, #0]
 8007fe8:	4b9b      	ldr	r3, [pc, #620]	; (8008258 <_dtoa_r+0x2e0>)
 8007fea:	9c03      	ldr	r4, [sp, #12]
 8007fec:	43a3      	bics	r3, r4
 8007fee:	d11c      	bne.n	800802a <_dtoa_r+0xb2>
 8007ff0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ff2:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ff6:	6013      	str	r3, [r2, #0]
 8007ff8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007ffc:	ea53 0308 	orrs.w	r3, r3, r8
 8008000:	f000 84fd 	beq.w	80089fe <_dtoa_r+0xa86>
 8008004:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008006:	b963      	cbnz	r3, 8008022 <_dtoa_r+0xaa>
 8008008:	4b94      	ldr	r3, [pc, #592]	; (800825c <_dtoa_r+0x2e4>)
 800800a:	e01f      	b.n	800804c <_dtoa_r+0xd4>
 800800c:	4b94      	ldr	r3, [pc, #592]	; (8008260 <_dtoa_r+0x2e8>)
 800800e:	9301      	str	r3, [sp, #4]
 8008010:	3308      	adds	r3, #8
 8008012:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008014:	6013      	str	r3, [r2, #0]
 8008016:	9801      	ldr	r0, [sp, #4]
 8008018:	b011      	add	sp, #68	; 0x44
 800801a:	ecbd 8b02 	vpop	{d8}
 800801e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008022:	4b8e      	ldr	r3, [pc, #568]	; (800825c <_dtoa_r+0x2e4>)
 8008024:	9301      	str	r3, [sp, #4]
 8008026:	3303      	adds	r3, #3
 8008028:	e7f3      	b.n	8008012 <_dtoa_r+0x9a>
 800802a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800802e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008036:	d10b      	bne.n	8008050 <_dtoa_r+0xd8>
 8008038:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800803a:	2301      	movs	r3, #1
 800803c:	6013      	str	r3, [r2, #0]
 800803e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 84d9 	beq.w	80089f8 <_dtoa_r+0xa80>
 8008046:	4887      	ldr	r0, [pc, #540]	; (8008264 <_dtoa_r+0x2ec>)
 8008048:	6018      	str	r0, [r3, #0]
 800804a:	1e43      	subs	r3, r0, #1
 800804c:	9301      	str	r3, [sp, #4]
 800804e:	e7e2      	b.n	8008016 <_dtoa_r+0x9e>
 8008050:	a90f      	add	r1, sp, #60	; 0x3c
 8008052:	aa0e      	add	r2, sp, #56	; 0x38
 8008054:	4630      	mov	r0, r6
 8008056:	eeb0 0b48 	vmov.f64	d0, d8
 800805a:	f001 fa4f 	bl	80094fc <__d2b>
 800805e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8008062:	4605      	mov	r5, r0
 8008064:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008066:	2900      	cmp	r1, #0
 8008068:	d046      	beq.n	80080f8 <_dtoa_r+0x180>
 800806a:	ee18 4a90 	vmov	r4, s17
 800806e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008072:	ec53 2b18 	vmov	r2, r3, d8
 8008076:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800807a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800807e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008082:	2400      	movs	r4, #0
 8008084:	ec43 2b16 	vmov	d6, r2, r3
 8008088:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800808c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008238 <_dtoa_r+0x2c0>
 8008090:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008094:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8008240 <_dtoa_r+0x2c8>
 8008098:	eea7 6b05 	vfma.f64	d6, d7, d5
 800809c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008248 <_dtoa_r+0x2d0>
 80080a0:	ee07 1a90 	vmov	s15, r1
 80080a4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80080a8:	eeb0 7b46 	vmov.f64	d7, d6
 80080ac:	eea4 7b05 	vfma.f64	d7, d4, d5
 80080b0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80080b4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80080b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080bc:	ee16 ba90 	vmov	fp, s13
 80080c0:	940a      	str	r4, [sp, #40]	; 0x28
 80080c2:	d508      	bpl.n	80080d6 <_dtoa_r+0x15e>
 80080c4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80080c8:	eeb4 6b47 	vcmp.f64	d6, d7
 80080cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080d0:	bf18      	it	ne
 80080d2:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 80080d6:	f1bb 0f16 	cmp.w	fp, #22
 80080da:	d82f      	bhi.n	800813c <_dtoa_r+0x1c4>
 80080dc:	4b62      	ldr	r3, [pc, #392]	; (8008268 <_dtoa_r+0x2f0>)
 80080de:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80080e2:	ed93 7b00 	vldr	d7, [r3]
 80080e6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80080ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ee:	d501      	bpl.n	80080f4 <_dtoa_r+0x17c>
 80080f0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80080f4:	2300      	movs	r3, #0
 80080f6:	e022      	b.n	800813e <_dtoa_r+0x1c6>
 80080f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80080fa:	4401      	add	r1, r0
 80080fc:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8008100:	2b20      	cmp	r3, #32
 8008102:	bfc1      	itttt	gt
 8008104:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008108:	fa04 f303 	lslgt.w	r3, r4, r3
 800810c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8008110:	fa28 f804 	lsrgt.w	r8, r8, r4
 8008114:	bfd6      	itet	le
 8008116:	f1c3 0320 	rsble	r3, r3, #32
 800811a:	ea43 0808 	orrgt.w	r8, r3, r8
 800811e:	fa08 f803 	lslle.w	r8, r8, r3
 8008122:	ee07 8a90 	vmov	s15, r8
 8008126:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800812a:	3901      	subs	r1, #1
 800812c:	ee17 4a90 	vmov	r4, s15
 8008130:	ec53 2b17 	vmov	r2, r3, d7
 8008134:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008138:	2401      	movs	r4, #1
 800813a:	e7a3      	b.n	8008084 <_dtoa_r+0x10c>
 800813c:	2301      	movs	r3, #1
 800813e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008140:	1a43      	subs	r3, r0, r1
 8008142:	1e5a      	subs	r2, r3, #1
 8008144:	bf45      	ittet	mi
 8008146:	f1c3 0301 	rsbmi	r3, r3, #1
 800814a:	9304      	strmi	r3, [sp, #16]
 800814c:	2300      	movpl	r3, #0
 800814e:	2300      	movmi	r3, #0
 8008150:	9205      	str	r2, [sp, #20]
 8008152:	bf54      	ite	pl
 8008154:	9304      	strpl	r3, [sp, #16]
 8008156:	9305      	strmi	r3, [sp, #20]
 8008158:	f1bb 0f00 	cmp.w	fp, #0
 800815c:	db18      	blt.n	8008190 <_dtoa_r+0x218>
 800815e:	9b05      	ldr	r3, [sp, #20]
 8008160:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8008164:	445b      	add	r3, fp
 8008166:	9305      	str	r3, [sp, #20]
 8008168:	2300      	movs	r3, #0
 800816a:	9a06      	ldr	r2, [sp, #24]
 800816c:	2a09      	cmp	r2, #9
 800816e:	d849      	bhi.n	8008204 <_dtoa_r+0x28c>
 8008170:	2a05      	cmp	r2, #5
 8008172:	bfc4      	itt	gt
 8008174:	3a04      	subgt	r2, #4
 8008176:	9206      	strgt	r2, [sp, #24]
 8008178:	9a06      	ldr	r2, [sp, #24]
 800817a:	f1a2 0202 	sub.w	r2, r2, #2
 800817e:	bfcc      	ite	gt
 8008180:	2400      	movgt	r4, #0
 8008182:	2401      	movle	r4, #1
 8008184:	2a03      	cmp	r2, #3
 8008186:	d848      	bhi.n	800821a <_dtoa_r+0x2a2>
 8008188:	e8df f002 	tbb	[pc, r2]
 800818c:	3a2c2e0b 	.word	0x3a2c2e0b
 8008190:	9b04      	ldr	r3, [sp, #16]
 8008192:	2200      	movs	r2, #0
 8008194:	eba3 030b 	sub.w	r3, r3, fp
 8008198:	9304      	str	r3, [sp, #16]
 800819a:	9209      	str	r2, [sp, #36]	; 0x24
 800819c:	f1cb 0300 	rsb	r3, fp, #0
 80081a0:	e7e3      	b.n	800816a <_dtoa_r+0x1f2>
 80081a2:	2200      	movs	r2, #0
 80081a4:	9207      	str	r2, [sp, #28]
 80081a6:	9a08      	ldr	r2, [sp, #32]
 80081a8:	2a00      	cmp	r2, #0
 80081aa:	dc39      	bgt.n	8008220 <_dtoa_r+0x2a8>
 80081ac:	f04f 0a01 	mov.w	sl, #1
 80081b0:	46d1      	mov	r9, sl
 80081b2:	4652      	mov	r2, sl
 80081b4:	f8cd a020 	str.w	sl, [sp, #32]
 80081b8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80081ba:	2100      	movs	r1, #0
 80081bc:	6079      	str	r1, [r7, #4]
 80081be:	2004      	movs	r0, #4
 80081c0:	f100 0c14 	add.w	ip, r0, #20
 80081c4:	4594      	cmp	ip, r2
 80081c6:	6879      	ldr	r1, [r7, #4]
 80081c8:	d92f      	bls.n	800822a <_dtoa_r+0x2b2>
 80081ca:	4630      	mov	r0, r6
 80081cc:	930d      	str	r3, [sp, #52]	; 0x34
 80081ce:	f000 fe6d 	bl	8008eac <_Balloc>
 80081d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081d4:	9001      	str	r0, [sp, #4]
 80081d6:	4602      	mov	r2, r0
 80081d8:	2800      	cmp	r0, #0
 80081da:	d149      	bne.n	8008270 <_dtoa_r+0x2f8>
 80081dc:	4b23      	ldr	r3, [pc, #140]	; (800826c <_dtoa_r+0x2f4>)
 80081de:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80081e2:	e6e1      	b.n	8007fa8 <_dtoa_r+0x30>
 80081e4:	2201      	movs	r2, #1
 80081e6:	e7dd      	b.n	80081a4 <_dtoa_r+0x22c>
 80081e8:	2200      	movs	r2, #0
 80081ea:	9207      	str	r2, [sp, #28]
 80081ec:	9a08      	ldr	r2, [sp, #32]
 80081ee:	eb0b 0a02 	add.w	sl, fp, r2
 80081f2:	f10a 0901 	add.w	r9, sl, #1
 80081f6:	464a      	mov	r2, r9
 80081f8:	2a01      	cmp	r2, #1
 80081fa:	bfb8      	it	lt
 80081fc:	2201      	movlt	r2, #1
 80081fe:	e7db      	b.n	80081b8 <_dtoa_r+0x240>
 8008200:	2201      	movs	r2, #1
 8008202:	e7f2      	b.n	80081ea <_dtoa_r+0x272>
 8008204:	2401      	movs	r4, #1
 8008206:	2200      	movs	r2, #0
 8008208:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800820c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008210:	2100      	movs	r1, #0
 8008212:	46d1      	mov	r9, sl
 8008214:	2212      	movs	r2, #18
 8008216:	9108      	str	r1, [sp, #32]
 8008218:	e7ce      	b.n	80081b8 <_dtoa_r+0x240>
 800821a:	2201      	movs	r2, #1
 800821c:	9207      	str	r2, [sp, #28]
 800821e:	e7f5      	b.n	800820c <_dtoa_r+0x294>
 8008220:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008224:	46d1      	mov	r9, sl
 8008226:	4652      	mov	r2, sl
 8008228:	e7c6      	b.n	80081b8 <_dtoa_r+0x240>
 800822a:	3101      	adds	r1, #1
 800822c:	6079      	str	r1, [r7, #4]
 800822e:	0040      	lsls	r0, r0, #1
 8008230:	e7c6      	b.n	80081c0 <_dtoa_r+0x248>
 8008232:	bf00      	nop
 8008234:	f3af 8000 	nop.w
 8008238:	636f4361 	.word	0x636f4361
 800823c:	3fd287a7 	.word	0x3fd287a7
 8008240:	8b60c8b3 	.word	0x8b60c8b3
 8008244:	3fc68a28 	.word	0x3fc68a28
 8008248:	509f79fb 	.word	0x509f79fb
 800824c:	3fd34413 	.word	0x3fd34413
 8008250:	0800a509 	.word	0x0800a509
 8008254:	0800a520 	.word	0x0800a520
 8008258:	7ff00000 	.word	0x7ff00000
 800825c:	0800a505 	.word	0x0800a505
 8008260:	0800a4fc 	.word	0x0800a4fc
 8008264:	0800a4d9 	.word	0x0800a4d9
 8008268:	0800a670 	.word	0x0800a670
 800826c:	0800a57b 	.word	0x0800a57b
 8008270:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008272:	9901      	ldr	r1, [sp, #4]
 8008274:	6011      	str	r1, [r2, #0]
 8008276:	f1b9 0f0e 	cmp.w	r9, #14
 800827a:	d86c      	bhi.n	8008356 <_dtoa_r+0x3de>
 800827c:	2c00      	cmp	r4, #0
 800827e:	d06a      	beq.n	8008356 <_dtoa_r+0x3de>
 8008280:	f1bb 0f00 	cmp.w	fp, #0
 8008284:	f340 80a0 	ble.w	80083c8 <_dtoa_r+0x450>
 8008288:	49c1      	ldr	r1, [pc, #772]	; (8008590 <_dtoa_r+0x618>)
 800828a:	f00b 020f 	and.w	r2, fp, #15
 800828e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008292:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008296:	ed92 7b00 	vldr	d7, [r2]
 800829a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800829e:	f000 8087 	beq.w	80083b0 <_dtoa_r+0x438>
 80082a2:	4abc      	ldr	r2, [pc, #752]	; (8008594 <_dtoa_r+0x61c>)
 80082a4:	ed92 6b08 	vldr	d6, [r2, #32]
 80082a8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80082ac:	ed8d 6b02 	vstr	d6, [sp, #8]
 80082b0:	f001 010f 	and.w	r1, r1, #15
 80082b4:	2203      	movs	r2, #3
 80082b6:	48b7      	ldr	r0, [pc, #732]	; (8008594 <_dtoa_r+0x61c>)
 80082b8:	2900      	cmp	r1, #0
 80082ba:	d17b      	bne.n	80083b4 <_dtoa_r+0x43c>
 80082bc:	ed9d 6b02 	vldr	d6, [sp, #8]
 80082c0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80082c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80082c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082ca:	2900      	cmp	r1, #0
 80082cc:	f000 80a2 	beq.w	8008414 <_dtoa_r+0x49c>
 80082d0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80082d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80082d8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80082dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082e0:	f140 8098 	bpl.w	8008414 <_dtoa_r+0x49c>
 80082e4:	f1b9 0f00 	cmp.w	r9, #0
 80082e8:	f000 8094 	beq.w	8008414 <_dtoa_r+0x49c>
 80082ec:	f1ba 0f00 	cmp.w	sl, #0
 80082f0:	dd2f      	ble.n	8008352 <_dtoa_r+0x3da>
 80082f2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80082f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80082fa:	ed8d 7b02 	vstr	d7, [sp, #8]
 80082fe:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8008302:	3201      	adds	r2, #1
 8008304:	4650      	mov	r0, sl
 8008306:	ed9d 6b02 	vldr	d6, [sp, #8]
 800830a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800830e:	ee07 2a90 	vmov	s15, r2
 8008312:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008316:	eea7 5b06 	vfma.f64	d5, d7, d6
 800831a:	ee15 4a90 	vmov	r4, s11
 800831e:	ec52 1b15 	vmov	r1, r2, d5
 8008322:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8008326:	2800      	cmp	r0, #0
 8008328:	d177      	bne.n	800841a <_dtoa_r+0x4a2>
 800832a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800832e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008332:	ec42 1b17 	vmov	d7, r1, r2
 8008336:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800833a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800833e:	f300 8263 	bgt.w	8008808 <_dtoa_r+0x890>
 8008342:	eeb1 7b47 	vneg.f64	d7, d7
 8008346:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800834a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800834e:	f100 8258 	bmi.w	8008802 <_dtoa_r+0x88a>
 8008352:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008356:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008358:	2a00      	cmp	r2, #0
 800835a:	f2c0 811d 	blt.w	8008598 <_dtoa_r+0x620>
 800835e:	f1bb 0f0e 	cmp.w	fp, #14
 8008362:	f300 8119 	bgt.w	8008598 <_dtoa_r+0x620>
 8008366:	4b8a      	ldr	r3, [pc, #552]	; (8008590 <_dtoa_r+0x618>)
 8008368:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800836c:	ed93 6b00 	vldr	d6, [r3]
 8008370:	9b08      	ldr	r3, [sp, #32]
 8008372:	2b00      	cmp	r3, #0
 8008374:	f280 80b7 	bge.w	80084e6 <_dtoa_r+0x56e>
 8008378:	f1b9 0f00 	cmp.w	r9, #0
 800837c:	f300 80b3 	bgt.w	80084e6 <_dtoa_r+0x56e>
 8008380:	f040 823f 	bne.w	8008802 <_dtoa_r+0x88a>
 8008384:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008388:	ee26 6b07 	vmul.f64	d6, d6, d7
 800838c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008390:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008398:	464c      	mov	r4, r9
 800839a:	464f      	mov	r7, r9
 800839c:	f280 8215 	bge.w	80087ca <_dtoa_r+0x852>
 80083a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80083a4:	2331      	movs	r3, #49	; 0x31
 80083a6:	f808 3b01 	strb.w	r3, [r8], #1
 80083aa:	f10b 0b01 	add.w	fp, fp, #1
 80083ae:	e211      	b.n	80087d4 <_dtoa_r+0x85c>
 80083b0:	2202      	movs	r2, #2
 80083b2:	e780      	b.n	80082b6 <_dtoa_r+0x33e>
 80083b4:	07cc      	lsls	r4, r1, #31
 80083b6:	d504      	bpl.n	80083c2 <_dtoa_r+0x44a>
 80083b8:	ed90 6b00 	vldr	d6, [r0]
 80083bc:	3201      	adds	r2, #1
 80083be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80083c2:	1049      	asrs	r1, r1, #1
 80083c4:	3008      	adds	r0, #8
 80083c6:	e777      	b.n	80082b8 <_dtoa_r+0x340>
 80083c8:	d022      	beq.n	8008410 <_dtoa_r+0x498>
 80083ca:	f1cb 0100 	rsb	r1, fp, #0
 80083ce:	4a70      	ldr	r2, [pc, #448]	; (8008590 <_dtoa_r+0x618>)
 80083d0:	f001 000f 	and.w	r0, r1, #15
 80083d4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80083d8:	ed92 7b00 	vldr	d7, [r2]
 80083dc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80083e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80083e4:	486b      	ldr	r0, [pc, #428]	; (8008594 <_dtoa_r+0x61c>)
 80083e6:	1109      	asrs	r1, r1, #4
 80083e8:	2400      	movs	r4, #0
 80083ea:	2202      	movs	r2, #2
 80083ec:	b929      	cbnz	r1, 80083fa <_dtoa_r+0x482>
 80083ee:	2c00      	cmp	r4, #0
 80083f0:	f43f af6a 	beq.w	80082c8 <_dtoa_r+0x350>
 80083f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80083f8:	e766      	b.n	80082c8 <_dtoa_r+0x350>
 80083fa:	07cf      	lsls	r7, r1, #31
 80083fc:	d505      	bpl.n	800840a <_dtoa_r+0x492>
 80083fe:	ed90 6b00 	vldr	d6, [r0]
 8008402:	3201      	adds	r2, #1
 8008404:	2401      	movs	r4, #1
 8008406:	ee27 7b06 	vmul.f64	d7, d7, d6
 800840a:	1049      	asrs	r1, r1, #1
 800840c:	3008      	adds	r0, #8
 800840e:	e7ed      	b.n	80083ec <_dtoa_r+0x474>
 8008410:	2202      	movs	r2, #2
 8008412:	e759      	b.n	80082c8 <_dtoa_r+0x350>
 8008414:	465f      	mov	r7, fp
 8008416:	4648      	mov	r0, r9
 8008418:	e775      	b.n	8008306 <_dtoa_r+0x38e>
 800841a:	ec42 1b17 	vmov	d7, r1, r2
 800841e:	4a5c      	ldr	r2, [pc, #368]	; (8008590 <_dtoa_r+0x618>)
 8008420:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008424:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008428:	9a01      	ldr	r2, [sp, #4]
 800842a:	1814      	adds	r4, r2, r0
 800842c:	9a07      	ldr	r2, [sp, #28]
 800842e:	b352      	cbz	r2, 8008486 <_dtoa_r+0x50e>
 8008430:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008434:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008438:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800843c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008440:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008444:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008448:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800844c:	ee14 2a90 	vmov	r2, s9
 8008450:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008454:	3230      	adds	r2, #48	; 0x30
 8008456:	ee36 6b45 	vsub.f64	d6, d6, d5
 800845a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800845e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008462:	f808 2b01 	strb.w	r2, [r8], #1
 8008466:	d439      	bmi.n	80084dc <_dtoa_r+0x564>
 8008468:	ee32 5b46 	vsub.f64	d5, d2, d6
 800846c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008474:	d472      	bmi.n	800855c <_dtoa_r+0x5e4>
 8008476:	45a0      	cmp	r8, r4
 8008478:	f43f af6b 	beq.w	8008352 <_dtoa_r+0x3da>
 800847c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008480:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008484:	e7e0      	b.n	8008448 <_dtoa_r+0x4d0>
 8008486:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800848a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800848e:	4621      	mov	r1, r4
 8008490:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008494:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008498:	ee14 2a90 	vmov	r2, s9
 800849c:	3230      	adds	r2, #48	; 0x30
 800849e:	f808 2b01 	strb.w	r2, [r8], #1
 80084a2:	45a0      	cmp	r8, r4
 80084a4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80084a8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80084ac:	d118      	bne.n	80084e0 <_dtoa_r+0x568>
 80084ae:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80084b2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80084b6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80084ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084be:	dc4d      	bgt.n	800855c <_dtoa_r+0x5e4>
 80084c0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80084c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80084c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084cc:	f57f af41 	bpl.w	8008352 <_dtoa_r+0x3da>
 80084d0:	4688      	mov	r8, r1
 80084d2:	3901      	subs	r1, #1
 80084d4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80084d8:	2b30      	cmp	r3, #48	; 0x30
 80084da:	d0f9      	beq.n	80084d0 <_dtoa_r+0x558>
 80084dc:	46bb      	mov	fp, r7
 80084de:	e02a      	b.n	8008536 <_dtoa_r+0x5be>
 80084e0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80084e4:	e7d6      	b.n	8008494 <_dtoa_r+0x51c>
 80084e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80084ea:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80084ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80084f2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80084f6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80084fa:	ee15 3a10 	vmov	r3, s10
 80084fe:	3330      	adds	r3, #48	; 0x30
 8008500:	f808 3b01 	strb.w	r3, [r8], #1
 8008504:	9b01      	ldr	r3, [sp, #4]
 8008506:	eba8 0303 	sub.w	r3, r8, r3
 800850a:	4599      	cmp	r9, r3
 800850c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008510:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008514:	d133      	bne.n	800857e <_dtoa_r+0x606>
 8008516:	ee37 7b07 	vadd.f64	d7, d7, d7
 800851a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800851e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008522:	dc1a      	bgt.n	800855a <_dtoa_r+0x5e2>
 8008524:	eeb4 7b46 	vcmp.f64	d7, d6
 8008528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800852c:	d103      	bne.n	8008536 <_dtoa_r+0x5be>
 800852e:	ee15 3a10 	vmov	r3, s10
 8008532:	07d9      	lsls	r1, r3, #31
 8008534:	d411      	bmi.n	800855a <_dtoa_r+0x5e2>
 8008536:	4629      	mov	r1, r5
 8008538:	4630      	mov	r0, r6
 800853a:	f000 fcf7 	bl	8008f2c <_Bfree>
 800853e:	2300      	movs	r3, #0
 8008540:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008542:	f888 3000 	strb.w	r3, [r8]
 8008546:	f10b 0301 	add.w	r3, fp, #1
 800854a:	6013      	str	r3, [r2, #0]
 800854c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800854e:	2b00      	cmp	r3, #0
 8008550:	f43f ad61 	beq.w	8008016 <_dtoa_r+0x9e>
 8008554:	f8c3 8000 	str.w	r8, [r3]
 8008558:	e55d      	b.n	8008016 <_dtoa_r+0x9e>
 800855a:	465f      	mov	r7, fp
 800855c:	4643      	mov	r3, r8
 800855e:	4698      	mov	r8, r3
 8008560:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008564:	2a39      	cmp	r2, #57	; 0x39
 8008566:	d106      	bne.n	8008576 <_dtoa_r+0x5fe>
 8008568:	9a01      	ldr	r2, [sp, #4]
 800856a:	429a      	cmp	r2, r3
 800856c:	d1f7      	bne.n	800855e <_dtoa_r+0x5e6>
 800856e:	9901      	ldr	r1, [sp, #4]
 8008570:	2230      	movs	r2, #48	; 0x30
 8008572:	3701      	adds	r7, #1
 8008574:	700a      	strb	r2, [r1, #0]
 8008576:	781a      	ldrb	r2, [r3, #0]
 8008578:	3201      	adds	r2, #1
 800857a:	701a      	strb	r2, [r3, #0]
 800857c:	e7ae      	b.n	80084dc <_dtoa_r+0x564>
 800857e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008582:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800858a:	d1b2      	bne.n	80084f2 <_dtoa_r+0x57a>
 800858c:	e7d3      	b.n	8008536 <_dtoa_r+0x5be>
 800858e:	bf00      	nop
 8008590:	0800a670 	.word	0x0800a670
 8008594:	0800a648 	.word	0x0800a648
 8008598:	9907      	ldr	r1, [sp, #28]
 800859a:	2900      	cmp	r1, #0
 800859c:	f000 80d0 	beq.w	8008740 <_dtoa_r+0x7c8>
 80085a0:	9906      	ldr	r1, [sp, #24]
 80085a2:	2901      	cmp	r1, #1
 80085a4:	f300 80b4 	bgt.w	8008710 <_dtoa_r+0x798>
 80085a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80085aa:	2900      	cmp	r1, #0
 80085ac:	f000 80ac 	beq.w	8008708 <_dtoa_r+0x790>
 80085b0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80085b4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80085b8:	461c      	mov	r4, r3
 80085ba:	930a      	str	r3, [sp, #40]	; 0x28
 80085bc:	9b04      	ldr	r3, [sp, #16]
 80085be:	4413      	add	r3, r2
 80085c0:	9304      	str	r3, [sp, #16]
 80085c2:	9b05      	ldr	r3, [sp, #20]
 80085c4:	2101      	movs	r1, #1
 80085c6:	4413      	add	r3, r2
 80085c8:	4630      	mov	r0, r6
 80085ca:	9305      	str	r3, [sp, #20]
 80085cc:	f000 fd66 	bl	800909c <__i2b>
 80085d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085d2:	4607      	mov	r7, r0
 80085d4:	f1b8 0f00 	cmp.w	r8, #0
 80085d8:	dd0d      	ble.n	80085f6 <_dtoa_r+0x67e>
 80085da:	9a05      	ldr	r2, [sp, #20]
 80085dc:	2a00      	cmp	r2, #0
 80085de:	dd0a      	ble.n	80085f6 <_dtoa_r+0x67e>
 80085e0:	4542      	cmp	r2, r8
 80085e2:	9904      	ldr	r1, [sp, #16]
 80085e4:	bfa8      	it	ge
 80085e6:	4642      	movge	r2, r8
 80085e8:	1a89      	subs	r1, r1, r2
 80085ea:	9104      	str	r1, [sp, #16]
 80085ec:	9905      	ldr	r1, [sp, #20]
 80085ee:	eba8 0802 	sub.w	r8, r8, r2
 80085f2:	1a8a      	subs	r2, r1, r2
 80085f4:	9205      	str	r2, [sp, #20]
 80085f6:	b303      	cbz	r3, 800863a <_dtoa_r+0x6c2>
 80085f8:	9a07      	ldr	r2, [sp, #28]
 80085fa:	2a00      	cmp	r2, #0
 80085fc:	f000 80a5 	beq.w	800874a <_dtoa_r+0x7d2>
 8008600:	2c00      	cmp	r4, #0
 8008602:	dd13      	ble.n	800862c <_dtoa_r+0x6b4>
 8008604:	4639      	mov	r1, r7
 8008606:	4622      	mov	r2, r4
 8008608:	4630      	mov	r0, r6
 800860a:	930d      	str	r3, [sp, #52]	; 0x34
 800860c:	f000 fe06 	bl	800921c <__pow5mult>
 8008610:	462a      	mov	r2, r5
 8008612:	4601      	mov	r1, r0
 8008614:	4607      	mov	r7, r0
 8008616:	4630      	mov	r0, r6
 8008618:	f000 fd56 	bl	80090c8 <__multiply>
 800861c:	4629      	mov	r1, r5
 800861e:	900a      	str	r0, [sp, #40]	; 0x28
 8008620:	4630      	mov	r0, r6
 8008622:	f000 fc83 	bl	8008f2c <_Bfree>
 8008626:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008628:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800862a:	4615      	mov	r5, r2
 800862c:	1b1a      	subs	r2, r3, r4
 800862e:	d004      	beq.n	800863a <_dtoa_r+0x6c2>
 8008630:	4629      	mov	r1, r5
 8008632:	4630      	mov	r0, r6
 8008634:	f000 fdf2 	bl	800921c <__pow5mult>
 8008638:	4605      	mov	r5, r0
 800863a:	2101      	movs	r1, #1
 800863c:	4630      	mov	r0, r6
 800863e:	f000 fd2d 	bl	800909c <__i2b>
 8008642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008644:	2b00      	cmp	r3, #0
 8008646:	4604      	mov	r4, r0
 8008648:	f340 8081 	ble.w	800874e <_dtoa_r+0x7d6>
 800864c:	461a      	mov	r2, r3
 800864e:	4601      	mov	r1, r0
 8008650:	4630      	mov	r0, r6
 8008652:	f000 fde3 	bl	800921c <__pow5mult>
 8008656:	9b06      	ldr	r3, [sp, #24]
 8008658:	2b01      	cmp	r3, #1
 800865a:	4604      	mov	r4, r0
 800865c:	dd7a      	ble.n	8008754 <_dtoa_r+0x7dc>
 800865e:	2300      	movs	r3, #0
 8008660:	930a      	str	r3, [sp, #40]	; 0x28
 8008662:	6922      	ldr	r2, [r4, #16]
 8008664:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008668:	6910      	ldr	r0, [r2, #16]
 800866a:	f000 fcc7 	bl	8008ffc <__hi0bits>
 800866e:	f1c0 0020 	rsb	r0, r0, #32
 8008672:	9b05      	ldr	r3, [sp, #20]
 8008674:	4418      	add	r0, r3
 8008676:	f010 001f 	ands.w	r0, r0, #31
 800867a:	f000 808c 	beq.w	8008796 <_dtoa_r+0x81e>
 800867e:	f1c0 0220 	rsb	r2, r0, #32
 8008682:	2a04      	cmp	r2, #4
 8008684:	f340 8085 	ble.w	8008792 <_dtoa_r+0x81a>
 8008688:	f1c0 001c 	rsb	r0, r0, #28
 800868c:	9b04      	ldr	r3, [sp, #16]
 800868e:	4403      	add	r3, r0
 8008690:	9304      	str	r3, [sp, #16]
 8008692:	9b05      	ldr	r3, [sp, #20]
 8008694:	4403      	add	r3, r0
 8008696:	4480      	add	r8, r0
 8008698:	9305      	str	r3, [sp, #20]
 800869a:	9b04      	ldr	r3, [sp, #16]
 800869c:	2b00      	cmp	r3, #0
 800869e:	dd05      	ble.n	80086ac <_dtoa_r+0x734>
 80086a0:	4629      	mov	r1, r5
 80086a2:	461a      	mov	r2, r3
 80086a4:	4630      	mov	r0, r6
 80086a6:	f000 fe13 	bl	80092d0 <__lshift>
 80086aa:	4605      	mov	r5, r0
 80086ac:	9b05      	ldr	r3, [sp, #20]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	dd05      	ble.n	80086be <_dtoa_r+0x746>
 80086b2:	4621      	mov	r1, r4
 80086b4:	461a      	mov	r2, r3
 80086b6:	4630      	mov	r0, r6
 80086b8:	f000 fe0a 	bl	80092d0 <__lshift>
 80086bc:	4604      	mov	r4, r0
 80086be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d06a      	beq.n	800879a <_dtoa_r+0x822>
 80086c4:	4621      	mov	r1, r4
 80086c6:	4628      	mov	r0, r5
 80086c8:	f000 fe72 	bl	80093b0 <__mcmp>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	da64      	bge.n	800879a <_dtoa_r+0x822>
 80086d0:	2300      	movs	r3, #0
 80086d2:	4629      	mov	r1, r5
 80086d4:	220a      	movs	r2, #10
 80086d6:	4630      	mov	r0, r6
 80086d8:	f000 fc4a 	bl	8008f70 <__multadd>
 80086dc:	9b07      	ldr	r3, [sp, #28]
 80086de:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80086e2:	4605      	mov	r5, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f000 8191 	beq.w	8008a0c <_dtoa_r+0xa94>
 80086ea:	4639      	mov	r1, r7
 80086ec:	2300      	movs	r3, #0
 80086ee:	220a      	movs	r2, #10
 80086f0:	4630      	mov	r0, r6
 80086f2:	f000 fc3d 	bl	8008f70 <__multadd>
 80086f6:	f1ba 0f00 	cmp.w	sl, #0
 80086fa:	4607      	mov	r7, r0
 80086fc:	f300 808d 	bgt.w	800881a <_dtoa_r+0x8a2>
 8008700:	9b06      	ldr	r3, [sp, #24]
 8008702:	2b02      	cmp	r3, #2
 8008704:	dc50      	bgt.n	80087a8 <_dtoa_r+0x830>
 8008706:	e088      	b.n	800881a <_dtoa_r+0x8a2>
 8008708:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800870a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800870e:	e751      	b.n	80085b4 <_dtoa_r+0x63c>
 8008710:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8008714:	42a3      	cmp	r3, r4
 8008716:	bfbf      	itttt	lt
 8008718:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800871a:	1ae3      	sublt	r3, r4, r3
 800871c:	18d2      	addlt	r2, r2, r3
 800871e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8008720:	bfb6      	itet	lt
 8008722:	4623      	movlt	r3, r4
 8008724:	1b1c      	subge	r4, r3, r4
 8008726:	2400      	movlt	r4, #0
 8008728:	f1b9 0f00 	cmp.w	r9, #0
 800872c:	bfb5      	itete	lt
 800872e:	9a04      	ldrlt	r2, [sp, #16]
 8008730:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8008734:	eba2 0809 	sublt.w	r8, r2, r9
 8008738:	464a      	movge	r2, r9
 800873a:	bfb8      	it	lt
 800873c:	2200      	movlt	r2, #0
 800873e:	e73c      	b.n	80085ba <_dtoa_r+0x642>
 8008740:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008744:	9f07      	ldr	r7, [sp, #28]
 8008746:	461c      	mov	r4, r3
 8008748:	e744      	b.n	80085d4 <_dtoa_r+0x65c>
 800874a:	461a      	mov	r2, r3
 800874c:	e770      	b.n	8008630 <_dtoa_r+0x6b8>
 800874e:	9b06      	ldr	r3, [sp, #24]
 8008750:	2b01      	cmp	r3, #1
 8008752:	dc18      	bgt.n	8008786 <_dtoa_r+0x80e>
 8008754:	9b02      	ldr	r3, [sp, #8]
 8008756:	b9b3      	cbnz	r3, 8008786 <_dtoa_r+0x80e>
 8008758:	9b03      	ldr	r3, [sp, #12]
 800875a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800875e:	b9a2      	cbnz	r2, 800878a <_dtoa_r+0x812>
 8008760:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008764:	0d12      	lsrs	r2, r2, #20
 8008766:	0512      	lsls	r2, r2, #20
 8008768:	b18a      	cbz	r2, 800878e <_dtoa_r+0x816>
 800876a:	9b04      	ldr	r3, [sp, #16]
 800876c:	3301      	adds	r3, #1
 800876e:	9304      	str	r3, [sp, #16]
 8008770:	9b05      	ldr	r3, [sp, #20]
 8008772:	3301      	adds	r3, #1
 8008774:	9305      	str	r3, [sp, #20]
 8008776:	2301      	movs	r3, #1
 8008778:	930a      	str	r3, [sp, #40]	; 0x28
 800877a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800877c:	2b00      	cmp	r3, #0
 800877e:	f47f af70 	bne.w	8008662 <_dtoa_r+0x6ea>
 8008782:	2001      	movs	r0, #1
 8008784:	e775      	b.n	8008672 <_dtoa_r+0x6fa>
 8008786:	2300      	movs	r3, #0
 8008788:	e7f6      	b.n	8008778 <_dtoa_r+0x800>
 800878a:	9b02      	ldr	r3, [sp, #8]
 800878c:	e7f4      	b.n	8008778 <_dtoa_r+0x800>
 800878e:	920a      	str	r2, [sp, #40]	; 0x28
 8008790:	e7f3      	b.n	800877a <_dtoa_r+0x802>
 8008792:	d082      	beq.n	800869a <_dtoa_r+0x722>
 8008794:	4610      	mov	r0, r2
 8008796:	301c      	adds	r0, #28
 8008798:	e778      	b.n	800868c <_dtoa_r+0x714>
 800879a:	f1b9 0f00 	cmp.w	r9, #0
 800879e:	dc37      	bgt.n	8008810 <_dtoa_r+0x898>
 80087a0:	9b06      	ldr	r3, [sp, #24]
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	dd34      	ble.n	8008810 <_dtoa_r+0x898>
 80087a6:	46ca      	mov	sl, r9
 80087a8:	f1ba 0f00 	cmp.w	sl, #0
 80087ac:	d10d      	bne.n	80087ca <_dtoa_r+0x852>
 80087ae:	4621      	mov	r1, r4
 80087b0:	4653      	mov	r3, sl
 80087b2:	2205      	movs	r2, #5
 80087b4:	4630      	mov	r0, r6
 80087b6:	f000 fbdb 	bl	8008f70 <__multadd>
 80087ba:	4601      	mov	r1, r0
 80087bc:	4604      	mov	r4, r0
 80087be:	4628      	mov	r0, r5
 80087c0:	f000 fdf6 	bl	80093b0 <__mcmp>
 80087c4:	2800      	cmp	r0, #0
 80087c6:	f73f adeb 	bgt.w	80083a0 <_dtoa_r+0x428>
 80087ca:	9b08      	ldr	r3, [sp, #32]
 80087cc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80087d0:	ea6f 0b03 	mvn.w	fp, r3
 80087d4:	f04f 0900 	mov.w	r9, #0
 80087d8:	4621      	mov	r1, r4
 80087da:	4630      	mov	r0, r6
 80087dc:	f000 fba6 	bl	8008f2c <_Bfree>
 80087e0:	2f00      	cmp	r7, #0
 80087e2:	f43f aea8 	beq.w	8008536 <_dtoa_r+0x5be>
 80087e6:	f1b9 0f00 	cmp.w	r9, #0
 80087ea:	d005      	beq.n	80087f8 <_dtoa_r+0x880>
 80087ec:	45b9      	cmp	r9, r7
 80087ee:	d003      	beq.n	80087f8 <_dtoa_r+0x880>
 80087f0:	4649      	mov	r1, r9
 80087f2:	4630      	mov	r0, r6
 80087f4:	f000 fb9a 	bl	8008f2c <_Bfree>
 80087f8:	4639      	mov	r1, r7
 80087fa:	4630      	mov	r0, r6
 80087fc:	f000 fb96 	bl	8008f2c <_Bfree>
 8008800:	e699      	b.n	8008536 <_dtoa_r+0x5be>
 8008802:	2400      	movs	r4, #0
 8008804:	4627      	mov	r7, r4
 8008806:	e7e0      	b.n	80087ca <_dtoa_r+0x852>
 8008808:	46bb      	mov	fp, r7
 800880a:	4604      	mov	r4, r0
 800880c:	4607      	mov	r7, r0
 800880e:	e5c7      	b.n	80083a0 <_dtoa_r+0x428>
 8008810:	9b07      	ldr	r3, [sp, #28]
 8008812:	46ca      	mov	sl, r9
 8008814:	2b00      	cmp	r3, #0
 8008816:	f000 8100 	beq.w	8008a1a <_dtoa_r+0xaa2>
 800881a:	f1b8 0f00 	cmp.w	r8, #0
 800881e:	dd05      	ble.n	800882c <_dtoa_r+0x8b4>
 8008820:	4639      	mov	r1, r7
 8008822:	4642      	mov	r2, r8
 8008824:	4630      	mov	r0, r6
 8008826:	f000 fd53 	bl	80092d0 <__lshift>
 800882a:	4607      	mov	r7, r0
 800882c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800882e:	2b00      	cmp	r3, #0
 8008830:	d05d      	beq.n	80088ee <_dtoa_r+0x976>
 8008832:	6879      	ldr	r1, [r7, #4]
 8008834:	4630      	mov	r0, r6
 8008836:	f000 fb39 	bl	8008eac <_Balloc>
 800883a:	4680      	mov	r8, r0
 800883c:	b928      	cbnz	r0, 800884a <_dtoa_r+0x8d2>
 800883e:	4b82      	ldr	r3, [pc, #520]	; (8008a48 <_dtoa_r+0xad0>)
 8008840:	4602      	mov	r2, r0
 8008842:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008846:	f7ff bbaf 	b.w	8007fa8 <_dtoa_r+0x30>
 800884a:	693a      	ldr	r2, [r7, #16]
 800884c:	3202      	adds	r2, #2
 800884e:	0092      	lsls	r2, r2, #2
 8008850:	f107 010c 	add.w	r1, r7, #12
 8008854:	300c      	adds	r0, #12
 8008856:	f7fe fd2f 	bl	80072b8 <memcpy>
 800885a:	2201      	movs	r2, #1
 800885c:	4641      	mov	r1, r8
 800885e:	4630      	mov	r0, r6
 8008860:	f000 fd36 	bl	80092d0 <__lshift>
 8008864:	9b01      	ldr	r3, [sp, #4]
 8008866:	3301      	adds	r3, #1
 8008868:	9304      	str	r3, [sp, #16]
 800886a:	9b01      	ldr	r3, [sp, #4]
 800886c:	4453      	add	r3, sl
 800886e:	9308      	str	r3, [sp, #32]
 8008870:	9b02      	ldr	r3, [sp, #8]
 8008872:	f003 0301 	and.w	r3, r3, #1
 8008876:	46b9      	mov	r9, r7
 8008878:	9307      	str	r3, [sp, #28]
 800887a:	4607      	mov	r7, r0
 800887c:	9b04      	ldr	r3, [sp, #16]
 800887e:	4621      	mov	r1, r4
 8008880:	3b01      	subs	r3, #1
 8008882:	4628      	mov	r0, r5
 8008884:	9302      	str	r3, [sp, #8]
 8008886:	f7ff fae9 	bl	8007e5c <quorem>
 800888a:	4603      	mov	r3, r0
 800888c:	3330      	adds	r3, #48	; 0x30
 800888e:	9005      	str	r0, [sp, #20]
 8008890:	4649      	mov	r1, r9
 8008892:	4628      	mov	r0, r5
 8008894:	9309      	str	r3, [sp, #36]	; 0x24
 8008896:	f000 fd8b 	bl	80093b0 <__mcmp>
 800889a:	463a      	mov	r2, r7
 800889c:	4682      	mov	sl, r0
 800889e:	4621      	mov	r1, r4
 80088a0:	4630      	mov	r0, r6
 80088a2:	f000 fda1 	bl	80093e8 <__mdiff>
 80088a6:	68c2      	ldr	r2, [r0, #12]
 80088a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088aa:	4680      	mov	r8, r0
 80088ac:	bb0a      	cbnz	r2, 80088f2 <_dtoa_r+0x97a>
 80088ae:	4601      	mov	r1, r0
 80088b0:	4628      	mov	r0, r5
 80088b2:	f000 fd7d 	bl	80093b0 <__mcmp>
 80088b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088b8:	4602      	mov	r2, r0
 80088ba:	4641      	mov	r1, r8
 80088bc:	4630      	mov	r0, r6
 80088be:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80088c2:	f000 fb33 	bl	8008f2c <_Bfree>
 80088c6:	9b06      	ldr	r3, [sp, #24]
 80088c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088ca:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80088ce:	ea43 0102 	orr.w	r1, r3, r2
 80088d2:	9b07      	ldr	r3, [sp, #28]
 80088d4:	430b      	orrs	r3, r1
 80088d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d8:	d10d      	bne.n	80088f6 <_dtoa_r+0x97e>
 80088da:	2b39      	cmp	r3, #57	; 0x39
 80088dc:	d029      	beq.n	8008932 <_dtoa_r+0x9ba>
 80088de:	f1ba 0f00 	cmp.w	sl, #0
 80088e2:	dd01      	ble.n	80088e8 <_dtoa_r+0x970>
 80088e4:	9b05      	ldr	r3, [sp, #20]
 80088e6:	3331      	adds	r3, #49	; 0x31
 80088e8:	9a02      	ldr	r2, [sp, #8]
 80088ea:	7013      	strb	r3, [r2, #0]
 80088ec:	e774      	b.n	80087d8 <_dtoa_r+0x860>
 80088ee:	4638      	mov	r0, r7
 80088f0:	e7b8      	b.n	8008864 <_dtoa_r+0x8ec>
 80088f2:	2201      	movs	r2, #1
 80088f4:	e7e1      	b.n	80088ba <_dtoa_r+0x942>
 80088f6:	f1ba 0f00 	cmp.w	sl, #0
 80088fa:	db06      	blt.n	800890a <_dtoa_r+0x992>
 80088fc:	9906      	ldr	r1, [sp, #24]
 80088fe:	ea41 0a0a 	orr.w	sl, r1, sl
 8008902:	9907      	ldr	r1, [sp, #28]
 8008904:	ea5a 0101 	orrs.w	r1, sl, r1
 8008908:	d120      	bne.n	800894c <_dtoa_r+0x9d4>
 800890a:	2a00      	cmp	r2, #0
 800890c:	ddec      	ble.n	80088e8 <_dtoa_r+0x970>
 800890e:	4629      	mov	r1, r5
 8008910:	2201      	movs	r2, #1
 8008912:	4630      	mov	r0, r6
 8008914:	9304      	str	r3, [sp, #16]
 8008916:	f000 fcdb 	bl	80092d0 <__lshift>
 800891a:	4621      	mov	r1, r4
 800891c:	4605      	mov	r5, r0
 800891e:	f000 fd47 	bl	80093b0 <__mcmp>
 8008922:	2800      	cmp	r0, #0
 8008924:	9b04      	ldr	r3, [sp, #16]
 8008926:	dc02      	bgt.n	800892e <_dtoa_r+0x9b6>
 8008928:	d1de      	bne.n	80088e8 <_dtoa_r+0x970>
 800892a:	07da      	lsls	r2, r3, #31
 800892c:	d5dc      	bpl.n	80088e8 <_dtoa_r+0x970>
 800892e:	2b39      	cmp	r3, #57	; 0x39
 8008930:	d1d8      	bne.n	80088e4 <_dtoa_r+0x96c>
 8008932:	9a02      	ldr	r2, [sp, #8]
 8008934:	2339      	movs	r3, #57	; 0x39
 8008936:	7013      	strb	r3, [r2, #0]
 8008938:	4643      	mov	r3, r8
 800893a:	4698      	mov	r8, r3
 800893c:	3b01      	subs	r3, #1
 800893e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008942:	2a39      	cmp	r2, #57	; 0x39
 8008944:	d051      	beq.n	80089ea <_dtoa_r+0xa72>
 8008946:	3201      	adds	r2, #1
 8008948:	701a      	strb	r2, [r3, #0]
 800894a:	e745      	b.n	80087d8 <_dtoa_r+0x860>
 800894c:	2a00      	cmp	r2, #0
 800894e:	dd03      	ble.n	8008958 <_dtoa_r+0x9e0>
 8008950:	2b39      	cmp	r3, #57	; 0x39
 8008952:	d0ee      	beq.n	8008932 <_dtoa_r+0x9ba>
 8008954:	3301      	adds	r3, #1
 8008956:	e7c7      	b.n	80088e8 <_dtoa_r+0x970>
 8008958:	9a04      	ldr	r2, [sp, #16]
 800895a:	9908      	ldr	r1, [sp, #32]
 800895c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008960:	428a      	cmp	r2, r1
 8008962:	d02b      	beq.n	80089bc <_dtoa_r+0xa44>
 8008964:	4629      	mov	r1, r5
 8008966:	2300      	movs	r3, #0
 8008968:	220a      	movs	r2, #10
 800896a:	4630      	mov	r0, r6
 800896c:	f000 fb00 	bl	8008f70 <__multadd>
 8008970:	45b9      	cmp	r9, r7
 8008972:	4605      	mov	r5, r0
 8008974:	f04f 0300 	mov.w	r3, #0
 8008978:	f04f 020a 	mov.w	r2, #10
 800897c:	4649      	mov	r1, r9
 800897e:	4630      	mov	r0, r6
 8008980:	d107      	bne.n	8008992 <_dtoa_r+0xa1a>
 8008982:	f000 faf5 	bl	8008f70 <__multadd>
 8008986:	4681      	mov	r9, r0
 8008988:	4607      	mov	r7, r0
 800898a:	9b04      	ldr	r3, [sp, #16]
 800898c:	3301      	adds	r3, #1
 800898e:	9304      	str	r3, [sp, #16]
 8008990:	e774      	b.n	800887c <_dtoa_r+0x904>
 8008992:	f000 faed 	bl	8008f70 <__multadd>
 8008996:	4639      	mov	r1, r7
 8008998:	4681      	mov	r9, r0
 800899a:	2300      	movs	r3, #0
 800899c:	220a      	movs	r2, #10
 800899e:	4630      	mov	r0, r6
 80089a0:	f000 fae6 	bl	8008f70 <__multadd>
 80089a4:	4607      	mov	r7, r0
 80089a6:	e7f0      	b.n	800898a <_dtoa_r+0xa12>
 80089a8:	f1ba 0f00 	cmp.w	sl, #0
 80089ac:	9a01      	ldr	r2, [sp, #4]
 80089ae:	bfcc      	ite	gt
 80089b0:	46d0      	movgt	r8, sl
 80089b2:	f04f 0801 	movle.w	r8, #1
 80089b6:	4490      	add	r8, r2
 80089b8:	f04f 0900 	mov.w	r9, #0
 80089bc:	4629      	mov	r1, r5
 80089be:	2201      	movs	r2, #1
 80089c0:	4630      	mov	r0, r6
 80089c2:	9302      	str	r3, [sp, #8]
 80089c4:	f000 fc84 	bl	80092d0 <__lshift>
 80089c8:	4621      	mov	r1, r4
 80089ca:	4605      	mov	r5, r0
 80089cc:	f000 fcf0 	bl	80093b0 <__mcmp>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	dcb1      	bgt.n	8008938 <_dtoa_r+0x9c0>
 80089d4:	d102      	bne.n	80089dc <_dtoa_r+0xa64>
 80089d6:	9b02      	ldr	r3, [sp, #8]
 80089d8:	07db      	lsls	r3, r3, #31
 80089da:	d4ad      	bmi.n	8008938 <_dtoa_r+0x9c0>
 80089dc:	4643      	mov	r3, r8
 80089de:	4698      	mov	r8, r3
 80089e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089e4:	2a30      	cmp	r2, #48	; 0x30
 80089e6:	d0fa      	beq.n	80089de <_dtoa_r+0xa66>
 80089e8:	e6f6      	b.n	80087d8 <_dtoa_r+0x860>
 80089ea:	9a01      	ldr	r2, [sp, #4]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d1a4      	bne.n	800893a <_dtoa_r+0x9c2>
 80089f0:	f10b 0b01 	add.w	fp, fp, #1
 80089f4:	2331      	movs	r3, #49	; 0x31
 80089f6:	e778      	b.n	80088ea <_dtoa_r+0x972>
 80089f8:	4b14      	ldr	r3, [pc, #80]	; (8008a4c <_dtoa_r+0xad4>)
 80089fa:	f7ff bb27 	b.w	800804c <_dtoa_r+0xd4>
 80089fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f47f ab03 	bne.w	800800c <_dtoa_r+0x94>
 8008a06:	4b12      	ldr	r3, [pc, #72]	; (8008a50 <_dtoa_r+0xad8>)
 8008a08:	f7ff bb20 	b.w	800804c <_dtoa_r+0xd4>
 8008a0c:	f1ba 0f00 	cmp.w	sl, #0
 8008a10:	dc03      	bgt.n	8008a1a <_dtoa_r+0xaa2>
 8008a12:	9b06      	ldr	r3, [sp, #24]
 8008a14:	2b02      	cmp	r3, #2
 8008a16:	f73f aec7 	bgt.w	80087a8 <_dtoa_r+0x830>
 8008a1a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008a1e:	4621      	mov	r1, r4
 8008a20:	4628      	mov	r0, r5
 8008a22:	f7ff fa1b 	bl	8007e5c <quorem>
 8008a26:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008a2a:	f808 3b01 	strb.w	r3, [r8], #1
 8008a2e:	9a01      	ldr	r2, [sp, #4]
 8008a30:	eba8 0202 	sub.w	r2, r8, r2
 8008a34:	4592      	cmp	sl, r2
 8008a36:	ddb7      	ble.n	80089a8 <_dtoa_r+0xa30>
 8008a38:	4629      	mov	r1, r5
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	220a      	movs	r2, #10
 8008a3e:	4630      	mov	r0, r6
 8008a40:	f000 fa96 	bl	8008f70 <__multadd>
 8008a44:	4605      	mov	r5, r0
 8008a46:	e7ea      	b.n	8008a1e <_dtoa_r+0xaa6>
 8008a48:	0800a57b 	.word	0x0800a57b
 8008a4c:	0800a4d8 	.word	0x0800a4d8
 8008a50:	0800a4fc 	.word	0x0800a4fc

08008a54 <__sflush_r>:
 8008a54:	898a      	ldrh	r2, [r1, #12]
 8008a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a5a:	4605      	mov	r5, r0
 8008a5c:	0710      	lsls	r0, r2, #28
 8008a5e:	460c      	mov	r4, r1
 8008a60:	d458      	bmi.n	8008b14 <__sflush_r+0xc0>
 8008a62:	684b      	ldr	r3, [r1, #4]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	dc05      	bgt.n	8008a74 <__sflush_r+0x20>
 8008a68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	dc02      	bgt.n	8008a74 <__sflush_r+0x20>
 8008a6e:	2000      	movs	r0, #0
 8008a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a76:	2e00      	cmp	r6, #0
 8008a78:	d0f9      	beq.n	8008a6e <__sflush_r+0x1a>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a80:	682f      	ldr	r7, [r5, #0]
 8008a82:	602b      	str	r3, [r5, #0]
 8008a84:	d032      	beq.n	8008aec <__sflush_r+0x98>
 8008a86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a88:	89a3      	ldrh	r3, [r4, #12]
 8008a8a:	075a      	lsls	r2, r3, #29
 8008a8c:	d505      	bpl.n	8008a9a <__sflush_r+0x46>
 8008a8e:	6863      	ldr	r3, [r4, #4]
 8008a90:	1ac0      	subs	r0, r0, r3
 8008a92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a94:	b10b      	cbz	r3, 8008a9a <__sflush_r+0x46>
 8008a96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a98:	1ac0      	subs	r0, r0, r3
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008aa0:	6a21      	ldr	r1, [r4, #32]
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	47b0      	blx	r6
 8008aa6:	1c43      	adds	r3, r0, #1
 8008aa8:	89a3      	ldrh	r3, [r4, #12]
 8008aaa:	d106      	bne.n	8008aba <__sflush_r+0x66>
 8008aac:	6829      	ldr	r1, [r5, #0]
 8008aae:	291d      	cmp	r1, #29
 8008ab0:	d82c      	bhi.n	8008b0c <__sflush_r+0xb8>
 8008ab2:	4a2a      	ldr	r2, [pc, #168]	; (8008b5c <__sflush_r+0x108>)
 8008ab4:	40ca      	lsrs	r2, r1
 8008ab6:	07d6      	lsls	r6, r2, #31
 8008ab8:	d528      	bpl.n	8008b0c <__sflush_r+0xb8>
 8008aba:	2200      	movs	r2, #0
 8008abc:	6062      	str	r2, [r4, #4]
 8008abe:	04d9      	lsls	r1, r3, #19
 8008ac0:	6922      	ldr	r2, [r4, #16]
 8008ac2:	6022      	str	r2, [r4, #0]
 8008ac4:	d504      	bpl.n	8008ad0 <__sflush_r+0x7c>
 8008ac6:	1c42      	adds	r2, r0, #1
 8008ac8:	d101      	bne.n	8008ace <__sflush_r+0x7a>
 8008aca:	682b      	ldr	r3, [r5, #0]
 8008acc:	b903      	cbnz	r3, 8008ad0 <__sflush_r+0x7c>
 8008ace:	6560      	str	r0, [r4, #84]	; 0x54
 8008ad0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ad2:	602f      	str	r7, [r5, #0]
 8008ad4:	2900      	cmp	r1, #0
 8008ad6:	d0ca      	beq.n	8008a6e <__sflush_r+0x1a>
 8008ad8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008adc:	4299      	cmp	r1, r3
 8008ade:	d002      	beq.n	8008ae6 <__sflush_r+0x92>
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	f000 fd7d 	bl	80095e0 <_free_r>
 8008ae6:	2000      	movs	r0, #0
 8008ae8:	6360      	str	r0, [r4, #52]	; 0x34
 8008aea:	e7c1      	b.n	8008a70 <__sflush_r+0x1c>
 8008aec:	6a21      	ldr	r1, [r4, #32]
 8008aee:	2301      	movs	r3, #1
 8008af0:	4628      	mov	r0, r5
 8008af2:	47b0      	blx	r6
 8008af4:	1c41      	adds	r1, r0, #1
 8008af6:	d1c7      	bne.n	8008a88 <__sflush_r+0x34>
 8008af8:	682b      	ldr	r3, [r5, #0]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d0c4      	beq.n	8008a88 <__sflush_r+0x34>
 8008afe:	2b1d      	cmp	r3, #29
 8008b00:	d001      	beq.n	8008b06 <__sflush_r+0xb2>
 8008b02:	2b16      	cmp	r3, #22
 8008b04:	d101      	bne.n	8008b0a <__sflush_r+0xb6>
 8008b06:	602f      	str	r7, [r5, #0]
 8008b08:	e7b1      	b.n	8008a6e <__sflush_r+0x1a>
 8008b0a:	89a3      	ldrh	r3, [r4, #12]
 8008b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b10:	81a3      	strh	r3, [r4, #12]
 8008b12:	e7ad      	b.n	8008a70 <__sflush_r+0x1c>
 8008b14:	690f      	ldr	r7, [r1, #16]
 8008b16:	2f00      	cmp	r7, #0
 8008b18:	d0a9      	beq.n	8008a6e <__sflush_r+0x1a>
 8008b1a:	0793      	lsls	r3, r2, #30
 8008b1c:	680e      	ldr	r6, [r1, #0]
 8008b1e:	bf08      	it	eq
 8008b20:	694b      	ldreq	r3, [r1, #20]
 8008b22:	600f      	str	r7, [r1, #0]
 8008b24:	bf18      	it	ne
 8008b26:	2300      	movne	r3, #0
 8008b28:	eba6 0807 	sub.w	r8, r6, r7
 8008b2c:	608b      	str	r3, [r1, #8]
 8008b2e:	f1b8 0f00 	cmp.w	r8, #0
 8008b32:	dd9c      	ble.n	8008a6e <__sflush_r+0x1a>
 8008b34:	6a21      	ldr	r1, [r4, #32]
 8008b36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b38:	4643      	mov	r3, r8
 8008b3a:	463a      	mov	r2, r7
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	47b0      	blx	r6
 8008b40:	2800      	cmp	r0, #0
 8008b42:	dc06      	bgt.n	8008b52 <__sflush_r+0xfe>
 8008b44:	89a3      	ldrh	r3, [r4, #12]
 8008b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b4a:	81a3      	strh	r3, [r4, #12]
 8008b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b50:	e78e      	b.n	8008a70 <__sflush_r+0x1c>
 8008b52:	4407      	add	r7, r0
 8008b54:	eba8 0800 	sub.w	r8, r8, r0
 8008b58:	e7e9      	b.n	8008b2e <__sflush_r+0xda>
 8008b5a:	bf00      	nop
 8008b5c:	20400001 	.word	0x20400001

08008b60 <_fflush_r>:
 8008b60:	b538      	push	{r3, r4, r5, lr}
 8008b62:	690b      	ldr	r3, [r1, #16]
 8008b64:	4605      	mov	r5, r0
 8008b66:	460c      	mov	r4, r1
 8008b68:	b913      	cbnz	r3, 8008b70 <_fflush_r+0x10>
 8008b6a:	2500      	movs	r5, #0
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	bd38      	pop	{r3, r4, r5, pc}
 8008b70:	b118      	cbz	r0, 8008b7a <_fflush_r+0x1a>
 8008b72:	6983      	ldr	r3, [r0, #24]
 8008b74:	b90b      	cbnz	r3, 8008b7a <_fflush_r+0x1a>
 8008b76:	f000 f887 	bl	8008c88 <__sinit>
 8008b7a:	4b14      	ldr	r3, [pc, #80]	; (8008bcc <_fflush_r+0x6c>)
 8008b7c:	429c      	cmp	r4, r3
 8008b7e:	d11b      	bne.n	8008bb8 <_fflush_r+0x58>
 8008b80:	686c      	ldr	r4, [r5, #4]
 8008b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d0ef      	beq.n	8008b6a <_fflush_r+0xa>
 8008b8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b8c:	07d0      	lsls	r0, r2, #31
 8008b8e:	d404      	bmi.n	8008b9a <_fflush_r+0x3a>
 8008b90:	0599      	lsls	r1, r3, #22
 8008b92:	d402      	bmi.n	8008b9a <_fflush_r+0x3a>
 8008b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b96:	f000 f91a 	bl	8008dce <__retarget_lock_acquire_recursive>
 8008b9a:	4628      	mov	r0, r5
 8008b9c:	4621      	mov	r1, r4
 8008b9e:	f7ff ff59 	bl	8008a54 <__sflush_r>
 8008ba2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ba4:	07da      	lsls	r2, r3, #31
 8008ba6:	4605      	mov	r5, r0
 8008ba8:	d4e0      	bmi.n	8008b6c <_fflush_r+0xc>
 8008baa:	89a3      	ldrh	r3, [r4, #12]
 8008bac:	059b      	lsls	r3, r3, #22
 8008bae:	d4dd      	bmi.n	8008b6c <_fflush_r+0xc>
 8008bb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bb2:	f000 f90d 	bl	8008dd0 <__retarget_lock_release_recursive>
 8008bb6:	e7d9      	b.n	8008b6c <_fflush_r+0xc>
 8008bb8:	4b05      	ldr	r3, [pc, #20]	; (8008bd0 <_fflush_r+0x70>)
 8008bba:	429c      	cmp	r4, r3
 8008bbc:	d101      	bne.n	8008bc2 <_fflush_r+0x62>
 8008bbe:	68ac      	ldr	r4, [r5, #8]
 8008bc0:	e7df      	b.n	8008b82 <_fflush_r+0x22>
 8008bc2:	4b04      	ldr	r3, [pc, #16]	; (8008bd4 <_fflush_r+0x74>)
 8008bc4:	429c      	cmp	r4, r3
 8008bc6:	bf08      	it	eq
 8008bc8:	68ec      	ldreq	r4, [r5, #12]
 8008bca:	e7da      	b.n	8008b82 <_fflush_r+0x22>
 8008bcc:	0800a5ac 	.word	0x0800a5ac
 8008bd0:	0800a5cc 	.word	0x0800a5cc
 8008bd4:	0800a58c 	.word	0x0800a58c

08008bd8 <std>:
 8008bd8:	2300      	movs	r3, #0
 8008bda:	b510      	push	{r4, lr}
 8008bdc:	4604      	mov	r4, r0
 8008bde:	e9c0 3300 	strd	r3, r3, [r0]
 8008be2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008be6:	6083      	str	r3, [r0, #8]
 8008be8:	8181      	strh	r1, [r0, #12]
 8008bea:	6643      	str	r3, [r0, #100]	; 0x64
 8008bec:	81c2      	strh	r2, [r0, #14]
 8008bee:	6183      	str	r3, [r0, #24]
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	2208      	movs	r2, #8
 8008bf4:	305c      	adds	r0, #92	; 0x5c
 8008bf6:	f7fe fb6d 	bl	80072d4 <memset>
 8008bfa:	4b05      	ldr	r3, [pc, #20]	; (8008c10 <std+0x38>)
 8008bfc:	6263      	str	r3, [r4, #36]	; 0x24
 8008bfe:	4b05      	ldr	r3, [pc, #20]	; (8008c14 <std+0x3c>)
 8008c00:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c02:	4b05      	ldr	r3, [pc, #20]	; (8008c18 <std+0x40>)
 8008c04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c06:	4b05      	ldr	r3, [pc, #20]	; (8008c1c <std+0x44>)
 8008c08:	6224      	str	r4, [r4, #32]
 8008c0a:	6323      	str	r3, [r4, #48]	; 0x30
 8008c0c:	bd10      	pop	{r4, pc}
 8008c0e:	bf00      	nop
 8008c10:	08009d2d 	.word	0x08009d2d
 8008c14:	08009d4f 	.word	0x08009d4f
 8008c18:	08009d87 	.word	0x08009d87
 8008c1c:	08009dab 	.word	0x08009dab

08008c20 <_cleanup_r>:
 8008c20:	4901      	ldr	r1, [pc, #4]	; (8008c28 <_cleanup_r+0x8>)
 8008c22:	f000 b8af 	b.w	8008d84 <_fwalk_reent>
 8008c26:	bf00      	nop
 8008c28:	08008b61 	.word	0x08008b61

08008c2c <__sfmoreglue>:
 8008c2c:	b570      	push	{r4, r5, r6, lr}
 8008c2e:	2268      	movs	r2, #104	; 0x68
 8008c30:	1e4d      	subs	r5, r1, #1
 8008c32:	4355      	muls	r5, r2
 8008c34:	460e      	mov	r6, r1
 8008c36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c3a:	f000 fd3d 	bl	80096b8 <_malloc_r>
 8008c3e:	4604      	mov	r4, r0
 8008c40:	b140      	cbz	r0, 8008c54 <__sfmoreglue+0x28>
 8008c42:	2100      	movs	r1, #0
 8008c44:	e9c0 1600 	strd	r1, r6, [r0]
 8008c48:	300c      	adds	r0, #12
 8008c4a:	60a0      	str	r0, [r4, #8]
 8008c4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008c50:	f7fe fb40 	bl	80072d4 <memset>
 8008c54:	4620      	mov	r0, r4
 8008c56:	bd70      	pop	{r4, r5, r6, pc}

08008c58 <__sfp_lock_acquire>:
 8008c58:	4801      	ldr	r0, [pc, #4]	; (8008c60 <__sfp_lock_acquire+0x8>)
 8008c5a:	f000 b8b8 	b.w	8008dce <__retarget_lock_acquire_recursive>
 8008c5e:	bf00      	nop
 8008c60:	2406a995 	.word	0x2406a995

08008c64 <__sfp_lock_release>:
 8008c64:	4801      	ldr	r0, [pc, #4]	; (8008c6c <__sfp_lock_release+0x8>)
 8008c66:	f000 b8b3 	b.w	8008dd0 <__retarget_lock_release_recursive>
 8008c6a:	bf00      	nop
 8008c6c:	2406a995 	.word	0x2406a995

08008c70 <__sinit_lock_acquire>:
 8008c70:	4801      	ldr	r0, [pc, #4]	; (8008c78 <__sinit_lock_acquire+0x8>)
 8008c72:	f000 b8ac 	b.w	8008dce <__retarget_lock_acquire_recursive>
 8008c76:	bf00      	nop
 8008c78:	2406a996 	.word	0x2406a996

08008c7c <__sinit_lock_release>:
 8008c7c:	4801      	ldr	r0, [pc, #4]	; (8008c84 <__sinit_lock_release+0x8>)
 8008c7e:	f000 b8a7 	b.w	8008dd0 <__retarget_lock_release_recursive>
 8008c82:	bf00      	nop
 8008c84:	2406a996 	.word	0x2406a996

08008c88 <__sinit>:
 8008c88:	b510      	push	{r4, lr}
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	f7ff fff0 	bl	8008c70 <__sinit_lock_acquire>
 8008c90:	69a3      	ldr	r3, [r4, #24]
 8008c92:	b11b      	cbz	r3, 8008c9c <__sinit+0x14>
 8008c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c98:	f7ff bff0 	b.w	8008c7c <__sinit_lock_release>
 8008c9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008ca0:	6523      	str	r3, [r4, #80]	; 0x50
 8008ca2:	4b13      	ldr	r3, [pc, #76]	; (8008cf0 <__sinit+0x68>)
 8008ca4:	4a13      	ldr	r2, [pc, #76]	; (8008cf4 <__sinit+0x6c>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008caa:	42a3      	cmp	r3, r4
 8008cac:	bf04      	itt	eq
 8008cae:	2301      	moveq	r3, #1
 8008cb0:	61a3      	streq	r3, [r4, #24]
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f000 f820 	bl	8008cf8 <__sfp>
 8008cb8:	6060      	str	r0, [r4, #4]
 8008cba:	4620      	mov	r0, r4
 8008cbc:	f000 f81c 	bl	8008cf8 <__sfp>
 8008cc0:	60a0      	str	r0, [r4, #8]
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	f000 f818 	bl	8008cf8 <__sfp>
 8008cc8:	2200      	movs	r2, #0
 8008cca:	60e0      	str	r0, [r4, #12]
 8008ccc:	2104      	movs	r1, #4
 8008cce:	6860      	ldr	r0, [r4, #4]
 8008cd0:	f7ff ff82 	bl	8008bd8 <std>
 8008cd4:	68a0      	ldr	r0, [r4, #8]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	2109      	movs	r1, #9
 8008cda:	f7ff ff7d 	bl	8008bd8 <std>
 8008cde:	68e0      	ldr	r0, [r4, #12]
 8008ce0:	2202      	movs	r2, #2
 8008ce2:	2112      	movs	r1, #18
 8008ce4:	f7ff ff78 	bl	8008bd8 <std>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	61a3      	str	r3, [r4, #24]
 8008cec:	e7d2      	b.n	8008c94 <__sinit+0xc>
 8008cee:	bf00      	nop
 8008cf0:	0800a4c4 	.word	0x0800a4c4
 8008cf4:	08008c21 	.word	0x08008c21

08008cf8 <__sfp>:
 8008cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cfa:	4607      	mov	r7, r0
 8008cfc:	f7ff ffac 	bl	8008c58 <__sfp_lock_acquire>
 8008d00:	4b1e      	ldr	r3, [pc, #120]	; (8008d7c <__sfp+0x84>)
 8008d02:	681e      	ldr	r6, [r3, #0]
 8008d04:	69b3      	ldr	r3, [r6, #24]
 8008d06:	b913      	cbnz	r3, 8008d0e <__sfp+0x16>
 8008d08:	4630      	mov	r0, r6
 8008d0a:	f7ff ffbd 	bl	8008c88 <__sinit>
 8008d0e:	3648      	adds	r6, #72	; 0x48
 8008d10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d14:	3b01      	subs	r3, #1
 8008d16:	d503      	bpl.n	8008d20 <__sfp+0x28>
 8008d18:	6833      	ldr	r3, [r6, #0]
 8008d1a:	b30b      	cbz	r3, 8008d60 <__sfp+0x68>
 8008d1c:	6836      	ldr	r6, [r6, #0]
 8008d1e:	e7f7      	b.n	8008d10 <__sfp+0x18>
 8008d20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d24:	b9d5      	cbnz	r5, 8008d5c <__sfp+0x64>
 8008d26:	4b16      	ldr	r3, [pc, #88]	; (8008d80 <__sfp+0x88>)
 8008d28:	60e3      	str	r3, [r4, #12]
 8008d2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d2e:	6665      	str	r5, [r4, #100]	; 0x64
 8008d30:	f000 f84c 	bl	8008dcc <__retarget_lock_init_recursive>
 8008d34:	f7ff ff96 	bl	8008c64 <__sfp_lock_release>
 8008d38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008d3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008d40:	6025      	str	r5, [r4, #0]
 8008d42:	61a5      	str	r5, [r4, #24]
 8008d44:	2208      	movs	r2, #8
 8008d46:	4629      	mov	r1, r5
 8008d48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d4c:	f7fe fac2 	bl	80072d4 <memset>
 8008d50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d58:	4620      	mov	r0, r4
 8008d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d5c:	3468      	adds	r4, #104	; 0x68
 8008d5e:	e7d9      	b.n	8008d14 <__sfp+0x1c>
 8008d60:	2104      	movs	r1, #4
 8008d62:	4638      	mov	r0, r7
 8008d64:	f7ff ff62 	bl	8008c2c <__sfmoreglue>
 8008d68:	4604      	mov	r4, r0
 8008d6a:	6030      	str	r0, [r6, #0]
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	d1d5      	bne.n	8008d1c <__sfp+0x24>
 8008d70:	f7ff ff78 	bl	8008c64 <__sfp_lock_release>
 8008d74:	230c      	movs	r3, #12
 8008d76:	603b      	str	r3, [r7, #0]
 8008d78:	e7ee      	b.n	8008d58 <__sfp+0x60>
 8008d7a:	bf00      	nop
 8008d7c:	0800a4c4 	.word	0x0800a4c4
 8008d80:	ffff0001 	.word	0xffff0001

08008d84 <_fwalk_reent>:
 8008d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d88:	4606      	mov	r6, r0
 8008d8a:	4688      	mov	r8, r1
 8008d8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d90:	2700      	movs	r7, #0
 8008d92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d96:	f1b9 0901 	subs.w	r9, r9, #1
 8008d9a:	d505      	bpl.n	8008da8 <_fwalk_reent+0x24>
 8008d9c:	6824      	ldr	r4, [r4, #0]
 8008d9e:	2c00      	cmp	r4, #0
 8008da0:	d1f7      	bne.n	8008d92 <_fwalk_reent+0xe>
 8008da2:	4638      	mov	r0, r7
 8008da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008da8:	89ab      	ldrh	r3, [r5, #12]
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d907      	bls.n	8008dbe <_fwalk_reent+0x3a>
 8008dae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008db2:	3301      	adds	r3, #1
 8008db4:	d003      	beq.n	8008dbe <_fwalk_reent+0x3a>
 8008db6:	4629      	mov	r1, r5
 8008db8:	4630      	mov	r0, r6
 8008dba:	47c0      	blx	r8
 8008dbc:	4307      	orrs	r7, r0
 8008dbe:	3568      	adds	r5, #104	; 0x68
 8008dc0:	e7e9      	b.n	8008d96 <_fwalk_reent+0x12>
	...

08008dc4 <_localeconv_r>:
 8008dc4:	4800      	ldr	r0, [pc, #0]	; (8008dc8 <_localeconv_r+0x4>)
 8008dc6:	4770      	bx	lr
 8008dc8:	240508f0 	.word	0x240508f0

08008dcc <__retarget_lock_init_recursive>:
 8008dcc:	4770      	bx	lr

08008dce <__retarget_lock_acquire_recursive>:
 8008dce:	4770      	bx	lr

08008dd0 <__retarget_lock_release_recursive>:
 8008dd0:	4770      	bx	lr

08008dd2 <__swhatbuf_r>:
 8008dd2:	b570      	push	{r4, r5, r6, lr}
 8008dd4:	460e      	mov	r6, r1
 8008dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dda:	2900      	cmp	r1, #0
 8008ddc:	b096      	sub	sp, #88	; 0x58
 8008dde:	4614      	mov	r4, r2
 8008de0:	461d      	mov	r5, r3
 8008de2:	da08      	bge.n	8008df6 <__swhatbuf_r+0x24>
 8008de4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008de8:	2200      	movs	r2, #0
 8008dea:	602a      	str	r2, [r5, #0]
 8008dec:	061a      	lsls	r2, r3, #24
 8008dee:	d410      	bmi.n	8008e12 <__swhatbuf_r+0x40>
 8008df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008df4:	e00e      	b.n	8008e14 <__swhatbuf_r+0x42>
 8008df6:	466a      	mov	r2, sp
 8008df8:	f001 f82e 	bl	8009e58 <_fstat_r>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	dbf1      	blt.n	8008de4 <__swhatbuf_r+0x12>
 8008e00:	9a01      	ldr	r2, [sp, #4]
 8008e02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e0a:	425a      	negs	r2, r3
 8008e0c:	415a      	adcs	r2, r3
 8008e0e:	602a      	str	r2, [r5, #0]
 8008e10:	e7ee      	b.n	8008df0 <__swhatbuf_r+0x1e>
 8008e12:	2340      	movs	r3, #64	; 0x40
 8008e14:	2000      	movs	r0, #0
 8008e16:	6023      	str	r3, [r4, #0]
 8008e18:	b016      	add	sp, #88	; 0x58
 8008e1a:	bd70      	pop	{r4, r5, r6, pc}

08008e1c <__smakebuf_r>:
 8008e1c:	898b      	ldrh	r3, [r1, #12]
 8008e1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e20:	079d      	lsls	r5, r3, #30
 8008e22:	4606      	mov	r6, r0
 8008e24:	460c      	mov	r4, r1
 8008e26:	d507      	bpl.n	8008e38 <__smakebuf_r+0x1c>
 8008e28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e2c:	6023      	str	r3, [r4, #0]
 8008e2e:	6123      	str	r3, [r4, #16]
 8008e30:	2301      	movs	r3, #1
 8008e32:	6163      	str	r3, [r4, #20]
 8008e34:	b002      	add	sp, #8
 8008e36:	bd70      	pop	{r4, r5, r6, pc}
 8008e38:	ab01      	add	r3, sp, #4
 8008e3a:	466a      	mov	r2, sp
 8008e3c:	f7ff ffc9 	bl	8008dd2 <__swhatbuf_r>
 8008e40:	9900      	ldr	r1, [sp, #0]
 8008e42:	4605      	mov	r5, r0
 8008e44:	4630      	mov	r0, r6
 8008e46:	f000 fc37 	bl	80096b8 <_malloc_r>
 8008e4a:	b948      	cbnz	r0, 8008e60 <__smakebuf_r+0x44>
 8008e4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e50:	059a      	lsls	r2, r3, #22
 8008e52:	d4ef      	bmi.n	8008e34 <__smakebuf_r+0x18>
 8008e54:	f023 0303 	bic.w	r3, r3, #3
 8008e58:	f043 0302 	orr.w	r3, r3, #2
 8008e5c:	81a3      	strh	r3, [r4, #12]
 8008e5e:	e7e3      	b.n	8008e28 <__smakebuf_r+0xc>
 8008e60:	4b0d      	ldr	r3, [pc, #52]	; (8008e98 <__smakebuf_r+0x7c>)
 8008e62:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e64:	89a3      	ldrh	r3, [r4, #12]
 8008e66:	6020      	str	r0, [r4, #0]
 8008e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e6c:	81a3      	strh	r3, [r4, #12]
 8008e6e:	9b00      	ldr	r3, [sp, #0]
 8008e70:	6163      	str	r3, [r4, #20]
 8008e72:	9b01      	ldr	r3, [sp, #4]
 8008e74:	6120      	str	r0, [r4, #16]
 8008e76:	b15b      	cbz	r3, 8008e90 <__smakebuf_r+0x74>
 8008e78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	f000 fffd 	bl	8009e7c <_isatty_r>
 8008e82:	b128      	cbz	r0, 8008e90 <__smakebuf_r+0x74>
 8008e84:	89a3      	ldrh	r3, [r4, #12]
 8008e86:	f023 0303 	bic.w	r3, r3, #3
 8008e8a:	f043 0301 	orr.w	r3, r3, #1
 8008e8e:	81a3      	strh	r3, [r4, #12]
 8008e90:	89a0      	ldrh	r0, [r4, #12]
 8008e92:	4305      	orrs	r5, r0
 8008e94:	81a5      	strh	r5, [r4, #12]
 8008e96:	e7cd      	b.n	8008e34 <__smakebuf_r+0x18>
 8008e98:	08008c21 	.word	0x08008c21

08008e9c <malloc>:
 8008e9c:	4b02      	ldr	r3, [pc, #8]	; (8008ea8 <malloc+0xc>)
 8008e9e:	4601      	mov	r1, r0
 8008ea0:	6818      	ldr	r0, [r3, #0]
 8008ea2:	f000 bc09 	b.w	80096b8 <_malloc_r>
 8008ea6:	bf00      	nop
 8008ea8:	2405079c 	.word	0x2405079c

08008eac <_Balloc>:
 8008eac:	b570      	push	{r4, r5, r6, lr}
 8008eae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008eb0:	4604      	mov	r4, r0
 8008eb2:	460d      	mov	r5, r1
 8008eb4:	b976      	cbnz	r6, 8008ed4 <_Balloc+0x28>
 8008eb6:	2010      	movs	r0, #16
 8008eb8:	f7ff fff0 	bl	8008e9c <malloc>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	6260      	str	r0, [r4, #36]	; 0x24
 8008ec0:	b920      	cbnz	r0, 8008ecc <_Balloc+0x20>
 8008ec2:	4b18      	ldr	r3, [pc, #96]	; (8008f24 <_Balloc+0x78>)
 8008ec4:	4818      	ldr	r0, [pc, #96]	; (8008f28 <_Balloc+0x7c>)
 8008ec6:	2166      	movs	r1, #102	; 0x66
 8008ec8:	f000 ff86 	bl	8009dd8 <__assert_func>
 8008ecc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ed0:	6006      	str	r6, [r0, #0]
 8008ed2:	60c6      	str	r6, [r0, #12]
 8008ed4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008ed6:	68f3      	ldr	r3, [r6, #12]
 8008ed8:	b183      	cbz	r3, 8008efc <_Balloc+0x50>
 8008eda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ee2:	b9b8      	cbnz	r0, 8008f14 <_Balloc+0x68>
 8008ee4:	2101      	movs	r1, #1
 8008ee6:	fa01 f605 	lsl.w	r6, r1, r5
 8008eea:	1d72      	adds	r2, r6, #5
 8008eec:	0092      	lsls	r2, r2, #2
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f000 fb60 	bl	80095b4 <_calloc_r>
 8008ef4:	b160      	cbz	r0, 8008f10 <_Balloc+0x64>
 8008ef6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008efa:	e00e      	b.n	8008f1a <_Balloc+0x6e>
 8008efc:	2221      	movs	r2, #33	; 0x21
 8008efe:	2104      	movs	r1, #4
 8008f00:	4620      	mov	r0, r4
 8008f02:	f000 fb57 	bl	80095b4 <_calloc_r>
 8008f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f08:	60f0      	str	r0, [r6, #12]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1e4      	bne.n	8008eda <_Balloc+0x2e>
 8008f10:	2000      	movs	r0, #0
 8008f12:	bd70      	pop	{r4, r5, r6, pc}
 8008f14:	6802      	ldr	r2, [r0, #0]
 8008f16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f20:	e7f7      	b.n	8008f12 <_Balloc+0x66>
 8008f22:	bf00      	nop
 8008f24:	0800a509 	.word	0x0800a509
 8008f28:	0800a5ec 	.word	0x0800a5ec

08008f2c <_Bfree>:
 8008f2c:	b570      	push	{r4, r5, r6, lr}
 8008f2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f30:	4605      	mov	r5, r0
 8008f32:	460c      	mov	r4, r1
 8008f34:	b976      	cbnz	r6, 8008f54 <_Bfree+0x28>
 8008f36:	2010      	movs	r0, #16
 8008f38:	f7ff ffb0 	bl	8008e9c <malloc>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	6268      	str	r0, [r5, #36]	; 0x24
 8008f40:	b920      	cbnz	r0, 8008f4c <_Bfree+0x20>
 8008f42:	4b09      	ldr	r3, [pc, #36]	; (8008f68 <_Bfree+0x3c>)
 8008f44:	4809      	ldr	r0, [pc, #36]	; (8008f6c <_Bfree+0x40>)
 8008f46:	218a      	movs	r1, #138	; 0x8a
 8008f48:	f000 ff46 	bl	8009dd8 <__assert_func>
 8008f4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f50:	6006      	str	r6, [r0, #0]
 8008f52:	60c6      	str	r6, [r0, #12]
 8008f54:	b13c      	cbz	r4, 8008f66 <_Bfree+0x3a>
 8008f56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f58:	6862      	ldr	r2, [r4, #4]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f60:	6021      	str	r1, [r4, #0]
 8008f62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f66:	bd70      	pop	{r4, r5, r6, pc}
 8008f68:	0800a509 	.word	0x0800a509
 8008f6c:	0800a5ec 	.word	0x0800a5ec

08008f70 <__multadd>:
 8008f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f74:	690d      	ldr	r5, [r1, #16]
 8008f76:	4607      	mov	r7, r0
 8008f78:	460c      	mov	r4, r1
 8008f7a:	461e      	mov	r6, r3
 8008f7c:	f101 0c14 	add.w	ip, r1, #20
 8008f80:	2000      	movs	r0, #0
 8008f82:	f8dc 3000 	ldr.w	r3, [ip]
 8008f86:	b299      	uxth	r1, r3
 8008f88:	fb02 6101 	mla	r1, r2, r1, r6
 8008f8c:	0c1e      	lsrs	r6, r3, #16
 8008f8e:	0c0b      	lsrs	r3, r1, #16
 8008f90:	fb02 3306 	mla	r3, r2, r6, r3
 8008f94:	b289      	uxth	r1, r1
 8008f96:	3001      	adds	r0, #1
 8008f98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f9c:	4285      	cmp	r5, r0
 8008f9e:	f84c 1b04 	str.w	r1, [ip], #4
 8008fa2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008fa6:	dcec      	bgt.n	8008f82 <__multadd+0x12>
 8008fa8:	b30e      	cbz	r6, 8008fee <__multadd+0x7e>
 8008faa:	68a3      	ldr	r3, [r4, #8]
 8008fac:	42ab      	cmp	r3, r5
 8008fae:	dc19      	bgt.n	8008fe4 <__multadd+0x74>
 8008fb0:	6861      	ldr	r1, [r4, #4]
 8008fb2:	4638      	mov	r0, r7
 8008fb4:	3101      	adds	r1, #1
 8008fb6:	f7ff ff79 	bl	8008eac <_Balloc>
 8008fba:	4680      	mov	r8, r0
 8008fbc:	b928      	cbnz	r0, 8008fca <__multadd+0x5a>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	4b0c      	ldr	r3, [pc, #48]	; (8008ff4 <__multadd+0x84>)
 8008fc2:	480d      	ldr	r0, [pc, #52]	; (8008ff8 <__multadd+0x88>)
 8008fc4:	21b5      	movs	r1, #181	; 0xb5
 8008fc6:	f000 ff07 	bl	8009dd8 <__assert_func>
 8008fca:	6922      	ldr	r2, [r4, #16]
 8008fcc:	3202      	adds	r2, #2
 8008fce:	f104 010c 	add.w	r1, r4, #12
 8008fd2:	0092      	lsls	r2, r2, #2
 8008fd4:	300c      	adds	r0, #12
 8008fd6:	f7fe f96f 	bl	80072b8 <memcpy>
 8008fda:	4621      	mov	r1, r4
 8008fdc:	4638      	mov	r0, r7
 8008fde:	f7ff ffa5 	bl	8008f2c <_Bfree>
 8008fe2:	4644      	mov	r4, r8
 8008fe4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008fe8:	3501      	adds	r5, #1
 8008fea:	615e      	str	r6, [r3, #20]
 8008fec:	6125      	str	r5, [r4, #16]
 8008fee:	4620      	mov	r0, r4
 8008ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ff4:	0800a57b 	.word	0x0800a57b
 8008ff8:	0800a5ec 	.word	0x0800a5ec

08008ffc <__hi0bits>:
 8008ffc:	0c03      	lsrs	r3, r0, #16
 8008ffe:	041b      	lsls	r3, r3, #16
 8009000:	b9d3      	cbnz	r3, 8009038 <__hi0bits+0x3c>
 8009002:	0400      	lsls	r0, r0, #16
 8009004:	2310      	movs	r3, #16
 8009006:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800900a:	bf04      	itt	eq
 800900c:	0200      	lsleq	r0, r0, #8
 800900e:	3308      	addeq	r3, #8
 8009010:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009014:	bf04      	itt	eq
 8009016:	0100      	lsleq	r0, r0, #4
 8009018:	3304      	addeq	r3, #4
 800901a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800901e:	bf04      	itt	eq
 8009020:	0080      	lsleq	r0, r0, #2
 8009022:	3302      	addeq	r3, #2
 8009024:	2800      	cmp	r0, #0
 8009026:	db05      	blt.n	8009034 <__hi0bits+0x38>
 8009028:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800902c:	f103 0301 	add.w	r3, r3, #1
 8009030:	bf08      	it	eq
 8009032:	2320      	moveq	r3, #32
 8009034:	4618      	mov	r0, r3
 8009036:	4770      	bx	lr
 8009038:	2300      	movs	r3, #0
 800903a:	e7e4      	b.n	8009006 <__hi0bits+0xa>

0800903c <__lo0bits>:
 800903c:	6803      	ldr	r3, [r0, #0]
 800903e:	f013 0207 	ands.w	r2, r3, #7
 8009042:	4601      	mov	r1, r0
 8009044:	d00b      	beq.n	800905e <__lo0bits+0x22>
 8009046:	07da      	lsls	r2, r3, #31
 8009048:	d423      	bmi.n	8009092 <__lo0bits+0x56>
 800904a:	0798      	lsls	r0, r3, #30
 800904c:	bf49      	itett	mi
 800904e:	085b      	lsrmi	r3, r3, #1
 8009050:	089b      	lsrpl	r3, r3, #2
 8009052:	2001      	movmi	r0, #1
 8009054:	600b      	strmi	r3, [r1, #0]
 8009056:	bf5c      	itt	pl
 8009058:	600b      	strpl	r3, [r1, #0]
 800905a:	2002      	movpl	r0, #2
 800905c:	4770      	bx	lr
 800905e:	b298      	uxth	r0, r3
 8009060:	b9a8      	cbnz	r0, 800908e <__lo0bits+0x52>
 8009062:	0c1b      	lsrs	r3, r3, #16
 8009064:	2010      	movs	r0, #16
 8009066:	b2da      	uxtb	r2, r3
 8009068:	b90a      	cbnz	r2, 800906e <__lo0bits+0x32>
 800906a:	3008      	adds	r0, #8
 800906c:	0a1b      	lsrs	r3, r3, #8
 800906e:	071a      	lsls	r2, r3, #28
 8009070:	bf04      	itt	eq
 8009072:	091b      	lsreq	r3, r3, #4
 8009074:	3004      	addeq	r0, #4
 8009076:	079a      	lsls	r2, r3, #30
 8009078:	bf04      	itt	eq
 800907a:	089b      	lsreq	r3, r3, #2
 800907c:	3002      	addeq	r0, #2
 800907e:	07da      	lsls	r2, r3, #31
 8009080:	d403      	bmi.n	800908a <__lo0bits+0x4e>
 8009082:	085b      	lsrs	r3, r3, #1
 8009084:	f100 0001 	add.w	r0, r0, #1
 8009088:	d005      	beq.n	8009096 <__lo0bits+0x5a>
 800908a:	600b      	str	r3, [r1, #0]
 800908c:	4770      	bx	lr
 800908e:	4610      	mov	r0, r2
 8009090:	e7e9      	b.n	8009066 <__lo0bits+0x2a>
 8009092:	2000      	movs	r0, #0
 8009094:	4770      	bx	lr
 8009096:	2020      	movs	r0, #32
 8009098:	4770      	bx	lr
	...

0800909c <__i2b>:
 800909c:	b510      	push	{r4, lr}
 800909e:	460c      	mov	r4, r1
 80090a0:	2101      	movs	r1, #1
 80090a2:	f7ff ff03 	bl	8008eac <_Balloc>
 80090a6:	4602      	mov	r2, r0
 80090a8:	b928      	cbnz	r0, 80090b6 <__i2b+0x1a>
 80090aa:	4b05      	ldr	r3, [pc, #20]	; (80090c0 <__i2b+0x24>)
 80090ac:	4805      	ldr	r0, [pc, #20]	; (80090c4 <__i2b+0x28>)
 80090ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80090b2:	f000 fe91 	bl	8009dd8 <__assert_func>
 80090b6:	2301      	movs	r3, #1
 80090b8:	6144      	str	r4, [r0, #20]
 80090ba:	6103      	str	r3, [r0, #16]
 80090bc:	bd10      	pop	{r4, pc}
 80090be:	bf00      	nop
 80090c0:	0800a57b 	.word	0x0800a57b
 80090c4:	0800a5ec 	.word	0x0800a5ec

080090c8 <__multiply>:
 80090c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090cc:	4691      	mov	r9, r2
 80090ce:	690a      	ldr	r2, [r1, #16]
 80090d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	bfb8      	it	lt
 80090d8:	460b      	movlt	r3, r1
 80090da:	460c      	mov	r4, r1
 80090dc:	bfbc      	itt	lt
 80090de:	464c      	movlt	r4, r9
 80090e0:	4699      	movlt	r9, r3
 80090e2:	6927      	ldr	r7, [r4, #16]
 80090e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80090e8:	68a3      	ldr	r3, [r4, #8]
 80090ea:	6861      	ldr	r1, [r4, #4]
 80090ec:	eb07 060a 	add.w	r6, r7, sl
 80090f0:	42b3      	cmp	r3, r6
 80090f2:	b085      	sub	sp, #20
 80090f4:	bfb8      	it	lt
 80090f6:	3101      	addlt	r1, #1
 80090f8:	f7ff fed8 	bl	8008eac <_Balloc>
 80090fc:	b930      	cbnz	r0, 800910c <__multiply+0x44>
 80090fe:	4602      	mov	r2, r0
 8009100:	4b44      	ldr	r3, [pc, #272]	; (8009214 <__multiply+0x14c>)
 8009102:	4845      	ldr	r0, [pc, #276]	; (8009218 <__multiply+0x150>)
 8009104:	f240 115d 	movw	r1, #349	; 0x15d
 8009108:	f000 fe66 	bl	8009dd8 <__assert_func>
 800910c:	f100 0514 	add.w	r5, r0, #20
 8009110:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009114:	462b      	mov	r3, r5
 8009116:	2200      	movs	r2, #0
 8009118:	4543      	cmp	r3, r8
 800911a:	d321      	bcc.n	8009160 <__multiply+0x98>
 800911c:	f104 0314 	add.w	r3, r4, #20
 8009120:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009124:	f109 0314 	add.w	r3, r9, #20
 8009128:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800912c:	9202      	str	r2, [sp, #8]
 800912e:	1b3a      	subs	r2, r7, r4
 8009130:	3a15      	subs	r2, #21
 8009132:	f022 0203 	bic.w	r2, r2, #3
 8009136:	3204      	adds	r2, #4
 8009138:	f104 0115 	add.w	r1, r4, #21
 800913c:	428f      	cmp	r7, r1
 800913e:	bf38      	it	cc
 8009140:	2204      	movcc	r2, #4
 8009142:	9201      	str	r2, [sp, #4]
 8009144:	9a02      	ldr	r2, [sp, #8]
 8009146:	9303      	str	r3, [sp, #12]
 8009148:	429a      	cmp	r2, r3
 800914a:	d80c      	bhi.n	8009166 <__multiply+0x9e>
 800914c:	2e00      	cmp	r6, #0
 800914e:	dd03      	ble.n	8009158 <__multiply+0x90>
 8009150:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009154:	2b00      	cmp	r3, #0
 8009156:	d05a      	beq.n	800920e <__multiply+0x146>
 8009158:	6106      	str	r6, [r0, #16]
 800915a:	b005      	add	sp, #20
 800915c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009160:	f843 2b04 	str.w	r2, [r3], #4
 8009164:	e7d8      	b.n	8009118 <__multiply+0x50>
 8009166:	f8b3 a000 	ldrh.w	sl, [r3]
 800916a:	f1ba 0f00 	cmp.w	sl, #0
 800916e:	d024      	beq.n	80091ba <__multiply+0xf2>
 8009170:	f104 0e14 	add.w	lr, r4, #20
 8009174:	46a9      	mov	r9, r5
 8009176:	f04f 0c00 	mov.w	ip, #0
 800917a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800917e:	f8d9 1000 	ldr.w	r1, [r9]
 8009182:	fa1f fb82 	uxth.w	fp, r2
 8009186:	b289      	uxth	r1, r1
 8009188:	fb0a 110b 	mla	r1, sl, fp, r1
 800918c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009190:	f8d9 2000 	ldr.w	r2, [r9]
 8009194:	4461      	add	r1, ip
 8009196:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800919a:	fb0a c20b 	mla	r2, sl, fp, ip
 800919e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80091a2:	b289      	uxth	r1, r1
 80091a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80091a8:	4577      	cmp	r7, lr
 80091aa:	f849 1b04 	str.w	r1, [r9], #4
 80091ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091b2:	d8e2      	bhi.n	800917a <__multiply+0xb2>
 80091b4:	9a01      	ldr	r2, [sp, #4]
 80091b6:	f845 c002 	str.w	ip, [r5, r2]
 80091ba:	9a03      	ldr	r2, [sp, #12]
 80091bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80091c0:	3304      	adds	r3, #4
 80091c2:	f1b9 0f00 	cmp.w	r9, #0
 80091c6:	d020      	beq.n	800920a <__multiply+0x142>
 80091c8:	6829      	ldr	r1, [r5, #0]
 80091ca:	f104 0c14 	add.w	ip, r4, #20
 80091ce:	46ae      	mov	lr, r5
 80091d0:	f04f 0a00 	mov.w	sl, #0
 80091d4:	f8bc b000 	ldrh.w	fp, [ip]
 80091d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80091dc:	fb09 220b 	mla	r2, r9, fp, r2
 80091e0:	4492      	add	sl, r2
 80091e2:	b289      	uxth	r1, r1
 80091e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80091e8:	f84e 1b04 	str.w	r1, [lr], #4
 80091ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 80091f0:	f8be 1000 	ldrh.w	r1, [lr]
 80091f4:	0c12      	lsrs	r2, r2, #16
 80091f6:	fb09 1102 	mla	r1, r9, r2, r1
 80091fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80091fe:	4567      	cmp	r7, ip
 8009200:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009204:	d8e6      	bhi.n	80091d4 <__multiply+0x10c>
 8009206:	9a01      	ldr	r2, [sp, #4]
 8009208:	50a9      	str	r1, [r5, r2]
 800920a:	3504      	adds	r5, #4
 800920c:	e79a      	b.n	8009144 <__multiply+0x7c>
 800920e:	3e01      	subs	r6, #1
 8009210:	e79c      	b.n	800914c <__multiply+0x84>
 8009212:	bf00      	nop
 8009214:	0800a57b 	.word	0x0800a57b
 8009218:	0800a5ec 	.word	0x0800a5ec

0800921c <__pow5mult>:
 800921c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009220:	4615      	mov	r5, r2
 8009222:	f012 0203 	ands.w	r2, r2, #3
 8009226:	4606      	mov	r6, r0
 8009228:	460f      	mov	r7, r1
 800922a:	d007      	beq.n	800923c <__pow5mult+0x20>
 800922c:	4c25      	ldr	r4, [pc, #148]	; (80092c4 <__pow5mult+0xa8>)
 800922e:	3a01      	subs	r2, #1
 8009230:	2300      	movs	r3, #0
 8009232:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009236:	f7ff fe9b 	bl	8008f70 <__multadd>
 800923a:	4607      	mov	r7, r0
 800923c:	10ad      	asrs	r5, r5, #2
 800923e:	d03d      	beq.n	80092bc <__pow5mult+0xa0>
 8009240:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009242:	b97c      	cbnz	r4, 8009264 <__pow5mult+0x48>
 8009244:	2010      	movs	r0, #16
 8009246:	f7ff fe29 	bl	8008e9c <malloc>
 800924a:	4602      	mov	r2, r0
 800924c:	6270      	str	r0, [r6, #36]	; 0x24
 800924e:	b928      	cbnz	r0, 800925c <__pow5mult+0x40>
 8009250:	4b1d      	ldr	r3, [pc, #116]	; (80092c8 <__pow5mult+0xac>)
 8009252:	481e      	ldr	r0, [pc, #120]	; (80092cc <__pow5mult+0xb0>)
 8009254:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009258:	f000 fdbe 	bl	8009dd8 <__assert_func>
 800925c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009260:	6004      	str	r4, [r0, #0]
 8009262:	60c4      	str	r4, [r0, #12]
 8009264:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009268:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800926c:	b94c      	cbnz	r4, 8009282 <__pow5mult+0x66>
 800926e:	f240 2171 	movw	r1, #625	; 0x271
 8009272:	4630      	mov	r0, r6
 8009274:	f7ff ff12 	bl	800909c <__i2b>
 8009278:	2300      	movs	r3, #0
 800927a:	f8c8 0008 	str.w	r0, [r8, #8]
 800927e:	4604      	mov	r4, r0
 8009280:	6003      	str	r3, [r0, #0]
 8009282:	f04f 0900 	mov.w	r9, #0
 8009286:	07eb      	lsls	r3, r5, #31
 8009288:	d50a      	bpl.n	80092a0 <__pow5mult+0x84>
 800928a:	4639      	mov	r1, r7
 800928c:	4622      	mov	r2, r4
 800928e:	4630      	mov	r0, r6
 8009290:	f7ff ff1a 	bl	80090c8 <__multiply>
 8009294:	4639      	mov	r1, r7
 8009296:	4680      	mov	r8, r0
 8009298:	4630      	mov	r0, r6
 800929a:	f7ff fe47 	bl	8008f2c <_Bfree>
 800929e:	4647      	mov	r7, r8
 80092a0:	106d      	asrs	r5, r5, #1
 80092a2:	d00b      	beq.n	80092bc <__pow5mult+0xa0>
 80092a4:	6820      	ldr	r0, [r4, #0]
 80092a6:	b938      	cbnz	r0, 80092b8 <__pow5mult+0x9c>
 80092a8:	4622      	mov	r2, r4
 80092aa:	4621      	mov	r1, r4
 80092ac:	4630      	mov	r0, r6
 80092ae:	f7ff ff0b 	bl	80090c8 <__multiply>
 80092b2:	6020      	str	r0, [r4, #0]
 80092b4:	f8c0 9000 	str.w	r9, [r0]
 80092b8:	4604      	mov	r4, r0
 80092ba:	e7e4      	b.n	8009286 <__pow5mult+0x6a>
 80092bc:	4638      	mov	r0, r7
 80092be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092c2:	bf00      	nop
 80092c4:	0800a738 	.word	0x0800a738
 80092c8:	0800a509 	.word	0x0800a509
 80092cc:	0800a5ec 	.word	0x0800a5ec

080092d0 <__lshift>:
 80092d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092d4:	460c      	mov	r4, r1
 80092d6:	6849      	ldr	r1, [r1, #4]
 80092d8:	6923      	ldr	r3, [r4, #16]
 80092da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80092de:	68a3      	ldr	r3, [r4, #8]
 80092e0:	4607      	mov	r7, r0
 80092e2:	4691      	mov	r9, r2
 80092e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092e8:	f108 0601 	add.w	r6, r8, #1
 80092ec:	42b3      	cmp	r3, r6
 80092ee:	db0b      	blt.n	8009308 <__lshift+0x38>
 80092f0:	4638      	mov	r0, r7
 80092f2:	f7ff fddb 	bl	8008eac <_Balloc>
 80092f6:	4605      	mov	r5, r0
 80092f8:	b948      	cbnz	r0, 800930e <__lshift+0x3e>
 80092fa:	4602      	mov	r2, r0
 80092fc:	4b2a      	ldr	r3, [pc, #168]	; (80093a8 <__lshift+0xd8>)
 80092fe:	482b      	ldr	r0, [pc, #172]	; (80093ac <__lshift+0xdc>)
 8009300:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009304:	f000 fd68 	bl	8009dd8 <__assert_func>
 8009308:	3101      	adds	r1, #1
 800930a:	005b      	lsls	r3, r3, #1
 800930c:	e7ee      	b.n	80092ec <__lshift+0x1c>
 800930e:	2300      	movs	r3, #0
 8009310:	f100 0114 	add.w	r1, r0, #20
 8009314:	f100 0210 	add.w	r2, r0, #16
 8009318:	4618      	mov	r0, r3
 800931a:	4553      	cmp	r3, sl
 800931c:	db37      	blt.n	800938e <__lshift+0xbe>
 800931e:	6920      	ldr	r0, [r4, #16]
 8009320:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009324:	f104 0314 	add.w	r3, r4, #20
 8009328:	f019 091f 	ands.w	r9, r9, #31
 800932c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009330:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009334:	d02f      	beq.n	8009396 <__lshift+0xc6>
 8009336:	f1c9 0e20 	rsb	lr, r9, #32
 800933a:	468a      	mov	sl, r1
 800933c:	f04f 0c00 	mov.w	ip, #0
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	fa02 f209 	lsl.w	r2, r2, r9
 8009346:	ea42 020c 	orr.w	r2, r2, ip
 800934a:	f84a 2b04 	str.w	r2, [sl], #4
 800934e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009352:	4298      	cmp	r0, r3
 8009354:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009358:	d8f2      	bhi.n	8009340 <__lshift+0x70>
 800935a:	1b03      	subs	r3, r0, r4
 800935c:	3b15      	subs	r3, #21
 800935e:	f023 0303 	bic.w	r3, r3, #3
 8009362:	3304      	adds	r3, #4
 8009364:	f104 0215 	add.w	r2, r4, #21
 8009368:	4290      	cmp	r0, r2
 800936a:	bf38      	it	cc
 800936c:	2304      	movcc	r3, #4
 800936e:	f841 c003 	str.w	ip, [r1, r3]
 8009372:	f1bc 0f00 	cmp.w	ip, #0
 8009376:	d001      	beq.n	800937c <__lshift+0xac>
 8009378:	f108 0602 	add.w	r6, r8, #2
 800937c:	3e01      	subs	r6, #1
 800937e:	4638      	mov	r0, r7
 8009380:	612e      	str	r6, [r5, #16]
 8009382:	4621      	mov	r1, r4
 8009384:	f7ff fdd2 	bl	8008f2c <_Bfree>
 8009388:	4628      	mov	r0, r5
 800938a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800938e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009392:	3301      	adds	r3, #1
 8009394:	e7c1      	b.n	800931a <__lshift+0x4a>
 8009396:	3904      	subs	r1, #4
 8009398:	f853 2b04 	ldr.w	r2, [r3], #4
 800939c:	f841 2f04 	str.w	r2, [r1, #4]!
 80093a0:	4298      	cmp	r0, r3
 80093a2:	d8f9      	bhi.n	8009398 <__lshift+0xc8>
 80093a4:	e7ea      	b.n	800937c <__lshift+0xac>
 80093a6:	bf00      	nop
 80093a8:	0800a57b 	.word	0x0800a57b
 80093ac:	0800a5ec 	.word	0x0800a5ec

080093b0 <__mcmp>:
 80093b0:	b530      	push	{r4, r5, lr}
 80093b2:	6902      	ldr	r2, [r0, #16]
 80093b4:	690c      	ldr	r4, [r1, #16]
 80093b6:	1b12      	subs	r2, r2, r4
 80093b8:	d10e      	bne.n	80093d8 <__mcmp+0x28>
 80093ba:	f100 0314 	add.w	r3, r0, #20
 80093be:	3114      	adds	r1, #20
 80093c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80093c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80093c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80093cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80093d0:	42a5      	cmp	r5, r4
 80093d2:	d003      	beq.n	80093dc <__mcmp+0x2c>
 80093d4:	d305      	bcc.n	80093e2 <__mcmp+0x32>
 80093d6:	2201      	movs	r2, #1
 80093d8:	4610      	mov	r0, r2
 80093da:	bd30      	pop	{r4, r5, pc}
 80093dc:	4283      	cmp	r3, r0
 80093de:	d3f3      	bcc.n	80093c8 <__mcmp+0x18>
 80093e0:	e7fa      	b.n	80093d8 <__mcmp+0x28>
 80093e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093e6:	e7f7      	b.n	80093d8 <__mcmp+0x28>

080093e8 <__mdiff>:
 80093e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ec:	460c      	mov	r4, r1
 80093ee:	4606      	mov	r6, r0
 80093f0:	4611      	mov	r1, r2
 80093f2:	4620      	mov	r0, r4
 80093f4:	4690      	mov	r8, r2
 80093f6:	f7ff ffdb 	bl	80093b0 <__mcmp>
 80093fa:	1e05      	subs	r5, r0, #0
 80093fc:	d110      	bne.n	8009420 <__mdiff+0x38>
 80093fe:	4629      	mov	r1, r5
 8009400:	4630      	mov	r0, r6
 8009402:	f7ff fd53 	bl	8008eac <_Balloc>
 8009406:	b930      	cbnz	r0, 8009416 <__mdiff+0x2e>
 8009408:	4b3a      	ldr	r3, [pc, #232]	; (80094f4 <__mdiff+0x10c>)
 800940a:	4602      	mov	r2, r0
 800940c:	f240 2132 	movw	r1, #562	; 0x232
 8009410:	4839      	ldr	r0, [pc, #228]	; (80094f8 <__mdiff+0x110>)
 8009412:	f000 fce1 	bl	8009dd8 <__assert_func>
 8009416:	2301      	movs	r3, #1
 8009418:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800941c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009420:	bfa4      	itt	ge
 8009422:	4643      	movge	r3, r8
 8009424:	46a0      	movge	r8, r4
 8009426:	4630      	mov	r0, r6
 8009428:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800942c:	bfa6      	itte	ge
 800942e:	461c      	movge	r4, r3
 8009430:	2500      	movge	r5, #0
 8009432:	2501      	movlt	r5, #1
 8009434:	f7ff fd3a 	bl	8008eac <_Balloc>
 8009438:	b920      	cbnz	r0, 8009444 <__mdiff+0x5c>
 800943a:	4b2e      	ldr	r3, [pc, #184]	; (80094f4 <__mdiff+0x10c>)
 800943c:	4602      	mov	r2, r0
 800943e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009442:	e7e5      	b.n	8009410 <__mdiff+0x28>
 8009444:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009448:	6926      	ldr	r6, [r4, #16]
 800944a:	60c5      	str	r5, [r0, #12]
 800944c:	f104 0914 	add.w	r9, r4, #20
 8009450:	f108 0514 	add.w	r5, r8, #20
 8009454:	f100 0e14 	add.w	lr, r0, #20
 8009458:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800945c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009460:	f108 0210 	add.w	r2, r8, #16
 8009464:	46f2      	mov	sl, lr
 8009466:	2100      	movs	r1, #0
 8009468:	f859 3b04 	ldr.w	r3, [r9], #4
 800946c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009470:	fa1f f883 	uxth.w	r8, r3
 8009474:	fa11 f18b 	uxtah	r1, r1, fp
 8009478:	0c1b      	lsrs	r3, r3, #16
 800947a:	eba1 0808 	sub.w	r8, r1, r8
 800947e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009482:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009486:	fa1f f888 	uxth.w	r8, r8
 800948a:	1419      	asrs	r1, r3, #16
 800948c:	454e      	cmp	r6, r9
 800948e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009492:	f84a 3b04 	str.w	r3, [sl], #4
 8009496:	d8e7      	bhi.n	8009468 <__mdiff+0x80>
 8009498:	1b33      	subs	r3, r6, r4
 800949a:	3b15      	subs	r3, #21
 800949c:	f023 0303 	bic.w	r3, r3, #3
 80094a0:	3304      	adds	r3, #4
 80094a2:	3415      	adds	r4, #21
 80094a4:	42a6      	cmp	r6, r4
 80094a6:	bf38      	it	cc
 80094a8:	2304      	movcc	r3, #4
 80094aa:	441d      	add	r5, r3
 80094ac:	4473      	add	r3, lr
 80094ae:	469e      	mov	lr, r3
 80094b0:	462e      	mov	r6, r5
 80094b2:	4566      	cmp	r6, ip
 80094b4:	d30e      	bcc.n	80094d4 <__mdiff+0xec>
 80094b6:	f10c 0203 	add.w	r2, ip, #3
 80094ba:	1b52      	subs	r2, r2, r5
 80094bc:	f022 0203 	bic.w	r2, r2, #3
 80094c0:	3d03      	subs	r5, #3
 80094c2:	45ac      	cmp	ip, r5
 80094c4:	bf38      	it	cc
 80094c6:	2200      	movcc	r2, #0
 80094c8:	441a      	add	r2, r3
 80094ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80094ce:	b17b      	cbz	r3, 80094f0 <__mdiff+0x108>
 80094d0:	6107      	str	r7, [r0, #16]
 80094d2:	e7a3      	b.n	800941c <__mdiff+0x34>
 80094d4:	f856 8b04 	ldr.w	r8, [r6], #4
 80094d8:	fa11 f288 	uxtah	r2, r1, r8
 80094dc:	1414      	asrs	r4, r2, #16
 80094de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80094e2:	b292      	uxth	r2, r2
 80094e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80094e8:	f84e 2b04 	str.w	r2, [lr], #4
 80094ec:	1421      	asrs	r1, r4, #16
 80094ee:	e7e0      	b.n	80094b2 <__mdiff+0xca>
 80094f0:	3f01      	subs	r7, #1
 80094f2:	e7ea      	b.n	80094ca <__mdiff+0xe2>
 80094f4:	0800a57b 	.word	0x0800a57b
 80094f8:	0800a5ec 	.word	0x0800a5ec

080094fc <__d2b>:
 80094fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009500:	4689      	mov	r9, r1
 8009502:	2101      	movs	r1, #1
 8009504:	ec57 6b10 	vmov	r6, r7, d0
 8009508:	4690      	mov	r8, r2
 800950a:	f7ff fccf 	bl	8008eac <_Balloc>
 800950e:	4604      	mov	r4, r0
 8009510:	b930      	cbnz	r0, 8009520 <__d2b+0x24>
 8009512:	4602      	mov	r2, r0
 8009514:	4b25      	ldr	r3, [pc, #148]	; (80095ac <__d2b+0xb0>)
 8009516:	4826      	ldr	r0, [pc, #152]	; (80095b0 <__d2b+0xb4>)
 8009518:	f240 310a 	movw	r1, #778	; 0x30a
 800951c:	f000 fc5c 	bl	8009dd8 <__assert_func>
 8009520:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009524:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009528:	bb35      	cbnz	r5, 8009578 <__d2b+0x7c>
 800952a:	2e00      	cmp	r6, #0
 800952c:	9301      	str	r3, [sp, #4]
 800952e:	d028      	beq.n	8009582 <__d2b+0x86>
 8009530:	4668      	mov	r0, sp
 8009532:	9600      	str	r6, [sp, #0]
 8009534:	f7ff fd82 	bl	800903c <__lo0bits>
 8009538:	9900      	ldr	r1, [sp, #0]
 800953a:	b300      	cbz	r0, 800957e <__d2b+0x82>
 800953c:	9a01      	ldr	r2, [sp, #4]
 800953e:	f1c0 0320 	rsb	r3, r0, #32
 8009542:	fa02 f303 	lsl.w	r3, r2, r3
 8009546:	430b      	orrs	r3, r1
 8009548:	40c2      	lsrs	r2, r0
 800954a:	6163      	str	r3, [r4, #20]
 800954c:	9201      	str	r2, [sp, #4]
 800954e:	9b01      	ldr	r3, [sp, #4]
 8009550:	61a3      	str	r3, [r4, #24]
 8009552:	2b00      	cmp	r3, #0
 8009554:	bf14      	ite	ne
 8009556:	2202      	movne	r2, #2
 8009558:	2201      	moveq	r2, #1
 800955a:	6122      	str	r2, [r4, #16]
 800955c:	b1d5      	cbz	r5, 8009594 <__d2b+0x98>
 800955e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009562:	4405      	add	r5, r0
 8009564:	f8c9 5000 	str.w	r5, [r9]
 8009568:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800956c:	f8c8 0000 	str.w	r0, [r8]
 8009570:	4620      	mov	r0, r4
 8009572:	b003      	add	sp, #12
 8009574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009578:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800957c:	e7d5      	b.n	800952a <__d2b+0x2e>
 800957e:	6161      	str	r1, [r4, #20]
 8009580:	e7e5      	b.n	800954e <__d2b+0x52>
 8009582:	a801      	add	r0, sp, #4
 8009584:	f7ff fd5a 	bl	800903c <__lo0bits>
 8009588:	9b01      	ldr	r3, [sp, #4]
 800958a:	6163      	str	r3, [r4, #20]
 800958c:	2201      	movs	r2, #1
 800958e:	6122      	str	r2, [r4, #16]
 8009590:	3020      	adds	r0, #32
 8009592:	e7e3      	b.n	800955c <__d2b+0x60>
 8009594:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009598:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800959c:	f8c9 0000 	str.w	r0, [r9]
 80095a0:	6918      	ldr	r0, [r3, #16]
 80095a2:	f7ff fd2b 	bl	8008ffc <__hi0bits>
 80095a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80095aa:	e7df      	b.n	800956c <__d2b+0x70>
 80095ac:	0800a57b 	.word	0x0800a57b
 80095b0:	0800a5ec 	.word	0x0800a5ec

080095b4 <_calloc_r>:
 80095b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095b6:	fba1 2402 	umull	r2, r4, r1, r2
 80095ba:	b94c      	cbnz	r4, 80095d0 <_calloc_r+0x1c>
 80095bc:	4611      	mov	r1, r2
 80095be:	9201      	str	r2, [sp, #4]
 80095c0:	f000 f87a 	bl	80096b8 <_malloc_r>
 80095c4:	9a01      	ldr	r2, [sp, #4]
 80095c6:	4605      	mov	r5, r0
 80095c8:	b930      	cbnz	r0, 80095d8 <_calloc_r+0x24>
 80095ca:	4628      	mov	r0, r5
 80095cc:	b003      	add	sp, #12
 80095ce:	bd30      	pop	{r4, r5, pc}
 80095d0:	220c      	movs	r2, #12
 80095d2:	6002      	str	r2, [r0, #0]
 80095d4:	2500      	movs	r5, #0
 80095d6:	e7f8      	b.n	80095ca <_calloc_r+0x16>
 80095d8:	4621      	mov	r1, r4
 80095da:	f7fd fe7b 	bl	80072d4 <memset>
 80095de:	e7f4      	b.n	80095ca <_calloc_r+0x16>

080095e0 <_free_r>:
 80095e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095e2:	2900      	cmp	r1, #0
 80095e4:	d044      	beq.n	8009670 <_free_r+0x90>
 80095e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095ea:	9001      	str	r0, [sp, #4]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f1a1 0404 	sub.w	r4, r1, #4
 80095f2:	bfb8      	it	lt
 80095f4:	18e4      	addlt	r4, r4, r3
 80095f6:	f000 fc8f 	bl	8009f18 <__malloc_lock>
 80095fa:	4a1e      	ldr	r2, [pc, #120]	; (8009674 <_free_r+0x94>)
 80095fc:	9801      	ldr	r0, [sp, #4]
 80095fe:	6813      	ldr	r3, [r2, #0]
 8009600:	b933      	cbnz	r3, 8009610 <_free_r+0x30>
 8009602:	6063      	str	r3, [r4, #4]
 8009604:	6014      	str	r4, [r2, #0]
 8009606:	b003      	add	sp, #12
 8009608:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800960c:	f000 bc8a 	b.w	8009f24 <__malloc_unlock>
 8009610:	42a3      	cmp	r3, r4
 8009612:	d908      	bls.n	8009626 <_free_r+0x46>
 8009614:	6825      	ldr	r5, [r4, #0]
 8009616:	1961      	adds	r1, r4, r5
 8009618:	428b      	cmp	r3, r1
 800961a:	bf01      	itttt	eq
 800961c:	6819      	ldreq	r1, [r3, #0]
 800961e:	685b      	ldreq	r3, [r3, #4]
 8009620:	1949      	addeq	r1, r1, r5
 8009622:	6021      	streq	r1, [r4, #0]
 8009624:	e7ed      	b.n	8009602 <_free_r+0x22>
 8009626:	461a      	mov	r2, r3
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	b10b      	cbz	r3, 8009630 <_free_r+0x50>
 800962c:	42a3      	cmp	r3, r4
 800962e:	d9fa      	bls.n	8009626 <_free_r+0x46>
 8009630:	6811      	ldr	r1, [r2, #0]
 8009632:	1855      	adds	r5, r2, r1
 8009634:	42a5      	cmp	r5, r4
 8009636:	d10b      	bne.n	8009650 <_free_r+0x70>
 8009638:	6824      	ldr	r4, [r4, #0]
 800963a:	4421      	add	r1, r4
 800963c:	1854      	adds	r4, r2, r1
 800963e:	42a3      	cmp	r3, r4
 8009640:	6011      	str	r1, [r2, #0]
 8009642:	d1e0      	bne.n	8009606 <_free_r+0x26>
 8009644:	681c      	ldr	r4, [r3, #0]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	6053      	str	r3, [r2, #4]
 800964a:	4421      	add	r1, r4
 800964c:	6011      	str	r1, [r2, #0]
 800964e:	e7da      	b.n	8009606 <_free_r+0x26>
 8009650:	d902      	bls.n	8009658 <_free_r+0x78>
 8009652:	230c      	movs	r3, #12
 8009654:	6003      	str	r3, [r0, #0]
 8009656:	e7d6      	b.n	8009606 <_free_r+0x26>
 8009658:	6825      	ldr	r5, [r4, #0]
 800965a:	1961      	adds	r1, r4, r5
 800965c:	428b      	cmp	r3, r1
 800965e:	bf04      	itt	eq
 8009660:	6819      	ldreq	r1, [r3, #0]
 8009662:	685b      	ldreq	r3, [r3, #4]
 8009664:	6063      	str	r3, [r4, #4]
 8009666:	bf04      	itt	eq
 8009668:	1949      	addeq	r1, r1, r5
 800966a:	6021      	streq	r1, [r4, #0]
 800966c:	6054      	str	r4, [r2, #4]
 800966e:	e7ca      	b.n	8009606 <_free_r+0x26>
 8009670:	b003      	add	sp, #12
 8009672:	bd30      	pop	{r4, r5, pc}
 8009674:	2406a998 	.word	0x2406a998

08009678 <sbrk_aligned>:
 8009678:	b570      	push	{r4, r5, r6, lr}
 800967a:	4e0e      	ldr	r6, [pc, #56]	; (80096b4 <sbrk_aligned+0x3c>)
 800967c:	460c      	mov	r4, r1
 800967e:	6831      	ldr	r1, [r6, #0]
 8009680:	4605      	mov	r5, r0
 8009682:	b911      	cbnz	r1, 800968a <sbrk_aligned+0x12>
 8009684:	f000 fb42 	bl	8009d0c <_sbrk_r>
 8009688:	6030      	str	r0, [r6, #0]
 800968a:	4621      	mov	r1, r4
 800968c:	4628      	mov	r0, r5
 800968e:	f000 fb3d 	bl	8009d0c <_sbrk_r>
 8009692:	1c43      	adds	r3, r0, #1
 8009694:	d00a      	beq.n	80096ac <sbrk_aligned+0x34>
 8009696:	1cc4      	adds	r4, r0, #3
 8009698:	f024 0403 	bic.w	r4, r4, #3
 800969c:	42a0      	cmp	r0, r4
 800969e:	d007      	beq.n	80096b0 <sbrk_aligned+0x38>
 80096a0:	1a21      	subs	r1, r4, r0
 80096a2:	4628      	mov	r0, r5
 80096a4:	f000 fb32 	bl	8009d0c <_sbrk_r>
 80096a8:	3001      	adds	r0, #1
 80096aa:	d101      	bne.n	80096b0 <sbrk_aligned+0x38>
 80096ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80096b0:	4620      	mov	r0, r4
 80096b2:	bd70      	pop	{r4, r5, r6, pc}
 80096b4:	2406a99c 	.word	0x2406a99c

080096b8 <_malloc_r>:
 80096b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096bc:	1ccd      	adds	r5, r1, #3
 80096be:	f025 0503 	bic.w	r5, r5, #3
 80096c2:	3508      	adds	r5, #8
 80096c4:	2d0c      	cmp	r5, #12
 80096c6:	bf38      	it	cc
 80096c8:	250c      	movcc	r5, #12
 80096ca:	2d00      	cmp	r5, #0
 80096cc:	4607      	mov	r7, r0
 80096ce:	db01      	blt.n	80096d4 <_malloc_r+0x1c>
 80096d0:	42a9      	cmp	r1, r5
 80096d2:	d905      	bls.n	80096e0 <_malloc_r+0x28>
 80096d4:	230c      	movs	r3, #12
 80096d6:	603b      	str	r3, [r7, #0]
 80096d8:	2600      	movs	r6, #0
 80096da:	4630      	mov	r0, r6
 80096dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096e0:	4e2e      	ldr	r6, [pc, #184]	; (800979c <_malloc_r+0xe4>)
 80096e2:	f000 fc19 	bl	8009f18 <__malloc_lock>
 80096e6:	6833      	ldr	r3, [r6, #0]
 80096e8:	461c      	mov	r4, r3
 80096ea:	bb34      	cbnz	r4, 800973a <_malloc_r+0x82>
 80096ec:	4629      	mov	r1, r5
 80096ee:	4638      	mov	r0, r7
 80096f0:	f7ff ffc2 	bl	8009678 <sbrk_aligned>
 80096f4:	1c43      	adds	r3, r0, #1
 80096f6:	4604      	mov	r4, r0
 80096f8:	d14d      	bne.n	8009796 <_malloc_r+0xde>
 80096fa:	6834      	ldr	r4, [r6, #0]
 80096fc:	4626      	mov	r6, r4
 80096fe:	2e00      	cmp	r6, #0
 8009700:	d140      	bne.n	8009784 <_malloc_r+0xcc>
 8009702:	6823      	ldr	r3, [r4, #0]
 8009704:	4631      	mov	r1, r6
 8009706:	4638      	mov	r0, r7
 8009708:	eb04 0803 	add.w	r8, r4, r3
 800970c:	f000 fafe 	bl	8009d0c <_sbrk_r>
 8009710:	4580      	cmp	r8, r0
 8009712:	d13a      	bne.n	800978a <_malloc_r+0xd2>
 8009714:	6821      	ldr	r1, [r4, #0]
 8009716:	3503      	adds	r5, #3
 8009718:	1a6d      	subs	r5, r5, r1
 800971a:	f025 0503 	bic.w	r5, r5, #3
 800971e:	3508      	adds	r5, #8
 8009720:	2d0c      	cmp	r5, #12
 8009722:	bf38      	it	cc
 8009724:	250c      	movcc	r5, #12
 8009726:	4629      	mov	r1, r5
 8009728:	4638      	mov	r0, r7
 800972a:	f7ff ffa5 	bl	8009678 <sbrk_aligned>
 800972e:	3001      	adds	r0, #1
 8009730:	d02b      	beq.n	800978a <_malloc_r+0xd2>
 8009732:	6823      	ldr	r3, [r4, #0]
 8009734:	442b      	add	r3, r5
 8009736:	6023      	str	r3, [r4, #0]
 8009738:	e00e      	b.n	8009758 <_malloc_r+0xa0>
 800973a:	6822      	ldr	r2, [r4, #0]
 800973c:	1b52      	subs	r2, r2, r5
 800973e:	d41e      	bmi.n	800977e <_malloc_r+0xc6>
 8009740:	2a0b      	cmp	r2, #11
 8009742:	d916      	bls.n	8009772 <_malloc_r+0xba>
 8009744:	1961      	adds	r1, r4, r5
 8009746:	42a3      	cmp	r3, r4
 8009748:	6025      	str	r5, [r4, #0]
 800974a:	bf18      	it	ne
 800974c:	6059      	strne	r1, [r3, #4]
 800974e:	6863      	ldr	r3, [r4, #4]
 8009750:	bf08      	it	eq
 8009752:	6031      	streq	r1, [r6, #0]
 8009754:	5162      	str	r2, [r4, r5]
 8009756:	604b      	str	r3, [r1, #4]
 8009758:	4638      	mov	r0, r7
 800975a:	f104 060b 	add.w	r6, r4, #11
 800975e:	f000 fbe1 	bl	8009f24 <__malloc_unlock>
 8009762:	f026 0607 	bic.w	r6, r6, #7
 8009766:	1d23      	adds	r3, r4, #4
 8009768:	1af2      	subs	r2, r6, r3
 800976a:	d0b6      	beq.n	80096da <_malloc_r+0x22>
 800976c:	1b9b      	subs	r3, r3, r6
 800976e:	50a3      	str	r3, [r4, r2]
 8009770:	e7b3      	b.n	80096da <_malloc_r+0x22>
 8009772:	6862      	ldr	r2, [r4, #4]
 8009774:	42a3      	cmp	r3, r4
 8009776:	bf0c      	ite	eq
 8009778:	6032      	streq	r2, [r6, #0]
 800977a:	605a      	strne	r2, [r3, #4]
 800977c:	e7ec      	b.n	8009758 <_malloc_r+0xa0>
 800977e:	4623      	mov	r3, r4
 8009780:	6864      	ldr	r4, [r4, #4]
 8009782:	e7b2      	b.n	80096ea <_malloc_r+0x32>
 8009784:	4634      	mov	r4, r6
 8009786:	6876      	ldr	r6, [r6, #4]
 8009788:	e7b9      	b.n	80096fe <_malloc_r+0x46>
 800978a:	230c      	movs	r3, #12
 800978c:	603b      	str	r3, [r7, #0]
 800978e:	4638      	mov	r0, r7
 8009790:	f000 fbc8 	bl	8009f24 <__malloc_unlock>
 8009794:	e7a1      	b.n	80096da <_malloc_r+0x22>
 8009796:	6025      	str	r5, [r4, #0]
 8009798:	e7de      	b.n	8009758 <_malloc_r+0xa0>
 800979a:	bf00      	nop
 800979c:	2406a998 	.word	0x2406a998

080097a0 <__ssputs_r>:
 80097a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097a4:	688e      	ldr	r6, [r1, #8]
 80097a6:	429e      	cmp	r6, r3
 80097a8:	4682      	mov	sl, r0
 80097aa:	460c      	mov	r4, r1
 80097ac:	4690      	mov	r8, r2
 80097ae:	461f      	mov	r7, r3
 80097b0:	d838      	bhi.n	8009824 <__ssputs_r+0x84>
 80097b2:	898a      	ldrh	r2, [r1, #12]
 80097b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80097b8:	d032      	beq.n	8009820 <__ssputs_r+0x80>
 80097ba:	6825      	ldr	r5, [r4, #0]
 80097bc:	6909      	ldr	r1, [r1, #16]
 80097be:	eba5 0901 	sub.w	r9, r5, r1
 80097c2:	6965      	ldr	r5, [r4, #20]
 80097c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097cc:	3301      	adds	r3, #1
 80097ce:	444b      	add	r3, r9
 80097d0:	106d      	asrs	r5, r5, #1
 80097d2:	429d      	cmp	r5, r3
 80097d4:	bf38      	it	cc
 80097d6:	461d      	movcc	r5, r3
 80097d8:	0553      	lsls	r3, r2, #21
 80097da:	d531      	bpl.n	8009840 <__ssputs_r+0xa0>
 80097dc:	4629      	mov	r1, r5
 80097de:	f7ff ff6b 	bl	80096b8 <_malloc_r>
 80097e2:	4606      	mov	r6, r0
 80097e4:	b950      	cbnz	r0, 80097fc <__ssputs_r+0x5c>
 80097e6:	230c      	movs	r3, #12
 80097e8:	f8ca 3000 	str.w	r3, [sl]
 80097ec:	89a3      	ldrh	r3, [r4, #12]
 80097ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097f2:	81a3      	strh	r3, [r4, #12]
 80097f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097fc:	6921      	ldr	r1, [r4, #16]
 80097fe:	464a      	mov	r2, r9
 8009800:	f7fd fd5a 	bl	80072b8 <memcpy>
 8009804:	89a3      	ldrh	r3, [r4, #12]
 8009806:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800980a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800980e:	81a3      	strh	r3, [r4, #12]
 8009810:	6126      	str	r6, [r4, #16]
 8009812:	6165      	str	r5, [r4, #20]
 8009814:	444e      	add	r6, r9
 8009816:	eba5 0509 	sub.w	r5, r5, r9
 800981a:	6026      	str	r6, [r4, #0]
 800981c:	60a5      	str	r5, [r4, #8]
 800981e:	463e      	mov	r6, r7
 8009820:	42be      	cmp	r6, r7
 8009822:	d900      	bls.n	8009826 <__ssputs_r+0x86>
 8009824:	463e      	mov	r6, r7
 8009826:	6820      	ldr	r0, [r4, #0]
 8009828:	4632      	mov	r2, r6
 800982a:	4641      	mov	r1, r8
 800982c:	f000 fb5a 	bl	8009ee4 <memmove>
 8009830:	68a3      	ldr	r3, [r4, #8]
 8009832:	1b9b      	subs	r3, r3, r6
 8009834:	60a3      	str	r3, [r4, #8]
 8009836:	6823      	ldr	r3, [r4, #0]
 8009838:	4433      	add	r3, r6
 800983a:	6023      	str	r3, [r4, #0]
 800983c:	2000      	movs	r0, #0
 800983e:	e7db      	b.n	80097f8 <__ssputs_r+0x58>
 8009840:	462a      	mov	r2, r5
 8009842:	f000 fb75 	bl	8009f30 <_realloc_r>
 8009846:	4606      	mov	r6, r0
 8009848:	2800      	cmp	r0, #0
 800984a:	d1e1      	bne.n	8009810 <__ssputs_r+0x70>
 800984c:	6921      	ldr	r1, [r4, #16]
 800984e:	4650      	mov	r0, sl
 8009850:	f7ff fec6 	bl	80095e0 <_free_r>
 8009854:	e7c7      	b.n	80097e6 <__ssputs_r+0x46>
	...

08009858 <_svfiprintf_r>:
 8009858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800985c:	4698      	mov	r8, r3
 800985e:	898b      	ldrh	r3, [r1, #12]
 8009860:	061b      	lsls	r3, r3, #24
 8009862:	b09d      	sub	sp, #116	; 0x74
 8009864:	4607      	mov	r7, r0
 8009866:	460d      	mov	r5, r1
 8009868:	4614      	mov	r4, r2
 800986a:	d50e      	bpl.n	800988a <_svfiprintf_r+0x32>
 800986c:	690b      	ldr	r3, [r1, #16]
 800986e:	b963      	cbnz	r3, 800988a <_svfiprintf_r+0x32>
 8009870:	2140      	movs	r1, #64	; 0x40
 8009872:	f7ff ff21 	bl	80096b8 <_malloc_r>
 8009876:	6028      	str	r0, [r5, #0]
 8009878:	6128      	str	r0, [r5, #16]
 800987a:	b920      	cbnz	r0, 8009886 <_svfiprintf_r+0x2e>
 800987c:	230c      	movs	r3, #12
 800987e:	603b      	str	r3, [r7, #0]
 8009880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009884:	e0d1      	b.n	8009a2a <_svfiprintf_r+0x1d2>
 8009886:	2340      	movs	r3, #64	; 0x40
 8009888:	616b      	str	r3, [r5, #20]
 800988a:	2300      	movs	r3, #0
 800988c:	9309      	str	r3, [sp, #36]	; 0x24
 800988e:	2320      	movs	r3, #32
 8009890:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009894:	f8cd 800c 	str.w	r8, [sp, #12]
 8009898:	2330      	movs	r3, #48	; 0x30
 800989a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009a44 <_svfiprintf_r+0x1ec>
 800989e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098a2:	f04f 0901 	mov.w	r9, #1
 80098a6:	4623      	mov	r3, r4
 80098a8:	469a      	mov	sl, r3
 80098aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098ae:	b10a      	cbz	r2, 80098b4 <_svfiprintf_r+0x5c>
 80098b0:	2a25      	cmp	r2, #37	; 0x25
 80098b2:	d1f9      	bne.n	80098a8 <_svfiprintf_r+0x50>
 80098b4:	ebba 0b04 	subs.w	fp, sl, r4
 80098b8:	d00b      	beq.n	80098d2 <_svfiprintf_r+0x7a>
 80098ba:	465b      	mov	r3, fp
 80098bc:	4622      	mov	r2, r4
 80098be:	4629      	mov	r1, r5
 80098c0:	4638      	mov	r0, r7
 80098c2:	f7ff ff6d 	bl	80097a0 <__ssputs_r>
 80098c6:	3001      	adds	r0, #1
 80098c8:	f000 80aa 	beq.w	8009a20 <_svfiprintf_r+0x1c8>
 80098cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098ce:	445a      	add	r2, fp
 80098d0:	9209      	str	r2, [sp, #36]	; 0x24
 80098d2:	f89a 3000 	ldrb.w	r3, [sl]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f000 80a2 	beq.w	8009a20 <_svfiprintf_r+0x1c8>
 80098dc:	2300      	movs	r3, #0
 80098de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098e6:	f10a 0a01 	add.w	sl, sl, #1
 80098ea:	9304      	str	r3, [sp, #16]
 80098ec:	9307      	str	r3, [sp, #28]
 80098ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098f2:	931a      	str	r3, [sp, #104]	; 0x68
 80098f4:	4654      	mov	r4, sl
 80098f6:	2205      	movs	r2, #5
 80098f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098fc:	4851      	ldr	r0, [pc, #324]	; (8009a44 <_svfiprintf_r+0x1ec>)
 80098fe:	f7f6 fd0f 	bl	8000320 <memchr>
 8009902:	9a04      	ldr	r2, [sp, #16]
 8009904:	b9d8      	cbnz	r0, 800993e <_svfiprintf_r+0xe6>
 8009906:	06d0      	lsls	r0, r2, #27
 8009908:	bf44      	itt	mi
 800990a:	2320      	movmi	r3, #32
 800990c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009910:	0711      	lsls	r1, r2, #28
 8009912:	bf44      	itt	mi
 8009914:	232b      	movmi	r3, #43	; 0x2b
 8009916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800991a:	f89a 3000 	ldrb.w	r3, [sl]
 800991e:	2b2a      	cmp	r3, #42	; 0x2a
 8009920:	d015      	beq.n	800994e <_svfiprintf_r+0xf6>
 8009922:	9a07      	ldr	r2, [sp, #28]
 8009924:	4654      	mov	r4, sl
 8009926:	2000      	movs	r0, #0
 8009928:	f04f 0c0a 	mov.w	ip, #10
 800992c:	4621      	mov	r1, r4
 800992e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009932:	3b30      	subs	r3, #48	; 0x30
 8009934:	2b09      	cmp	r3, #9
 8009936:	d94e      	bls.n	80099d6 <_svfiprintf_r+0x17e>
 8009938:	b1b0      	cbz	r0, 8009968 <_svfiprintf_r+0x110>
 800993a:	9207      	str	r2, [sp, #28]
 800993c:	e014      	b.n	8009968 <_svfiprintf_r+0x110>
 800993e:	eba0 0308 	sub.w	r3, r0, r8
 8009942:	fa09 f303 	lsl.w	r3, r9, r3
 8009946:	4313      	orrs	r3, r2
 8009948:	9304      	str	r3, [sp, #16]
 800994a:	46a2      	mov	sl, r4
 800994c:	e7d2      	b.n	80098f4 <_svfiprintf_r+0x9c>
 800994e:	9b03      	ldr	r3, [sp, #12]
 8009950:	1d19      	adds	r1, r3, #4
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	9103      	str	r1, [sp, #12]
 8009956:	2b00      	cmp	r3, #0
 8009958:	bfbb      	ittet	lt
 800995a:	425b      	neglt	r3, r3
 800995c:	f042 0202 	orrlt.w	r2, r2, #2
 8009960:	9307      	strge	r3, [sp, #28]
 8009962:	9307      	strlt	r3, [sp, #28]
 8009964:	bfb8      	it	lt
 8009966:	9204      	strlt	r2, [sp, #16]
 8009968:	7823      	ldrb	r3, [r4, #0]
 800996a:	2b2e      	cmp	r3, #46	; 0x2e
 800996c:	d10c      	bne.n	8009988 <_svfiprintf_r+0x130>
 800996e:	7863      	ldrb	r3, [r4, #1]
 8009970:	2b2a      	cmp	r3, #42	; 0x2a
 8009972:	d135      	bne.n	80099e0 <_svfiprintf_r+0x188>
 8009974:	9b03      	ldr	r3, [sp, #12]
 8009976:	1d1a      	adds	r2, r3, #4
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	9203      	str	r2, [sp, #12]
 800997c:	2b00      	cmp	r3, #0
 800997e:	bfb8      	it	lt
 8009980:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009984:	3402      	adds	r4, #2
 8009986:	9305      	str	r3, [sp, #20]
 8009988:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009a54 <_svfiprintf_r+0x1fc>
 800998c:	7821      	ldrb	r1, [r4, #0]
 800998e:	2203      	movs	r2, #3
 8009990:	4650      	mov	r0, sl
 8009992:	f7f6 fcc5 	bl	8000320 <memchr>
 8009996:	b140      	cbz	r0, 80099aa <_svfiprintf_r+0x152>
 8009998:	2340      	movs	r3, #64	; 0x40
 800999a:	eba0 000a 	sub.w	r0, r0, sl
 800999e:	fa03 f000 	lsl.w	r0, r3, r0
 80099a2:	9b04      	ldr	r3, [sp, #16]
 80099a4:	4303      	orrs	r3, r0
 80099a6:	3401      	adds	r4, #1
 80099a8:	9304      	str	r3, [sp, #16]
 80099aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099ae:	4826      	ldr	r0, [pc, #152]	; (8009a48 <_svfiprintf_r+0x1f0>)
 80099b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099b4:	2206      	movs	r2, #6
 80099b6:	f7f6 fcb3 	bl	8000320 <memchr>
 80099ba:	2800      	cmp	r0, #0
 80099bc:	d038      	beq.n	8009a30 <_svfiprintf_r+0x1d8>
 80099be:	4b23      	ldr	r3, [pc, #140]	; (8009a4c <_svfiprintf_r+0x1f4>)
 80099c0:	bb1b      	cbnz	r3, 8009a0a <_svfiprintf_r+0x1b2>
 80099c2:	9b03      	ldr	r3, [sp, #12]
 80099c4:	3307      	adds	r3, #7
 80099c6:	f023 0307 	bic.w	r3, r3, #7
 80099ca:	3308      	adds	r3, #8
 80099cc:	9303      	str	r3, [sp, #12]
 80099ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099d0:	4433      	add	r3, r6
 80099d2:	9309      	str	r3, [sp, #36]	; 0x24
 80099d4:	e767      	b.n	80098a6 <_svfiprintf_r+0x4e>
 80099d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80099da:	460c      	mov	r4, r1
 80099dc:	2001      	movs	r0, #1
 80099de:	e7a5      	b.n	800992c <_svfiprintf_r+0xd4>
 80099e0:	2300      	movs	r3, #0
 80099e2:	3401      	adds	r4, #1
 80099e4:	9305      	str	r3, [sp, #20]
 80099e6:	4619      	mov	r1, r3
 80099e8:	f04f 0c0a 	mov.w	ip, #10
 80099ec:	4620      	mov	r0, r4
 80099ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099f2:	3a30      	subs	r2, #48	; 0x30
 80099f4:	2a09      	cmp	r2, #9
 80099f6:	d903      	bls.n	8009a00 <_svfiprintf_r+0x1a8>
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d0c5      	beq.n	8009988 <_svfiprintf_r+0x130>
 80099fc:	9105      	str	r1, [sp, #20]
 80099fe:	e7c3      	b.n	8009988 <_svfiprintf_r+0x130>
 8009a00:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a04:	4604      	mov	r4, r0
 8009a06:	2301      	movs	r3, #1
 8009a08:	e7f0      	b.n	80099ec <_svfiprintf_r+0x194>
 8009a0a:	ab03      	add	r3, sp, #12
 8009a0c:	9300      	str	r3, [sp, #0]
 8009a0e:	462a      	mov	r2, r5
 8009a10:	4b0f      	ldr	r3, [pc, #60]	; (8009a50 <_svfiprintf_r+0x1f8>)
 8009a12:	a904      	add	r1, sp, #16
 8009a14:	4638      	mov	r0, r7
 8009a16:	f7fd fcf7 	bl	8007408 <_printf_float>
 8009a1a:	1c42      	adds	r2, r0, #1
 8009a1c:	4606      	mov	r6, r0
 8009a1e:	d1d6      	bne.n	80099ce <_svfiprintf_r+0x176>
 8009a20:	89ab      	ldrh	r3, [r5, #12]
 8009a22:	065b      	lsls	r3, r3, #25
 8009a24:	f53f af2c 	bmi.w	8009880 <_svfiprintf_r+0x28>
 8009a28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a2a:	b01d      	add	sp, #116	; 0x74
 8009a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a30:	ab03      	add	r3, sp, #12
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	462a      	mov	r2, r5
 8009a36:	4b06      	ldr	r3, [pc, #24]	; (8009a50 <_svfiprintf_r+0x1f8>)
 8009a38:	a904      	add	r1, sp, #16
 8009a3a:	4638      	mov	r0, r7
 8009a3c:	f7fd ff70 	bl	8007920 <_printf_i>
 8009a40:	e7eb      	b.n	8009a1a <_svfiprintf_r+0x1c2>
 8009a42:	bf00      	nop
 8009a44:	0800a744 	.word	0x0800a744
 8009a48:	0800a74e 	.word	0x0800a74e
 8009a4c:	08007409 	.word	0x08007409
 8009a50:	080097a1 	.word	0x080097a1
 8009a54:	0800a74a 	.word	0x0800a74a

08009a58 <__sfputc_r>:
 8009a58:	6893      	ldr	r3, [r2, #8]
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	b410      	push	{r4}
 8009a60:	6093      	str	r3, [r2, #8]
 8009a62:	da08      	bge.n	8009a76 <__sfputc_r+0x1e>
 8009a64:	6994      	ldr	r4, [r2, #24]
 8009a66:	42a3      	cmp	r3, r4
 8009a68:	db01      	blt.n	8009a6e <__sfputc_r+0x16>
 8009a6a:	290a      	cmp	r1, #10
 8009a6c:	d103      	bne.n	8009a76 <__sfputc_r+0x1e>
 8009a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a72:	f7fe b933 	b.w	8007cdc <__swbuf_r>
 8009a76:	6813      	ldr	r3, [r2, #0]
 8009a78:	1c58      	adds	r0, r3, #1
 8009a7a:	6010      	str	r0, [r2, #0]
 8009a7c:	7019      	strb	r1, [r3, #0]
 8009a7e:	4608      	mov	r0, r1
 8009a80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a84:	4770      	bx	lr

08009a86 <__sfputs_r>:
 8009a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a88:	4606      	mov	r6, r0
 8009a8a:	460f      	mov	r7, r1
 8009a8c:	4614      	mov	r4, r2
 8009a8e:	18d5      	adds	r5, r2, r3
 8009a90:	42ac      	cmp	r4, r5
 8009a92:	d101      	bne.n	8009a98 <__sfputs_r+0x12>
 8009a94:	2000      	movs	r0, #0
 8009a96:	e007      	b.n	8009aa8 <__sfputs_r+0x22>
 8009a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a9c:	463a      	mov	r2, r7
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	f7ff ffda 	bl	8009a58 <__sfputc_r>
 8009aa4:	1c43      	adds	r3, r0, #1
 8009aa6:	d1f3      	bne.n	8009a90 <__sfputs_r+0xa>
 8009aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009aac <_vfiprintf_r>:
 8009aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab0:	460d      	mov	r5, r1
 8009ab2:	b09d      	sub	sp, #116	; 0x74
 8009ab4:	4614      	mov	r4, r2
 8009ab6:	4698      	mov	r8, r3
 8009ab8:	4606      	mov	r6, r0
 8009aba:	b118      	cbz	r0, 8009ac4 <_vfiprintf_r+0x18>
 8009abc:	6983      	ldr	r3, [r0, #24]
 8009abe:	b90b      	cbnz	r3, 8009ac4 <_vfiprintf_r+0x18>
 8009ac0:	f7ff f8e2 	bl	8008c88 <__sinit>
 8009ac4:	4b89      	ldr	r3, [pc, #548]	; (8009cec <_vfiprintf_r+0x240>)
 8009ac6:	429d      	cmp	r5, r3
 8009ac8:	d11b      	bne.n	8009b02 <_vfiprintf_r+0x56>
 8009aca:	6875      	ldr	r5, [r6, #4]
 8009acc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ace:	07d9      	lsls	r1, r3, #31
 8009ad0:	d405      	bmi.n	8009ade <_vfiprintf_r+0x32>
 8009ad2:	89ab      	ldrh	r3, [r5, #12]
 8009ad4:	059a      	lsls	r2, r3, #22
 8009ad6:	d402      	bmi.n	8009ade <_vfiprintf_r+0x32>
 8009ad8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ada:	f7ff f978 	bl	8008dce <__retarget_lock_acquire_recursive>
 8009ade:	89ab      	ldrh	r3, [r5, #12]
 8009ae0:	071b      	lsls	r3, r3, #28
 8009ae2:	d501      	bpl.n	8009ae8 <_vfiprintf_r+0x3c>
 8009ae4:	692b      	ldr	r3, [r5, #16]
 8009ae6:	b9eb      	cbnz	r3, 8009b24 <_vfiprintf_r+0x78>
 8009ae8:	4629      	mov	r1, r5
 8009aea:	4630      	mov	r0, r6
 8009aec:	f7fe f948 	bl	8007d80 <__swsetup_r>
 8009af0:	b1c0      	cbz	r0, 8009b24 <_vfiprintf_r+0x78>
 8009af2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009af4:	07dc      	lsls	r4, r3, #31
 8009af6:	d50e      	bpl.n	8009b16 <_vfiprintf_r+0x6a>
 8009af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009afc:	b01d      	add	sp, #116	; 0x74
 8009afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b02:	4b7b      	ldr	r3, [pc, #492]	; (8009cf0 <_vfiprintf_r+0x244>)
 8009b04:	429d      	cmp	r5, r3
 8009b06:	d101      	bne.n	8009b0c <_vfiprintf_r+0x60>
 8009b08:	68b5      	ldr	r5, [r6, #8]
 8009b0a:	e7df      	b.n	8009acc <_vfiprintf_r+0x20>
 8009b0c:	4b79      	ldr	r3, [pc, #484]	; (8009cf4 <_vfiprintf_r+0x248>)
 8009b0e:	429d      	cmp	r5, r3
 8009b10:	bf08      	it	eq
 8009b12:	68f5      	ldreq	r5, [r6, #12]
 8009b14:	e7da      	b.n	8009acc <_vfiprintf_r+0x20>
 8009b16:	89ab      	ldrh	r3, [r5, #12]
 8009b18:	0598      	lsls	r0, r3, #22
 8009b1a:	d4ed      	bmi.n	8009af8 <_vfiprintf_r+0x4c>
 8009b1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b1e:	f7ff f957 	bl	8008dd0 <__retarget_lock_release_recursive>
 8009b22:	e7e9      	b.n	8009af8 <_vfiprintf_r+0x4c>
 8009b24:	2300      	movs	r3, #0
 8009b26:	9309      	str	r3, [sp, #36]	; 0x24
 8009b28:	2320      	movs	r3, #32
 8009b2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b32:	2330      	movs	r3, #48	; 0x30
 8009b34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009cf8 <_vfiprintf_r+0x24c>
 8009b38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b3c:	f04f 0901 	mov.w	r9, #1
 8009b40:	4623      	mov	r3, r4
 8009b42:	469a      	mov	sl, r3
 8009b44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b48:	b10a      	cbz	r2, 8009b4e <_vfiprintf_r+0xa2>
 8009b4a:	2a25      	cmp	r2, #37	; 0x25
 8009b4c:	d1f9      	bne.n	8009b42 <_vfiprintf_r+0x96>
 8009b4e:	ebba 0b04 	subs.w	fp, sl, r4
 8009b52:	d00b      	beq.n	8009b6c <_vfiprintf_r+0xc0>
 8009b54:	465b      	mov	r3, fp
 8009b56:	4622      	mov	r2, r4
 8009b58:	4629      	mov	r1, r5
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	f7ff ff93 	bl	8009a86 <__sfputs_r>
 8009b60:	3001      	adds	r0, #1
 8009b62:	f000 80aa 	beq.w	8009cba <_vfiprintf_r+0x20e>
 8009b66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b68:	445a      	add	r2, fp
 8009b6a:	9209      	str	r2, [sp, #36]	; 0x24
 8009b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	f000 80a2 	beq.w	8009cba <_vfiprintf_r+0x20e>
 8009b76:	2300      	movs	r3, #0
 8009b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b80:	f10a 0a01 	add.w	sl, sl, #1
 8009b84:	9304      	str	r3, [sp, #16]
 8009b86:	9307      	str	r3, [sp, #28]
 8009b88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b8c:	931a      	str	r3, [sp, #104]	; 0x68
 8009b8e:	4654      	mov	r4, sl
 8009b90:	2205      	movs	r2, #5
 8009b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b96:	4858      	ldr	r0, [pc, #352]	; (8009cf8 <_vfiprintf_r+0x24c>)
 8009b98:	f7f6 fbc2 	bl	8000320 <memchr>
 8009b9c:	9a04      	ldr	r2, [sp, #16]
 8009b9e:	b9d8      	cbnz	r0, 8009bd8 <_vfiprintf_r+0x12c>
 8009ba0:	06d1      	lsls	r1, r2, #27
 8009ba2:	bf44      	itt	mi
 8009ba4:	2320      	movmi	r3, #32
 8009ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009baa:	0713      	lsls	r3, r2, #28
 8009bac:	bf44      	itt	mi
 8009bae:	232b      	movmi	r3, #43	; 0x2b
 8009bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8009bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8009bba:	d015      	beq.n	8009be8 <_vfiprintf_r+0x13c>
 8009bbc:	9a07      	ldr	r2, [sp, #28]
 8009bbe:	4654      	mov	r4, sl
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	f04f 0c0a 	mov.w	ip, #10
 8009bc6:	4621      	mov	r1, r4
 8009bc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bcc:	3b30      	subs	r3, #48	; 0x30
 8009bce:	2b09      	cmp	r3, #9
 8009bd0:	d94e      	bls.n	8009c70 <_vfiprintf_r+0x1c4>
 8009bd2:	b1b0      	cbz	r0, 8009c02 <_vfiprintf_r+0x156>
 8009bd4:	9207      	str	r2, [sp, #28]
 8009bd6:	e014      	b.n	8009c02 <_vfiprintf_r+0x156>
 8009bd8:	eba0 0308 	sub.w	r3, r0, r8
 8009bdc:	fa09 f303 	lsl.w	r3, r9, r3
 8009be0:	4313      	orrs	r3, r2
 8009be2:	9304      	str	r3, [sp, #16]
 8009be4:	46a2      	mov	sl, r4
 8009be6:	e7d2      	b.n	8009b8e <_vfiprintf_r+0xe2>
 8009be8:	9b03      	ldr	r3, [sp, #12]
 8009bea:	1d19      	adds	r1, r3, #4
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	9103      	str	r1, [sp, #12]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	bfbb      	ittet	lt
 8009bf4:	425b      	neglt	r3, r3
 8009bf6:	f042 0202 	orrlt.w	r2, r2, #2
 8009bfa:	9307      	strge	r3, [sp, #28]
 8009bfc:	9307      	strlt	r3, [sp, #28]
 8009bfe:	bfb8      	it	lt
 8009c00:	9204      	strlt	r2, [sp, #16]
 8009c02:	7823      	ldrb	r3, [r4, #0]
 8009c04:	2b2e      	cmp	r3, #46	; 0x2e
 8009c06:	d10c      	bne.n	8009c22 <_vfiprintf_r+0x176>
 8009c08:	7863      	ldrb	r3, [r4, #1]
 8009c0a:	2b2a      	cmp	r3, #42	; 0x2a
 8009c0c:	d135      	bne.n	8009c7a <_vfiprintf_r+0x1ce>
 8009c0e:	9b03      	ldr	r3, [sp, #12]
 8009c10:	1d1a      	adds	r2, r3, #4
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	9203      	str	r2, [sp, #12]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	bfb8      	it	lt
 8009c1a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009c1e:	3402      	adds	r4, #2
 8009c20:	9305      	str	r3, [sp, #20]
 8009c22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009d08 <_vfiprintf_r+0x25c>
 8009c26:	7821      	ldrb	r1, [r4, #0]
 8009c28:	2203      	movs	r2, #3
 8009c2a:	4650      	mov	r0, sl
 8009c2c:	f7f6 fb78 	bl	8000320 <memchr>
 8009c30:	b140      	cbz	r0, 8009c44 <_vfiprintf_r+0x198>
 8009c32:	2340      	movs	r3, #64	; 0x40
 8009c34:	eba0 000a 	sub.w	r0, r0, sl
 8009c38:	fa03 f000 	lsl.w	r0, r3, r0
 8009c3c:	9b04      	ldr	r3, [sp, #16]
 8009c3e:	4303      	orrs	r3, r0
 8009c40:	3401      	adds	r4, #1
 8009c42:	9304      	str	r3, [sp, #16]
 8009c44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c48:	482c      	ldr	r0, [pc, #176]	; (8009cfc <_vfiprintf_r+0x250>)
 8009c4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c4e:	2206      	movs	r2, #6
 8009c50:	f7f6 fb66 	bl	8000320 <memchr>
 8009c54:	2800      	cmp	r0, #0
 8009c56:	d03f      	beq.n	8009cd8 <_vfiprintf_r+0x22c>
 8009c58:	4b29      	ldr	r3, [pc, #164]	; (8009d00 <_vfiprintf_r+0x254>)
 8009c5a:	bb1b      	cbnz	r3, 8009ca4 <_vfiprintf_r+0x1f8>
 8009c5c:	9b03      	ldr	r3, [sp, #12]
 8009c5e:	3307      	adds	r3, #7
 8009c60:	f023 0307 	bic.w	r3, r3, #7
 8009c64:	3308      	adds	r3, #8
 8009c66:	9303      	str	r3, [sp, #12]
 8009c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c6a:	443b      	add	r3, r7
 8009c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c6e:	e767      	b.n	8009b40 <_vfiprintf_r+0x94>
 8009c70:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c74:	460c      	mov	r4, r1
 8009c76:	2001      	movs	r0, #1
 8009c78:	e7a5      	b.n	8009bc6 <_vfiprintf_r+0x11a>
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	3401      	adds	r4, #1
 8009c7e:	9305      	str	r3, [sp, #20]
 8009c80:	4619      	mov	r1, r3
 8009c82:	f04f 0c0a 	mov.w	ip, #10
 8009c86:	4620      	mov	r0, r4
 8009c88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c8c:	3a30      	subs	r2, #48	; 0x30
 8009c8e:	2a09      	cmp	r2, #9
 8009c90:	d903      	bls.n	8009c9a <_vfiprintf_r+0x1ee>
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d0c5      	beq.n	8009c22 <_vfiprintf_r+0x176>
 8009c96:	9105      	str	r1, [sp, #20]
 8009c98:	e7c3      	b.n	8009c22 <_vfiprintf_r+0x176>
 8009c9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e7f0      	b.n	8009c86 <_vfiprintf_r+0x1da>
 8009ca4:	ab03      	add	r3, sp, #12
 8009ca6:	9300      	str	r3, [sp, #0]
 8009ca8:	462a      	mov	r2, r5
 8009caa:	4b16      	ldr	r3, [pc, #88]	; (8009d04 <_vfiprintf_r+0x258>)
 8009cac:	a904      	add	r1, sp, #16
 8009cae:	4630      	mov	r0, r6
 8009cb0:	f7fd fbaa 	bl	8007408 <_printf_float>
 8009cb4:	4607      	mov	r7, r0
 8009cb6:	1c78      	adds	r0, r7, #1
 8009cb8:	d1d6      	bne.n	8009c68 <_vfiprintf_r+0x1bc>
 8009cba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cbc:	07d9      	lsls	r1, r3, #31
 8009cbe:	d405      	bmi.n	8009ccc <_vfiprintf_r+0x220>
 8009cc0:	89ab      	ldrh	r3, [r5, #12]
 8009cc2:	059a      	lsls	r2, r3, #22
 8009cc4:	d402      	bmi.n	8009ccc <_vfiprintf_r+0x220>
 8009cc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cc8:	f7ff f882 	bl	8008dd0 <__retarget_lock_release_recursive>
 8009ccc:	89ab      	ldrh	r3, [r5, #12]
 8009cce:	065b      	lsls	r3, r3, #25
 8009cd0:	f53f af12 	bmi.w	8009af8 <_vfiprintf_r+0x4c>
 8009cd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cd6:	e711      	b.n	8009afc <_vfiprintf_r+0x50>
 8009cd8:	ab03      	add	r3, sp, #12
 8009cda:	9300      	str	r3, [sp, #0]
 8009cdc:	462a      	mov	r2, r5
 8009cde:	4b09      	ldr	r3, [pc, #36]	; (8009d04 <_vfiprintf_r+0x258>)
 8009ce0:	a904      	add	r1, sp, #16
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	f7fd fe1c 	bl	8007920 <_printf_i>
 8009ce8:	e7e4      	b.n	8009cb4 <_vfiprintf_r+0x208>
 8009cea:	bf00      	nop
 8009cec:	0800a5ac 	.word	0x0800a5ac
 8009cf0:	0800a5cc 	.word	0x0800a5cc
 8009cf4:	0800a58c 	.word	0x0800a58c
 8009cf8:	0800a744 	.word	0x0800a744
 8009cfc:	0800a74e 	.word	0x0800a74e
 8009d00:	08007409 	.word	0x08007409
 8009d04:	08009a87 	.word	0x08009a87
 8009d08:	0800a74a 	.word	0x0800a74a

08009d0c <_sbrk_r>:
 8009d0c:	b538      	push	{r3, r4, r5, lr}
 8009d0e:	4d06      	ldr	r5, [pc, #24]	; (8009d28 <_sbrk_r+0x1c>)
 8009d10:	2300      	movs	r3, #0
 8009d12:	4604      	mov	r4, r0
 8009d14:	4608      	mov	r0, r1
 8009d16:	602b      	str	r3, [r5, #0]
 8009d18:	f7f6 ffd4 	bl	8000cc4 <_sbrk>
 8009d1c:	1c43      	adds	r3, r0, #1
 8009d1e:	d102      	bne.n	8009d26 <_sbrk_r+0x1a>
 8009d20:	682b      	ldr	r3, [r5, #0]
 8009d22:	b103      	cbz	r3, 8009d26 <_sbrk_r+0x1a>
 8009d24:	6023      	str	r3, [r4, #0]
 8009d26:	bd38      	pop	{r3, r4, r5, pc}
 8009d28:	2406a9a0 	.word	0x2406a9a0

08009d2c <__sread>:
 8009d2c:	b510      	push	{r4, lr}
 8009d2e:	460c      	mov	r4, r1
 8009d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d34:	f000 f92c 	bl	8009f90 <_read_r>
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	bfab      	itete	ge
 8009d3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d3e:	89a3      	ldrhlt	r3, [r4, #12]
 8009d40:	181b      	addge	r3, r3, r0
 8009d42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d46:	bfac      	ite	ge
 8009d48:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d4a:	81a3      	strhlt	r3, [r4, #12]
 8009d4c:	bd10      	pop	{r4, pc}

08009d4e <__swrite>:
 8009d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d52:	461f      	mov	r7, r3
 8009d54:	898b      	ldrh	r3, [r1, #12]
 8009d56:	05db      	lsls	r3, r3, #23
 8009d58:	4605      	mov	r5, r0
 8009d5a:	460c      	mov	r4, r1
 8009d5c:	4616      	mov	r6, r2
 8009d5e:	d505      	bpl.n	8009d6c <__swrite+0x1e>
 8009d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d64:	2302      	movs	r3, #2
 8009d66:	2200      	movs	r2, #0
 8009d68:	f000 f898 	bl	8009e9c <_lseek_r>
 8009d6c:	89a3      	ldrh	r3, [r4, #12]
 8009d6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d76:	81a3      	strh	r3, [r4, #12]
 8009d78:	4632      	mov	r2, r6
 8009d7a:	463b      	mov	r3, r7
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d82:	f000 b817 	b.w	8009db4 <_write_r>

08009d86 <__sseek>:
 8009d86:	b510      	push	{r4, lr}
 8009d88:	460c      	mov	r4, r1
 8009d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d8e:	f000 f885 	bl	8009e9c <_lseek_r>
 8009d92:	1c43      	adds	r3, r0, #1
 8009d94:	89a3      	ldrh	r3, [r4, #12]
 8009d96:	bf15      	itete	ne
 8009d98:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009da2:	81a3      	strheq	r3, [r4, #12]
 8009da4:	bf18      	it	ne
 8009da6:	81a3      	strhne	r3, [r4, #12]
 8009da8:	bd10      	pop	{r4, pc}

08009daa <__sclose>:
 8009daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dae:	f000 b831 	b.w	8009e14 <_close_r>
	...

08009db4 <_write_r>:
 8009db4:	b538      	push	{r3, r4, r5, lr}
 8009db6:	4d07      	ldr	r5, [pc, #28]	; (8009dd4 <_write_r+0x20>)
 8009db8:	4604      	mov	r4, r0
 8009dba:	4608      	mov	r0, r1
 8009dbc:	4611      	mov	r1, r2
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	602a      	str	r2, [r5, #0]
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	f7f6 fca6 	bl	8000714 <_write>
 8009dc8:	1c43      	adds	r3, r0, #1
 8009dca:	d102      	bne.n	8009dd2 <_write_r+0x1e>
 8009dcc:	682b      	ldr	r3, [r5, #0]
 8009dce:	b103      	cbz	r3, 8009dd2 <_write_r+0x1e>
 8009dd0:	6023      	str	r3, [r4, #0]
 8009dd2:	bd38      	pop	{r3, r4, r5, pc}
 8009dd4:	2406a9a0 	.word	0x2406a9a0

08009dd8 <__assert_func>:
 8009dd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009dda:	4614      	mov	r4, r2
 8009ddc:	461a      	mov	r2, r3
 8009dde:	4b09      	ldr	r3, [pc, #36]	; (8009e04 <__assert_func+0x2c>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4605      	mov	r5, r0
 8009de4:	68d8      	ldr	r0, [r3, #12]
 8009de6:	b14c      	cbz	r4, 8009dfc <__assert_func+0x24>
 8009de8:	4b07      	ldr	r3, [pc, #28]	; (8009e08 <__assert_func+0x30>)
 8009dea:	9100      	str	r1, [sp, #0]
 8009dec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009df0:	4906      	ldr	r1, [pc, #24]	; (8009e0c <__assert_func+0x34>)
 8009df2:	462b      	mov	r3, r5
 8009df4:	f000 f81e 	bl	8009e34 <fiprintf>
 8009df8:	f000 f8e9 	bl	8009fce <abort>
 8009dfc:	4b04      	ldr	r3, [pc, #16]	; (8009e10 <__assert_func+0x38>)
 8009dfe:	461c      	mov	r4, r3
 8009e00:	e7f3      	b.n	8009dea <__assert_func+0x12>
 8009e02:	bf00      	nop
 8009e04:	2405079c 	.word	0x2405079c
 8009e08:	0800a755 	.word	0x0800a755
 8009e0c:	0800a762 	.word	0x0800a762
 8009e10:	0800a790 	.word	0x0800a790

08009e14 <_close_r>:
 8009e14:	b538      	push	{r3, r4, r5, lr}
 8009e16:	4d06      	ldr	r5, [pc, #24]	; (8009e30 <_close_r+0x1c>)
 8009e18:	2300      	movs	r3, #0
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	4608      	mov	r0, r1
 8009e1e:	602b      	str	r3, [r5, #0]
 8009e20:	f7f6 ff42 	bl	8000ca8 <_close>
 8009e24:	1c43      	adds	r3, r0, #1
 8009e26:	d102      	bne.n	8009e2e <_close_r+0x1a>
 8009e28:	682b      	ldr	r3, [r5, #0]
 8009e2a:	b103      	cbz	r3, 8009e2e <_close_r+0x1a>
 8009e2c:	6023      	str	r3, [r4, #0]
 8009e2e:	bd38      	pop	{r3, r4, r5, pc}
 8009e30:	2406a9a0 	.word	0x2406a9a0

08009e34 <fiprintf>:
 8009e34:	b40e      	push	{r1, r2, r3}
 8009e36:	b503      	push	{r0, r1, lr}
 8009e38:	4601      	mov	r1, r0
 8009e3a:	ab03      	add	r3, sp, #12
 8009e3c:	4805      	ldr	r0, [pc, #20]	; (8009e54 <fiprintf+0x20>)
 8009e3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e42:	6800      	ldr	r0, [r0, #0]
 8009e44:	9301      	str	r3, [sp, #4]
 8009e46:	f7ff fe31 	bl	8009aac <_vfiprintf_r>
 8009e4a:	b002      	add	sp, #8
 8009e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e50:	b003      	add	sp, #12
 8009e52:	4770      	bx	lr
 8009e54:	2405079c 	.word	0x2405079c

08009e58 <_fstat_r>:
 8009e58:	b538      	push	{r3, r4, r5, lr}
 8009e5a:	4d07      	ldr	r5, [pc, #28]	; (8009e78 <_fstat_r+0x20>)
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	4604      	mov	r4, r0
 8009e60:	4608      	mov	r0, r1
 8009e62:	4611      	mov	r1, r2
 8009e64:	602b      	str	r3, [r5, #0]
 8009e66:	f7f6 ff23 	bl	8000cb0 <_fstat>
 8009e6a:	1c43      	adds	r3, r0, #1
 8009e6c:	d102      	bne.n	8009e74 <_fstat_r+0x1c>
 8009e6e:	682b      	ldr	r3, [r5, #0]
 8009e70:	b103      	cbz	r3, 8009e74 <_fstat_r+0x1c>
 8009e72:	6023      	str	r3, [r4, #0]
 8009e74:	bd38      	pop	{r3, r4, r5, pc}
 8009e76:	bf00      	nop
 8009e78:	2406a9a0 	.word	0x2406a9a0

08009e7c <_isatty_r>:
 8009e7c:	b538      	push	{r3, r4, r5, lr}
 8009e7e:	4d06      	ldr	r5, [pc, #24]	; (8009e98 <_isatty_r+0x1c>)
 8009e80:	2300      	movs	r3, #0
 8009e82:	4604      	mov	r4, r0
 8009e84:	4608      	mov	r0, r1
 8009e86:	602b      	str	r3, [r5, #0]
 8009e88:	f7f6 ff18 	bl	8000cbc <_isatty>
 8009e8c:	1c43      	adds	r3, r0, #1
 8009e8e:	d102      	bne.n	8009e96 <_isatty_r+0x1a>
 8009e90:	682b      	ldr	r3, [r5, #0]
 8009e92:	b103      	cbz	r3, 8009e96 <_isatty_r+0x1a>
 8009e94:	6023      	str	r3, [r4, #0]
 8009e96:	bd38      	pop	{r3, r4, r5, pc}
 8009e98:	2406a9a0 	.word	0x2406a9a0

08009e9c <_lseek_r>:
 8009e9c:	b538      	push	{r3, r4, r5, lr}
 8009e9e:	4d07      	ldr	r5, [pc, #28]	; (8009ebc <_lseek_r+0x20>)
 8009ea0:	4604      	mov	r4, r0
 8009ea2:	4608      	mov	r0, r1
 8009ea4:	4611      	mov	r1, r2
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	602a      	str	r2, [r5, #0]
 8009eaa:	461a      	mov	r2, r3
 8009eac:	f7f6 ff08 	bl	8000cc0 <_lseek>
 8009eb0:	1c43      	adds	r3, r0, #1
 8009eb2:	d102      	bne.n	8009eba <_lseek_r+0x1e>
 8009eb4:	682b      	ldr	r3, [r5, #0]
 8009eb6:	b103      	cbz	r3, 8009eba <_lseek_r+0x1e>
 8009eb8:	6023      	str	r3, [r4, #0]
 8009eba:	bd38      	pop	{r3, r4, r5, pc}
 8009ebc:	2406a9a0 	.word	0x2406a9a0

08009ec0 <__ascii_mbtowc>:
 8009ec0:	b082      	sub	sp, #8
 8009ec2:	b901      	cbnz	r1, 8009ec6 <__ascii_mbtowc+0x6>
 8009ec4:	a901      	add	r1, sp, #4
 8009ec6:	b142      	cbz	r2, 8009eda <__ascii_mbtowc+0x1a>
 8009ec8:	b14b      	cbz	r3, 8009ede <__ascii_mbtowc+0x1e>
 8009eca:	7813      	ldrb	r3, [r2, #0]
 8009ecc:	600b      	str	r3, [r1, #0]
 8009ece:	7812      	ldrb	r2, [r2, #0]
 8009ed0:	1e10      	subs	r0, r2, #0
 8009ed2:	bf18      	it	ne
 8009ed4:	2001      	movne	r0, #1
 8009ed6:	b002      	add	sp, #8
 8009ed8:	4770      	bx	lr
 8009eda:	4610      	mov	r0, r2
 8009edc:	e7fb      	b.n	8009ed6 <__ascii_mbtowc+0x16>
 8009ede:	f06f 0001 	mvn.w	r0, #1
 8009ee2:	e7f8      	b.n	8009ed6 <__ascii_mbtowc+0x16>

08009ee4 <memmove>:
 8009ee4:	4288      	cmp	r0, r1
 8009ee6:	b510      	push	{r4, lr}
 8009ee8:	eb01 0402 	add.w	r4, r1, r2
 8009eec:	d902      	bls.n	8009ef4 <memmove+0x10>
 8009eee:	4284      	cmp	r4, r0
 8009ef0:	4623      	mov	r3, r4
 8009ef2:	d807      	bhi.n	8009f04 <memmove+0x20>
 8009ef4:	1e43      	subs	r3, r0, #1
 8009ef6:	42a1      	cmp	r1, r4
 8009ef8:	d008      	beq.n	8009f0c <memmove+0x28>
 8009efa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009efe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f02:	e7f8      	b.n	8009ef6 <memmove+0x12>
 8009f04:	4402      	add	r2, r0
 8009f06:	4601      	mov	r1, r0
 8009f08:	428a      	cmp	r2, r1
 8009f0a:	d100      	bne.n	8009f0e <memmove+0x2a>
 8009f0c:	bd10      	pop	{r4, pc}
 8009f0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f16:	e7f7      	b.n	8009f08 <memmove+0x24>

08009f18 <__malloc_lock>:
 8009f18:	4801      	ldr	r0, [pc, #4]	; (8009f20 <__malloc_lock+0x8>)
 8009f1a:	f7fe bf58 	b.w	8008dce <__retarget_lock_acquire_recursive>
 8009f1e:	bf00      	nop
 8009f20:	2406a994 	.word	0x2406a994

08009f24 <__malloc_unlock>:
 8009f24:	4801      	ldr	r0, [pc, #4]	; (8009f2c <__malloc_unlock+0x8>)
 8009f26:	f7fe bf53 	b.w	8008dd0 <__retarget_lock_release_recursive>
 8009f2a:	bf00      	nop
 8009f2c:	2406a994 	.word	0x2406a994

08009f30 <_realloc_r>:
 8009f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f34:	4680      	mov	r8, r0
 8009f36:	4614      	mov	r4, r2
 8009f38:	460e      	mov	r6, r1
 8009f3a:	b921      	cbnz	r1, 8009f46 <_realloc_r+0x16>
 8009f3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f40:	4611      	mov	r1, r2
 8009f42:	f7ff bbb9 	b.w	80096b8 <_malloc_r>
 8009f46:	b92a      	cbnz	r2, 8009f54 <_realloc_r+0x24>
 8009f48:	f7ff fb4a 	bl	80095e0 <_free_r>
 8009f4c:	4625      	mov	r5, r4
 8009f4e:	4628      	mov	r0, r5
 8009f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f54:	f000 f842 	bl	8009fdc <_malloc_usable_size_r>
 8009f58:	4284      	cmp	r4, r0
 8009f5a:	4607      	mov	r7, r0
 8009f5c:	d802      	bhi.n	8009f64 <_realloc_r+0x34>
 8009f5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f62:	d812      	bhi.n	8009f8a <_realloc_r+0x5a>
 8009f64:	4621      	mov	r1, r4
 8009f66:	4640      	mov	r0, r8
 8009f68:	f7ff fba6 	bl	80096b8 <_malloc_r>
 8009f6c:	4605      	mov	r5, r0
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	d0ed      	beq.n	8009f4e <_realloc_r+0x1e>
 8009f72:	42bc      	cmp	r4, r7
 8009f74:	4622      	mov	r2, r4
 8009f76:	4631      	mov	r1, r6
 8009f78:	bf28      	it	cs
 8009f7a:	463a      	movcs	r2, r7
 8009f7c:	f7fd f99c 	bl	80072b8 <memcpy>
 8009f80:	4631      	mov	r1, r6
 8009f82:	4640      	mov	r0, r8
 8009f84:	f7ff fb2c 	bl	80095e0 <_free_r>
 8009f88:	e7e1      	b.n	8009f4e <_realloc_r+0x1e>
 8009f8a:	4635      	mov	r5, r6
 8009f8c:	e7df      	b.n	8009f4e <_realloc_r+0x1e>
	...

08009f90 <_read_r>:
 8009f90:	b538      	push	{r3, r4, r5, lr}
 8009f92:	4d07      	ldr	r5, [pc, #28]	; (8009fb0 <_read_r+0x20>)
 8009f94:	4604      	mov	r4, r0
 8009f96:	4608      	mov	r0, r1
 8009f98:	4611      	mov	r1, r2
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	602a      	str	r2, [r5, #0]
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	f7f6 fe74 	bl	8000c8c <_read>
 8009fa4:	1c43      	adds	r3, r0, #1
 8009fa6:	d102      	bne.n	8009fae <_read_r+0x1e>
 8009fa8:	682b      	ldr	r3, [r5, #0]
 8009faa:	b103      	cbz	r3, 8009fae <_read_r+0x1e>
 8009fac:	6023      	str	r3, [r4, #0]
 8009fae:	bd38      	pop	{r3, r4, r5, pc}
 8009fb0:	2406a9a0 	.word	0x2406a9a0

08009fb4 <__ascii_wctomb>:
 8009fb4:	b149      	cbz	r1, 8009fca <__ascii_wctomb+0x16>
 8009fb6:	2aff      	cmp	r2, #255	; 0xff
 8009fb8:	bf85      	ittet	hi
 8009fba:	238a      	movhi	r3, #138	; 0x8a
 8009fbc:	6003      	strhi	r3, [r0, #0]
 8009fbe:	700a      	strbls	r2, [r1, #0]
 8009fc0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009fc4:	bf98      	it	ls
 8009fc6:	2001      	movls	r0, #1
 8009fc8:	4770      	bx	lr
 8009fca:	4608      	mov	r0, r1
 8009fcc:	4770      	bx	lr

08009fce <abort>:
 8009fce:	b508      	push	{r3, lr}
 8009fd0:	2006      	movs	r0, #6
 8009fd2:	f000 f833 	bl	800a03c <raise>
 8009fd6:	2001      	movs	r0, #1
 8009fd8:	f7f6 fe52 	bl	8000c80 <_exit>

08009fdc <_malloc_usable_size_r>:
 8009fdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fe0:	1f18      	subs	r0, r3, #4
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	bfbc      	itt	lt
 8009fe6:	580b      	ldrlt	r3, [r1, r0]
 8009fe8:	18c0      	addlt	r0, r0, r3
 8009fea:	4770      	bx	lr

08009fec <_raise_r>:
 8009fec:	291f      	cmp	r1, #31
 8009fee:	b538      	push	{r3, r4, r5, lr}
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	460d      	mov	r5, r1
 8009ff4:	d904      	bls.n	800a000 <_raise_r+0x14>
 8009ff6:	2316      	movs	r3, #22
 8009ff8:	6003      	str	r3, [r0, #0]
 8009ffa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ffe:	bd38      	pop	{r3, r4, r5, pc}
 800a000:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a002:	b112      	cbz	r2, 800a00a <_raise_r+0x1e>
 800a004:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a008:	b94b      	cbnz	r3, 800a01e <_raise_r+0x32>
 800a00a:	4620      	mov	r0, r4
 800a00c:	f000 f830 	bl	800a070 <_getpid_r>
 800a010:	462a      	mov	r2, r5
 800a012:	4601      	mov	r1, r0
 800a014:	4620      	mov	r0, r4
 800a016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a01a:	f000 b817 	b.w	800a04c <_kill_r>
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d00a      	beq.n	800a038 <_raise_r+0x4c>
 800a022:	1c59      	adds	r1, r3, #1
 800a024:	d103      	bne.n	800a02e <_raise_r+0x42>
 800a026:	2316      	movs	r3, #22
 800a028:	6003      	str	r3, [r0, #0]
 800a02a:	2001      	movs	r0, #1
 800a02c:	e7e7      	b.n	8009ffe <_raise_r+0x12>
 800a02e:	2400      	movs	r4, #0
 800a030:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a034:	4628      	mov	r0, r5
 800a036:	4798      	blx	r3
 800a038:	2000      	movs	r0, #0
 800a03a:	e7e0      	b.n	8009ffe <_raise_r+0x12>

0800a03c <raise>:
 800a03c:	4b02      	ldr	r3, [pc, #8]	; (800a048 <raise+0xc>)
 800a03e:	4601      	mov	r1, r0
 800a040:	6818      	ldr	r0, [r3, #0]
 800a042:	f7ff bfd3 	b.w	8009fec <_raise_r>
 800a046:	bf00      	nop
 800a048:	2405079c 	.word	0x2405079c

0800a04c <_kill_r>:
 800a04c:	b538      	push	{r3, r4, r5, lr}
 800a04e:	4d07      	ldr	r5, [pc, #28]	; (800a06c <_kill_r+0x20>)
 800a050:	2300      	movs	r3, #0
 800a052:	4604      	mov	r4, r0
 800a054:	4608      	mov	r0, r1
 800a056:	4611      	mov	r1, r2
 800a058:	602b      	str	r3, [r5, #0]
 800a05a:	f7f6 fe07 	bl	8000c6c <_kill>
 800a05e:	1c43      	adds	r3, r0, #1
 800a060:	d102      	bne.n	800a068 <_kill_r+0x1c>
 800a062:	682b      	ldr	r3, [r5, #0]
 800a064:	b103      	cbz	r3, 800a068 <_kill_r+0x1c>
 800a066:	6023      	str	r3, [r4, #0]
 800a068:	bd38      	pop	{r3, r4, r5, pc}
 800a06a:	bf00      	nop
 800a06c:	2406a9a0 	.word	0x2406a9a0

0800a070 <_getpid_r>:
 800a070:	f7f6 bdfa 	b.w	8000c68 <_getpid>
 800a074:	0000      	movs	r0, r0
	...

0800a078 <exp>:
 800a078:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 800a07a:	ee10 3a90 	vmov	r3, s1
 800a07e:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800a082:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800a086:	18a2      	adds	r2, r4, r2
 800a088:	2a3e      	cmp	r2, #62	; 0x3e
 800a08a:	ee10 1a10 	vmov	r1, s0
 800a08e:	d922      	bls.n	800a0d6 <exp+0x5e>
 800a090:	2a00      	cmp	r2, #0
 800a092:	da06      	bge.n	800a0a2 <exp+0x2a>
 800a094:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800a098:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a09c:	b004      	add	sp, #16
 800a09e:	bcf0      	pop	{r4, r5, r6, r7}
 800a0a0:	4770      	bx	lr
 800a0a2:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 800a0a6:	f04f 0000 	mov.w	r0, #0
 800a0aa:	d913      	bls.n	800a0d4 <exp+0x5c>
 800a0ac:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 800a0b0:	bf08      	it	eq
 800a0b2:	4281      	cmpeq	r1, r0
 800a0b4:	f000 80a0 	beq.w	800a1f8 <exp+0x180>
 800a0b8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a0bc:	4294      	cmp	r4, r2
 800a0be:	d0e9      	beq.n	800a094 <exp+0x1c>
 800a0c0:	4283      	cmp	r3, r0
 800a0c2:	da03      	bge.n	800a0cc <exp+0x54>
 800a0c4:	b004      	add	sp, #16
 800a0c6:	bcf0      	pop	{r4, r5, r6, r7}
 800a0c8:	f000 b8c6 	b.w	800a258 <__math_uflow>
 800a0cc:	b004      	add	sp, #16
 800a0ce:	bcf0      	pop	{r4, r5, r6, r7}
 800a0d0:	f000 b8ca 	b.w	800a268 <__math_oflow>
 800a0d4:	4604      	mov	r4, r0
 800a0d6:	4950      	ldr	r1, [pc, #320]	; (800a218 <exp+0x1a0>)
 800a0d8:	ed91 6b02 	vldr	d6, [r1, #8]
 800a0dc:	ed91 5b00 	vldr	d5, [r1]
 800a0e0:	eeb0 7b46 	vmov.f64	d7, d6
 800a0e4:	eea5 7b00 	vfma.f64	d7, d5, d0
 800a0e8:	ee17 5a10 	vmov	r5, s14
 800a0ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a0f0:	ed91 6b04 	vldr	d6, [r1, #16]
 800a0f4:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800a0f8:	eea6 0b07 	vfma.f64	d0, d6, d7
 800a0fc:	ed91 6b06 	vldr	d6, [r1, #24]
 800a100:	18d8      	adds	r0, r3, r3
 800a102:	f100 030f 	add.w	r3, r0, #15
 800a106:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800a10a:	eea6 0b07 	vfma.f64	d0, d6, d7
 800a10e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 800a112:	ee20 7b00 	vmul.f64	d7, d0, d0
 800a116:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 800a11a:	ed91 5b08 	vldr	d5, [r1, #32]
 800a11e:	ee30 6b06 	vadd.f64	d6, d0, d6
 800a122:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800a126:	eea4 5b00 	vfma.f64	d5, d4, d0
 800a12a:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 800a12e:	eea5 6b07 	vfma.f64	d6, d5, d7
 800a132:	ee27 7b07 	vmul.f64	d7, d7, d7
 800a136:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 800a13a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 800a13e:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800a142:	eea4 5b00 	vfma.f64	d5, d4, d0
 800a146:	2600      	movs	r6, #0
 800a148:	19f2      	adds	r2, r6, r7
 800a14a:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 800a14e:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a152:	2c00      	cmp	r4, #0
 800a154:	d14b      	bne.n	800a1ee <exp+0x176>
 800a156:	42b5      	cmp	r5, r6
 800a158:	db10      	blt.n	800a17c <exp+0x104>
 800a15a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800a15e:	ed9f 7b28 	vldr	d7, [pc, #160]	; 800a200 <exp+0x188>
 800a162:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800a166:	4610      	mov	r0, r2
 800a168:	ec41 0b10 	vmov	d0, r0, r1
 800a16c:	eea6 0b00 	vfma.f64	d0, d6, d0
 800a170:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a174:	b004      	add	sp, #16
 800a176:	bcf0      	pop	{r4, r5, r6, r7}
 800a178:	f000 b88a 	b.w	800a290 <__math_check_oflow>
 800a17c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800a180:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800a184:	4610      	mov	r0, r2
 800a186:	ec41 0b17 	vmov	d7, r0, r1
 800a18a:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800a18e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a192:	ee37 5b06 	vadd.f64	d5, d7, d6
 800a196:	eeb4 5bc4 	vcmpe.f64	d5, d4
 800a19a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a19e:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800a208 <exp+0x190>
 800a1a2:	d51e      	bpl.n	800a1e2 <exp+0x16a>
 800a1a4:	ee35 3b04 	vadd.f64	d3, d5, d4
 800a1a8:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a1ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a1b0:	ee34 6b43 	vsub.f64	d6, d4, d3
 800a1b4:	ee36 5b05 	vadd.f64	d5, d6, d5
 800a1b8:	ee35 5b07 	vadd.f64	d5, d5, d7
 800a1bc:	ee35 5b03 	vadd.f64	d5, d5, d3
 800a1c0:	ee35 5b44 	vsub.f64	d5, d5, d4
 800a1c4:	eeb5 5b40 	vcmp.f64	d5, #0.0
 800a1c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1cc:	d101      	bne.n	800a1d2 <exp+0x15a>
 800a1ce:	ed9f 5b10 	vldr	d5, [pc, #64]	; 800a210 <exp+0x198>
 800a1d2:	ed8d 0b00 	vstr	d0, [sp]
 800a1d6:	ed9d 7b00 	vldr	d7, [sp]
 800a1da:	ee27 7b00 	vmul.f64	d7, d7, d0
 800a1de:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a1e2:	ee25 0b00 	vmul.f64	d0, d5, d0
 800a1e6:	b004      	add	sp, #16
 800a1e8:	bcf0      	pop	{r4, r5, r6, r7}
 800a1ea:	f000 b845 	b.w	800a278 <__math_check_uflow>
 800a1ee:	ec43 2b10 	vmov	d0, r2, r3
 800a1f2:	eea6 0b00 	vfma.f64	d0, d6, d0
 800a1f6:	e751      	b.n	800a09c <exp+0x24>
 800a1f8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800a210 <exp+0x198>
 800a1fc:	e74e      	b.n	800a09c <exp+0x24>
 800a1fe:	bf00      	nop
 800a200:	00000000 	.word	0x00000000
 800a204:	7f000000 	.word	0x7f000000
 800a208:	00000000 	.word	0x00000000
 800a20c:	00100000 	.word	0x00100000
	...
 800a218:	0800a8a0 	.word	0x0800a8a0

0800a21c <with_errno>:
 800a21c:	b513      	push	{r0, r1, r4, lr}
 800a21e:	4604      	mov	r4, r0
 800a220:	ed8d 0b00 	vstr	d0, [sp]
 800a224:	f7fd f81e 	bl	8007264 <__errno>
 800a228:	ed9d 0b00 	vldr	d0, [sp]
 800a22c:	6004      	str	r4, [r0, #0]
 800a22e:	b002      	add	sp, #8
 800a230:	bd10      	pop	{r4, pc}

0800a232 <xflow>:
 800a232:	b082      	sub	sp, #8
 800a234:	b158      	cbz	r0, 800a24e <xflow+0x1c>
 800a236:	eeb1 7b40 	vneg.f64	d7, d0
 800a23a:	ed8d 7b00 	vstr	d7, [sp]
 800a23e:	ed9d 7b00 	vldr	d7, [sp]
 800a242:	2022      	movs	r0, #34	; 0x22
 800a244:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a248:	b002      	add	sp, #8
 800a24a:	f7ff bfe7 	b.w	800a21c <with_errno>
 800a24e:	eeb0 7b40 	vmov.f64	d7, d0
 800a252:	e7f2      	b.n	800a23a <xflow+0x8>
 800a254:	0000      	movs	r0, r0
	...

0800a258 <__math_uflow>:
 800a258:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a260 <__math_uflow+0x8>
 800a25c:	f7ff bfe9 	b.w	800a232 <xflow>
 800a260:	00000000 	.word	0x00000000
 800a264:	10000000 	.word	0x10000000

0800a268 <__math_oflow>:
 800a268:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a270 <__math_oflow+0x8>
 800a26c:	f7ff bfe1 	b.w	800a232 <xflow>
 800a270:	00000000 	.word	0x00000000
 800a274:	70000000 	.word	0x70000000

0800a278 <__math_check_uflow>:
 800a278:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800a27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a280:	d102      	bne.n	800a288 <__math_check_uflow+0x10>
 800a282:	2022      	movs	r0, #34	; 0x22
 800a284:	f7ff bfca 	b.w	800a21c <with_errno>
 800a288:	4770      	bx	lr
 800a28a:	0000      	movs	r0, r0
 800a28c:	0000      	movs	r0, r0
	...

0800a290 <__math_check_oflow>:
 800a290:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800a2b0 <__math_check_oflow+0x20>
 800a294:	eeb0 7bc0 	vabs.f64	d7, d0
 800a298:	eeb4 7b46 	vcmp.f64	d7, d6
 800a29c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2a0:	dd02      	ble.n	800a2a8 <__math_check_oflow+0x18>
 800a2a2:	2022      	movs	r0, #34	; 0x22
 800a2a4:	f7ff bfba 	b.w	800a21c <with_errno>
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	f3af 8000 	nop.w
 800a2b0:	ffffffff 	.word	0xffffffff
 800a2b4:	7fefffff 	.word	0x7fefffff

0800a2b8 <_init>:
 800a2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ba:	bf00      	nop
 800a2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2be:	bc08      	pop	{r3}
 800a2c0:	469e      	mov	lr, r3
 800a2c2:	4770      	bx	lr

0800a2c4 <_fini>:
 800a2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c6:	bf00      	nop
 800a2c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ca:	bc08      	pop	{r3}
 800a2cc:	469e      	mov	lr, r3
 800a2ce:	4770      	bx	lr
