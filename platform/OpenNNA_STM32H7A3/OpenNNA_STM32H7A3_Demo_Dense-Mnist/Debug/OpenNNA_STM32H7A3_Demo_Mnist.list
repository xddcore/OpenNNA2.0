
OpenNNA_STM32H7A3_Demo_Mnist.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007528  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080077d8  080077d8  000177d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007858  08007858  00017858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007860  08007860  00017860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007864  08007864  00017864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  08007868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000fae04  24000014  0800787c  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240fae18  0800787c  0002ae18  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000198f3  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000030f3  00000000  00000000  00039935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001230  00000000  00000000  0003ca28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001128  00000000  00000000  0003dc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000037a4  00000000  00000000  0003ed80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015a36  00000000  00000000  00042524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013cad5  00000000  00000000  00057f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00194a2f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004bb0  00000000  00000000  00194a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000014 	.word	0x24000014
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080077c0 	.word	0x080077c0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000018 	.word	0x24000018
 80002ec:	080077c0 	.word	0x080077c0

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fb58 	bl	8000cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f81a 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 f8e2 	bl	80007c8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000604:	f000 f88c 	bl	8000720 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000608:	f000 f8d6 	bl	80007b8 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800060c:	f004 fb4e 	bl	8004cac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000610:	4a05      	ldr	r2, [pc, #20]	; (8000628 <main+0x34>)
 8000612:	2100      	movs	r1, #0
 8000614:	4805      	ldr	r0, [pc, #20]	; (800062c <main+0x38>)
 8000616:	f004 fb93 	bl	8004d40 <osThreadNew>
 800061a:	4603      	mov	r3, r0
 800061c:	4a04      	ldr	r2, [pc, #16]	; (8000630 <main+0x3c>)
 800061e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000620:	f004 fb68 	bl	8004cf4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000624:	e7fe      	b.n	8000624 <main+0x30>
 8000626:	bf00      	nop
 8000628:	080077fc 	.word	0x080077fc
 800062c:	080009fd 	.word	0x080009fd
 8000630:	240000c0 	.word	0x240000c0

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b09c      	sub	sp, #112	; 0x70
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800063e:	224c      	movs	r2, #76	; 0x4c
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f007 f8b4 	bl	80077b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2220      	movs	r2, #32
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f007 f8ae 	bl	80077b0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000654:	4b30      	ldr	r3, [pc, #192]	; (8000718 <SystemClock_Config+0xe4>)
 8000656:	f04f 32ff 	mov.w	r2, #4294967295
 800065a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800065e:	2004      	movs	r0, #4
 8000660:	f000 fe64 	bl	800132c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000664:	2300      	movs	r3, #0
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	4b2c      	ldr	r3, [pc, #176]	; (800071c <SystemClock_Config+0xe8>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a2b      	ldr	r2, [pc, #172]	; (800071c <SystemClock_Config+0xe8>)
 800066e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b29      	ldr	r3, [pc, #164]	; (800071c <SystemClock_Config+0xe8>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000680:	bf00      	nop
 8000682:	4b26      	ldr	r3, [pc, #152]	; (800071c <SystemClock_Config+0xe8>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800068a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800068e:	d1f8      	bne.n	8000682 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000690:	2321      	movs	r3, #33	; 0x21
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000694:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000698:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800069a:	2301      	movs	r3, #1
 800069c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a2:	2302      	movs	r3, #2
 80006a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006a6:	2301      	movs	r3, #1
 80006a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 80006aa:	2346      	movs	r3, #70	; 0x46
 80006ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b2:	2304      	movs	r3, #4
 80006b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006ba:	230c      	movs	r3, #12
 80006bc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006be:	2300      	movs	r3, #0
 80006c0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fe88 	bl	80013e0 <HAL_RCC_OscConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006d6:	f000 f999 	bl	8000a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	233f      	movs	r3, #63	; 0x3f
 80006dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2303      	movs	r3, #3
 80006e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006ea:	2340      	movs	r3, #64	; 0x40
 80006ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006ee:	2340      	movs	r3, #64	; 0x40
 80006f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006f8:	2340      	movs	r3, #64	; 0x40
 80006fa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2107      	movs	r1, #7
 8000700:	4618      	mov	r0, r3
 8000702:	f001 fa71 	bl	8001be8 <HAL_RCC_ClockConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800070c:	f000 f97e 	bl	8000a0c <Error_Handler>
  }
}
 8000710:	bf00      	nop
 8000712:	3770      	adds	r7, #112	; 0x70
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	58024400 	.word	0x58024400
 800071c:	58024800 	.word	0x58024800

08000720 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000724:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 8000726:	4a23      	ldr	r2, [pc, #140]	; (80007b4 <MX_USART3_UART_Init+0x94>)
 8000728:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800072a:	4b21      	ldr	r3, [pc, #132]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 800075e:	2200      	movs	r2, #0
 8000760:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 8000764:	2200      	movs	r2, #0
 8000766:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000768:	4811      	ldr	r0, [pc, #68]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 800076a:	f003 f8f7 	bl	800395c <HAL_UART_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000774:	f000 f94a 	bl	8000a0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000778:	2100      	movs	r1, #0
 800077a:	480d      	ldr	r0, [pc, #52]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 800077c:	f004 f998 	bl	8004ab0 <HAL_UARTEx_SetTxFifoThreshold>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000786:	f000 f941 	bl	8000a0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800078a:	2100      	movs	r1, #0
 800078c:	4808      	ldr	r0, [pc, #32]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 800078e:	f004 f9cd 	bl	8004b2c <HAL_UARTEx_SetRxFifoThreshold>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000798:	f000 f938 	bl	8000a0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <MX_USART3_UART_Init+0x90>)
 800079e:	f004 f94e 	bl	8004a3e <HAL_UARTEx_DisableFifoMode>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80007a8:	f000 f930 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	24000030 	.word	0x24000030
 80007b4:	40004800 	.word	0x40004800

080007b8 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
	...

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08e      	sub	sp, #56	; 0x38
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	4b80      	ldr	r3, [pc, #512]	; (80009e0 <MX_GPIO_Init+0x218>)
 80007e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007e4:	4a7e      	ldr	r2, [pc, #504]	; (80009e0 <MX_GPIO_Init+0x218>)
 80007e6:	f043 0304 	orr.w	r3, r3, #4
 80007ea:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007ee:	4b7c      	ldr	r3, [pc, #496]	; (80009e0 <MX_GPIO_Init+0x218>)
 80007f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f4:	f003 0304 	and.w	r3, r3, #4
 80007f8:	623b      	str	r3, [r7, #32]
 80007fa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007fc:	4b78      	ldr	r3, [pc, #480]	; (80009e0 <MX_GPIO_Init+0x218>)
 80007fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000802:	4a77      	ldr	r2, [pc, #476]	; (80009e0 <MX_GPIO_Init+0x218>)
 8000804:	f043 0320 	orr.w	r3, r3, #32
 8000808:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800080c:	4b74      	ldr	r3, [pc, #464]	; (80009e0 <MX_GPIO_Init+0x218>)
 800080e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000812:	f003 0320 	and.w	r3, r3, #32
 8000816:	61fb      	str	r3, [r7, #28]
 8000818:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	4b71      	ldr	r3, [pc, #452]	; (80009e0 <MX_GPIO_Init+0x218>)
 800081c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000820:	4a6f      	ldr	r2, [pc, #444]	; (80009e0 <MX_GPIO_Init+0x218>)
 8000822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000826:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800082a:	4b6d      	ldr	r3, [pc, #436]	; (80009e0 <MX_GPIO_Init+0x218>)
 800082c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000834:	61bb      	str	r3, [r7, #24]
 8000836:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000838:	4b69      	ldr	r3, [pc, #420]	; (80009e0 <MX_GPIO_Init+0x218>)
 800083a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800083e:	4a68      	ldr	r2, [pc, #416]	; (80009e0 <MX_GPIO_Init+0x218>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000848:	4b65      	ldr	r3, [pc, #404]	; (80009e0 <MX_GPIO_Init+0x218>)
 800084a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000856:	4b62      	ldr	r3, [pc, #392]	; (80009e0 <MX_GPIO_Init+0x218>)
 8000858:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800085c:	4a60      	ldr	r2, [pc, #384]	; (80009e0 <MX_GPIO_Init+0x218>)
 800085e:	f043 0308 	orr.w	r3, r3, #8
 8000862:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000866:	4b5e      	ldr	r3, [pc, #376]	; (80009e0 <MX_GPIO_Init+0x218>)
 8000868:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800086c:	f003 0308 	and.w	r3, r3, #8
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000874:	4b5a      	ldr	r3, [pc, #360]	; (80009e0 <MX_GPIO_Init+0x218>)
 8000876:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800087a:	4a59      	ldr	r2, [pc, #356]	; (80009e0 <MX_GPIO_Init+0x218>)
 800087c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000880:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000884:	4b56      	ldr	r3, [pc, #344]	; (80009e0 <MX_GPIO_Init+0x218>)
 8000886:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800088a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	4b53      	ldr	r3, [pc, #332]	; (80009e0 <MX_GPIO_Init+0x218>)
 8000894:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000898:	4a51      	ldr	r2, [pc, #324]	; (80009e0 <MX_GPIO_Init+0x218>)
 800089a:	f043 0301 	orr.w	r3, r3, #1
 800089e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008a2:	4b4f      	ldr	r3, [pc, #316]	; (80009e0 <MX_GPIO_Init+0x218>)
 80008a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008b0:	4b4b      	ldr	r3, [pc, #300]	; (80009e0 <MX_GPIO_Init+0x218>)
 80008b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008b6:	4a4a      	ldr	r2, [pc, #296]	; (80009e0 <MX_GPIO_Init+0x218>)
 80008b8:	f043 0310 	orr.w	r3, r3, #16
 80008bc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008c0:	4b47      	ldr	r3, [pc, #284]	; (80009e0 <MX_GPIO_Init+0x218>)
 80008c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008c6:	f003 0310 	and.w	r3, r3, #16
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008d4:	4843      	ldr	r0, [pc, #268]	; (80009e4 <MX_GPIO_Init+0x21c>)
 80008d6:	f000 fd0f 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	f244 0101 	movw	r1, #16385	; 0x4001
 80008e0:	4841      	ldr	r0, [pc, #260]	; (80009e8 <MX_GPIO_Init+0x220>)
 80008e2:	f000 fd09 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2102      	movs	r1, #2
 80008ea:	4840      	ldr	r0, [pc, #256]	; (80009ec <MX_GPIO_Init+0x224>)
 80008ec:	f000 fd04 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000902:	4619      	mov	r1, r3
 8000904:	483a      	ldr	r0, [pc, #232]	; (80009f0 <MX_GPIO_Init+0x228>)
 8000906:	f000 fb47 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800090a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000920:	4619      	mov	r1, r3
 8000922:	4830      	ldr	r0, [pc, #192]	; (80009e4 <MX_GPIO_Init+0x21c>)
 8000924:	f000 fb38 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000928:	f244 0301 	movw	r3, #16385	; 0x4001
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093e:	4619      	mov	r1, r3
 8000940:	4829      	ldr	r0, [pc, #164]	; (80009e8 <MX_GPIO_Init+0x220>)
 8000942:	f000 fb29 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000946:	2380      	movs	r3, #128	; 0x80
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	4619      	mov	r1, r3
 800095a:	4826      	ldr	r0, [pc, #152]	; (80009f4 <MX_GPIO_Init+0x22c>)
 800095c:	f000 fb1c 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000960:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000972:	4619      	mov	r1, r3
 8000974:	4820      	ldr	r0, [pc, #128]	; (80009f8 <MX_GPIO_Init+0x230>)
 8000976:	f000 fb0f 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800097a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800098c:	230a      	movs	r3, #10
 800098e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000994:	4619      	mov	r1, r3
 8000996:	4818      	ldr	r0, [pc, #96]	; (80009f8 <MX_GPIO_Init+0x230>)
 8000998:	f000 fafe 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 800099c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b2:	4619      	mov	r1, r3
 80009b4:	4810      	ldr	r0, [pc, #64]	; (80009f8 <MX_GPIO_Init+0x230>)
 80009b6:	f000 faef 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009ba:	2302      	movs	r3, #2
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ce:	4619      	mov	r1, r3
 80009d0:	4806      	ldr	r0, [pc, #24]	; (80009ec <MX_GPIO_Init+0x224>)
 80009d2:	f000 fae1 	bl	8000f98 <HAL_GPIO_Init>

}
 80009d6:	bf00      	nop
 80009d8:	3738      	adds	r7, #56	; 0x38
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	58024400 	.word	0x58024400
 80009e4:	58021400 	.word	0x58021400
 80009e8:	58020400 	.word	0x58020400
 80009ec:	58021000 	.word	0x58021000
 80009f0:	58020800 	.word	0x58020800
 80009f4:	58021800 	.word	0x58021800
 80009f8:	58020000 	.word	0x58020000

080009fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f004 fa2d 	bl	8004e64 <osDelay>
 8000a0a:	e7fb      	b.n	8000a04 <StartDefaultTask+0x8>

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <Error_Handler+0x8>
	...

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <HAL_MspInit+0x38>)
 8000a20:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <HAL_MspInit+0x38>)
 8000a26:	f043 0302 	orr.w	r3, r3, #2
 8000a2a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <HAL_MspInit+0x38>)
 8000a30:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a34:	f003 0302 	and.w	r3, r3, #2
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	210f      	movs	r1, #15
 8000a40:	f06f 0001 	mvn.w	r0, #1
 8000a44:	f000 fa81 	bl	8000f4a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	58024400 	.word	0x58024400

08000a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b0b8      	sub	sp, #224	; 0xe0
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	22b8      	movs	r2, #184	; 0xb8
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f006 fe9b 	bl	80077b0 <memset>
  if(huart->Instance==USART3)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a25      	ldr	r2, [pc, #148]	; (8000b14 <HAL_UART_MspInit+0xc0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d142      	bne.n	8000b0a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a84:	2302      	movs	r3, #2
 8000a86:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 fc34 	bl	8002300 <HAL_RCCEx_PeriphCLKConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a9e:	f7ff ffb5 	bl	8000a0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000aa2:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <HAL_UART_MspInit+0xc4>)
 8000aa4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000aa8:	4a1b      	ldr	r2, [pc, #108]	; (8000b18 <HAL_UART_MspInit+0xc4>)
 8000aaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aae:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <HAL_UART_MspInit+0xc4>)
 8000ab4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_UART_MspInit+0xc4>)
 8000ac2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ac6:	4a14      	ldr	r2, [pc, #80]	; (8000b18 <HAL_UART_MspInit+0xc4>)
 8000ac8:	f043 0308 	orr.w	r3, r3, #8
 8000acc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <HAL_UART_MspInit+0xc4>)
 8000ad2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ad6:	f003 0308 	and.w	r3, r3, #8
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ade:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ae2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000af8:	2307      	movs	r3, #7
 8000afa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000afe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <HAL_UART_MspInit+0xc8>)
 8000b06:	f000 fa47 	bl	8000f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b0a:	bf00      	nop
 8000b0c:	37e0      	adds	r7, #224	; 0xe0
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40004800 	.word	0x40004800
 8000b18:	58024400 	.word	0x58024400
 8000b1c:	58020c00 	.word	0x58020c00

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <NMI_Handler+0x4>

08000b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <MemManage_Handler+0x4>

08000b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <BusFault_Handler+0x4>

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <UsageFault_Handler+0x4>

08000b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b50:	f000 f91e 	bl	8000d90 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b54:	f005 fd94 	bl	8006680 <xTaskGetSchedulerState>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d001      	beq.n	8000b62 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b5e:	f006 fb7b 	bl	8007258 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b32      	ldr	r3, [pc, #200]	; (8000c38 <SystemInit+0xd0>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b72:	4a31      	ldr	r2, [pc, #196]	; (8000c38 <SystemInit+0xd0>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b7c:	4b2f      	ldr	r3, [pc, #188]	; (8000c3c <SystemInit+0xd4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f003 030f 	and.w	r3, r3, #15
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d807      	bhi.n	8000b98 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b88:	4b2c      	ldr	r3, [pc, #176]	; (8000c3c <SystemInit+0xd4>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f023 030f 	bic.w	r3, r3, #15
 8000b90:	4a2a      	ldr	r2, [pc, #168]	; (8000c3c <SystemInit+0xd4>)
 8000b92:	f043 0303 	orr.w	r3, r3, #3
 8000b96:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b98:	4b29      	ldr	r3, [pc, #164]	; (8000c40 <SystemInit+0xd8>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a28      	ldr	r2, [pc, #160]	; (8000c40 <SystemInit+0xd8>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ba4:	4b26      	ldr	r3, [pc, #152]	; (8000c40 <SystemInit+0xd8>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000baa:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <SystemInit+0xd8>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	4924      	ldr	r1, [pc, #144]	; (8000c40 <SystemInit+0xd8>)
 8000bb0:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <SystemInit+0xdc>)
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <SystemInit+0xd4>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f003 030c 	and.w	r3, r3, #12
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d007      	beq.n	8000bd2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bc2:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <SystemInit+0xd4>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f023 030f 	bic.w	r3, r3, #15
 8000bca:	4a1c      	ldr	r2, [pc, #112]	; (8000c3c <SystemInit+0xd4>)
 8000bcc:	f043 0303 	orr.w	r3, r3, #3
 8000bd0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <SystemInit+0xd8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000bd8:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <SystemInit+0xd8>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <SystemInit+0xd8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <SystemInit+0xd8>)
 8000be6:	4a18      	ldr	r2, [pc, #96]	; (8000c48 <SystemInit+0xe0>)
 8000be8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <SystemInit+0xd8>)
 8000bec:	4a17      	ldr	r2, [pc, #92]	; (8000c4c <SystemInit+0xe4>)
 8000bee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <SystemInit+0xd8>)
 8000bf2:	4a17      	ldr	r2, [pc, #92]	; (8000c50 <SystemInit+0xe8>)
 8000bf4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <SystemInit+0xd8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <SystemInit+0xd8>)
 8000bfe:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <SystemInit+0xe8>)
 8000c00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <SystemInit+0xd8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c08:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <SystemInit+0xd8>)
 8000c0a:	4a11      	ldr	r2, [pc, #68]	; (8000c50 <SystemInit+0xe8>)
 8000c0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <SystemInit+0xd8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <SystemInit+0xd8>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a09      	ldr	r2, [pc, #36]	; (8000c40 <SystemInit+0xd8>)
 8000c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <SystemInit+0xd8>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <SystemInit+0xec>)
 8000c28:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c2c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00
 8000c3c:	52002000 	.word	0x52002000
 8000c40:	58024400 	.word	0x58024400
 8000c44:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c48:	02020200 	.word	0x02020200
 8000c4c:	01ff0000 	.word	0x01ff0000
 8000c50:	01010280 	.word	0x01010280
 8000c54:	52004000 	.word	0x52004000

08000c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c5c:	f7ff ff84 	bl	8000b68 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c60:	480c      	ldr	r0, [pc, #48]	; (8000c94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c62:	490d      	ldr	r1, [pc, #52]	; (8000c98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c78:	4c0a      	ldr	r4, [pc, #40]	; (8000ca4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c86:	f006 fd61 	bl	800774c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8a:	f7ff fcb3 	bl	80005f4 <main>
  bx  lr
 8000c8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c90:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000c94:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c98:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8000c9c:	08007868 	.word	0x08007868
  ldr r2, =_sbss
 8000ca0:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8000ca4:	240fae18 	.word	0x240fae18

08000ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC_IRQHandler>
	...

08000cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb2:	2003      	movs	r0, #3
 8000cb4:	f000 f93e 	bl	8000f34 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000cb8:	f001 f94c 	bl	8001f54 <HAL_RCC_GetSysClockFreq>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <HAL_Init+0x68>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	0a1b      	lsrs	r3, r3, #8
 8000cc4:	f003 030f 	and.w	r3, r3, #15
 8000cc8:	4913      	ldr	r1, [pc, #76]	; (8000d18 <HAL_Init+0x6c>)
 8000cca:	5ccb      	ldrb	r3, [r1, r3]
 8000ccc:	f003 031f 	and.w	r3, r3, #31
 8000cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <HAL_Init+0x68>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <HAL_Init+0x6c>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	f003 031f 	and.w	r3, r3, #31
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cec:	4a0b      	ldr	r2, [pc, #44]	; (8000d1c <HAL_Init+0x70>)
 8000cee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000cf0:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <HAL_Init+0x74>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cf6:	200f      	movs	r0, #15
 8000cf8:	f000 f814 	bl	8000d24 <HAL_InitTick>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e002      	b.n	8000d0c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d06:	f7ff fe87 	bl	8000a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	58024400 	.word	0x58024400
 8000d18:	08007820 	.word	0x08007820
 8000d1c:	24000004 	.word	0x24000004
 8000d20:	24000000 	.word	0x24000000

08000d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_InitTick+0x60>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d101      	bne.n	8000d38 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e021      	b.n	8000d7c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <HAL_InitTick+0x64>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_InitTick+0x60>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4619      	mov	r1, r3
 8000d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f915 	bl	8000f7e <HAL_SYSTICK_Config>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e00e      	b.n	8000d7c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b0f      	cmp	r3, #15
 8000d62:	d80a      	bhi.n	8000d7a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d64:	2200      	movs	r2, #0
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6c:	f000 f8ed 	bl	8000f4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d70:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <HAL_InitTick+0x68>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d76:	2300      	movs	r3, #0
 8000d78:	e000      	b.n	8000d7c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	2400000c 	.word	0x2400000c
 8000d88:	24000000 	.word	0x24000000
 8000d8c:	24000008 	.word	0x24000008

08000d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_IncTick+0x20>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x24>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4413      	add	r3, r2
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <HAL_IncTick+0x24>)
 8000da2:	6013      	str	r3, [r2, #0]
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	2400000c 	.word	0x2400000c
 8000db4:	240000c4 	.word	0x240000c4

08000db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return uwTick;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <HAL_GetTick+0x14>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	240000c4 	.word	0x240000c4

08000dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <__NVIC_SetPriorityGrouping+0x40>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dec:	4013      	ands	r3, r2
 8000dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfe:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <__NVIC_SetPriorityGrouping+0x40>)
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	60d3      	str	r3, [r2, #12]
}
 8000e04:	bf00      	nop
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00
 8000e14:	05fa0000 	.word	0x05fa0000

08000e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <__NVIC_GetPriorityGrouping+0x18>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	f003 0307 	and.w	r3, r3, #7
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	6039      	str	r1, [r7, #0]
 8000e3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	db0a      	blt.n	8000e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	490c      	ldr	r1, [pc, #48]	; (8000e80 <__NVIC_SetPriority+0x4c>)
 8000e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e52:	0112      	lsls	r2, r2, #4
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	440b      	add	r3, r1
 8000e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e5c:	e00a      	b.n	8000e74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4908      	ldr	r1, [pc, #32]	; (8000e84 <__NVIC_SetPriority+0x50>)
 8000e64:	88fb      	ldrh	r3, [r7, #6]
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	3b04      	subs	r3, #4
 8000e6c:	0112      	lsls	r2, r2, #4
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	440b      	add	r3, r1
 8000e72:	761a      	strb	r2, [r3, #24]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000e100 	.word	0xe000e100
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b089      	sub	sp, #36	; 0x24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	bf28      	it	cs
 8000ea6:	2304      	movcs	r3, #4
 8000ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3304      	adds	r3, #4
 8000eae:	2b06      	cmp	r3, #6
 8000eb0:	d902      	bls.n	8000eb8 <NVIC_EncodePriority+0x30>
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3b03      	subs	r3, #3
 8000eb6:	e000      	b.n	8000eba <NVIC_EncodePriority+0x32>
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	401a      	ands	r2, r3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	43d9      	mvns	r1, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	4313      	orrs	r3, r2
         );
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3724      	adds	r7, #36	; 0x24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f00:	d301      	bcc.n	8000f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f02:	2301      	movs	r3, #1
 8000f04:	e00f      	b.n	8000f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f06:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <SysTick_Config+0x40>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f0e:	210f      	movs	r1, #15
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295
 8000f14:	f7ff ff8e 	bl	8000e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <SysTick_Config+0x40>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f1e:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <SysTick_Config+0x40>)
 8000f20:	2207      	movs	r2, #7
 8000f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	e000e010 	.word	0xe000e010

08000f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ff47 	bl	8000dd0 <__NVIC_SetPriorityGrouping>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b086      	sub	sp, #24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
 8000f56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f58:	f7ff ff5e 	bl	8000e18 <__NVIC_GetPriorityGrouping>
 8000f5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	68b9      	ldr	r1, [r7, #8]
 8000f62:	6978      	ldr	r0, [r7, #20]
 8000f64:	f7ff ff90 	bl	8000e88 <NVIC_EncodePriority>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f6e:	4611      	mov	r1, r2
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff5f 	bl	8000e34 <__NVIC_SetPriority>
}
 8000f76:	bf00      	nop
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ffb2 	bl	8000ef0 <SysTick_Config>
 8000f8c:	4603      	mov	r3, r0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	; 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000fa6:	4b89      	ldr	r3, [pc, #548]	; (80011cc <HAL_GPIO_Init+0x234>)
 8000fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000faa:	e194      	b.n	80012d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 8186 	beq.w	80012d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d005      	beq.n	8000fdc <HAL_GPIO_Init+0x44>
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d130      	bne.n	800103e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	68da      	ldr	r2, [r3, #12]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001012:	2201      	movs	r2, #1
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	091b      	lsrs	r3, r3, #4
 8001028:	f003 0201 	and.w	r2, r3, #1
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	2b03      	cmp	r3, #3
 8001048:	d017      	beq.n	800107a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	2203      	movs	r2, #3
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d123      	bne.n	80010ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	08da      	lsrs	r2, r3, #3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3208      	adds	r2, #8
 800108e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	220f      	movs	r2, #15
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	691a      	ldr	r2, [r3, #16]
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	08da      	lsrs	r2, r3, #3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3208      	adds	r2, #8
 80010c8:	69b9      	ldr	r1, [r7, #24]
 80010ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	2203      	movs	r2, #3
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0203 	and.w	r2, r3, #3
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 80e0 	beq.w	80012d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001110:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <HAL_GPIO_Init+0x238>)
 8001112:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001116:	4a2e      	ldr	r2, [pc, #184]	; (80011d0 <HAL_GPIO_Init+0x238>)
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001120:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <HAL_GPIO_Init+0x238>)
 8001122:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800112e:	4a29      	ldr	r2, [pc, #164]	; (80011d4 <HAL_GPIO_Init+0x23c>)
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	089b      	lsrs	r3, r3, #2
 8001134:	3302      	adds	r3, #2
 8001136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	220f      	movs	r2, #15
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a20      	ldr	r2, [pc, #128]	; (80011d8 <HAL_GPIO_Init+0x240>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d052      	beq.n	8001200 <HAL_GPIO_Init+0x268>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a1f      	ldr	r2, [pc, #124]	; (80011dc <HAL_GPIO_Init+0x244>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d031      	beq.n	80011c6 <HAL_GPIO_Init+0x22e>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a1e      	ldr	r2, [pc, #120]	; (80011e0 <HAL_GPIO_Init+0x248>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d02b      	beq.n	80011c2 <HAL_GPIO_Init+0x22a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a1d      	ldr	r2, [pc, #116]	; (80011e4 <HAL_GPIO_Init+0x24c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d025      	beq.n	80011be <HAL_GPIO_Init+0x226>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a1c      	ldr	r2, [pc, #112]	; (80011e8 <HAL_GPIO_Init+0x250>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d01f      	beq.n	80011ba <HAL_GPIO_Init+0x222>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <HAL_GPIO_Init+0x254>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d019      	beq.n	80011b6 <HAL_GPIO_Init+0x21e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a1a      	ldr	r2, [pc, #104]	; (80011f0 <HAL_GPIO_Init+0x258>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d013      	beq.n	80011b2 <HAL_GPIO_Init+0x21a>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a19      	ldr	r2, [pc, #100]	; (80011f4 <HAL_GPIO_Init+0x25c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d00d      	beq.n	80011ae <HAL_GPIO_Init+0x216>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a18      	ldr	r2, [pc, #96]	; (80011f8 <HAL_GPIO_Init+0x260>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d007      	beq.n	80011aa <HAL_GPIO_Init+0x212>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a17      	ldr	r2, [pc, #92]	; (80011fc <HAL_GPIO_Init+0x264>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d101      	bne.n	80011a6 <HAL_GPIO_Init+0x20e>
 80011a2:	2309      	movs	r3, #9
 80011a4:	e02d      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011a6:	230a      	movs	r3, #10
 80011a8:	e02b      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011aa:	2308      	movs	r3, #8
 80011ac:	e029      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011ae:	2307      	movs	r3, #7
 80011b0:	e027      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011b2:	2306      	movs	r3, #6
 80011b4:	e025      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011b6:	2305      	movs	r3, #5
 80011b8:	e023      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011ba:	2304      	movs	r3, #4
 80011bc:	e021      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011be:	2303      	movs	r3, #3
 80011c0:	e01f      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e01d      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e01b      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011ca:	bf00      	nop
 80011cc:	58000080 	.word	0x58000080
 80011d0:	58024400 	.word	0x58024400
 80011d4:	58000400 	.word	0x58000400
 80011d8:	58020000 	.word	0x58020000
 80011dc:	58020400 	.word	0x58020400
 80011e0:	58020800 	.word	0x58020800
 80011e4:	58020c00 	.word	0x58020c00
 80011e8:	58021000 	.word	0x58021000
 80011ec:	58021400 	.word	0x58021400
 80011f0:	58021800 	.word	0x58021800
 80011f4:	58021c00 	.word	0x58021c00
 80011f8:	58022000 	.word	0x58022000
 80011fc:	58022400 	.word	0x58022400
 8001200:	2300      	movs	r3, #0
 8001202:	69fa      	ldr	r2, [r7, #28]
 8001204:	f002 0203 	and.w	r2, r2, #3
 8001208:	0092      	lsls	r2, r2, #2
 800120a:	4093      	lsls	r3, r2
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001212:	4938      	ldr	r1, [pc, #224]	; (80012f4 <HAL_GPIO_Init+0x35c>)
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	089b      	lsrs	r3, r3, #2
 8001218:	3302      	adds	r3, #2
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001246:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800124e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001274:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	3301      	adds	r3, #1
 80012d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	fa22 f303 	lsr.w	r3, r2, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f47f ae63 	bne.w	8000fac <HAL_GPIO_Init+0x14>
  }
}
 80012e6:	bf00      	nop
 80012e8:	bf00      	nop
 80012ea:	3724      	adds	r7, #36	; 0x24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	58000400 	.word	0x58000400

080012f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
 8001304:	4613      	mov	r3, r2
 8001306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001308:	787b      	ldrb	r3, [r7, #1]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001314:	e003      	b.n	800131e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001316:	887b      	ldrh	r3, [r7, #2]
 8001318:	041a      	lsls	r2, r3, #16
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	619a      	str	r2, [r3, #24]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001334:	4b29      	ldr	r3, [pc, #164]	; (80013dc <HAL_PWREx_ConfigSupply+0xb0>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	f003 0307 	and.w	r3, r3, #7
 800133c:	2b06      	cmp	r3, #6
 800133e:	d00a      	beq.n	8001356 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001340:	4b26      	ldr	r3, [pc, #152]	; (80013dc <HAL_PWREx_ConfigSupply+0xb0>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	429a      	cmp	r2, r3
 800134c:	d001      	beq.n	8001352 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e040      	b.n	80013d4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	e03e      	b.n	80013d4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001356:	4b21      	ldr	r3, [pc, #132]	; (80013dc <HAL_PWREx_ConfigSupply+0xb0>)
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800135e:	491f      	ldr	r1, [pc, #124]	; (80013dc <HAL_PWREx_ConfigSupply+0xb0>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4313      	orrs	r3, r2
 8001364:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001366:	f7ff fd27 	bl	8000db8 <HAL_GetTick>
 800136a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800136c:	e009      	b.n	8001382 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800136e:	f7ff fd23 	bl	8000db8 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800137c:	d901      	bls.n	8001382 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e028      	b.n	80013d4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <HAL_PWREx_ConfigSupply+0xb0>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800138a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800138e:	d1ee      	bne.n	800136e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b1e      	cmp	r3, #30
 8001394:	d008      	beq.n	80013a8 <HAL_PWREx_ConfigSupply+0x7c>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b2e      	cmp	r3, #46	; 0x2e
 800139a:	d005      	beq.n	80013a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b1d      	cmp	r3, #29
 80013a0:	d002      	beq.n	80013a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b2d      	cmp	r3, #45	; 0x2d
 80013a6:	d114      	bne.n	80013d2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80013a8:	f7ff fd06 	bl	8000db8 <HAL_GetTick>
 80013ac:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80013ae:	e009      	b.n	80013c4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80013b0:	f7ff fd02 	bl	8000db8 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013be:	d901      	bls.n	80013c4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e007      	b.n	80013d4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_PWREx_ConfigSupply+0xb0>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d0:	d1ee      	bne.n	80013b0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	58024800 	.word	0x58024800

080013e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08c      	sub	sp, #48	; 0x30
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e3f4      	b.n	8001bdc <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 80b3 	beq.w	8001566 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001400:	4b95      	ldr	r3, [pc, #596]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001408:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800140a:	4b93      	ldr	r3, [pc, #588]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 800140c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001412:	2b10      	cmp	r3, #16
 8001414:	d007      	beq.n	8001426 <HAL_RCC_OscConfig+0x46>
 8001416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001418:	2b18      	cmp	r3, #24
 800141a:	d112      	bne.n	8001442 <HAL_RCC_OscConfig+0x62>
 800141c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d10d      	bne.n	8001442 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001426:	4b8c      	ldr	r3, [pc, #560]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 8098 	beq.w	8001564 <HAL_RCC_OscConfig+0x184>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	f040 8093 	bne.w	8001564 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e3cc      	b.n	8001bdc <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800144a:	d106      	bne.n	800145a <HAL_RCC_OscConfig+0x7a>
 800144c:	4b82      	ldr	r3, [pc, #520]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a81      	ldr	r2, [pc, #516]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 8001452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	e058      	b.n	800150c <HAL_RCC_OscConfig+0x12c>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d112      	bne.n	8001488 <HAL_RCC_OscConfig+0xa8>
 8001462:	4b7d      	ldr	r3, [pc, #500]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a7c      	ldr	r2, [pc, #496]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 8001468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	4b7a      	ldr	r3, [pc, #488]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a79      	ldr	r2, [pc, #484]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 8001474:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	4b77      	ldr	r3, [pc, #476]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a76      	ldr	r2, [pc, #472]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 8001480:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	e041      	b.n	800150c <HAL_RCC_OscConfig+0x12c>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001490:	d112      	bne.n	80014b8 <HAL_RCC_OscConfig+0xd8>
 8001492:	4b71      	ldr	r3, [pc, #452]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a70      	ldr	r2, [pc, #448]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 8001498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	4b6e      	ldr	r3, [pc, #440]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a6d      	ldr	r2, [pc, #436]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 80014a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	4b6b      	ldr	r3, [pc, #428]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a6a      	ldr	r2, [pc, #424]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 80014b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	e029      	b.n	800150c <HAL_RCC_OscConfig+0x12c>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80014c0:	d112      	bne.n	80014e8 <HAL_RCC_OscConfig+0x108>
 80014c2:	4b65      	ldr	r3, [pc, #404]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a64      	ldr	r2, [pc, #400]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 80014c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	4b62      	ldr	r3, [pc, #392]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a61      	ldr	r2, [pc, #388]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 80014d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	4b5f      	ldr	r3, [pc, #380]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a5e      	ldr	r2, [pc, #376]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 80014e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e011      	b.n	800150c <HAL_RCC_OscConfig+0x12c>
 80014e8:	4b5b      	ldr	r3, [pc, #364]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a5a      	ldr	r2, [pc, #360]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 80014ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b58      	ldr	r3, [pc, #352]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a57      	ldr	r2, [pc, #348]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 80014fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4b55      	ldr	r3, [pc, #340]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a54      	ldr	r2, [pc, #336]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 8001506:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800150a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d013      	beq.n	800153c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001514:	f7ff fc50 	bl	8000db8 <HAL_GetTick>
 8001518:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800151c:	f7ff fc4c 	bl	8000db8 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b64      	cmp	r3, #100	; 0x64
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e356      	b.n	8001bdc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800152e:	4b4a      	ldr	r3, [pc, #296]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0f0      	beq.n	800151c <HAL_RCC_OscConfig+0x13c>
 800153a:	e014      	b.n	8001566 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff fc3c 	bl	8000db8 <HAL_GetTick>
 8001540:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001544:	f7ff fc38 	bl	8000db8 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	; 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e342      	b.n	8001bdc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001556:	4b40      	ldr	r3, [pc, #256]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x164>
 8001562:	e000      	b.n	8001566 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 808d 	beq.w	800168e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001574:	4b38      	ldr	r3, [pc, #224]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800157c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800157e:	4b36      	ldr	r3, [pc, #216]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 8001580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001582:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001584:	6a3b      	ldr	r3, [r7, #32]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d007      	beq.n	800159a <HAL_RCC_OscConfig+0x1ba>
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	2b18      	cmp	r3, #24
 800158e:	d137      	bne.n	8001600 <HAL_RCC_OscConfig+0x220>
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d132      	bne.n	8001600 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800159a:	4b2f      	ldr	r3, [pc, #188]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d005      	beq.n	80015b2 <HAL_RCC_OscConfig+0x1d2>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e314      	b.n	8001bdc <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015b2:	4b29      	ldr	r3, [pc, #164]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f023 0219 	bic.w	r2, r3, #25
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	4926      	ldr	r1, [pc, #152]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80015c4:	f7ff fbf8 	bl	8000db8 <HAL_GetTick>
 80015c8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015cc:	f7ff fbf4 	bl	8000db8 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e2fe      	b.n	8001bdc <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015de:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0304 	and.w	r3, r3, #4
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0f0      	beq.n	80015cc <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ea:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	061b      	lsls	r3, r3, #24
 80015f8:	4917      	ldr	r1, [pc, #92]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015fe:	e046      	b.n	800168e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d029      	beq.n	800165c <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f023 0219 	bic.w	r2, r3, #25
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	4910      	ldr	r1, [pc, #64]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161a:	f7ff fbcd 	bl	8000db8 <HAL_GetTick>
 800161e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001622:	f7ff fbc9 	bl	8000db8 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e2d3      	b.n	8001bdc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f0      	beq.n	8001622 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	061b      	lsls	r3, r3, #24
 800164e:	4902      	ldr	r1, [pc, #8]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 8001650:	4313      	orrs	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
 8001654:	e01b      	b.n	800168e <HAL_RCC_OscConfig+0x2ae>
 8001656:	bf00      	nop
 8001658:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800165c:	4b97      	ldr	r3, [pc, #604]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a96      	ldr	r2, [pc, #600]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 8001662:	f023 0301 	bic.w	r3, r3, #1
 8001666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff fba6 	bl	8000db8 <HAL_GetTick>
 800166c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001670:	f7ff fba2 	bl	8000db8 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e2ac      	b.n	8001bdc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001682:	4b8e      	ldr	r3, [pc, #568]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0310 	and.w	r3, r3, #16
 8001696:	2b00      	cmp	r3, #0
 8001698:	d06a      	beq.n	8001770 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800169a:	4b88      	ldr	r3, [pc, #544]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016a4:	4b85      	ldr	r3, [pc, #532]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 80016a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	d007      	beq.n	80016c0 <HAL_RCC_OscConfig+0x2e0>
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2b18      	cmp	r3, #24
 80016b4:	d11b      	bne.n	80016ee <HAL_RCC_OscConfig+0x30e>
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d116      	bne.n	80016ee <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016c0:	4b7e      	ldr	r3, [pc, #504]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_OscConfig+0x2f8>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	2b80      	cmp	r3, #128	; 0x80
 80016d2:	d001      	beq.n	80016d8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e281      	b.n	8001bdc <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016d8:	4b78      	ldr	r3, [pc, #480]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	061b      	lsls	r3, r3, #24
 80016e6:	4975      	ldr	r1, [pc, #468]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016ec:	e040      	b.n	8001770 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d023      	beq.n	800173e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80016f6:	4b71      	ldr	r3, [pc, #452]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a70      	ldr	r2, [pc, #448]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 80016fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001702:	f7ff fb59 	bl	8000db8 <HAL_GetTick>
 8001706:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800170a:	f7ff fb55 	bl	8000db8 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e25f      	b.n	8001bdc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800171c:	4b67      	ldr	r3, [pc, #412]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001728:	4b64      	ldr	r3, [pc, #400]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	061b      	lsls	r3, r3, #24
 8001736:	4961      	ldr	r1, [pc, #388]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 8001738:	4313      	orrs	r3, r2
 800173a:	60cb      	str	r3, [r1, #12]
 800173c:	e018      	b.n	8001770 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800173e:	4b5f      	ldr	r3, [pc, #380]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a5e      	ldr	r2, [pc, #376]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 8001744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174a:	f7ff fb35 	bl	8000db8 <HAL_GetTick>
 800174e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001752:	f7ff fb31 	bl	8000db8 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e23b      	b.n	8001bdc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001764:	4b55      	ldr	r3, [pc, #340]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1f0      	bne.n	8001752 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	2b00      	cmp	r3, #0
 800177a:	d036      	beq.n	80017ea <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d019      	beq.n	80017b8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001784:	4b4d      	ldr	r3, [pc, #308]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 8001786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001788:	4a4c      	ldr	r2, [pc, #304]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001790:	f7ff fb12 	bl	8000db8 <HAL_GetTick>
 8001794:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001798:	f7ff fb0e 	bl	8000db8 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e218      	b.n	8001bdc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017aa:	4b44      	ldr	r3, [pc, #272]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 80017ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0x3b8>
 80017b6:	e018      	b.n	80017ea <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b8:	4b40      	ldr	r3, [pc, #256]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 80017ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017bc:	4a3f      	ldr	r2, [pc, #252]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 80017be:	f023 0301 	bic.w	r3, r3, #1
 80017c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c4:	f7ff faf8 	bl	8000db8 <HAL_GetTick>
 80017c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017cc:	f7ff faf4 	bl	8000db8 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e1fe      	b.n	8001bdc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017de:	4b37      	ldr	r3, [pc, #220]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 80017e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0320 	and.w	r3, r3, #32
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d036      	beq.n	8001864 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d019      	beq.n	8001832 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017fe:	4b2f      	ldr	r3, [pc, #188]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a2e      	ldr	r2, [pc, #184]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 8001804:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001808:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800180a:	f7ff fad5 	bl	8000db8 <HAL_GetTick>
 800180e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001812:	f7ff fad1 	bl	8000db8 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e1db      	b.n	8001bdc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001824:	4b25      	ldr	r3, [pc, #148]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0f0      	beq.n	8001812 <HAL_RCC_OscConfig+0x432>
 8001830:	e018      	b.n	8001864 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001832:	4b22      	ldr	r3, [pc, #136]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a21      	ldr	r2, [pc, #132]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 8001838:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800183c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800183e:	f7ff fabb 	bl	8000db8 <HAL_GetTick>
 8001842:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001846:	f7ff fab7 	bl	8000db8 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e1c1      	b.n	8001bdc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001858:	4b18      	ldr	r3, [pc, #96]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1f0      	bne.n	8001846 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 80af 	beq.w	80019d0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001872:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <HAL_RCC_OscConfig+0x4e0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <HAL_RCC_OscConfig+0x4e0>)
 8001878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800187e:	f7ff fa9b 	bl	8000db8 <HAL_GetTick>
 8001882:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001886:	f7ff fa97 	bl	8000db8 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b64      	cmp	r3, #100	; 0x64
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e1a1      	b.n	8001bdc <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_RCC_OscConfig+0x4e0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d10b      	bne.n	80018c4 <HAL_RCC_OscConfig+0x4e4>
 80018ac:	4b03      	ldr	r3, [pc, #12]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 80018ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b0:	4a02      	ldr	r2, [pc, #8]	; (80018bc <HAL_RCC_OscConfig+0x4dc>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6713      	str	r3, [r2, #112]	; 0x70
 80018b8:	e05b      	b.n	8001972 <HAL_RCC_OscConfig+0x592>
 80018ba:	bf00      	nop
 80018bc:	58024400 	.word	0x58024400
 80018c0:	58024800 	.word	0x58024800
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d112      	bne.n	80018f2 <HAL_RCC_OscConfig+0x512>
 80018cc:	4b9d      	ldr	r3, [pc, #628]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 80018ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d0:	4a9c      	ldr	r2, [pc, #624]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 80018d2:	f023 0301 	bic.w	r3, r3, #1
 80018d6:	6713      	str	r3, [r2, #112]	; 0x70
 80018d8:	4b9a      	ldr	r3, [pc, #616]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 80018da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018dc:	4a99      	ldr	r2, [pc, #612]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 80018de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018e2:	6713      	str	r3, [r2, #112]	; 0x70
 80018e4:	4b97      	ldr	r3, [pc, #604]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 80018e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e8:	4a96      	ldr	r2, [pc, #600]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 80018ea:	f023 0304 	bic.w	r3, r3, #4
 80018ee:	6713      	str	r3, [r2, #112]	; 0x70
 80018f0:	e03f      	b.n	8001972 <HAL_RCC_OscConfig+0x592>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b05      	cmp	r3, #5
 80018f8:	d112      	bne.n	8001920 <HAL_RCC_OscConfig+0x540>
 80018fa:	4b92      	ldr	r3, [pc, #584]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 80018fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fe:	4a91      	ldr	r2, [pc, #580]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001900:	f043 0304 	orr.w	r3, r3, #4
 8001904:	6713      	str	r3, [r2, #112]	; 0x70
 8001906:	4b8f      	ldr	r3, [pc, #572]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190a:	4a8e      	ldr	r2, [pc, #568]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 800190c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001910:	6713      	str	r3, [r2, #112]	; 0x70
 8001912:	4b8c      	ldr	r3, [pc, #560]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001916:	4a8b      	ldr	r2, [pc, #556]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6713      	str	r3, [r2, #112]	; 0x70
 800191e:	e028      	b.n	8001972 <HAL_RCC_OscConfig+0x592>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b85      	cmp	r3, #133	; 0x85
 8001926:	d112      	bne.n	800194e <HAL_RCC_OscConfig+0x56e>
 8001928:	4b86      	ldr	r3, [pc, #536]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 800192a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192c:	4a85      	ldr	r2, [pc, #532]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 800192e:	f043 0304 	orr.w	r3, r3, #4
 8001932:	6713      	str	r3, [r2, #112]	; 0x70
 8001934:	4b83      	ldr	r3, [pc, #524]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001938:	4a82      	ldr	r2, [pc, #520]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 800193a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800193e:	6713      	str	r3, [r2, #112]	; 0x70
 8001940:	4b80      	ldr	r3, [pc, #512]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001944:	4a7f      	ldr	r2, [pc, #508]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6713      	str	r3, [r2, #112]	; 0x70
 800194c:	e011      	b.n	8001972 <HAL_RCC_OscConfig+0x592>
 800194e:	4b7d      	ldr	r3, [pc, #500]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001952:	4a7c      	ldr	r2, [pc, #496]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001954:	f023 0301 	bic.w	r3, r3, #1
 8001958:	6713      	str	r3, [r2, #112]	; 0x70
 800195a:	4b7a      	ldr	r3, [pc, #488]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 800195c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195e:	4a79      	ldr	r2, [pc, #484]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001960:	f023 0304 	bic.w	r3, r3, #4
 8001964:	6713      	str	r3, [r2, #112]	; 0x70
 8001966:	4b77      	ldr	r3, [pc, #476]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196a:	4a76      	ldr	r2, [pc, #472]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 800196c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001970:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d015      	beq.n	80019a6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197a:	f7ff fa1d 	bl	8000db8 <HAL_GetTick>
 800197e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001980:	e00a      	b.n	8001998 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001982:	f7ff fa19 	bl	8000db8 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001990:	4293      	cmp	r3, r2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e121      	b.n	8001bdc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001998:	4b6a      	ldr	r3, [pc, #424]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 800199a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0ee      	beq.n	8001982 <HAL_RCC_OscConfig+0x5a2>
 80019a4:	e014      	b.n	80019d0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a6:	f7ff fa07 	bl	8000db8 <HAL_GetTick>
 80019aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019ac:	e00a      	b.n	80019c4 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ae:	f7ff fa03 	bl	8000db8 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019bc:	4293      	cmp	r3, r2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e10b      	b.n	8001bdc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019c4:	4b5f      	ldr	r3, [pc, #380]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 80019c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1ee      	bne.n	80019ae <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 8100 	beq.w	8001bda <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80019da:	4b5a      	ldr	r3, [pc, #360]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019e2:	2b18      	cmp	r3, #24
 80019e4:	f000 80bb 	beq.w	8001b5e <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	f040 8095 	bne.w	8001b1c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f2:	4b54      	ldr	r3, [pc, #336]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a53      	ldr	r2, [pc, #332]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 80019f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fe:	f7ff f9db 	bl	8000db8 <HAL_GetTick>
 8001a02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a06:	f7ff f9d7 	bl	8000db8 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e0e1      	b.n	8001bdc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a18:	4b4a      	ldr	r3, [pc, #296]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1f0      	bne.n	8001a06 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a24:	4b47      	ldr	r3, [pc, #284]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001a26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a28:	4b47      	ldr	r3, [pc, #284]	; (8001b48 <HAL_RCC_OscConfig+0x768>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a34:	0112      	lsls	r2, r2, #4
 8001a36:	430a      	orrs	r2, r1
 8001a38:	4942      	ldr	r1, [pc, #264]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	628b      	str	r3, [r1, #40]	; 0x28
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	3b01      	subs	r3, #1
 8001a44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	025b      	lsls	r3, r3, #9
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	041b      	lsls	r3, r3, #16
 8001a5c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a60:	431a      	orrs	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a66:	3b01      	subs	r3, #1
 8001a68:	061b      	lsls	r3, r3, #24
 8001a6a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001a6e:	4935      	ldr	r1, [pc, #212]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001a74:	4b33      	ldr	r3, [pc, #204]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a78:	4a32      	ldr	r2, [pc, #200]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001a7a:	f023 0301 	bic.w	r3, r3, #1
 8001a7e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a80:	4b30      	ldr	r3, [pc, #192]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001a82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a84:	4b31      	ldr	r3, [pc, #196]	; (8001b4c <HAL_RCC_OscConfig+0x76c>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a8c:	00d2      	lsls	r2, r2, #3
 8001a8e:	492d      	ldr	r1, [pc, #180]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001a94:	4b2b      	ldr	r3, [pc, #172]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	f023 020c 	bic.w	r2, r3, #12
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	4928      	ldr	r1, [pc, #160]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001aa6:	4b27      	ldr	r3, [pc, #156]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	f023 0202 	bic.w	r2, r3, #2
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	4924      	ldr	r1, [pc, #144]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ab8:	4b22      	ldr	r3, [pc, #136]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abc:	4a21      	ldr	r2, [pc, #132]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ac4:	4b1f      	ldr	r3, [pc, #124]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	4a1e      	ldr	r2, [pc, #120]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ace:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001ad0:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad4:	4a1b      	ldr	r2, [pc, #108]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001ad6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ada:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001adc:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae0:	4a18      	ldr	r2, [pc, #96]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ae8:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a15      	ldr	r2, [pc, #84]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001af2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af4:	f7ff f960 	bl	8000db8 <HAL_GetTick>
 8001af8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001afc:	f7ff f95c 	bl	8000db8 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e066      	b.n	8001bdc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x71c>
 8001b1a:	e05e      	b.n	8001bda <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a08      	ldr	r2, [pc, #32]	; (8001b44 <HAL_RCC_OscConfig+0x764>)
 8001b22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b28:	f7ff f946 	bl	8000db8 <HAL_GetTick>
 8001b2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b2e:	e00f      	b.n	8001b50 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b30:	f7ff f942 	bl	8000db8 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d908      	bls.n	8001b50 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e04c      	b.n	8001bdc <HAL_RCC_OscConfig+0x7fc>
 8001b42:	bf00      	nop
 8001b44:	58024400 	.word	0x58024400
 8001b48:	fffffc0c 	.word	0xfffffc0c
 8001b4c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b50:	4b24      	ldr	r3, [pc, #144]	; (8001be4 <HAL_RCC_OscConfig+0x804>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1e9      	bne.n	8001b30 <HAL_RCC_OscConfig+0x750>
 8001b5c:	e03d      	b.n	8001bda <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b5e:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <HAL_RCC_OscConfig+0x804>)
 8001b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b62:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b64:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <HAL_RCC_OscConfig+0x804>)
 8001b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b68:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d031      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	f003 0203 	and.w	r2, r3, #3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d12a      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	091b      	lsrs	r3, r3, #4
 8001b84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d122      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d11a      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	0a5b      	lsrs	r3, r3, #9
 8001ba4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bac:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d111      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	0c1b      	lsrs	r3, r3, #16
 8001bb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bbe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d108      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	0e1b      	lsrs	r3, r3, #24
 8001bc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d001      	beq.n	8001bda <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3730      	adds	r7, #48	; 0x30
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	58024400 	.word	0x58024400

08001be8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e19c      	b.n	8001f36 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bfc:	4b8a      	ldr	r3, [pc, #552]	; (8001e28 <HAL_RCC_ClockConfig+0x240>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 030f 	and.w	r3, r3, #15
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d910      	bls.n	8001c2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0a:	4b87      	ldr	r3, [pc, #540]	; (8001e28 <HAL_RCC_ClockConfig+0x240>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 020f 	bic.w	r2, r3, #15
 8001c12:	4985      	ldr	r1, [pc, #532]	; (8001e28 <HAL_RCC_ClockConfig+0x240>)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1a:	4b83      	ldr	r3, [pc, #524]	; (8001e28 <HAL_RCC_ClockConfig+0x240>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e184      	b.n	8001f36 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d010      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	4b7b      	ldr	r3, [pc, #492]	; (8001e2c <HAL_RCC_ClockConfig+0x244>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d908      	bls.n	8001c5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c48:	4b78      	ldr	r3, [pc, #480]	; (8001e2c <HAL_RCC_ClockConfig+0x244>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	4975      	ldr	r1, [pc, #468]	; (8001e2c <HAL_RCC_ClockConfig+0x244>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d010      	beq.n	8001c88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	4b70      	ldr	r3, [pc, #448]	; (8001e2c <HAL_RCC_ClockConfig+0x244>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d908      	bls.n	8001c88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c76:	4b6d      	ldr	r3, [pc, #436]	; (8001e2c <HAL_RCC_ClockConfig+0x244>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	496a      	ldr	r1, [pc, #424]	; (8001e2c <HAL_RCC_ClockConfig+0x244>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0310 	and.w	r3, r3, #16
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d010      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	699a      	ldr	r2, [r3, #24]
 8001c98:	4b64      	ldr	r3, [pc, #400]	; (8001e2c <HAL_RCC_ClockConfig+0x244>)
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d908      	bls.n	8001cb6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ca4:	4b61      	ldr	r3, [pc, #388]	; (8001e2c <HAL_RCC_ClockConfig+0x244>)
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	495e      	ldr	r1, [pc, #376]	; (8001e2c <HAL_RCC_ClockConfig+0x244>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0320 	and.w	r3, r3, #32
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d010      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69da      	ldr	r2, [r3, #28]
 8001cc6:	4b59      	ldr	r3, [pc, #356]	; (8001e2c <HAL_RCC_ClockConfig+0x244>)
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d908      	bls.n	8001ce4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001cd2:	4b56      	ldr	r3, [pc, #344]	; (8001e2c <HAL_RCC_ClockConfig+0x244>)
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	4953      	ldr	r1, [pc, #332]	; (8001e2c <HAL_RCC_ClockConfig+0x244>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d010      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	4b4d      	ldr	r3, [pc, #308]	; (8001e2c <HAL_RCC_ClockConfig+0x244>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d908      	bls.n	8001d12 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d00:	4b4a      	ldr	r3, [pc, #296]	; (8001e2c <HAL_RCC_ClockConfig+0x244>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f023 020f 	bic.w	r2, r3, #15
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	4947      	ldr	r1, [pc, #284]	; (8001e2c <HAL_RCC_ClockConfig+0x244>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d055      	beq.n	8001dca <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001d1e:	4b43      	ldr	r3, [pc, #268]	; (8001e2c <HAL_RCC_ClockConfig+0x244>)
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	4940      	ldr	r1, [pc, #256]	; (8001e2c <HAL_RCC_ClockConfig+0x244>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d107      	bne.n	8001d48 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d38:	4b3c      	ldr	r3, [pc, #240]	; (8001e2c <HAL_RCC_ClockConfig+0x244>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d121      	bne.n	8001d88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0f6      	b.n	8001f36 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d107      	bne.n	8001d60 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d50:	4b36      	ldr	r3, [pc, #216]	; (8001e2c <HAL_RCC_ClockConfig+0x244>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d115      	bne.n	8001d88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0ea      	b.n	8001f36 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d107      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d68:	4b30      	ldr	r3, [pc, #192]	; (8001e2c <HAL_RCC_ClockConfig+0x244>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d109      	bne.n	8001d88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0de      	b.n	8001f36 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d78:	4b2c      	ldr	r3, [pc, #176]	; (8001e2c <HAL_RCC_ClockConfig+0x244>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0d6      	b.n	8001f36 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d88:	4b28      	ldr	r3, [pc, #160]	; (8001e2c <HAL_RCC_ClockConfig+0x244>)
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	f023 0207 	bic.w	r2, r3, #7
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	4925      	ldr	r1, [pc, #148]	; (8001e2c <HAL_RCC_ClockConfig+0x244>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9a:	f7ff f80d 	bl	8000db8 <HAL_GetTick>
 8001d9e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da0:	e00a      	b.n	8001db8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da2:	f7ff f809 	bl	8000db8 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e0be      	b.n	8001f36 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db8:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <HAL_RCC_ClockConfig+0x244>)
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d1eb      	bne.n	8001da2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d010      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	4b14      	ldr	r3, [pc, #80]	; (8001e2c <HAL_RCC_ClockConfig+0x244>)
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d208      	bcs.n	8001df8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de6:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <HAL_RCC_ClockConfig+0x244>)
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	f023 020f 	bic.w	r2, r3, #15
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	490e      	ldr	r1, [pc, #56]	; (8001e2c <HAL_RCC_ClockConfig+0x244>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_RCC_ClockConfig+0x240>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 030f 	and.w	r3, r3, #15
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d214      	bcs.n	8001e30 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e06:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <HAL_RCC_ClockConfig+0x240>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 020f 	bic.w	r2, r3, #15
 8001e0e:	4906      	ldr	r1, [pc, #24]	; (8001e28 <HAL_RCC_ClockConfig+0x240>)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e16:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <HAL_RCC_ClockConfig+0x240>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d005      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e086      	b.n	8001f36 <HAL_RCC_ClockConfig+0x34e>
 8001e28:	52002000 	.word	0x52002000
 8001e2c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d010      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	4b3f      	ldr	r3, [pc, #252]	; (8001f40 <HAL_RCC_ClockConfig+0x358>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d208      	bcs.n	8001e5e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e4c:	4b3c      	ldr	r3, [pc, #240]	; (8001f40 <HAL_RCC_ClockConfig+0x358>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	4939      	ldr	r1, [pc, #228]	; (8001f40 <HAL_RCC_ClockConfig+0x358>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d010      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695a      	ldr	r2, [r3, #20]
 8001e6e:	4b34      	ldr	r3, [pc, #208]	; (8001f40 <HAL_RCC_ClockConfig+0x358>)
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d208      	bcs.n	8001e8c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e7a:	4b31      	ldr	r3, [pc, #196]	; (8001f40 <HAL_RCC_ClockConfig+0x358>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	492e      	ldr	r1, [pc, #184]	; (8001f40 <HAL_RCC_ClockConfig+0x358>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0310 	and.w	r3, r3, #16
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d010      	beq.n	8001eba <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	699a      	ldr	r2, [r3, #24]
 8001e9c:	4b28      	ldr	r3, [pc, #160]	; (8001f40 <HAL_RCC_ClockConfig+0x358>)
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d208      	bcs.n	8001eba <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ea8:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <HAL_RCC_ClockConfig+0x358>)
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	4922      	ldr	r1, [pc, #136]	; (8001f40 <HAL_RCC_ClockConfig+0x358>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0320 	and.w	r3, r3, #32
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d010      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69da      	ldr	r2, [r3, #28]
 8001eca:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <HAL_RCC_ClockConfig+0x358>)
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d208      	bcs.n	8001ee8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <HAL_RCC_ClockConfig+0x358>)
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	4917      	ldr	r1, [pc, #92]	; (8001f40 <HAL_RCC_ClockConfig+0x358>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001ee8:	f000 f834 	bl	8001f54 <HAL_RCC_GetSysClockFreq>
 8001eec:	4602      	mov	r2, r0
 8001eee:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <HAL_RCC_ClockConfig+0x358>)
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	0a1b      	lsrs	r3, r3, #8
 8001ef4:	f003 030f 	and.w	r3, r3, #15
 8001ef8:	4912      	ldr	r1, [pc, #72]	; (8001f44 <HAL_RCC_ClockConfig+0x35c>)
 8001efa:	5ccb      	ldrb	r3, [r1, r3]
 8001efc:	f003 031f 	and.w	r3, r3, #31
 8001f00:	fa22 f303 	lsr.w	r3, r2, r3
 8001f04:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <HAL_RCC_ClockConfig+0x358>)
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	4a0d      	ldr	r2, [pc, #52]	; (8001f44 <HAL_RCC_ClockConfig+0x35c>)
 8001f10:	5cd3      	ldrb	r3, [r2, r3]
 8001f12:	f003 031f 	and.w	r3, r3, #31
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1c:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <HAL_RCC_ClockConfig+0x360>)
 8001f1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f20:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <HAL_RCC_ClockConfig+0x364>)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001f26:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <HAL_RCC_ClockConfig+0x368>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe fefa 	bl	8000d24 <HAL_InitTick>
 8001f30:	4603      	mov	r3, r0
 8001f32:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	58024400 	.word	0x58024400
 8001f44:	08007820 	.word	0x08007820
 8001f48:	24000004 	.word	0x24000004
 8001f4c:	24000000 	.word	0x24000000
 8001f50:	24000008 	.word	0x24000008

08001f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b089      	sub	sp, #36	; 0x24
 8001f58:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f5a:	4bb3      	ldr	r3, [pc, #716]	; (8002228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f62:	2b18      	cmp	r3, #24
 8001f64:	f200 8155 	bhi.w	8002212 <HAL_RCC_GetSysClockFreq+0x2be>
 8001f68:	a201      	add	r2, pc, #4	; (adr r2, 8001f70 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f6e:	bf00      	nop
 8001f70:	08001fd5 	.word	0x08001fd5
 8001f74:	08002213 	.word	0x08002213
 8001f78:	08002213 	.word	0x08002213
 8001f7c:	08002213 	.word	0x08002213
 8001f80:	08002213 	.word	0x08002213
 8001f84:	08002213 	.word	0x08002213
 8001f88:	08002213 	.word	0x08002213
 8001f8c:	08002213 	.word	0x08002213
 8001f90:	08001ffb 	.word	0x08001ffb
 8001f94:	08002213 	.word	0x08002213
 8001f98:	08002213 	.word	0x08002213
 8001f9c:	08002213 	.word	0x08002213
 8001fa0:	08002213 	.word	0x08002213
 8001fa4:	08002213 	.word	0x08002213
 8001fa8:	08002213 	.word	0x08002213
 8001fac:	08002213 	.word	0x08002213
 8001fb0:	08002001 	.word	0x08002001
 8001fb4:	08002213 	.word	0x08002213
 8001fb8:	08002213 	.word	0x08002213
 8001fbc:	08002213 	.word	0x08002213
 8001fc0:	08002213 	.word	0x08002213
 8001fc4:	08002213 	.word	0x08002213
 8001fc8:	08002213 	.word	0x08002213
 8001fcc:	08002213 	.word	0x08002213
 8001fd0:	08002007 	.word	0x08002007
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fd4:	4b94      	ldr	r3, [pc, #592]	; (8002228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0320 	and.w	r3, r3, #32
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d009      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001fe0:	4b91      	ldr	r3, [pc, #580]	; (8002228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	08db      	lsrs	r3, r3, #3
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	4a90      	ldr	r2, [pc, #576]	; (800222c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001fec:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001ff2:	e111      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001ff4:	4b8d      	ldr	r3, [pc, #564]	; (800222c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ff6:	61bb      	str	r3, [r7, #24]
    break;
 8001ff8:	e10e      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001ffa:	4b8d      	ldr	r3, [pc, #564]	; (8002230 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ffc:	61bb      	str	r3, [r7, #24]
    break;
 8001ffe:	e10b      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002000:	4b8c      	ldr	r3, [pc, #560]	; (8002234 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002002:	61bb      	str	r3, [r7, #24]
    break;
 8002004:	e108      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002006:	4b88      	ldr	r3, [pc, #544]	; (8002228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002010:	4b85      	ldr	r3, [pc, #532]	; (8002228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800201a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800201c:	4b82      	ldr	r3, [pc, #520]	; (8002228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800201e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002026:	4b80      	ldr	r3, [pc, #512]	; (8002228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800202a:	08db      	lsrs	r3, r3, #3
 800202c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	fb02 f303 	mul.w	r3, r2, r3
 8002036:	ee07 3a90 	vmov	s15, r3
 800203a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800203e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 80e1 	beq.w	800220c <HAL_RCC_GetSysClockFreq+0x2b8>
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2b02      	cmp	r3, #2
 800204e:	f000 8083 	beq.w	8002158 <HAL_RCC_GetSysClockFreq+0x204>
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2b02      	cmp	r3, #2
 8002056:	f200 80a1 	bhi.w	800219c <HAL_RCC_GetSysClockFreq+0x248>
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_RCC_GetSysClockFreq+0x114>
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d056      	beq.n	8002114 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002066:	e099      	b.n	800219c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002068:	4b6f      	ldr	r3, [pc, #444]	; (8002228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0320 	and.w	r3, r3, #32
 8002070:	2b00      	cmp	r3, #0
 8002072:	d02d      	beq.n	80020d0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002074:	4b6c      	ldr	r3, [pc, #432]	; (8002228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	08db      	lsrs	r3, r3, #3
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	4a6b      	ldr	r2, [pc, #428]	; (800222c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002080:	fa22 f303 	lsr.w	r3, r2, r3
 8002084:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	ee07 3a90 	vmov	s15, r3
 800208c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	ee07 3a90 	vmov	s15, r3
 8002096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800209a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800209e:	4b62      	ldr	r3, [pc, #392]	; (8002228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020a6:	ee07 3a90 	vmov	s15, r3
 80020aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80020b2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002238 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80020ce:	e087      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	ee07 3a90 	vmov	s15, r3
 80020d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020da:	eddf 6a58 	vldr	s13, [pc, #352]	; 800223c <HAL_RCC_GetSysClockFreq+0x2e8>
 80020de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020e2:	4b51      	ldr	r3, [pc, #324]	; (8002228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020ea:	ee07 3a90 	vmov	s15, r3
 80020ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80020f6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002238 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800210a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800210e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002112:	e065      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	ee07 3a90 	vmov	s15, r3
 800211a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800211e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002240 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002126:	4b40      	ldr	r3, [pc, #256]	; (8002228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800212e:	ee07 3a90 	vmov	s15, r3
 8002132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002136:	ed97 6a02 	vldr	s12, [r7, #8]
 800213a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002238 <HAL_RCC_GetSysClockFreq+0x2e4>
 800213e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800214a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800214e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002152:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002156:	e043      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	ee07 3a90 	vmov	s15, r3
 800215e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002162:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002244 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800216a:	4b2f      	ldr	r3, [pc, #188]	; (8002228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002172:	ee07 3a90 	vmov	s15, r3
 8002176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800217a:	ed97 6a02 	vldr	s12, [r7, #8]
 800217e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002238 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800218a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800218e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002196:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800219a:	e021      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	ee07 3a90 	vmov	s15, r3
 80021a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002240 <HAL_RCC_GetSysClockFreq+0x2ec>
 80021aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021ae:	4b1e      	ldr	r3, [pc, #120]	; (8002228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021b6:	ee07 3a90 	vmov	s15, r3
 80021ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021be:	ed97 6a02 	vldr	s12, [r7, #8]
 80021c2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002238 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80021de:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80021e0:	4b11      	ldr	r3, [pc, #68]	; (8002228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e4:	0a5b      	lsrs	r3, r3, #9
 80021e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021ea:	3301      	adds	r3, #1
 80021ec:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	ee07 3a90 	vmov	s15, r3
 80021f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80021fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002204:	ee17 3a90 	vmov	r3, s15
 8002208:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800220a:	e005      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	61bb      	str	r3, [r7, #24]
    break;
 8002210:	e002      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002212:	4b07      	ldr	r3, [pc, #28]	; (8002230 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002214:	61bb      	str	r3, [r7, #24]
    break;
 8002216:	bf00      	nop
  }

  return sysclockfreq;
 8002218:	69bb      	ldr	r3, [r7, #24]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3724      	adds	r7, #36	; 0x24
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	58024400 	.word	0x58024400
 800222c:	03d09000 	.word	0x03d09000
 8002230:	003d0900 	.word	0x003d0900
 8002234:	007a1200 	.word	0x007a1200
 8002238:	46000000 	.word	0x46000000
 800223c:	4c742400 	.word	0x4c742400
 8002240:	4a742400 	.word	0x4a742400
 8002244:	4af42400 	.word	0x4af42400

08002248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800224e:	f7ff fe81 	bl	8001f54 <HAL_RCC_GetSysClockFreq>
 8002252:	4602      	mov	r2, r0
 8002254:	4b10      	ldr	r3, [pc, #64]	; (8002298 <HAL_RCC_GetHCLKFreq+0x50>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	490f      	ldr	r1, [pc, #60]	; (800229c <HAL_RCC_GetHCLKFreq+0x54>)
 8002260:	5ccb      	ldrb	r3, [r1, r3]
 8002262:	f003 031f 	and.w	r3, r3, #31
 8002266:	fa22 f303 	lsr.w	r3, r2, r3
 800226a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800226c:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <HAL_RCC_GetHCLKFreq+0x50>)
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	f003 030f 	and.w	r3, r3, #15
 8002274:	4a09      	ldr	r2, [pc, #36]	; (800229c <HAL_RCC_GetHCLKFreq+0x54>)
 8002276:	5cd3      	ldrb	r3, [r2, r3]
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	fa22 f303 	lsr.w	r3, r2, r3
 8002282:	4a07      	ldr	r2, [pc, #28]	; (80022a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002284:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002286:	4a07      	ldr	r2, [pc, #28]	; (80022a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800228e:	681b      	ldr	r3, [r3, #0]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	58024400 	.word	0x58024400
 800229c:	08007820 	.word	0x08007820
 80022a0:	24000004 	.word	0x24000004
 80022a4:	24000000 	.word	0x24000000

080022a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80022ac:	f7ff ffcc 	bl	8002248 <HAL_RCC_GetHCLKFreq>
 80022b0:	4602      	mov	r2, r0
 80022b2:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	091b      	lsrs	r3, r3, #4
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	4904      	ldr	r1, [pc, #16]	; (80022d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022be:	5ccb      	ldrb	r3, [r1, r3]
 80022c0:	f003 031f 	and.w	r3, r3, #31
 80022c4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	58024400 	.word	0x58024400
 80022d0:	08007820 	.word	0x08007820

080022d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80022d8:	f7ff ffb6 	bl	8002248 <HAL_RCC_GetHCLKFreq>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	4904      	ldr	r1, [pc, #16]	; (80022fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80022ea:	5ccb      	ldrb	r3, [r1, r3]
 80022ec:	f003 031f 	and.w	r3, r3, #31
 80022f0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	58024400 	.word	0x58024400
 80022fc:	08007820 	.word	0x08007820

08002300 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002308:	2300      	movs	r3, #0
 800230a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800230c:	2300      	movs	r3, #0
 800230e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d03f      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002320:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002324:	d02a      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002326:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800232a:	d824      	bhi.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800232c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002330:	d018      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002332:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002336:	d81e      	bhi.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800233c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002340:	d007      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002342:	e018      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002344:	4b9f      	ldr	r3, [pc, #636]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	4a9e      	ldr	r2, [pc, #632]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800234a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800234e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002350:	e015      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3304      	adds	r3, #4
 8002356:	2102      	movs	r1, #2
 8002358:	4618      	mov	r0, r3
 800235a:	f001 f99b 	bl	8003694 <RCCEx_PLL2_Config>
 800235e:	4603      	mov	r3, r0
 8002360:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002362:	e00c      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3324      	adds	r3, #36	; 0x24
 8002368:	2102      	movs	r1, #2
 800236a:	4618      	mov	r0, r3
 800236c:	f001 fa44 	bl	80037f8 <RCCEx_PLL3_Config>
 8002370:	4603      	mov	r3, r0
 8002372:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002374:	e003      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	75fb      	strb	r3, [r7, #23]
      break;
 800237a:	e000      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800237c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800237e:	7dfb      	ldrb	r3, [r7, #23]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d109      	bne.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002384:	4b8f      	ldr	r3, [pc, #572]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002388:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002390:	498c      	ldr	r1, [pc, #560]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002392:	4313      	orrs	r3, r2
 8002394:	650b      	str	r3, [r1, #80]	; 0x50
 8002396:	e001      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002398:	7dfb      	ldrb	r3, [r7, #23]
 800239a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d03d      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d826      	bhi.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80023b0:	a201      	add	r2, pc, #4	; (adr r2, 80023b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80023b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b6:	bf00      	nop
 80023b8:	080023cd 	.word	0x080023cd
 80023bc:	080023db 	.word	0x080023db
 80023c0:	080023ed 	.word	0x080023ed
 80023c4:	08002405 	.word	0x08002405
 80023c8:	08002405 	.word	0x08002405
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023cc:	4b7d      	ldr	r3, [pc, #500]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d0:	4a7c      	ldr	r2, [pc, #496]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80023d8:	e015      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3304      	adds	r3, #4
 80023de:	2100      	movs	r1, #0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f001 f957 	bl	8003694 <RCCEx_PLL2_Config>
 80023e6:	4603      	mov	r3, r0
 80023e8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80023ea:	e00c      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3324      	adds	r3, #36	; 0x24
 80023f0:	2100      	movs	r1, #0
 80023f2:	4618      	mov	r0, r3
 80023f4:	f001 fa00 	bl	80037f8 <RCCEx_PLL3_Config>
 80023f8:	4603      	mov	r3, r0
 80023fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80023fc:	e003      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	75fb      	strb	r3, [r7, #23]
      break;
 8002402:	e000      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002404:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002406:	7dfb      	ldrb	r3, [r7, #23]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d109      	bne.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800240c:	4b6d      	ldr	r3, [pc, #436]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800240e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002410:	f023 0207 	bic.w	r2, r3, #7
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002418:	496a      	ldr	r1, [pc, #424]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800241a:	4313      	orrs	r3, r2
 800241c:	650b      	str	r3, [r1, #80]	; 0x50
 800241e:	e001      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002420:	7dfb      	ldrb	r3, [r7, #23]
 8002422:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800242c:	2b00      	cmp	r3, #0
 800242e:	d04a      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002434:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002438:	d031      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800243a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800243e:	d82b      	bhi.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002444:	d02d      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800244a:	d825      	bhi.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800244c:	2bc0      	cmp	r3, #192	; 0xc0
 800244e:	d02a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002450:	2bc0      	cmp	r3, #192	; 0xc0
 8002452:	d821      	bhi.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002454:	2b80      	cmp	r3, #128	; 0x80
 8002456:	d016      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002458:	2b80      	cmp	r3, #128	; 0x80
 800245a:	d81d      	bhi.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002460:	2b40      	cmp	r3, #64	; 0x40
 8002462:	d007      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002464:	e018      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002466:	4b57      	ldr	r3, [pc, #348]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	4a56      	ldr	r2, [pc, #344]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800246c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002470:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002472:	e019      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3304      	adds	r3, #4
 8002478:	2100      	movs	r1, #0
 800247a:	4618      	mov	r0, r3
 800247c:	f001 f90a 	bl	8003694 <RCCEx_PLL2_Config>
 8002480:	4603      	mov	r3, r0
 8002482:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002484:	e010      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3324      	adds	r3, #36	; 0x24
 800248a:	2100      	movs	r1, #0
 800248c:	4618      	mov	r0, r3
 800248e:	f001 f9b3 	bl	80037f8 <RCCEx_PLL3_Config>
 8002492:	4603      	mov	r3, r0
 8002494:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002496:	e007      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	75fb      	strb	r3, [r7, #23]
      break;
 800249c:	e004      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800249e:	bf00      	nop
 80024a0:	e002      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80024a2:	bf00      	nop
 80024a4:	e000      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80024a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024a8:	7dfb      	ldrb	r3, [r7, #23]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d109      	bne.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80024ae:	4b45      	ldr	r3, [pc, #276]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ba:	4942      	ldr	r1, [pc, #264]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	650b      	str	r3, [r1, #80]	; 0x50
 80024c0:	e001      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024c2:	7dfb      	ldrb	r3, [r7, #23]
 80024c4:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d04f      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80024da:	d036      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80024dc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80024e0:	d830      	bhi.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80024e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024e6:	d032      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80024e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024ec:	d82a      	bhi.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80024ee:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80024f2:	d02e      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x252>
 80024f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80024f8:	d824      	bhi.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80024fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024fe:	d018      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8002500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002504:	d81e      	bhi.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800250a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800250e:	d007      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8002510:	e018      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002512:	4b2c      	ldr	r3, [pc, #176]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002516:	4a2b      	ldr	r2, [pc, #172]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800251c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800251e:	e019      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3304      	adds	r3, #4
 8002524:	2100      	movs	r1, #0
 8002526:	4618      	mov	r0, r3
 8002528:	f001 f8b4 	bl	8003694 <RCCEx_PLL2_Config>
 800252c:	4603      	mov	r3, r0
 800252e:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002530:	e010      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3324      	adds	r3, #36	; 0x24
 8002536:	2100      	movs	r1, #0
 8002538:	4618      	mov	r0, r3
 800253a:	f001 f95d 	bl	80037f8 <RCCEx_PLL3_Config>
 800253e:	4603      	mov	r3, r0
 8002540:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002542:	e007      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	75fb      	strb	r3, [r7, #23]
      break;
 8002548:	e004      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800254a:	bf00      	nop
 800254c:	e002      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800254e:	bf00      	nop
 8002550:	e000      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002552:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002554:	7dfb      	ldrb	r3, [r7, #23]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d109      	bne.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800255a:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800255c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255e:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002566:	4917      	ldr	r1, [pc, #92]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002568:	4313      	orrs	r3, r2
 800256a:	650b      	str	r3, [r1, #80]	; 0x50
 800256c:	e001      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800256e:	7dfb      	ldrb	r3, [r7, #23]
 8002570:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d034      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002582:	2b30      	cmp	r3, #48	; 0x30
 8002584:	d01c      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8002586:	2b30      	cmp	r3, #48	; 0x30
 8002588:	d817      	bhi.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800258a:	2b20      	cmp	r3, #32
 800258c:	d00c      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800258e:	2b20      	cmp	r3, #32
 8002590:	d813      	bhi.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002592:	2b00      	cmp	r3, #0
 8002594:	d018      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8002596:	2b10      	cmp	r3, #16
 8002598:	d10f      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800259a:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800259c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259e:	4a09      	ldr	r2, [pc, #36]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80025a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80025a6:	e010      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3304      	adds	r3, #4
 80025ac:	2102      	movs	r1, #2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f001 f870 	bl	8003694 <RCCEx_PLL2_Config>
 80025b4:	4603      	mov	r3, r0
 80025b6:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80025b8:	e007      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	75fb      	strb	r3, [r7, #23]
      break;
 80025be:	e004      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 80025c0:	bf00      	nop
 80025c2:	e002      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80025c4:	58024400 	.word	0x58024400
      break;
 80025c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025ca:	7dfb      	ldrb	r3, [r7, #23]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d109      	bne.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80025d0:	4b9b      	ldr	r3, [pc, #620]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80025d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025dc:	4998      	ldr	r1, [pc, #608]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80025e2:	e001      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025e4:	7dfb      	ldrb	r3, [r7, #23]
 80025e6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d047      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025fc:	d030      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80025fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002602:	d82a      	bhi.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002604:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002608:	d02c      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800260a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800260e:	d824      	bhi.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002614:	d018      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800261a:	d81e      	bhi.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8002620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002624:	d007      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8002626:	e018      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002628:	4b85      	ldr	r3, [pc, #532]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800262a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262c:	4a84      	ldr	r2, [pc, #528]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800262e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002632:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002634:	e017      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3304      	adds	r3, #4
 800263a:	2100      	movs	r1, #0
 800263c:	4618      	mov	r0, r3
 800263e:	f001 f829 	bl	8003694 <RCCEx_PLL2_Config>
 8002642:	4603      	mov	r3, r0
 8002644:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002646:	e00e      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3324      	adds	r3, #36	; 0x24
 800264c:	2100      	movs	r1, #0
 800264e:	4618      	mov	r0, r3
 8002650:	f001 f8d2 	bl	80037f8 <RCCEx_PLL3_Config>
 8002654:	4603      	mov	r3, r0
 8002656:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002658:	e005      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	75fb      	strb	r3, [r7, #23]
      break;
 800265e:	e002      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002660:	bf00      	nop
 8002662:	e000      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002664:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002666:	7dfb      	ldrb	r3, [r7, #23]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d109      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800266c:	4b74      	ldr	r3, [pc, #464]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800266e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002670:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002678:	4971      	ldr	r1, [pc, #452]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800267a:	4313      	orrs	r3, r2
 800267c:	650b      	str	r3, [r1, #80]	; 0x50
 800267e:	e001      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002680:	7dfb      	ldrb	r3, [r7, #23]
 8002682:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d049      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002698:	d02e      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800269a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800269e:	d828      	bhi.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80026a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026a4:	d02a      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80026a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026aa:	d822      	bhi.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80026ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80026b0:	d026      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80026b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80026b6:	d81c      	bhi.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80026b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026bc:	d010      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80026be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026c2:	d816      	bhi.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d01d      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80026c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026cc:	d111      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3304      	adds	r3, #4
 80026d2:	2101      	movs	r1, #1
 80026d4:	4618      	mov	r0, r3
 80026d6:	f000 ffdd 	bl	8003694 <RCCEx_PLL2_Config>
 80026da:	4603      	mov	r3, r0
 80026dc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80026de:	e012      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3324      	adds	r3, #36	; 0x24
 80026e4:	2101      	movs	r1, #1
 80026e6:	4618      	mov	r0, r3
 80026e8:	f001 f886 	bl	80037f8 <RCCEx_PLL3_Config>
 80026ec:	4603      	mov	r3, r0
 80026ee:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80026f0:	e009      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	75fb      	strb	r3, [r7, #23]
      break;
 80026f6:	e006      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80026f8:	bf00      	nop
 80026fa:	e004      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80026fc:	bf00      	nop
 80026fe:	e002      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002700:	bf00      	nop
 8002702:	e000      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002704:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002706:	7dfb      	ldrb	r3, [r7, #23]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d109      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800270c:	4b4c      	ldr	r3, [pc, #304]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800270e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002710:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002718:	4949      	ldr	r1, [pc, #292]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800271a:	4313      	orrs	r3, r2
 800271c:	650b      	str	r3, [r1, #80]	; 0x50
 800271e:	e001      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002720:	7dfb      	ldrb	r3, [r7, #23]
 8002722:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d053      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002736:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800273a:	d034      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800273c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002740:	d82e      	bhi.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002742:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002746:	d030      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8002748:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800274c:	d828      	bhi.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800274e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002752:	d02c      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8002754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002758:	d822      	bhi.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800275a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800275e:	d028      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002760:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002764:	d81c      	bhi.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800276a:	d010      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x48e>
 800276c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002770:	d816      	bhi.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002772:	2b00      	cmp	r3, #0
 8002774:	d01f      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8002776:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800277a:	d111      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3304      	adds	r3, #4
 8002780:	2101      	movs	r1, #1
 8002782:	4618      	mov	r0, r3
 8002784:	f000 ff86 	bl	8003694 <RCCEx_PLL2_Config>
 8002788:	4603      	mov	r3, r0
 800278a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800278c:	e014      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3324      	adds	r3, #36	; 0x24
 8002792:	2101      	movs	r1, #1
 8002794:	4618      	mov	r0, r3
 8002796:	f001 f82f 	bl	80037f8 <RCCEx_PLL3_Config>
 800279a:	4603      	mov	r3, r0
 800279c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800279e:	e00b      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	75fb      	strb	r3, [r7, #23]
      break;
 80027a4:	e008      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80027a6:	bf00      	nop
 80027a8:	e006      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80027aa:	bf00      	nop
 80027ac:	e004      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80027ae:	bf00      	nop
 80027b0:	e002      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80027b2:	bf00      	nop
 80027b4:	e000      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80027b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027b8:	7dfb      	ldrb	r3, [r7, #23]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10a      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80027be:	4b20      	ldr	r3, [pc, #128]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80027cc:	491c      	ldr	r1, [pc, #112]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	658b      	str	r3, [r1, #88]	; 0x58
 80027d2:	e001      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d4:	7dfb      	ldrb	r3, [r7, #23]
 80027d6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d031      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027ec:	d00e      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80027ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027f2:	d814      	bhi.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d015      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80027f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027fc:	d10f      	bne.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027fe:	4b10      	ldr	r3, [pc, #64]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	4a0f      	ldr	r2, [pc, #60]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002808:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800280a:	e00c      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3304      	adds	r3, #4
 8002810:	2101      	movs	r1, #1
 8002812:	4618      	mov	r0, r3
 8002814:	f000 ff3e 	bl	8003694 <RCCEx_PLL2_Config>
 8002818:	4603      	mov	r3, r0
 800281a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800281c:	e003      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	75fb      	strb	r3, [r7, #23]
      break;
 8002822:	e000      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8002824:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002826:	7dfb      	ldrb	r3, [r7, #23]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10b      	bne.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800282c:	4b04      	ldr	r3, [pc, #16]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800282e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002830:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002838:	4901      	ldr	r1, [pc, #4]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800283a:	4313      	orrs	r3, r2
 800283c:	650b      	str	r3, [r1, #80]	; 0x50
 800283e:	e003      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8002840:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002844:	7dfb      	ldrb	r3, [r7, #23]
 8002846:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d032      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002858:	2b03      	cmp	r3, #3
 800285a:	d81b      	bhi.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800285c:	a201      	add	r2, pc, #4	; (adr r2, 8002864 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800285e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002862:	bf00      	nop
 8002864:	0800289b 	.word	0x0800289b
 8002868:	08002875 	.word	0x08002875
 800286c:	08002883 	.word	0x08002883
 8002870:	0800289b 	.word	0x0800289b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002874:	4bb2      	ldr	r3, [pc, #712]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002878:	4ab1      	ldr	r2, [pc, #708]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800287a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800287e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002880:	e00c      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3304      	adds	r3, #4
 8002886:	2102      	movs	r1, #2
 8002888:	4618      	mov	r0, r3
 800288a:	f000 ff03 	bl	8003694 <RCCEx_PLL2_Config>
 800288e:	4603      	mov	r3, r0
 8002890:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002892:	e003      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	75fb      	strb	r3, [r7, #23]
      break;
 8002898:	e000      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800289a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800289c:	7dfb      	ldrb	r3, [r7, #23]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80028a2:	4ba7      	ldr	r3, [pc, #668]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80028a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a6:	f023 0203 	bic.w	r2, r3, #3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	49a4      	ldr	r1, [pc, #656]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80028b4:	e001      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028b6:	7dfb      	ldrb	r3, [r7, #23]
 80028b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 8086 	beq.w	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028c8:	4b9e      	ldr	r3, [pc, #632]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a9d      	ldr	r2, [pc, #628]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80028ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028d4:	f7fe fa70 	bl	8000db8 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028da:	e009      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028dc:	f7fe fa6c 	bl	8000db8 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	; 0x64
 80028e8:	d902      	bls.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	75fb      	strb	r3, [r7, #23]
        break;
 80028ee:	e005      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028f0:	4b94      	ldr	r3, [pc, #592]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0ef      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80028fc:	7dfb      	ldrb	r3, [r7, #23]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d166      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002902:	4b8f      	ldr	r3, [pc, #572]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002904:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800290c:	4053      	eors	r3, r2
 800290e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002912:	2b00      	cmp	r3, #0
 8002914:	d013      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002916:	4b8a      	ldr	r3, [pc, #552]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800291e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002920:	4b87      	ldr	r3, [pc, #540]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002924:	4a86      	ldr	r2, [pc, #536]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800292a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800292c:	4b84      	ldr	r3, [pc, #528]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800292e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002930:	4a83      	ldr	r2, [pc, #524]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002936:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002938:	4a81      	ldr	r2, [pc, #516]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002948:	d115      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294a:	f7fe fa35 	bl	8000db8 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002950:	e00b      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002952:	f7fe fa31 	bl	8000db8 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002960:	4293      	cmp	r3, r2
 8002962:	d902      	bls.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	75fb      	strb	r3, [r7, #23]
            break;
 8002968:	e005      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800296a:	4b75      	ldr	r3, [pc, #468]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0ed      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8002976:	7dfb      	ldrb	r3, [r7, #23]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d126      	bne.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002986:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800298a:	d10d      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 800298c:	4b6c      	ldr	r3, [pc, #432]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800299a:	0919      	lsrs	r1, r3, #4
 800299c:	4b6a      	ldr	r3, [pc, #424]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800299e:	400b      	ands	r3, r1
 80029a0:	4967      	ldr	r1, [pc, #412]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	610b      	str	r3, [r1, #16]
 80029a6:	e005      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 80029a8:	4b65      	ldr	r3, [pc, #404]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	4a64      	ldr	r2, [pc, #400]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80029ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80029b2:	6113      	str	r3, [r2, #16]
 80029b4:	4b62      	ldr	r3, [pc, #392]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80029b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80029be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c2:	495f      	ldr	r1, [pc, #380]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	670b      	str	r3, [r1, #112]	; 0x70
 80029c8:	e004      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029ca:	7dfb      	ldrb	r3, [r7, #23]
 80029cc:	75bb      	strb	r3, [r7, #22]
 80029ce:	e001      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d0:	7dfb      	ldrb	r3, [r7, #23]
 80029d2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d07f      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029e6:	2b28      	cmp	r3, #40	; 0x28
 80029e8:	d866      	bhi.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 80029ea:	a201      	add	r2, pc, #4	; (adr r2, 80029f0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 80029ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f0:	08002abf 	.word	0x08002abf
 80029f4:	08002ab9 	.word	0x08002ab9
 80029f8:	08002ab9 	.word	0x08002ab9
 80029fc:	08002ab9 	.word	0x08002ab9
 8002a00:	08002ab9 	.word	0x08002ab9
 8002a04:	08002ab9 	.word	0x08002ab9
 8002a08:	08002ab9 	.word	0x08002ab9
 8002a0c:	08002ab9 	.word	0x08002ab9
 8002a10:	08002a95 	.word	0x08002a95
 8002a14:	08002ab9 	.word	0x08002ab9
 8002a18:	08002ab9 	.word	0x08002ab9
 8002a1c:	08002ab9 	.word	0x08002ab9
 8002a20:	08002ab9 	.word	0x08002ab9
 8002a24:	08002ab9 	.word	0x08002ab9
 8002a28:	08002ab9 	.word	0x08002ab9
 8002a2c:	08002ab9 	.word	0x08002ab9
 8002a30:	08002aa7 	.word	0x08002aa7
 8002a34:	08002ab9 	.word	0x08002ab9
 8002a38:	08002ab9 	.word	0x08002ab9
 8002a3c:	08002ab9 	.word	0x08002ab9
 8002a40:	08002ab9 	.word	0x08002ab9
 8002a44:	08002ab9 	.word	0x08002ab9
 8002a48:	08002ab9 	.word	0x08002ab9
 8002a4c:	08002ab9 	.word	0x08002ab9
 8002a50:	08002abf 	.word	0x08002abf
 8002a54:	08002ab9 	.word	0x08002ab9
 8002a58:	08002ab9 	.word	0x08002ab9
 8002a5c:	08002ab9 	.word	0x08002ab9
 8002a60:	08002ab9 	.word	0x08002ab9
 8002a64:	08002ab9 	.word	0x08002ab9
 8002a68:	08002ab9 	.word	0x08002ab9
 8002a6c:	08002ab9 	.word	0x08002ab9
 8002a70:	08002abf 	.word	0x08002abf
 8002a74:	08002ab9 	.word	0x08002ab9
 8002a78:	08002ab9 	.word	0x08002ab9
 8002a7c:	08002ab9 	.word	0x08002ab9
 8002a80:	08002ab9 	.word	0x08002ab9
 8002a84:	08002ab9 	.word	0x08002ab9
 8002a88:	08002ab9 	.word	0x08002ab9
 8002a8c:	08002ab9 	.word	0x08002ab9
 8002a90:	08002abf 	.word	0x08002abf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3304      	adds	r3, #4
 8002a98:	2101      	movs	r1, #1
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 fdfa 	bl	8003694 <RCCEx_PLL2_Config>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002aa4:	e00c      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3324      	adds	r3, #36	; 0x24
 8002aaa:	2101      	movs	r1, #1
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fea3 	bl	80037f8 <RCCEx_PLL3_Config>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002ab6:	e003      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	75fb      	strb	r3, [r7, #23]
      break;
 8002abc:	e000      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8002abe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ac0:	7dfb      	ldrb	r3, [r7, #23]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10a      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002ac6:	4b1e      	ldr	r3, [pc, #120]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aca:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ad4:	491a      	ldr	r1, [pc, #104]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	654b      	str	r3, [r1, #84]	; 0x54
 8002ada:	e001      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002adc:	7dfb      	ldrb	r3, [r7, #23]
 8002ade:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d03f      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af0:	2b05      	cmp	r3, #5
 8002af2:	d821      	bhi.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8002af4:	a201      	add	r2, pc, #4	; (adr r2, 8002afc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8002af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afa:	bf00      	nop
 8002afc:	08002b4d 	.word	0x08002b4d
 8002b00:	08002b15 	.word	0x08002b15
 8002b04:	08002b27 	.word	0x08002b27
 8002b08:	08002b4d 	.word	0x08002b4d
 8002b0c:	08002b4d 	.word	0x08002b4d
 8002b10:	08002b4d 	.word	0x08002b4d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3304      	adds	r3, #4
 8002b18:	2101      	movs	r1, #1
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 fdba 	bl	8003694 <RCCEx_PLL2_Config>
 8002b20:	4603      	mov	r3, r0
 8002b22:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002b24:	e013      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3324      	adds	r3, #36	; 0x24
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 fe63 	bl	80037f8 <RCCEx_PLL3_Config>
 8002b32:	4603      	mov	r3, r0
 8002b34:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002b36:	e00a      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b3c:	e007      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8002b3e:	bf00      	nop
 8002b40:	58024400 	.word	0x58024400
 8002b44:	58024800 	.word	0x58024800
 8002b48:	00ffffcf 	.word	0x00ffffcf
      break;
 8002b4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b4e:	7dfb      	ldrb	r3, [r7, #23]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d109      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002b54:	4b9f      	ldr	r3, [pc, #636]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b58:	f023 0207 	bic.w	r2, r3, #7
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b60:	499c      	ldr	r1, [pc, #624]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	654b      	str	r3, [r1, #84]	; 0x54
 8002b66:	e001      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b68:	7dfb      	ldrb	r3, [r7, #23]
 8002b6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d039      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b7e:	2b05      	cmp	r3, #5
 8002b80:	d820      	bhi.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8002b82:	a201      	add	r2, pc, #4	; (adr r2, 8002b88 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8002b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b88:	08002bcb 	.word	0x08002bcb
 8002b8c:	08002ba1 	.word	0x08002ba1
 8002b90:	08002bb3 	.word	0x08002bb3
 8002b94:	08002bcb 	.word	0x08002bcb
 8002b98:	08002bcb 	.word	0x08002bcb
 8002b9c:	08002bcb 	.word	0x08002bcb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 fd74 	bl	8003694 <RCCEx_PLL2_Config>
 8002bac:	4603      	mov	r3, r0
 8002bae:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002bb0:	e00c      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3324      	adds	r3, #36	; 0x24
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fe1d 	bl	80037f8 <RCCEx_PLL3_Config>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002bc2:	e003      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8002bc8:	e000      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8002bca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bcc:	7dfb      	ldrb	r3, [r7, #23]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10a      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bd2:	4b80      	ldr	r3, [pc, #512]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd6:	f023 0207 	bic.w	r2, r3, #7
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002be0:	497c      	ldr	r1, [pc, #496]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	658b      	str	r3, [r1, #88]	; 0x58
 8002be6:	e001      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be8:	7dfb      	ldrb	r3, [r7, #23]
 8002bea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0320 	and.w	r3, r3, #32
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d04b      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c02:	d02e      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8002c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c08:	d828      	bhi.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8002c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0e:	d02a      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8002c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c14:	d822      	bhi.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8002c16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c1a:	d026      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8002c1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c20:	d81c      	bhi.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8002c22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c26:	d010      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8002c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c2c:	d816      	bhi.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d01d      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002c32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c36:	d111      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fd28 	bl	8003694 <RCCEx_PLL2_Config>
 8002c44:	4603      	mov	r3, r0
 8002c46:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002c48:	e012      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3324      	adds	r3, #36	; 0x24
 8002c4e:	2102      	movs	r1, #2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 fdd1 	bl	80037f8 <RCCEx_PLL3_Config>
 8002c56:	4603      	mov	r3, r0
 8002c58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002c5a:	e009      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c60:	e006      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8002c62:	bf00      	nop
 8002c64:	e004      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8002c66:	bf00      	nop
 8002c68:	e002      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8002c6a:	bf00      	nop
 8002c6c:	e000      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8002c6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c70:	7dfb      	ldrb	r3, [r7, #23]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10a      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c76:	4b57      	ldr	r3, [pc, #348]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c84:	4953      	ldr	r1, [pc, #332]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	654b      	str	r3, [r1, #84]	; 0x54
 8002c8a:	e001      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c8c:	7dfb      	ldrb	r3, [r7, #23]
 8002c8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d04b      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002ca2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002ca6:	d02e      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8002ca8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002cac:	d828      	bhi.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8002cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb2:	d02a      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8002cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb8:	d822      	bhi.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8002cba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002cbe:	d026      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8002cc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002cc4:	d81c      	bhi.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8002cc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cca:	d010      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8002ccc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cd0:	d816      	bhi.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d01d      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cda:	d111      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3304      	adds	r3, #4
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 fcd6 	bl	8003694 <RCCEx_PLL2_Config>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002cec:	e012      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3324      	adds	r3, #36	; 0x24
 8002cf2:	2102      	movs	r1, #2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 fd7f 	bl	80037f8 <RCCEx_PLL3_Config>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002cfe:	e009      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	75fb      	strb	r3, [r7, #23]
      break;
 8002d04:	e006      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8002d06:	bf00      	nop
 8002d08:	e004      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8002d0a:	bf00      	nop
 8002d0c:	e002      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8002d0e:	bf00      	nop
 8002d10:	e000      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8002d12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10a      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d1a:	4b2e      	ldr	r3, [pc, #184]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d28:	492a      	ldr	r1, [pc, #168]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	658b      	str	r3, [r1, #88]	; 0x58
 8002d2e:	e001      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d30:	7dfb      	ldrb	r3, [r7, #23]
 8002d32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d04d      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002d46:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002d4a:	d02e      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8002d4c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002d50:	d828      	bhi.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d56:	d02a      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8002d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d5c:	d822      	bhi.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002d5e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002d62:	d026      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8002d64:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002d68:	d81c      	bhi.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002d6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d6e:	d010      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8002d70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d74:	d816      	bhi.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d01d      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8002d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d7e:	d111      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3304      	adds	r3, #4
 8002d84:	2100      	movs	r1, #0
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 fc84 	bl	8003694 <RCCEx_PLL2_Config>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002d90:	e012      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3324      	adds	r3, #36	; 0x24
 8002d96:	2102      	movs	r1, #2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 fd2d 	bl	80037f8 <RCCEx_PLL3_Config>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002da2:	e009      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	75fb      	strb	r3, [r7, #23]
      break;
 8002da8:	e006      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8002daa:	bf00      	nop
 8002dac:	e004      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8002dae:	bf00      	nop
 8002db0:	e002      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8002db2:	bf00      	nop
 8002db4:	e000      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8002db6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002db8:	7dfb      	ldrb	r3, [r7, #23]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002dbe:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002dcc:	4901      	ldr	r1, [pc, #4]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	658b      	str	r3, [r1, #88]	; 0x58
 8002dd2:	e003      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8002dd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd8:	7dfb      	ldrb	r3, [r7, #23]
 8002dda:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d01a      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002df2:	d10a      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3324      	adds	r3, #36	; 0x24
 8002df8:	2102      	movs	r1, #2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 fcfc 	bl	80037f8 <RCCEx_PLL3_Config>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002e0a:	4b8c      	ldr	r3, [pc, #560]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8002e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e18:	4988      	ldr	r1, [pc, #544]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d01a      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e34:	d10a      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3324      	adds	r3, #36	; 0x24
 8002e3a:	2102      	movs	r1, #2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 fcdb 	bl	80037f8 <RCCEx_PLL3_Config>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e4c:	4b7b      	ldr	r3, [pc, #492]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8002e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e5a:	4978      	ldr	r1, [pc, #480]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d034      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002e72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e76:	d01d      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8002e78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e7c:	d817      	bhi.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8002e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e86:	d009      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002e88:	e011      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	2100      	movs	r1, #0
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 fbff 	bl	8003694 <RCCEx_PLL2_Config>
 8002e96:	4603      	mov	r3, r0
 8002e98:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002e9a:	e00c      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3324      	adds	r3, #36	; 0x24
 8002ea0:	2102      	movs	r1, #2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 fca8 	bl	80037f8 <RCCEx_PLL3_Config>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002eac:	e003      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	75fb      	strb	r3, [r7, #23]
      break;
 8002eb2:	e000      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8002eb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eb6:	7dfb      	ldrb	r3, [r7, #23]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10a      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ebc:	4b5f      	ldr	r3, [pc, #380]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8002ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002eca:	495c      	ldr	r1, [pc, #368]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	658b      	str	r3, [r1, #88]	; 0x58
 8002ed0:	e001      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed2:	7dfb      	ldrb	r3, [r7, #23]
 8002ed4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d033      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ee8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002eec:	d01c      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8002eee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ef2:	d816      	bhi.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8002ef4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ef8:	d003      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8002efa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002efe:	d007      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8002f00:	e00f      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f02:	4b4e      	ldr	r3, [pc, #312]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8002f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f06:	4a4d      	ldr	r2, [pc, #308]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8002f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002f0e:	e00c      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3324      	adds	r3, #36	; 0x24
 8002f14:	2101      	movs	r1, #1
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 fc6e 	bl	80037f8 <RCCEx_PLL3_Config>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002f20:	e003      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	75fb      	strb	r3, [r7, #23]
      break;
 8002f26:	e000      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8002f28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f2a:	7dfb      	ldrb	r3, [r7, #23]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10a      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f30:	4b42      	ldr	r3, [pc, #264]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8002f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f3e:	493f      	ldr	r1, [pc, #252]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	654b      	str	r3, [r1, #84]	; 0x54
 8002f44:	e001      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f46:	7dfb      	ldrb	r3, [r7, #23]
 8002f48:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d029      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8002f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f62:	d007      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8002f64:	e00f      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f66:	4b35      	ldr	r3, [pc, #212]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8002f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6a:	4a34      	ldr	r2, [pc, #208]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8002f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002f72:	e00b      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3304      	adds	r3, #4
 8002f78:	2102      	movs	r1, #2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 fb8a 	bl	8003694 <RCCEx_PLL2_Config>
 8002f80:	4603      	mov	r3, r0
 8002f82:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002f84:	e002      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	75fb      	strb	r3, [r7, #23]
      break;
 8002f8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f8c:	7dfb      	ldrb	r3, [r7, #23]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d109      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002f92:	4b2a      	ldr	r3, [pc, #168]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8002f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f9e:	4927      	ldr	r1, [pc, #156]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002fa4:	e001      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa6:	7dfb      	ldrb	r3, [r7, #23]
 8002fa8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00a      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3324      	adds	r3, #36	; 0x24
 8002fba:	2102      	movs	r1, #2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 fc1b 	bl	80037f8 <RCCEx_PLL3_Config>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d035      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fe2:	d017      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8002fe4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fe8:	d811      	bhi.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8002fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fee:	d013      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8002ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff4:	d80b      	bhi.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d010      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8002ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ffe:	d106      	bne.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003000:	4b0e      	ldr	r3, [pc, #56]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	4a0d      	ldr	r2, [pc, #52]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800300a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800300c:	e007      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	75fb      	strb	r3, [r7, #23]
      break;
 8003012:	e004      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003014:	bf00      	nop
 8003016:	e002      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003018:	bf00      	nop
 800301a:	e000      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800301c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800301e:	7dfb      	ldrb	r3, [r7, #23]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10d      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003024:	4b05      	ldr	r3, [pc, #20]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003028:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003032:	4902      	ldr	r1, [pc, #8]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003034:	4313      	orrs	r3, r2
 8003036:	654b      	str	r3, [r1, #84]	; 0x54
 8003038:	e004      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800303a:	bf00      	nop
 800303c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003040:	7dfb      	ldrb	r3, [r7, #23]
 8003042:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d008      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003050:	4b30      	ldr	r3, [pc, #192]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003054:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800305c:	492d      	ldr	r1, [pc, #180]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800305e:	4313      	orrs	r3, r2
 8003060:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d008      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800306e:	4b29      	ldr	r3, [pc, #164]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003072:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800307a:	4926      	ldr	r1, [pc, #152]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800307c:	4313      	orrs	r3, r2
 800307e:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003088:	2b00      	cmp	r3, #0
 800308a:	d008      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800308c:	4b21      	ldr	r3, [pc, #132]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800308e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003090:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003098:	491e      	ldr	r1, [pc, #120]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800309a:	4313      	orrs	r3, r2
 800309c:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00d      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030aa:	4b1a      	ldr	r3, [pc, #104]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	4a19      	ldr	r2, [pc, #100]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80030b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80030b4:	6113      	str	r3, [r2, #16]
 80030b6:	4b17      	ldr	r3, [pc, #92]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80030b8:	691a      	ldr	r2, [r3, #16]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80030c0:	4914      	ldr	r1, [pc, #80]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	da08      	bge.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80030ce:	4b11      	ldr	r3, [pc, #68]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80030d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030da:	490e      	ldr	r1, [pc, #56]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d009      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030ec:	4b09      	ldr	r3, [pc, #36]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80030ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fa:	4906      	ldr	r1, [pc, #24]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003100:	7dbb      	ldrb	r3, [r7, #22]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	e000      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	58024400 	.word	0x58024400

08003118 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800311c:	f7ff f894 	bl	8002248 <HAL_RCC_GetHCLKFreq>
 8003120:	4602      	mov	r2, r0
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	091b      	lsrs	r3, r3, #4
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	4904      	ldr	r1, [pc, #16]	; (8003140 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800312e:	5ccb      	ldrb	r3, [r1, r3]
 8003130:	f003 031f 	and.w	r3, r3, #31
 8003134:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003138:	4618      	mov	r0, r3
 800313a:	bd80      	pop	{r7, pc}
 800313c:	58024400 	.word	0x58024400
 8003140:	08007820 	.word	0x08007820

08003144 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003144:	b480      	push	{r7}
 8003146:	b089      	sub	sp, #36	; 0x24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800314c:	4ba1      	ldr	r3, [pc, #644]	; (80033d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	f003 0303 	and.w	r3, r3, #3
 8003154:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003156:	4b9f      	ldr	r3, [pc, #636]	; (80033d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315a:	0b1b      	lsrs	r3, r3, #12
 800315c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003160:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003162:	4b9c      	ldr	r3, [pc, #624]	; (80033d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003166:	091b      	lsrs	r3, r3, #4
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800316e:	4b99      	ldr	r3, [pc, #612]	; (80033d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003172:	08db      	lsrs	r3, r3, #3
 8003174:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	fb02 f303 	mul.w	r3, r2, r3
 800317e:	ee07 3a90 	vmov	s15, r3
 8003182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003186:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 8111 	beq.w	80033b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	2b02      	cmp	r3, #2
 8003196:	f000 8083 	beq.w	80032a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	2b02      	cmp	r3, #2
 800319e:	f200 80a1 	bhi.w	80032e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d056      	beq.n	800325c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80031ae:	e099      	b.n	80032e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031b0:	4b88      	ldr	r3, [pc, #544]	; (80033d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d02d      	beq.n	8003218 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031bc:	4b85      	ldr	r3, [pc, #532]	; (80033d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	08db      	lsrs	r3, r3, #3
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	4a84      	ldr	r2, [pc, #528]	; (80033d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80031c8:	fa22 f303 	lsr.w	r3, r2, r3
 80031cc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	ee07 3a90 	vmov	s15, r3
 80031d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	ee07 3a90 	vmov	s15, r3
 80031de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031e6:	4b7b      	ldr	r3, [pc, #492]	; (80033d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80031e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ee:	ee07 3a90 	vmov	s15, r3
 80031f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80031fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80033dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80031fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800320a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800320e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003212:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003216:	e087      	b.n	8003328 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	ee07 3a90 	vmov	s15, r3
 800321e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003222:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80033e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800322a:	4b6a      	ldr	r3, [pc, #424]	; (80033d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003232:	ee07 3a90 	vmov	s15, r3
 8003236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800323a:	ed97 6a03 	vldr	s12, [r7, #12]
 800323e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80033dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800324a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800324e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003256:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800325a:	e065      	b.n	8003328 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	ee07 3a90 	vmov	s15, r3
 8003262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003266:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80033e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800326a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800326e:	4b59      	ldr	r3, [pc, #356]	; (80033d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003276:	ee07 3a90 	vmov	s15, r3
 800327a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800327e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003282:	eddf 5a56 	vldr	s11, [pc, #344]	; 80033dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800328a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800328e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800329a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800329e:	e043      	b.n	8003328 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	ee07 3a90 	vmov	s15, r3
 80032a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80033e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80032ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032b2:	4b48      	ldr	r3, [pc, #288]	; (80033d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ba:	ee07 3a90 	vmov	s15, r3
 80032be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80032c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80033dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80032ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80032e2:	e021      	b.n	8003328 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	ee07 3a90 	vmov	s15, r3
 80032ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80033e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80032f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032f6:	4b37      	ldr	r3, [pc, #220]	; (80033d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032fe:	ee07 3a90 	vmov	s15, r3
 8003302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003306:	ed97 6a03 	vldr	s12, [r7, #12]
 800330a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80033dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800330e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800331a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800331e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003322:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003326:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003328:	4b2a      	ldr	r3, [pc, #168]	; (80033d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800332a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332c:	0a5b      	lsrs	r3, r3, #9
 800332e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800333a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800333e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003342:	edd7 6a07 	vldr	s13, [r7, #28]
 8003346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800334a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800334e:	ee17 2a90 	vmov	r2, s15
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003356:	4b1f      	ldr	r3, [pc, #124]	; (80033d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335a:	0c1b      	lsrs	r3, r3, #16
 800335c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003360:	ee07 3a90 	vmov	s15, r3
 8003364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003368:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800336c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003370:	edd7 6a07 	vldr	s13, [r7, #28]
 8003374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800337c:	ee17 2a90 	vmov	r2, s15
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003384:	4b13      	ldr	r3, [pc, #76]	; (80033d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003388:	0e1b      	lsrs	r3, r3, #24
 800338a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800338e:	ee07 3a90 	vmov	s15, r3
 8003392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003396:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800339a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800339e:	edd7 6a07 	vldr	s13, [r7, #28]
 80033a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033aa:	ee17 2a90 	vmov	r2, s15
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80033b2:	e008      	b.n	80033c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	609a      	str	r2, [r3, #8]
}
 80033c6:	bf00      	nop
 80033c8:	3724      	adds	r7, #36	; 0x24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	58024400 	.word	0x58024400
 80033d8:	03d09000 	.word	0x03d09000
 80033dc:	46000000 	.word	0x46000000
 80033e0:	4c742400 	.word	0x4c742400
 80033e4:	4a742400 	.word	0x4a742400
 80033e8:	4af42400 	.word	0x4af42400

080033ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b089      	sub	sp, #36	; 0x24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033f4:	4ba1      	ldr	r3, [pc, #644]	; (800367c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80033f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80033fe:	4b9f      	ldr	r3, [pc, #636]	; (800367c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003402:	0d1b      	lsrs	r3, r3, #20
 8003404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003408:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800340a:	4b9c      	ldr	r3, [pc, #624]	; (800367c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800340c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340e:	0a1b      	lsrs	r3, r3, #8
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003416:	4b99      	ldr	r3, [pc, #612]	; (800367c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341a:	08db      	lsrs	r3, r3, #3
 800341c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	fb02 f303 	mul.w	r3, r2, r3
 8003426:	ee07 3a90 	vmov	s15, r3
 800342a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800342e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 8111 	beq.w	800365c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	2b02      	cmp	r3, #2
 800343e:	f000 8083 	beq.w	8003548 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	2b02      	cmp	r3, #2
 8003446:	f200 80a1 	bhi.w	800358c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d056      	beq.n	8003504 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003456:	e099      	b.n	800358c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003458:	4b88      	ldr	r3, [pc, #544]	; (800367c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0320 	and.w	r3, r3, #32
 8003460:	2b00      	cmp	r3, #0
 8003462:	d02d      	beq.n	80034c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003464:	4b85      	ldr	r3, [pc, #532]	; (800367c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	08db      	lsrs	r3, r3, #3
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	4a84      	ldr	r2, [pc, #528]	; (8003680 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003470:	fa22 f303 	lsr.w	r3, r2, r3
 8003474:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	ee07 3a90 	vmov	s15, r3
 800347c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	ee07 3a90 	vmov	s15, r3
 8003486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800348a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800348e:	4b7b      	ldr	r3, [pc, #492]	; (800367c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800349e:	ed97 6a03 	vldr	s12, [r7, #12]
 80034a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003684 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80034a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80034be:	e087      	b.n	80035d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	ee07 3a90 	vmov	s15, r3
 80034c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003688 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80034ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034d2:	4b6a      	ldr	r3, [pc, #424]	; (800367c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034da:	ee07 3a90 	vmov	s15, r3
 80034de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80034e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003684 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80034ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003502:	e065      	b.n	80035d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	ee07 3a90 	vmov	s15, r3
 800350a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800350e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800368c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003516:	4b59      	ldr	r3, [pc, #356]	; (800367c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800351e:	ee07 3a90 	vmov	s15, r3
 8003522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003526:	ed97 6a03 	vldr	s12, [r7, #12]
 800352a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003684 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800352e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800353a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800353e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003542:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003546:	e043      	b.n	80035d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	ee07 3a90 	vmov	s15, r3
 800354e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003552:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800355a:	4b48      	ldr	r3, [pc, #288]	; (800367c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003562:	ee07 3a90 	vmov	s15, r3
 8003566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800356a:	ed97 6a03 	vldr	s12, [r7, #12]
 800356e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003684 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800357a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800357e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003586:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800358a:	e021      	b.n	80035d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	ee07 3a90 	vmov	s15, r3
 8003592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003596:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800368c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800359a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800359e:	4b37      	ldr	r3, [pc, #220]	; (800367c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035a6:	ee07 3a90 	vmov	s15, r3
 80035aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80035b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003684 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80035b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80035d0:	4b2a      	ldr	r3, [pc, #168]	; (800367c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	0a5b      	lsrs	r3, r3, #9
 80035d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035da:	ee07 3a90 	vmov	s15, r3
 80035de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80035ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80035ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035f6:	ee17 2a90 	vmov	r2, s15
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80035fe:	4b1f      	ldr	r3, [pc, #124]	; (800367c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	0c1b      	lsrs	r3, r3, #16
 8003604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003608:	ee07 3a90 	vmov	s15, r3
 800360c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003610:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003614:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003618:	edd7 6a07 	vldr	s13, [r7, #28]
 800361c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003624:	ee17 2a90 	vmov	r2, s15
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800362c:	4b13      	ldr	r3, [pc, #76]	; (800367c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	0e1b      	lsrs	r3, r3, #24
 8003632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003636:	ee07 3a90 	vmov	s15, r3
 800363a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800363e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003642:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003646:	edd7 6a07 	vldr	s13, [r7, #28]
 800364a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800364e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003652:	ee17 2a90 	vmov	r2, s15
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800365a:	e008      	b.n	800366e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	609a      	str	r2, [r3, #8]
}
 800366e:	bf00      	nop
 8003670:	3724      	adds	r7, #36	; 0x24
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	58024400 	.word	0x58024400
 8003680:	03d09000 	.word	0x03d09000
 8003684:	46000000 	.word	0x46000000
 8003688:	4c742400 	.word	0x4c742400
 800368c:	4a742400 	.word	0x4a742400
 8003690:	4af42400 	.word	0x4af42400

08003694 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80036a2:	4b53      	ldr	r3, [pc, #332]	; (80037f0 <RCCEx_PLL2_Config+0x15c>)
 80036a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	d101      	bne.n	80036b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e099      	b.n	80037e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80036b2:	4b4f      	ldr	r3, [pc, #316]	; (80037f0 <RCCEx_PLL2_Config+0x15c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a4e      	ldr	r2, [pc, #312]	; (80037f0 <RCCEx_PLL2_Config+0x15c>)
 80036b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036be:	f7fd fb7b 	bl	8000db8 <HAL_GetTick>
 80036c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80036c4:	e008      	b.n	80036d8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80036c6:	f7fd fb77 	bl	8000db8 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e086      	b.n	80037e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80036d8:	4b45      	ldr	r3, [pc, #276]	; (80037f0 <RCCEx_PLL2_Config+0x15c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1f0      	bne.n	80036c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80036e4:	4b42      	ldr	r3, [pc, #264]	; (80037f0 <RCCEx_PLL2_Config+0x15c>)
 80036e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	031b      	lsls	r3, r3, #12
 80036f2:	493f      	ldr	r1, [pc, #252]	; (80037f0 <RCCEx_PLL2_Config+0x15c>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	628b      	str	r3, [r1, #40]	; 0x28
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	3b01      	subs	r3, #1
 80036fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	3b01      	subs	r3, #1
 8003708:	025b      	lsls	r3, r3, #9
 800370a:	b29b      	uxth	r3, r3
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	3b01      	subs	r3, #1
 8003714:	041b      	lsls	r3, r3, #16
 8003716:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	3b01      	subs	r3, #1
 8003722:	061b      	lsls	r3, r3, #24
 8003724:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003728:	4931      	ldr	r1, [pc, #196]	; (80037f0 <RCCEx_PLL2_Config+0x15c>)
 800372a:	4313      	orrs	r3, r2
 800372c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800372e:	4b30      	ldr	r3, [pc, #192]	; (80037f0 <RCCEx_PLL2_Config+0x15c>)
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	492d      	ldr	r1, [pc, #180]	; (80037f0 <RCCEx_PLL2_Config+0x15c>)
 800373c:	4313      	orrs	r3, r2
 800373e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003740:	4b2b      	ldr	r3, [pc, #172]	; (80037f0 <RCCEx_PLL2_Config+0x15c>)
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	f023 0220 	bic.w	r2, r3, #32
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	4928      	ldr	r1, [pc, #160]	; (80037f0 <RCCEx_PLL2_Config+0x15c>)
 800374e:	4313      	orrs	r3, r2
 8003750:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003752:	4b27      	ldr	r3, [pc, #156]	; (80037f0 <RCCEx_PLL2_Config+0x15c>)
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	4a26      	ldr	r2, [pc, #152]	; (80037f0 <RCCEx_PLL2_Config+0x15c>)
 8003758:	f023 0310 	bic.w	r3, r3, #16
 800375c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800375e:	4b24      	ldr	r3, [pc, #144]	; (80037f0 <RCCEx_PLL2_Config+0x15c>)
 8003760:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003762:	4b24      	ldr	r3, [pc, #144]	; (80037f4 <RCCEx_PLL2_Config+0x160>)
 8003764:	4013      	ands	r3, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	69d2      	ldr	r2, [r2, #28]
 800376a:	00d2      	lsls	r2, r2, #3
 800376c:	4920      	ldr	r1, [pc, #128]	; (80037f0 <RCCEx_PLL2_Config+0x15c>)
 800376e:	4313      	orrs	r3, r2
 8003770:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003772:	4b1f      	ldr	r3, [pc, #124]	; (80037f0 <RCCEx_PLL2_Config+0x15c>)
 8003774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003776:	4a1e      	ldr	r2, [pc, #120]	; (80037f0 <RCCEx_PLL2_Config+0x15c>)
 8003778:	f043 0310 	orr.w	r3, r3, #16
 800377c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d106      	bne.n	8003792 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003784:	4b1a      	ldr	r3, [pc, #104]	; (80037f0 <RCCEx_PLL2_Config+0x15c>)
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	4a19      	ldr	r2, [pc, #100]	; (80037f0 <RCCEx_PLL2_Config+0x15c>)
 800378a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800378e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003790:	e00f      	b.n	80037b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d106      	bne.n	80037a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003798:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <RCCEx_PLL2_Config+0x15c>)
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	4a14      	ldr	r2, [pc, #80]	; (80037f0 <RCCEx_PLL2_Config+0x15c>)
 800379e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80037a4:	e005      	b.n	80037b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80037a6:	4b12      	ldr	r3, [pc, #72]	; (80037f0 <RCCEx_PLL2_Config+0x15c>)
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	4a11      	ldr	r2, [pc, #68]	; (80037f0 <RCCEx_PLL2_Config+0x15c>)
 80037ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80037b2:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <RCCEx_PLL2_Config+0x15c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a0e      	ldr	r2, [pc, #56]	; (80037f0 <RCCEx_PLL2_Config+0x15c>)
 80037b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037be:	f7fd fafb 	bl	8000db8 <HAL_GetTick>
 80037c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80037c4:	e008      	b.n	80037d8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80037c6:	f7fd faf7 	bl	8000db8 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e006      	b.n	80037e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80037d8:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <RCCEx_PLL2_Config+0x15c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f0      	beq.n	80037c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	58024400 	.word	0x58024400
 80037f4:	ffff0007 	.word	0xffff0007

080037f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003802:	2300      	movs	r3, #0
 8003804:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003806:	4b53      	ldr	r3, [pc, #332]	; (8003954 <RCCEx_PLL3_Config+0x15c>)
 8003808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	2b03      	cmp	r3, #3
 8003810:	d101      	bne.n	8003816 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e099      	b.n	800394a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003816:	4b4f      	ldr	r3, [pc, #316]	; (8003954 <RCCEx_PLL3_Config+0x15c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a4e      	ldr	r2, [pc, #312]	; (8003954 <RCCEx_PLL3_Config+0x15c>)
 800381c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003820:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003822:	f7fd fac9 	bl	8000db8 <HAL_GetTick>
 8003826:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003828:	e008      	b.n	800383c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800382a:	f7fd fac5 	bl	8000db8 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d901      	bls.n	800383c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e086      	b.n	800394a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800383c:	4b45      	ldr	r3, [pc, #276]	; (8003954 <RCCEx_PLL3_Config+0x15c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1f0      	bne.n	800382a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003848:	4b42      	ldr	r3, [pc, #264]	; (8003954 <RCCEx_PLL3_Config+0x15c>)
 800384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	051b      	lsls	r3, r3, #20
 8003856:	493f      	ldr	r1, [pc, #252]	; (8003954 <RCCEx_PLL3_Config+0x15c>)
 8003858:	4313      	orrs	r3, r2
 800385a:	628b      	str	r3, [r1, #40]	; 0x28
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	3b01      	subs	r3, #1
 8003862:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	3b01      	subs	r3, #1
 800386c:	025b      	lsls	r3, r3, #9
 800386e:	b29b      	uxth	r3, r3
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	3b01      	subs	r3, #1
 8003878:	041b      	lsls	r3, r3, #16
 800387a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	3b01      	subs	r3, #1
 8003886:	061b      	lsls	r3, r3, #24
 8003888:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800388c:	4931      	ldr	r1, [pc, #196]	; (8003954 <RCCEx_PLL3_Config+0x15c>)
 800388e:	4313      	orrs	r3, r2
 8003890:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003892:	4b30      	ldr	r3, [pc, #192]	; (8003954 <RCCEx_PLL3_Config+0x15c>)
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	492d      	ldr	r1, [pc, #180]	; (8003954 <RCCEx_PLL3_Config+0x15c>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80038a4:	4b2b      	ldr	r3, [pc, #172]	; (8003954 <RCCEx_PLL3_Config+0x15c>)
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	4928      	ldr	r1, [pc, #160]	; (8003954 <RCCEx_PLL3_Config+0x15c>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80038b6:	4b27      	ldr	r3, [pc, #156]	; (8003954 <RCCEx_PLL3_Config+0x15c>)
 80038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ba:	4a26      	ldr	r2, [pc, #152]	; (8003954 <RCCEx_PLL3_Config+0x15c>)
 80038bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80038c2:	4b24      	ldr	r3, [pc, #144]	; (8003954 <RCCEx_PLL3_Config+0x15c>)
 80038c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038c6:	4b24      	ldr	r3, [pc, #144]	; (8003958 <RCCEx_PLL3_Config+0x160>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	69d2      	ldr	r2, [r2, #28]
 80038ce:	00d2      	lsls	r2, r2, #3
 80038d0:	4920      	ldr	r1, [pc, #128]	; (8003954 <RCCEx_PLL3_Config+0x15c>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80038d6:	4b1f      	ldr	r3, [pc, #124]	; (8003954 <RCCEx_PLL3_Config+0x15c>)
 80038d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038da:	4a1e      	ldr	r2, [pc, #120]	; (8003954 <RCCEx_PLL3_Config+0x15c>)
 80038dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d106      	bne.n	80038f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80038e8:	4b1a      	ldr	r3, [pc, #104]	; (8003954 <RCCEx_PLL3_Config+0x15c>)
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	4a19      	ldr	r2, [pc, #100]	; (8003954 <RCCEx_PLL3_Config+0x15c>)
 80038ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038f4:	e00f      	b.n	8003916 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d106      	bne.n	800390a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80038fc:	4b15      	ldr	r3, [pc, #84]	; (8003954 <RCCEx_PLL3_Config+0x15c>)
 80038fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003900:	4a14      	ldr	r2, [pc, #80]	; (8003954 <RCCEx_PLL3_Config+0x15c>)
 8003902:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003906:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003908:	e005      	b.n	8003916 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800390a:	4b12      	ldr	r3, [pc, #72]	; (8003954 <RCCEx_PLL3_Config+0x15c>)
 800390c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390e:	4a11      	ldr	r2, [pc, #68]	; (8003954 <RCCEx_PLL3_Config+0x15c>)
 8003910:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003914:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003916:	4b0f      	ldr	r3, [pc, #60]	; (8003954 <RCCEx_PLL3_Config+0x15c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a0e      	ldr	r2, [pc, #56]	; (8003954 <RCCEx_PLL3_Config+0x15c>)
 800391c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003920:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003922:	f7fd fa49 	bl	8000db8 <HAL_GetTick>
 8003926:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003928:	e008      	b.n	800393c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800392a:	f7fd fa45 	bl	8000db8 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e006      	b.n	800394a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <RCCEx_PLL3_Config+0x15c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0f0      	beq.n	800392a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003948:	7bfb      	ldrb	r3, [r7, #15]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	58024400 	.word	0x58024400
 8003958:	ffff0007 	.word	0xffff0007

0800395c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e042      	b.n	80039f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003974:	2b00      	cmp	r3, #0
 8003976:	d106      	bne.n	8003986 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7fd f867 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2224      	movs	r2, #36	; 0x24
 800398a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0201 	bic.w	r2, r2, #1
 800399c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f82c 	bl	80039fc <UART_SetConfig>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d101      	bne.n	80039ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e022      	b.n	80039f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fe8c 	bl	80046d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 ff13 	bl	8004818 <UART_CheckIdleState>
 80039f2:	4603      	mov	r3, r0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a00:	b092      	sub	sp, #72	; 0x48
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	431a      	orrs	r2, r3
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	4bbe      	ldr	r3, [pc, #760]	; (8003d24 <UART_SetConfig+0x328>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	6812      	ldr	r2, [r2, #0]
 8003a32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a34:	430b      	orrs	r3, r1
 8003a36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4ab3      	ldr	r2, [pc, #716]	; (8003d28 <UART_SetConfig+0x32c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d004      	beq.n	8003a68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a64:	4313      	orrs	r3, r2
 8003a66:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	4baf      	ldr	r3, [pc, #700]	; (8003d2c <UART_SetConfig+0x330>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	6812      	ldr	r2, [r2, #0]
 8003a76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	f023 010f 	bic.w	r1, r3, #15
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4aa6      	ldr	r2, [pc, #664]	; (8003d30 <UART_SetConfig+0x334>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d177      	bne.n	8003b8c <UART_SetConfig+0x190>
 8003a9c:	4ba5      	ldr	r3, [pc, #660]	; (8003d34 <UART_SetConfig+0x338>)
 8003a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003aa4:	2b28      	cmp	r3, #40	; 0x28
 8003aa6:	d86d      	bhi.n	8003b84 <UART_SetConfig+0x188>
 8003aa8:	a201      	add	r2, pc, #4	; (adr r2, 8003ab0 <UART_SetConfig+0xb4>)
 8003aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aae:	bf00      	nop
 8003ab0:	08003b55 	.word	0x08003b55
 8003ab4:	08003b85 	.word	0x08003b85
 8003ab8:	08003b85 	.word	0x08003b85
 8003abc:	08003b85 	.word	0x08003b85
 8003ac0:	08003b85 	.word	0x08003b85
 8003ac4:	08003b85 	.word	0x08003b85
 8003ac8:	08003b85 	.word	0x08003b85
 8003acc:	08003b85 	.word	0x08003b85
 8003ad0:	08003b5d 	.word	0x08003b5d
 8003ad4:	08003b85 	.word	0x08003b85
 8003ad8:	08003b85 	.word	0x08003b85
 8003adc:	08003b85 	.word	0x08003b85
 8003ae0:	08003b85 	.word	0x08003b85
 8003ae4:	08003b85 	.word	0x08003b85
 8003ae8:	08003b85 	.word	0x08003b85
 8003aec:	08003b85 	.word	0x08003b85
 8003af0:	08003b65 	.word	0x08003b65
 8003af4:	08003b85 	.word	0x08003b85
 8003af8:	08003b85 	.word	0x08003b85
 8003afc:	08003b85 	.word	0x08003b85
 8003b00:	08003b85 	.word	0x08003b85
 8003b04:	08003b85 	.word	0x08003b85
 8003b08:	08003b85 	.word	0x08003b85
 8003b0c:	08003b85 	.word	0x08003b85
 8003b10:	08003b6d 	.word	0x08003b6d
 8003b14:	08003b85 	.word	0x08003b85
 8003b18:	08003b85 	.word	0x08003b85
 8003b1c:	08003b85 	.word	0x08003b85
 8003b20:	08003b85 	.word	0x08003b85
 8003b24:	08003b85 	.word	0x08003b85
 8003b28:	08003b85 	.word	0x08003b85
 8003b2c:	08003b85 	.word	0x08003b85
 8003b30:	08003b75 	.word	0x08003b75
 8003b34:	08003b85 	.word	0x08003b85
 8003b38:	08003b85 	.word	0x08003b85
 8003b3c:	08003b85 	.word	0x08003b85
 8003b40:	08003b85 	.word	0x08003b85
 8003b44:	08003b85 	.word	0x08003b85
 8003b48:	08003b85 	.word	0x08003b85
 8003b4c:	08003b85 	.word	0x08003b85
 8003b50:	08003b7d 	.word	0x08003b7d
 8003b54:	2301      	movs	r3, #1
 8003b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003b5a:	e326      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003b5c:	2304      	movs	r3, #4
 8003b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003b62:	e322      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003b64:	2308      	movs	r3, #8
 8003b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003b6a:	e31e      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003b6c:	2310      	movs	r3, #16
 8003b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003b72:	e31a      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003b74:	2320      	movs	r3, #32
 8003b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003b7a:	e316      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003b7c:	2340      	movs	r3, #64	; 0x40
 8003b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003b82:	e312      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003b84:	2380      	movs	r3, #128	; 0x80
 8003b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003b8a:	e30e      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a69      	ldr	r2, [pc, #420]	; (8003d38 <UART_SetConfig+0x33c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d130      	bne.n	8003bf8 <UART_SetConfig+0x1fc>
 8003b96:	4b67      	ldr	r3, [pc, #412]	; (8003d34 <UART_SetConfig+0x338>)
 8003b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	2b05      	cmp	r3, #5
 8003ba0:	d826      	bhi.n	8003bf0 <UART_SetConfig+0x1f4>
 8003ba2:	a201      	add	r2, pc, #4	; (adr r2, 8003ba8 <UART_SetConfig+0x1ac>)
 8003ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba8:	08003bc1 	.word	0x08003bc1
 8003bac:	08003bc9 	.word	0x08003bc9
 8003bb0:	08003bd1 	.word	0x08003bd1
 8003bb4:	08003bd9 	.word	0x08003bd9
 8003bb8:	08003be1 	.word	0x08003be1
 8003bbc:	08003be9 	.word	0x08003be9
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003bc6:	e2f0      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003bc8:	2304      	movs	r3, #4
 8003bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003bce:	e2ec      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003bd0:	2308      	movs	r3, #8
 8003bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003bd6:	e2e8      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003bd8:	2310      	movs	r3, #16
 8003bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003bde:	e2e4      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003be0:	2320      	movs	r3, #32
 8003be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003be6:	e2e0      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003be8:	2340      	movs	r3, #64	; 0x40
 8003bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003bee:	e2dc      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003bf0:	2380      	movs	r3, #128	; 0x80
 8003bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003bf6:	e2d8      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a4f      	ldr	r2, [pc, #316]	; (8003d3c <UART_SetConfig+0x340>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d130      	bne.n	8003c64 <UART_SetConfig+0x268>
 8003c02:	4b4c      	ldr	r3, [pc, #304]	; (8003d34 <UART_SetConfig+0x338>)
 8003c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	2b05      	cmp	r3, #5
 8003c0c:	d826      	bhi.n	8003c5c <UART_SetConfig+0x260>
 8003c0e:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <UART_SetConfig+0x218>)
 8003c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c14:	08003c2d 	.word	0x08003c2d
 8003c18:	08003c35 	.word	0x08003c35
 8003c1c:	08003c3d 	.word	0x08003c3d
 8003c20:	08003c45 	.word	0x08003c45
 8003c24:	08003c4d 	.word	0x08003c4d
 8003c28:	08003c55 	.word	0x08003c55
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c32:	e2ba      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003c34:	2304      	movs	r3, #4
 8003c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c3a:	e2b6      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003c3c:	2308      	movs	r3, #8
 8003c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c42:	e2b2      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003c44:	2310      	movs	r3, #16
 8003c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c4a:	e2ae      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003c4c:	2320      	movs	r3, #32
 8003c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c52:	e2aa      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003c54:	2340      	movs	r3, #64	; 0x40
 8003c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c5a:	e2a6      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003c5c:	2380      	movs	r3, #128	; 0x80
 8003c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c62:	e2a2      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a35      	ldr	r2, [pc, #212]	; (8003d40 <UART_SetConfig+0x344>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d130      	bne.n	8003cd0 <UART_SetConfig+0x2d4>
 8003c6e:	4b31      	ldr	r3, [pc, #196]	; (8003d34 <UART_SetConfig+0x338>)
 8003c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	2b05      	cmp	r3, #5
 8003c78:	d826      	bhi.n	8003cc8 <UART_SetConfig+0x2cc>
 8003c7a:	a201      	add	r2, pc, #4	; (adr r2, 8003c80 <UART_SetConfig+0x284>)
 8003c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c80:	08003c99 	.word	0x08003c99
 8003c84:	08003ca1 	.word	0x08003ca1
 8003c88:	08003ca9 	.word	0x08003ca9
 8003c8c:	08003cb1 	.word	0x08003cb1
 8003c90:	08003cb9 	.word	0x08003cb9
 8003c94:	08003cc1 	.word	0x08003cc1
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c9e:	e284      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003ca0:	2304      	movs	r3, #4
 8003ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ca6:	e280      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003ca8:	2308      	movs	r3, #8
 8003caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cae:	e27c      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003cb0:	2310      	movs	r3, #16
 8003cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cb6:	e278      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003cb8:	2320      	movs	r3, #32
 8003cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cbe:	e274      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003cc0:	2340      	movs	r3, #64	; 0x40
 8003cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cc6:	e270      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003cc8:	2380      	movs	r3, #128	; 0x80
 8003cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cce:	e26c      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a1b      	ldr	r2, [pc, #108]	; (8003d44 <UART_SetConfig+0x348>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d142      	bne.n	8003d60 <UART_SetConfig+0x364>
 8003cda:	4b16      	ldr	r3, [pc, #88]	; (8003d34 <UART_SetConfig+0x338>)
 8003cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	2b05      	cmp	r3, #5
 8003ce4:	d838      	bhi.n	8003d58 <UART_SetConfig+0x35c>
 8003ce6:	a201      	add	r2, pc, #4	; (adr r2, 8003cec <UART_SetConfig+0x2f0>)
 8003ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cec:	08003d05 	.word	0x08003d05
 8003cf0:	08003d0d 	.word	0x08003d0d
 8003cf4:	08003d15 	.word	0x08003d15
 8003cf8:	08003d1d 	.word	0x08003d1d
 8003cfc:	08003d49 	.word	0x08003d49
 8003d00:	08003d51 	.word	0x08003d51
 8003d04:	2300      	movs	r3, #0
 8003d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d0a:	e24e      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003d0c:	2304      	movs	r3, #4
 8003d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d12:	e24a      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003d14:	2308      	movs	r3, #8
 8003d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d1a:	e246      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003d1c:	2310      	movs	r3, #16
 8003d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d22:	e242      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003d24:	cfff69f3 	.word	0xcfff69f3
 8003d28:	58000c00 	.word	0x58000c00
 8003d2c:	11fff4ff 	.word	0x11fff4ff
 8003d30:	40011000 	.word	0x40011000
 8003d34:	58024400 	.word	0x58024400
 8003d38:	40004400 	.word	0x40004400
 8003d3c:	40004800 	.word	0x40004800
 8003d40:	40004c00 	.word	0x40004c00
 8003d44:	40005000 	.word	0x40005000
 8003d48:	2320      	movs	r3, #32
 8003d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d4e:	e22c      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003d50:	2340      	movs	r3, #64	; 0x40
 8003d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d56:	e228      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003d58:	2380      	movs	r3, #128	; 0x80
 8003d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d5e:	e224      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4ab1      	ldr	r2, [pc, #708]	; (800402c <UART_SetConfig+0x630>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d176      	bne.n	8003e58 <UART_SetConfig+0x45c>
 8003d6a:	4bb1      	ldr	r3, [pc, #708]	; (8004030 <UART_SetConfig+0x634>)
 8003d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d72:	2b28      	cmp	r3, #40	; 0x28
 8003d74:	d86c      	bhi.n	8003e50 <UART_SetConfig+0x454>
 8003d76:	a201      	add	r2, pc, #4	; (adr r2, 8003d7c <UART_SetConfig+0x380>)
 8003d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7c:	08003e21 	.word	0x08003e21
 8003d80:	08003e51 	.word	0x08003e51
 8003d84:	08003e51 	.word	0x08003e51
 8003d88:	08003e51 	.word	0x08003e51
 8003d8c:	08003e51 	.word	0x08003e51
 8003d90:	08003e51 	.word	0x08003e51
 8003d94:	08003e51 	.word	0x08003e51
 8003d98:	08003e51 	.word	0x08003e51
 8003d9c:	08003e29 	.word	0x08003e29
 8003da0:	08003e51 	.word	0x08003e51
 8003da4:	08003e51 	.word	0x08003e51
 8003da8:	08003e51 	.word	0x08003e51
 8003dac:	08003e51 	.word	0x08003e51
 8003db0:	08003e51 	.word	0x08003e51
 8003db4:	08003e51 	.word	0x08003e51
 8003db8:	08003e51 	.word	0x08003e51
 8003dbc:	08003e31 	.word	0x08003e31
 8003dc0:	08003e51 	.word	0x08003e51
 8003dc4:	08003e51 	.word	0x08003e51
 8003dc8:	08003e51 	.word	0x08003e51
 8003dcc:	08003e51 	.word	0x08003e51
 8003dd0:	08003e51 	.word	0x08003e51
 8003dd4:	08003e51 	.word	0x08003e51
 8003dd8:	08003e51 	.word	0x08003e51
 8003ddc:	08003e39 	.word	0x08003e39
 8003de0:	08003e51 	.word	0x08003e51
 8003de4:	08003e51 	.word	0x08003e51
 8003de8:	08003e51 	.word	0x08003e51
 8003dec:	08003e51 	.word	0x08003e51
 8003df0:	08003e51 	.word	0x08003e51
 8003df4:	08003e51 	.word	0x08003e51
 8003df8:	08003e51 	.word	0x08003e51
 8003dfc:	08003e41 	.word	0x08003e41
 8003e00:	08003e51 	.word	0x08003e51
 8003e04:	08003e51 	.word	0x08003e51
 8003e08:	08003e51 	.word	0x08003e51
 8003e0c:	08003e51 	.word	0x08003e51
 8003e10:	08003e51 	.word	0x08003e51
 8003e14:	08003e51 	.word	0x08003e51
 8003e18:	08003e51 	.word	0x08003e51
 8003e1c:	08003e49 	.word	0x08003e49
 8003e20:	2301      	movs	r3, #1
 8003e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e26:	e1c0      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003e28:	2304      	movs	r3, #4
 8003e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e2e:	e1bc      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003e30:	2308      	movs	r3, #8
 8003e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e36:	e1b8      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003e38:	2310      	movs	r3, #16
 8003e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e3e:	e1b4      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003e40:	2320      	movs	r3, #32
 8003e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e46:	e1b0      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003e48:	2340      	movs	r3, #64	; 0x40
 8003e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e4e:	e1ac      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003e50:	2380      	movs	r3, #128	; 0x80
 8003e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e56:	e1a8      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a75      	ldr	r2, [pc, #468]	; (8004034 <UART_SetConfig+0x638>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d130      	bne.n	8003ec4 <UART_SetConfig+0x4c8>
 8003e62:	4b73      	ldr	r3, [pc, #460]	; (8004030 <UART_SetConfig+0x634>)
 8003e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	2b05      	cmp	r3, #5
 8003e6c:	d826      	bhi.n	8003ebc <UART_SetConfig+0x4c0>
 8003e6e:	a201      	add	r2, pc, #4	; (adr r2, 8003e74 <UART_SetConfig+0x478>)
 8003e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e74:	08003e8d 	.word	0x08003e8d
 8003e78:	08003e95 	.word	0x08003e95
 8003e7c:	08003e9d 	.word	0x08003e9d
 8003e80:	08003ea5 	.word	0x08003ea5
 8003e84:	08003ead 	.word	0x08003ead
 8003e88:	08003eb5 	.word	0x08003eb5
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e92:	e18a      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003e94:	2304      	movs	r3, #4
 8003e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e9a:	e186      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003e9c:	2308      	movs	r3, #8
 8003e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ea2:	e182      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003ea4:	2310      	movs	r3, #16
 8003ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003eaa:	e17e      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003eac:	2320      	movs	r3, #32
 8003eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003eb2:	e17a      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003eb4:	2340      	movs	r3, #64	; 0x40
 8003eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003eba:	e176      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003ebc:	2380      	movs	r3, #128	; 0x80
 8003ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ec2:	e172      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a5b      	ldr	r2, [pc, #364]	; (8004038 <UART_SetConfig+0x63c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d130      	bne.n	8003f30 <UART_SetConfig+0x534>
 8003ece:	4b58      	ldr	r3, [pc, #352]	; (8004030 <UART_SetConfig+0x634>)
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	2b05      	cmp	r3, #5
 8003ed8:	d826      	bhi.n	8003f28 <UART_SetConfig+0x52c>
 8003eda:	a201      	add	r2, pc, #4	; (adr r2, 8003ee0 <UART_SetConfig+0x4e4>)
 8003edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee0:	08003ef9 	.word	0x08003ef9
 8003ee4:	08003f01 	.word	0x08003f01
 8003ee8:	08003f09 	.word	0x08003f09
 8003eec:	08003f11 	.word	0x08003f11
 8003ef0:	08003f19 	.word	0x08003f19
 8003ef4:	08003f21 	.word	0x08003f21
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003efe:	e154      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003f00:	2304      	movs	r3, #4
 8003f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f06:	e150      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003f08:	2308      	movs	r3, #8
 8003f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f0e:	e14c      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003f10:	2310      	movs	r3, #16
 8003f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f16:	e148      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003f18:	2320      	movs	r3, #32
 8003f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f1e:	e144      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003f20:	2340      	movs	r3, #64	; 0x40
 8003f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f26:	e140      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003f28:	2380      	movs	r3, #128	; 0x80
 8003f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f2e:	e13c      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a41      	ldr	r2, [pc, #260]	; (800403c <UART_SetConfig+0x640>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	f040 8082 	bne.w	8004040 <UART_SetConfig+0x644>
 8003f3c:	4b3c      	ldr	r3, [pc, #240]	; (8004030 <UART_SetConfig+0x634>)
 8003f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f44:	2b28      	cmp	r3, #40	; 0x28
 8003f46:	d86d      	bhi.n	8004024 <UART_SetConfig+0x628>
 8003f48:	a201      	add	r2, pc, #4	; (adr r2, 8003f50 <UART_SetConfig+0x554>)
 8003f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4e:	bf00      	nop
 8003f50:	08003ff5 	.word	0x08003ff5
 8003f54:	08004025 	.word	0x08004025
 8003f58:	08004025 	.word	0x08004025
 8003f5c:	08004025 	.word	0x08004025
 8003f60:	08004025 	.word	0x08004025
 8003f64:	08004025 	.word	0x08004025
 8003f68:	08004025 	.word	0x08004025
 8003f6c:	08004025 	.word	0x08004025
 8003f70:	08003ffd 	.word	0x08003ffd
 8003f74:	08004025 	.word	0x08004025
 8003f78:	08004025 	.word	0x08004025
 8003f7c:	08004025 	.word	0x08004025
 8003f80:	08004025 	.word	0x08004025
 8003f84:	08004025 	.word	0x08004025
 8003f88:	08004025 	.word	0x08004025
 8003f8c:	08004025 	.word	0x08004025
 8003f90:	08004005 	.word	0x08004005
 8003f94:	08004025 	.word	0x08004025
 8003f98:	08004025 	.word	0x08004025
 8003f9c:	08004025 	.word	0x08004025
 8003fa0:	08004025 	.word	0x08004025
 8003fa4:	08004025 	.word	0x08004025
 8003fa8:	08004025 	.word	0x08004025
 8003fac:	08004025 	.word	0x08004025
 8003fb0:	0800400d 	.word	0x0800400d
 8003fb4:	08004025 	.word	0x08004025
 8003fb8:	08004025 	.word	0x08004025
 8003fbc:	08004025 	.word	0x08004025
 8003fc0:	08004025 	.word	0x08004025
 8003fc4:	08004025 	.word	0x08004025
 8003fc8:	08004025 	.word	0x08004025
 8003fcc:	08004025 	.word	0x08004025
 8003fd0:	08004015 	.word	0x08004015
 8003fd4:	08004025 	.word	0x08004025
 8003fd8:	08004025 	.word	0x08004025
 8003fdc:	08004025 	.word	0x08004025
 8003fe0:	08004025 	.word	0x08004025
 8003fe4:	08004025 	.word	0x08004025
 8003fe8:	08004025 	.word	0x08004025
 8003fec:	08004025 	.word	0x08004025
 8003ff0:	0800401d 	.word	0x0800401d
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ffa:	e0d6      	b.n	80041aa <UART_SetConfig+0x7ae>
 8003ffc:	2304      	movs	r3, #4
 8003ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004002:	e0d2      	b.n	80041aa <UART_SetConfig+0x7ae>
 8004004:	2308      	movs	r3, #8
 8004006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800400a:	e0ce      	b.n	80041aa <UART_SetConfig+0x7ae>
 800400c:	2310      	movs	r3, #16
 800400e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004012:	e0ca      	b.n	80041aa <UART_SetConfig+0x7ae>
 8004014:	2320      	movs	r3, #32
 8004016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800401a:	e0c6      	b.n	80041aa <UART_SetConfig+0x7ae>
 800401c:	2340      	movs	r3, #64	; 0x40
 800401e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004022:	e0c2      	b.n	80041aa <UART_SetConfig+0x7ae>
 8004024:	2380      	movs	r3, #128	; 0x80
 8004026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800402a:	e0be      	b.n	80041aa <UART_SetConfig+0x7ae>
 800402c:	40011400 	.word	0x40011400
 8004030:	58024400 	.word	0x58024400
 8004034:	40007800 	.word	0x40007800
 8004038:	40007c00 	.word	0x40007c00
 800403c:	40011800 	.word	0x40011800
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4aad      	ldr	r2, [pc, #692]	; (80042fc <UART_SetConfig+0x900>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d176      	bne.n	8004138 <UART_SetConfig+0x73c>
 800404a:	4bad      	ldr	r3, [pc, #692]	; (8004300 <UART_SetConfig+0x904>)
 800404c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004052:	2b28      	cmp	r3, #40	; 0x28
 8004054:	d86c      	bhi.n	8004130 <UART_SetConfig+0x734>
 8004056:	a201      	add	r2, pc, #4	; (adr r2, 800405c <UART_SetConfig+0x660>)
 8004058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405c:	08004101 	.word	0x08004101
 8004060:	08004131 	.word	0x08004131
 8004064:	08004131 	.word	0x08004131
 8004068:	08004131 	.word	0x08004131
 800406c:	08004131 	.word	0x08004131
 8004070:	08004131 	.word	0x08004131
 8004074:	08004131 	.word	0x08004131
 8004078:	08004131 	.word	0x08004131
 800407c:	08004109 	.word	0x08004109
 8004080:	08004131 	.word	0x08004131
 8004084:	08004131 	.word	0x08004131
 8004088:	08004131 	.word	0x08004131
 800408c:	08004131 	.word	0x08004131
 8004090:	08004131 	.word	0x08004131
 8004094:	08004131 	.word	0x08004131
 8004098:	08004131 	.word	0x08004131
 800409c:	08004111 	.word	0x08004111
 80040a0:	08004131 	.word	0x08004131
 80040a4:	08004131 	.word	0x08004131
 80040a8:	08004131 	.word	0x08004131
 80040ac:	08004131 	.word	0x08004131
 80040b0:	08004131 	.word	0x08004131
 80040b4:	08004131 	.word	0x08004131
 80040b8:	08004131 	.word	0x08004131
 80040bc:	08004119 	.word	0x08004119
 80040c0:	08004131 	.word	0x08004131
 80040c4:	08004131 	.word	0x08004131
 80040c8:	08004131 	.word	0x08004131
 80040cc:	08004131 	.word	0x08004131
 80040d0:	08004131 	.word	0x08004131
 80040d4:	08004131 	.word	0x08004131
 80040d8:	08004131 	.word	0x08004131
 80040dc:	08004121 	.word	0x08004121
 80040e0:	08004131 	.word	0x08004131
 80040e4:	08004131 	.word	0x08004131
 80040e8:	08004131 	.word	0x08004131
 80040ec:	08004131 	.word	0x08004131
 80040f0:	08004131 	.word	0x08004131
 80040f4:	08004131 	.word	0x08004131
 80040f8:	08004131 	.word	0x08004131
 80040fc:	08004129 	.word	0x08004129
 8004100:	2301      	movs	r3, #1
 8004102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004106:	e050      	b.n	80041aa <UART_SetConfig+0x7ae>
 8004108:	2304      	movs	r3, #4
 800410a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800410e:	e04c      	b.n	80041aa <UART_SetConfig+0x7ae>
 8004110:	2308      	movs	r3, #8
 8004112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004116:	e048      	b.n	80041aa <UART_SetConfig+0x7ae>
 8004118:	2310      	movs	r3, #16
 800411a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800411e:	e044      	b.n	80041aa <UART_SetConfig+0x7ae>
 8004120:	2320      	movs	r3, #32
 8004122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004126:	e040      	b.n	80041aa <UART_SetConfig+0x7ae>
 8004128:	2340      	movs	r3, #64	; 0x40
 800412a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800412e:	e03c      	b.n	80041aa <UART_SetConfig+0x7ae>
 8004130:	2380      	movs	r3, #128	; 0x80
 8004132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004136:	e038      	b.n	80041aa <UART_SetConfig+0x7ae>
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a71      	ldr	r2, [pc, #452]	; (8004304 <UART_SetConfig+0x908>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d130      	bne.n	80041a4 <UART_SetConfig+0x7a8>
 8004142:	4b6f      	ldr	r3, [pc, #444]	; (8004300 <UART_SetConfig+0x904>)
 8004144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	2b05      	cmp	r3, #5
 800414c:	d826      	bhi.n	800419c <UART_SetConfig+0x7a0>
 800414e:	a201      	add	r2, pc, #4	; (adr r2, 8004154 <UART_SetConfig+0x758>)
 8004150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004154:	0800416d 	.word	0x0800416d
 8004158:	08004175 	.word	0x08004175
 800415c:	0800417d 	.word	0x0800417d
 8004160:	08004185 	.word	0x08004185
 8004164:	0800418d 	.word	0x0800418d
 8004168:	08004195 	.word	0x08004195
 800416c:	2302      	movs	r3, #2
 800416e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004172:	e01a      	b.n	80041aa <UART_SetConfig+0x7ae>
 8004174:	2304      	movs	r3, #4
 8004176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800417a:	e016      	b.n	80041aa <UART_SetConfig+0x7ae>
 800417c:	2308      	movs	r3, #8
 800417e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004182:	e012      	b.n	80041aa <UART_SetConfig+0x7ae>
 8004184:	2310      	movs	r3, #16
 8004186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800418a:	e00e      	b.n	80041aa <UART_SetConfig+0x7ae>
 800418c:	2320      	movs	r3, #32
 800418e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004192:	e00a      	b.n	80041aa <UART_SetConfig+0x7ae>
 8004194:	2340      	movs	r3, #64	; 0x40
 8004196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800419a:	e006      	b.n	80041aa <UART_SetConfig+0x7ae>
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041a2:	e002      	b.n	80041aa <UART_SetConfig+0x7ae>
 80041a4:	2380      	movs	r3, #128	; 0x80
 80041a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a55      	ldr	r2, [pc, #340]	; (8004304 <UART_SetConfig+0x908>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	f040 80f8 	bne.w	80043a6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80041ba:	2b20      	cmp	r3, #32
 80041bc:	dc46      	bgt.n	800424c <UART_SetConfig+0x850>
 80041be:	2b02      	cmp	r3, #2
 80041c0:	db75      	blt.n	80042ae <UART_SetConfig+0x8b2>
 80041c2:	3b02      	subs	r3, #2
 80041c4:	2b1e      	cmp	r3, #30
 80041c6:	d872      	bhi.n	80042ae <UART_SetConfig+0x8b2>
 80041c8:	a201      	add	r2, pc, #4	; (adr r2, 80041d0 <UART_SetConfig+0x7d4>)
 80041ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ce:	bf00      	nop
 80041d0:	08004253 	.word	0x08004253
 80041d4:	080042af 	.word	0x080042af
 80041d8:	0800425b 	.word	0x0800425b
 80041dc:	080042af 	.word	0x080042af
 80041e0:	080042af 	.word	0x080042af
 80041e4:	080042af 	.word	0x080042af
 80041e8:	0800426b 	.word	0x0800426b
 80041ec:	080042af 	.word	0x080042af
 80041f0:	080042af 	.word	0x080042af
 80041f4:	080042af 	.word	0x080042af
 80041f8:	080042af 	.word	0x080042af
 80041fc:	080042af 	.word	0x080042af
 8004200:	080042af 	.word	0x080042af
 8004204:	080042af 	.word	0x080042af
 8004208:	0800427b 	.word	0x0800427b
 800420c:	080042af 	.word	0x080042af
 8004210:	080042af 	.word	0x080042af
 8004214:	080042af 	.word	0x080042af
 8004218:	080042af 	.word	0x080042af
 800421c:	080042af 	.word	0x080042af
 8004220:	080042af 	.word	0x080042af
 8004224:	080042af 	.word	0x080042af
 8004228:	080042af 	.word	0x080042af
 800422c:	080042af 	.word	0x080042af
 8004230:	080042af 	.word	0x080042af
 8004234:	080042af 	.word	0x080042af
 8004238:	080042af 	.word	0x080042af
 800423c:	080042af 	.word	0x080042af
 8004240:	080042af 	.word	0x080042af
 8004244:	080042af 	.word	0x080042af
 8004248:	080042a1 	.word	0x080042a1
 800424c:	2b40      	cmp	r3, #64	; 0x40
 800424e:	d02a      	beq.n	80042a6 <UART_SetConfig+0x8aa>
 8004250:	e02d      	b.n	80042ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004252:	f7fe ff61 	bl	8003118 <HAL_RCCEx_GetD3PCLK1Freq>
 8004256:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004258:	e02f      	b.n	80042ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800425a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800425e:	4618      	mov	r0, r3
 8004260:	f7fe ff70 	bl	8003144 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004268:	e027      	b.n	80042ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800426a:	f107 0318 	add.w	r3, r7, #24
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff f8bc 	bl	80033ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004278:	e01f      	b.n	80042ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800427a:	4b21      	ldr	r3, [pc, #132]	; (8004300 <UART_SetConfig+0x904>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b00      	cmp	r3, #0
 8004284:	d009      	beq.n	800429a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004286:	4b1e      	ldr	r3, [pc, #120]	; (8004300 <UART_SetConfig+0x904>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	08db      	lsrs	r3, r3, #3
 800428c:	f003 0303 	and.w	r3, r3, #3
 8004290:	4a1d      	ldr	r2, [pc, #116]	; (8004308 <UART_SetConfig+0x90c>)
 8004292:	fa22 f303 	lsr.w	r3, r2, r3
 8004296:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004298:	e00f      	b.n	80042ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800429a:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <UART_SetConfig+0x90c>)
 800429c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800429e:	e00c      	b.n	80042ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80042a0:	4b1a      	ldr	r3, [pc, #104]	; (800430c <UART_SetConfig+0x910>)
 80042a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80042a4:	e009      	b.n	80042ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80042ac:	e005      	b.n	80042ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80042b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80042ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 81ee 	beq.w	800469e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	4a12      	ldr	r2, [pc, #72]	; (8004310 <UART_SetConfig+0x914>)
 80042c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042cc:	461a      	mov	r2, r3
 80042ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80042d4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	4613      	mov	r3, r2
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	4413      	add	r3, r2
 80042e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d305      	bcc.n	80042f2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d910      	bls.n	8004314 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80042f8:	e1d1      	b.n	800469e <UART_SetConfig+0xca2>
 80042fa:	bf00      	nop
 80042fc:	40011c00 	.word	0x40011c00
 8004300:	58024400 	.word	0x58024400
 8004304:	58000c00 	.word	0x58000c00
 8004308:	03d09000 	.word	0x03d09000
 800430c:	003d0900 	.word	0x003d0900
 8004310:	08007830 	.word	0x08007830
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004316:	2200      	movs	r2, #0
 8004318:	60bb      	str	r3, [r7, #8]
 800431a:	60fa      	str	r2, [r7, #12]
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	4ac0      	ldr	r2, [pc, #768]	; (8004624 <UART_SetConfig+0xc28>)
 8004322:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004326:	b29b      	uxth	r3, r3
 8004328:	2200      	movs	r2, #0
 800432a:	603b      	str	r3, [r7, #0]
 800432c:	607a      	str	r2, [r7, #4]
 800432e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004332:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004336:	f7fb ffdb 	bl	80002f0 <__aeabi_uldivmod>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4610      	mov	r0, r2
 8004340:	4619      	mov	r1, r3
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	020b      	lsls	r3, r1, #8
 800434c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004350:	0202      	lsls	r2, r0, #8
 8004352:	6979      	ldr	r1, [r7, #20]
 8004354:	6849      	ldr	r1, [r1, #4]
 8004356:	0849      	lsrs	r1, r1, #1
 8004358:	2000      	movs	r0, #0
 800435a:	460c      	mov	r4, r1
 800435c:	4605      	mov	r5, r0
 800435e:	eb12 0804 	adds.w	r8, r2, r4
 8004362:	eb43 0905 	adc.w	r9, r3, r5
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	469a      	mov	sl, r3
 800436e:	4693      	mov	fp, r2
 8004370:	4652      	mov	r2, sl
 8004372:	465b      	mov	r3, fp
 8004374:	4640      	mov	r0, r8
 8004376:	4649      	mov	r1, r9
 8004378:	f7fb ffba 	bl	80002f0 <__aeabi_uldivmod>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4613      	mov	r3, r2
 8004382:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004386:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800438a:	d308      	bcc.n	800439e <UART_SetConfig+0x9a2>
 800438c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004392:	d204      	bcs.n	800439e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800439a:	60da      	str	r2, [r3, #12]
 800439c:	e17f      	b.n	800469e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80043a4:	e17b      	b.n	800469e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ae:	f040 80bd 	bne.w	800452c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80043b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80043b6:	2b20      	cmp	r3, #32
 80043b8:	dc48      	bgt.n	800444c <UART_SetConfig+0xa50>
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	db7b      	blt.n	80044b6 <UART_SetConfig+0xaba>
 80043be:	2b20      	cmp	r3, #32
 80043c0:	d879      	bhi.n	80044b6 <UART_SetConfig+0xaba>
 80043c2:	a201      	add	r2, pc, #4	; (adr r2, 80043c8 <UART_SetConfig+0x9cc>)
 80043c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c8:	08004453 	.word	0x08004453
 80043cc:	0800445b 	.word	0x0800445b
 80043d0:	080044b7 	.word	0x080044b7
 80043d4:	080044b7 	.word	0x080044b7
 80043d8:	08004463 	.word	0x08004463
 80043dc:	080044b7 	.word	0x080044b7
 80043e0:	080044b7 	.word	0x080044b7
 80043e4:	080044b7 	.word	0x080044b7
 80043e8:	08004473 	.word	0x08004473
 80043ec:	080044b7 	.word	0x080044b7
 80043f0:	080044b7 	.word	0x080044b7
 80043f4:	080044b7 	.word	0x080044b7
 80043f8:	080044b7 	.word	0x080044b7
 80043fc:	080044b7 	.word	0x080044b7
 8004400:	080044b7 	.word	0x080044b7
 8004404:	080044b7 	.word	0x080044b7
 8004408:	08004483 	.word	0x08004483
 800440c:	080044b7 	.word	0x080044b7
 8004410:	080044b7 	.word	0x080044b7
 8004414:	080044b7 	.word	0x080044b7
 8004418:	080044b7 	.word	0x080044b7
 800441c:	080044b7 	.word	0x080044b7
 8004420:	080044b7 	.word	0x080044b7
 8004424:	080044b7 	.word	0x080044b7
 8004428:	080044b7 	.word	0x080044b7
 800442c:	080044b7 	.word	0x080044b7
 8004430:	080044b7 	.word	0x080044b7
 8004434:	080044b7 	.word	0x080044b7
 8004438:	080044b7 	.word	0x080044b7
 800443c:	080044b7 	.word	0x080044b7
 8004440:	080044b7 	.word	0x080044b7
 8004444:	080044b7 	.word	0x080044b7
 8004448:	080044a9 	.word	0x080044a9
 800444c:	2b40      	cmp	r3, #64	; 0x40
 800444e:	d02e      	beq.n	80044ae <UART_SetConfig+0xab2>
 8004450:	e031      	b.n	80044b6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004452:	f7fd ff29 	bl	80022a8 <HAL_RCC_GetPCLK1Freq>
 8004456:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004458:	e033      	b.n	80044c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800445a:	f7fd ff3b 	bl	80022d4 <HAL_RCC_GetPCLK2Freq>
 800445e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004460:	e02f      	b.n	80044c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004466:	4618      	mov	r0, r3
 8004468:	f7fe fe6c 	bl	8003144 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800446c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004470:	e027      	b.n	80044c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004472:	f107 0318 	add.w	r3, r7, #24
 8004476:	4618      	mov	r0, r3
 8004478:	f7fe ffb8 	bl	80033ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004480:	e01f      	b.n	80044c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004482:	4b69      	ldr	r3, [pc, #420]	; (8004628 <UART_SetConfig+0xc2c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0320 	and.w	r3, r3, #32
 800448a:	2b00      	cmp	r3, #0
 800448c:	d009      	beq.n	80044a2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800448e:	4b66      	ldr	r3, [pc, #408]	; (8004628 <UART_SetConfig+0xc2c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	08db      	lsrs	r3, r3, #3
 8004494:	f003 0303 	and.w	r3, r3, #3
 8004498:	4a64      	ldr	r2, [pc, #400]	; (800462c <UART_SetConfig+0xc30>)
 800449a:	fa22 f303 	lsr.w	r3, r2, r3
 800449e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80044a0:	e00f      	b.n	80044c2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80044a2:	4b62      	ldr	r3, [pc, #392]	; (800462c <UART_SetConfig+0xc30>)
 80044a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80044a6:	e00c      	b.n	80044c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80044a8:	4b61      	ldr	r3, [pc, #388]	; (8004630 <UART_SetConfig+0xc34>)
 80044aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80044ac:	e009      	b.n	80044c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80044b4:	e005      	b.n	80044c2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80044c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 80ea 	beq.w	800469e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	4a55      	ldr	r2, [pc, #340]	; (8004624 <UART_SetConfig+0xc28>)
 80044d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044d4:	461a      	mov	r2, r3
 80044d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80044dc:	005a      	lsls	r2, r3, #1
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	085b      	lsrs	r3, r3, #1
 80044e4:	441a      	add	r2, r3
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f2:	2b0f      	cmp	r3, #15
 80044f4:	d916      	bls.n	8004524 <UART_SetConfig+0xb28>
 80044f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044fc:	d212      	bcs.n	8004524 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004500:	b29b      	uxth	r3, r3
 8004502:	f023 030f 	bic.w	r3, r3, #15
 8004506:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450a:	085b      	lsrs	r3, r3, #1
 800450c:	b29b      	uxth	r3, r3
 800450e:	f003 0307 	and.w	r3, r3, #7
 8004512:	b29a      	uxth	r2, r3
 8004514:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004516:	4313      	orrs	r3, r2
 8004518:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004520:	60da      	str	r2, [r3, #12]
 8004522:	e0bc      	b.n	800469e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800452a:	e0b8      	b.n	800469e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800452c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004530:	2b20      	cmp	r3, #32
 8004532:	dc4b      	bgt.n	80045cc <UART_SetConfig+0xbd0>
 8004534:	2b00      	cmp	r3, #0
 8004536:	f2c0 8087 	blt.w	8004648 <UART_SetConfig+0xc4c>
 800453a:	2b20      	cmp	r3, #32
 800453c:	f200 8084 	bhi.w	8004648 <UART_SetConfig+0xc4c>
 8004540:	a201      	add	r2, pc, #4	; (adr r2, 8004548 <UART_SetConfig+0xb4c>)
 8004542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004546:	bf00      	nop
 8004548:	080045d3 	.word	0x080045d3
 800454c:	080045db 	.word	0x080045db
 8004550:	08004649 	.word	0x08004649
 8004554:	08004649 	.word	0x08004649
 8004558:	080045e3 	.word	0x080045e3
 800455c:	08004649 	.word	0x08004649
 8004560:	08004649 	.word	0x08004649
 8004564:	08004649 	.word	0x08004649
 8004568:	080045f3 	.word	0x080045f3
 800456c:	08004649 	.word	0x08004649
 8004570:	08004649 	.word	0x08004649
 8004574:	08004649 	.word	0x08004649
 8004578:	08004649 	.word	0x08004649
 800457c:	08004649 	.word	0x08004649
 8004580:	08004649 	.word	0x08004649
 8004584:	08004649 	.word	0x08004649
 8004588:	08004603 	.word	0x08004603
 800458c:	08004649 	.word	0x08004649
 8004590:	08004649 	.word	0x08004649
 8004594:	08004649 	.word	0x08004649
 8004598:	08004649 	.word	0x08004649
 800459c:	08004649 	.word	0x08004649
 80045a0:	08004649 	.word	0x08004649
 80045a4:	08004649 	.word	0x08004649
 80045a8:	08004649 	.word	0x08004649
 80045ac:	08004649 	.word	0x08004649
 80045b0:	08004649 	.word	0x08004649
 80045b4:	08004649 	.word	0x08004649
 80045b8:	08004649 	.word	0x08004649
 80045bc:	08004649 	.word	0x08004649
 80045c0:	08004649 	.word	0x08004649
 80045c4:	08004649 	.word	0x08004649
 80045c8:	0800463b 	.word	0x0800463b
 80045cc:	2b40      	cmp	r3, #64	; 0x40
 80045ce:	d037      	beq.n	8004640 <UART_SetConfig+0xc44>
 80045d0:	e03a      	b.n	8004648 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045d2:	f7fd fe69 	bl	80022a8 <HAL_RCC_GetPCLK1Freq>
 80045d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80045d8:	e03c      	b.n	8004654 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045da:	f7fd fe7b 	bl	80022d4 <HAL_RCC_GetPCLK2Freq>
 80045de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80045e0:	e038      	b.n	8004654 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fe fdac 	bl	8003144 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80045ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80045f0:	e030      	b.n	8004654 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80045f2:	f107 0318 	add.w	r3, r7, #24
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fe fef8 	bl	80033ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004600:	e028      	b.n	8004654 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004602:	4b09      	ldr	r3, [pc, #36]	; (8004628 <UART_SetConfig+0xc2c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b00      	cmp	r3, #0
 800460c:	d012      	beq.n	8004634 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800460e:	4b06      	ldr	r3, [pc, #24]	; (8004628 <UART_SetConfig+0xc2c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	08db      	lsrs	r3, r3, #3
 8004614:	f003 0303 	and.w	r3, r3, #3
 8004618:	4a04      	ldr	r2, [pc, #16]	; (800462c <UART_SetConfig+0xc30>)
 800461a:	fa22 f303 	lsr.w	r3, r2, r3
 800461e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004620:	e018      	b.n	8004654 <UART_SetConfig+0xc58>
 8004622:	bf00      	nop
 8004624:	08007830 	.word	0x08007830
 8004628:	58024400 	.word	0x58024400
 800462c:	03d09000 	.word	0x03d09000
 8004630:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8004634:	4b24      	ldr	r3, [pc, #144]	; (80046c8 <UART_SetConfig+0xccc>)
 8004636:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004638:	e00c      	b.n	8004654 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800463a:	4b24      	ldr	r3, [pc, #144]	; (80046cc <UART_SetConfig+0xcd0>)
 800463c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800463e:	e009      	b.n	8004654 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004640:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004644:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004646:	e005      	b.n	8004654 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004652:	bf00      	nop
    }

    if (pclk != 0U)
 8004654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004656:	2b00      	cmp	r3, #0
 8004658:	d021      	beq.n	800469e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	4a1c      	ldr	r2, [pc, #112]	; (80046d0 <UART_SetConfig+0xcd4>)
 8004660:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004664:	461a      	mov	r2, r3
 8004666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004668:	fbb3 f2f2 	udiv	r2, r3, r2
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	085b      	lsrs	r3, r3, #1
 8004672:	441a      	add	r2, r3
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	fbb2 f3f3 	udiv	r3, r2, r3
 800467c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800467e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004680:	2b0f      	cmp	r3, #15
 8004682:	d909      	bls.n	8004698 <UART_SetConfig+0xc9c>
 8004684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800468a:	d205      	bcs.n	8004698 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800468c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468e:	b29a      	uxth	r2, r3
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	60da      	str	r2, [r3, #12]
 8004696:	e002      	b.n	800469e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2200      	movs	r2, #0
 80046b2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	2200      	movs	r2, #0
 80046b8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80046ba:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3748      	adds	r7, #72	; 0x48
 80046c2:	46bd      	mov	sp, r7
 80046c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046c8:	03d09000 	.word	0x03d09000
 80046cc:	003d0900 	.word	0x003d0900
 80046d0:	08007830 	.word	0x08007830

080046d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004768:	f003 0310 	and.w	r3, r3, #16
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00a      	beq.n	8004786 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478a:	f003 0320 	and.w	r3, r3, #32
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d01a      	beq.n	80047ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047d2:	d10a      	bne.n	80047ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	605a      	str	r2, [r3, #4]
  }
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af02      	add	r7, sp, #8
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004828:	f7fc fac6 	bl	8000db8 <HAL_GetTick>
 800482c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0308 	and.w	r3, r3, #8
 8004838:	2b08      	cmp	r3, #8
 800483a:	d10e      	bne.n	800485a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800483c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f82f 	bl	80048ae <UART_WaitOnFlagUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e025      	b.n	80048a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b04      	cmp	r3, #4
 8004866:	d10e      	bne.n	8004886 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004868:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f819 	bl	80048ae <UART_WaitOnFlagUntilTimeout>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e00f      	b.n	80048a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2220      	movs	r2, #32
 800488a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2220      	movs	r2, #32
 8004892:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b09c      	sub	sp, #112	; 0x70
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	60f8      	str	r0, [r7, #12]
 80048b6:	60b9      	str	r1, [r7, #8]
 80048b8:	603b      	str	r3, [r7, #0]
 80048ba:	4613      	mov	r3, r2
 80048bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048be:	e0a9      	b.n	8004a14 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c6:	f000 80a5 	beq.w	8004a14 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ca:	f7fc fa75 	bl	8000db8 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d302      	bcc.n	80048e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80048da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d140      	bne.n	8004962 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80048ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048f4:	667b      	str	r3, [r7, #100]	; 0x64
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004900:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004904:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800490c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e6      	bne.n	80048e0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3308      	adds	r3, #8
 8004918:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800491c:	e853 3f00 	ldrex	r3, [r3]
 8004920:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004924:	f023 0301 	bic.w	r3, r3, #1
 8004928:	663b      	str	r3, [r7, #96]	; 0x60
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3308      	adds	r3, #8
 8004930:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004932:	64ba      	str	r2, [r7, #72]	; 0x48
 8004934:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004936:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004938:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800493a:	e841 2300 	strex	r3, r2, [r1]
 800493e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1e5      	bne.n	8004912 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2220      	movs	r2, #32
 800494a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2220      	movs	r2, #32
 8004952:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e069      	b.n	8004a36 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d051      	beq.n	8004a14 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800497a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800497e:	d149      	bne.n	8004a14 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004988:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004992:	e853 3f00 	ldrex	r3, [r3]
 8004996:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800499e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	461a      	mov	r2, r3
 80049a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a8:	637b      	str	r3, [r7, #52]	; 0x34
 80049aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049b0:	e841 2300 	strex	r3, r2, [r1]
 80049b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1e6      	bne.n	800498a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3308      	adds	r3, #8
 80049c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	e853 3f00 	ldrex	r3, [r3]
 80049ca:	613b      	str	r3, [r7, #16]
   return(result);
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	f023 0301 	bic.w	r3, r3, #1
 80049d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3308      	adds	r3, #8
 80049da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80049dc:	623a      	str	r2, [r7, #32]
 80049de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e0:	69f9      	ldr	r1, [r7, #28]
 80049e2:	6a3a      	ldr	r2, [r7, #32]
 80049e4:	e841 2300 	strex	r3, r2, [r1]
 80049e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e5      	bne.n	80049bc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e010      	b.n	8004a36 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	69da      	ldr	r2, [r3, #28]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	bf0c      	ite	eq
 8004a24:	2301      	moveq	r3, #1
 8004a26:	2300      	movne	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	79fb      	ldrb	r3, [r7, #7]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	f43f af46 	beq.w	80048c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3770      	adds	r7, #112	; 0x70
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b085      	sub	sp, #20
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_UARTEx_DisableFifoMode+0x16>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e027      	b.n	8004aa4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2224      	movs	r2, #36	; 0x24
 8004a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 0201 	bic.w	r2, r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004a82:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e02d      	b.n	8004b24 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2224      	movs	r2, #36	; 0x24
 8004ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0201 	bic.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f84f 	bl	8004ba8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e02d      	b.n	8004ba0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2224      	movs	r2, #36	; 0x24
 8004b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0201 	bic.w	r2, r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f811 	bl	8004ba8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d108      	bne.n	8004bca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004bc8:	e031      	b.n	8004c2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004bca:	2310      	movs	r3, #16
 8004bcc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004bce:	2310      	movs	r3, #16
 8004bd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	0e5b      	lsrs	r3, r3, #25
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	0f5b      	lsrs	r3, r3, #29
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004bf2:	7bbb      	ldrb	r3, [r7, #14]
 8004bf4:	7b3a      	ldrb	r2, [r7, #12]
 8004bf6:	4911      	ldr	r1, [pc, #68]	; (8004c3c <UARTEx_SetNbDataToProcess+0x94>)
 8004bf8:	5c8a      	ldrb	r2, [r1, r2]
 8004bfa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004bfe:	7b3a      	ldrb	r2, [r7, #12]
 8004c00:	490f      	ldr	r1, [pc, #60]	; (8004c40 <UARTEx_SetNbDataToProcess+0x98>)
 8004c02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c04:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
 8004c12:	7b7a      	ldrb	r2, [r7, #13]
 8004c14:	4909      	ldr	r1, [pc, #36]	; (8004c3c <UARTEx_SetNbDataToProcess+0x94>)
 8004c16:	5c8a      	ldrb	r2, [r1, r2]
 8004c18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004c1c:	7b7a      	ldrb	r2, [r7, #13]
 8004c1e:	4908      	ldr	r1, [pc, #32]	; (8004c40 <UARTEx_SetNbDataToProcess+0x98>)
 8004c20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c22:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004c2e:	bf00      	nop
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	08007848 	.word	0x08007848
 8004c40:	08007850 	.word	0x08007850

08004c44 <__NVIC_SetPriority>:
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	6039      	str	r1, [r7, #0]
 8004c4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	db0a      	blt.n	8004c6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	490c      	ldr	r1, [pc, #48]	; (8004c90 <__NVIC_SetPriority+0x4c>)
 8004c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c62:	0112      	lsls	r2, r2, #4
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	440b      	add	r3, r1
 8004c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004c6c:	e00a      	b.n	8004c84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	4908      	ldr	r1, [pc, #32]	; (8004c94 <__NVIC_SetPriority+0x50>)
 8004c74:	88fb      	ldrh	r3, [r7, #6]
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	3b04      	subs	r3, #4
 8004c7c:	0112      	lsls	r2, r2, #4
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	440b      	add	r3, r1
 8004c82:	761a      	strb	r2, [r3, #24]
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	e000e100 	.word	0xe000e100
 8004c94:	e000ed00 	.word	0xe000ed00

08004c98 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	f06f 0004 	mvn.w	r0, #4
 8004ca2:	f7ff ffcf 	bl	8004c44 <__NVIC_SetPriority>
#endif
}
 8004ca6:	bf00      	nop
 8004ca8:	bd80      	pop	{r7, pc}
	...

08004cac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cb2:	f3ef 8305 	mrs	r3, IPSR
 8004cb6:	603b      	str	r3, [r7, #0]
  return(result);
 8004cb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004cbe:	f06f 0305 	mvn.w	r3, #5
 8004cc2:	607b      	str	r3, [r7, #4]
 8004cc4:	e00c      	b.n	8004ce0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004cc6:	4b0a      	ldr	r3, [pc, #40]	; (8004cf0 <osKernelInitialize+0x44>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d105      	bne.n	8004cda <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004cce:	4b08      	ldr	r3, [pc, #32]	; (8004cf0 <osKernelInitialize+0x44>)
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	607b      	str	r3, [r7, #4]
 8004cd8:	e002      	b.n	8004ce0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004cda:	f04f 33ff 	mov.w	r3, #4294967295
 8004cde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ce0:	687b      	ldr	r3, [r7, #4]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	240000c8 	.word	0x240000c8

08004cf4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cfa:	f3ef 8305 	mrs	r3, IPSR
 8004cfe:	603b      	str	r3, [r7, #0]
  return(result);
 8004d00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004d06:	f06f 0305 	mvn.w	r3, #5
 8004d0a:	607b      	str	r3, [r7, #4]
 8004d0c:	e010      	b.n	8004d30 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004d0e:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <osKernelStart+0x48>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d109      	bne.n	8004d2a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004d16:	f7ff ffbf 	bl	8004c98 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004d1a:	4b08      	ldr	r3, [pc, #32]	; (8004d3c <osKernelStart+0x48>)
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004d20:	f001 f866 	bl	8005df0 <vTaskStartScheduler>
      stat = osOK;
 8004d24:	2300      	movs	r3, #0
 8004d26:	607b      	str	r3, [r7, #4]
 8004d28:	e002      	b.n	8004d30 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d30:	687b      	ldr	r3, [r7, #4]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	240000c8 	.word	0x240000c8

08004d40 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08e      	sub	sp, #56	; 0x38
 8004d44:	af04      	add	r7, sp, #16
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d50:	f3ef 8305 	mrs	r3, IPSR
 8004d54:	617b      	str	r3, [r7, #20]
  return(result);
 8004d56:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d17e      	bne.n	8004e5a <osThreadNew+0x11a>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d07b      	beq.n	8004e5a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004d62:	2380      	movs	r3, #128	; 0x80
 8004d64:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004d66:	2318      	movs	r3, #24
 8004d68:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d72:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d045      	beq.n	8004e06 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <osThreadNew+0x48>
        name = attr->name;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d002      	beq.n	8004d96 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d008      	beq.n	8004dae <osThreadNew+0x6e>
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	2b38      	cmp	r3, #56	; 0x38
 8004da0:	d805      	bhi.n	8004dae <osThreadNew+0x6e>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <osThreadNew+0x72>
        return (NULL);
 8004dae:	2300      	movs	r3, #0
 8004db0:	e054      	b.n	8004e5c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	089b      	lsrs	r3, r3, #2
 8004dc0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00e      	beq.n	8004de8 <osThreadNew+0xa8>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	2b5b      	cmp	r3, #91	; 0x5b
 8004dd0:	d90a      	bls.n	8004de8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d006      	beq.n	8004de8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d002      	beq.n	8004de8 <osThreadNew+0xa8>
        mem = 1;
 8004de2:	2301      	movs	r3, #1
 8004de4:	61bb      	str	r3, [r7, #24]
 8004de6:	e010      	b.n	8004e0a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10c      	bne.n	8004e0a <osThreadNew+0xca>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d108      	bne.n	8004e0a <osThreadNew+0xca>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d104      	bne.n	8004e0a <osThreadNew+0xca>
          mem = 0;
 8004e00:	2300      	movs	r3, #0
 8004e02:	61bb      	str	r3, [r7, #24]
 8004e04:	e001      	b.n	8004e0a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d110      	bne.n	8004e32 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e18:	9202      	str	r2, [sp, #8]
 8004e1a:	9301      	str	r3, [sp, #4]
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	6a3a      	ldr	r2, [r7, #32]
 8004e24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 fe0c 	bl	8005a44 <xTaskCreateStatic>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	613b      	str	r3, [r7, #16]
 8004e30:	e013      	b.n	8004e5a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d110      	bne.n	8004e5a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	f107 0310 	add.w	r3, r7, #16
 8004e40:	9301      	str	r3, [sp, #4]
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 fe57 	bl	8005afe <xTaskCreate>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d001      	beq.n	8004e5a <osThreadNew+0x11a>
            hTask = NULL;
 8004e56:	2300      	movs	r3, #0
 8004e58:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e5a:	693b      	ldr	r3, [r7, #16]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3728      	adds	r7, #40	; 0x28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e6c:	f3ef 8305 	mrs	r3, IPSR
 8004e70:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e72:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <osDelay+0x1c>
    stat = osErrorISR;
 8004e78:	f06f 0305 	mvn.w	r3, #5
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	e007      	b.n	8004e90 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 ff7c 	bl	8005d88 <vTaskDelay>
    }
  }

  return (stat);
 8004e90:	68fb      	ldr	r3, [r7, #12]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4a07      	ldr	r2, [pc, #28]	; (8004ec8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004eac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	4a06      	ldr	r2, [pc, #24]	; (8004ecc <vApplicationGetIdleTaskMemory+0x30>)
 8004eb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2280      	movs	r2, #128	; 0x80
 8004eb8:	601a      	str	r2, [r3, #0]
}
 8004eba:	bf00      	nop
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	240000cc 	.word	0x240000cc
 8004ecc:	24000128 	.word	0x24000128

08004ed0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4a07      	ldr	r2, [pc, #28]	; (8004efc <vApplicationGetTimerTaskMemory+0x2c>)
 8004ee0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	4a06      	ldr	r2, [pc, #24]	; (8004f00 <vApplicationGetTimerTaskMemory+0x30>)
 8004ee6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004eee:	601a      	str	r2, [r3, #0]
}
 8004ef0:	bf00      	nop
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	24000328 	.word	0x24000328
 8004f00:	24000384 	.word	0x24000384

08004f04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f103 0208 	add.w	r2, r3, #8
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f04f 32ff 	mov.w	r2, #4294967295
 8004f1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f103 0208 	add.w	r2, r3, #8
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f103 0208 	add.w	r2, r3, #8
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b085      	sub	sp, #20
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	601a      	str	r2, [r3, #0]
}
 8004f9a:	bf00      	nop
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b085      	sub	sp, #20
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbc:	d103      	bne.n	8004fc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	e00c      	b.n	8004fe0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	3308      	adds	r3, #8
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	e002      	b.n	8004fd4 <vListInsert+0x2e>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d2f6      	bcs.n	8004fce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	601a      	str	r2, [r3, #0]
}
 800500c:	bf00      	nop
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6892      	ldr	r2, [r2, #8]
 800502e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6852      	ldr	r2, [r2, #4]
 8005038:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	429a      	cmp	r2, r3
 8005042:	d103      	bne.n	800504c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	1e5a      	subs	r2, r3, #1
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10a      	bne.n	8005096 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005092:	bf00      	nop
 8005094:	e7fe      	b.n	8005094 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005096:	f002 f84d 	bl	8007134 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a2:	68f9      	ldr	r1, [r7, #12]
 80050a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050a6:	fb01 f303 	mul.w	r3, r1, r3
 80050aa:	441a      	add	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c6:	3b01      	subs	r3, #1
 80050c8:	68f9      	ldr	r1, [r7, #12]
 80050ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050cc:	fb01 f303 	mul.w	r3, r1, r3
 80050d0:	441a      	add	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	22ff      	movs	r2, #255	; 0xff
 80050da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	22ff      	movs	r2, #255	; 0xff
 80050e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d114      	bne.n	8005116 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d01a      	beq.n	800512a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	3310      	adds	r3, #16
 80050f8:	4618      	mov	r0, r3
 80050fa:	f001 f903 	bl	8006304 <xTaskRemoveFromEventList>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d012      	beq.n	800512a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005104:	4b0c      	ldr	r3, [pc, #48]	; (8005138 <xQueueGenericReset+0xcc>)
 8005106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	e009      	b.n	800512a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	3310      	adds	r3, #16
 800511a:	4618      	mov	r0, r3
 800511c:	f7ff fef2 	bl	8004f04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	3324      	adds	r3, #36	; 0x24
 8005124:	4618      	mov	r0, r3
 8005126:	f7ff feed 	bl	8004f04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800512a:	f002 f833 	bl	8007194 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800512e:	2301      	movs	r3, #1
}
 8005130:	4618      	mov	r0, r3
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	e000ed04 	.word	0xe000ed04

0800513c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800513c:	b580      	push	{r7, lr}
 800513e:	b08e      	sub	sp, #56	; 0x38
 8005140:	af02      	add	r7, sp, #8
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
 8005148:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10a      	bne.n	8005166 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005162:	bf00      	nop
 8005164:	e7fe      	b.n	8005164 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10a      	bne.n	8005182 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800516c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005170:	f383 8811 	msr	BASEPRI, r3
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800517e:	bf00      	nop
 8005180:	e7fe      	b.n	8005180 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d002      	beq.n	800518e <xQueueGenericCreateStatic+0x52>
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <xQueueGenericCreateStatic+0x56>
 800518e:	2301      	movs	r3, #1
 8005190:	e000      	b.n	8005194 <xQueueGenericCreateStatic+0x58>
 8005192:	2300      	movs	r3, #0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10a      	bne.n	80051ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	623b      	str	r3, [r7, #32]
}
 80051aa:	bf00      	nop
 80051ac:	e7fe      	b.n	80051ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d102      	bne.n	80051ba <xQueueGenericCreateStatic+0x7e>
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <xQueueGenericCreateStatic+0x82>
 80051ba:	2301      	movs	r3, #1
 80051bc:	e000      	b.n	80051c0 <xQueueGenericCreateStatic+0x84>
 80051be:	2300      	movs	r3, #0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10a      	bne.n	80051da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80051c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	61fb      	str	r3, [r7, #28]
}
 80051d6:	bf00      	nop
 80051d8:	e7fe      	b.n	80051d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80051da:	2350      	movs	r3, #80	; 0x50
 80051dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2b50      	cmp	r3, #80	; 0x50
 80051e2:	d00a      	beq.n	80051fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	61bb      	str	r3, [r7, #24]
}
 80051f6:	bf00      	nop
 80051f8:	e7fe      	b.n	80051f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80051fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00d      	beq.n	8005222 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005208:	2201      	movs	r2, #1
 800520a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800520e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	4613      	mov	r3, r2
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	68b9      	ldr	r1, [r7, #8]
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 f805 	bl	800522c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005224:	4618      	mov	r0, r3
 8005226:	3730      	adds	r7, #48	; 0x30
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d103      	bne.n	8005248 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	e002      	b.n	800524e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800525a:	2101      	movs	r1, #1
 800525c:	69b8      	ldr	r0, [r7, #24]
 800525e:	f7ff ff05 	bl	800506c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	78fa      	ldrb	r2, [r7, #3]
 8005266:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800526a:	bf00      	nop
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08e      	sub	sp, #56	; 0x38
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
 8005280:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005282:	2300      	movs	r3, #0
 8005284:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10a      	bne.n	80052a6 <xQueueGenericSend+0x32>
	__asm volatile
 8005290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80052a2:	bf00      	nop
 80052a4:	e7fe      	b.n	80052a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d103      	bne.n	80052b4 <xQueueGenericSend+0x40>
 80052ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <xQueueGenericSend+0x44>
 80052b4:	2301      	movs	r3, #1
 80052b6:	e000      	b.n	80052ba <xQueueGenericSend+0x46>
 80052b8:	2300      	movs	r3, #0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10a      	bne.n	80052d4 <xQueueGenericSend+0x60>
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80052d0:	bf00      	nop
 80052d2:	e7fe      	b.n	80052d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d103      	bne.n	80052e2 <xQueueGenericSend+0x6e>
 80052da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d101      	bne.n	80052e6 <xQueueGenericSend+0x72>
 80052e2:	2301      	movs	r3, #1
 80052e4:	e000      	b.n	80052e8 <xQueueGenericSend+0x74>
 80052e6:	2300      	movs	r3, #0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10a      	bne.n	8005302 <xQueueGenericSend+0x8e>
	__asm volatile
 80052ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	623b      	str	r3, [r7, #32]
}
 80052fe:	bf00      	nop
 8005300:	e7fe      	b.n	8005300 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005302:	f001 f9bd 	bl	8006680 <xTaskGetSchedulerState>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d102      	bne.n	8005312 <xQueueGenericSend+0x9e>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <xQueueGenericSend+0xa2>
 8005312:	2301      	movs	r3, #1
 8005314:	e000      	b.n	8005318 <xQueueGenericSend+0xa4>
 8005316:	2300      	movs	r3, #0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10a      	bne.n	8005332 <xQueueGenericSend+0xbe>
	__asm volatile
 800531c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	61fb      	str	r3, [r7, #28]
}
 800532e:	bf00      	nop
 8005330:	e7fe      	b.n	8005330 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005332:	f001 feff 	bl	8007134 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800533e:	429a      	cmp	r2, r3
 8005340:	d302      	bcc.n	8005348 <xQueueGenericSend+0xd4>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b02      	cmp	r3, #2
 8005346:	d129      	bne.n	800539c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	68b9      	ldr	r1, [r7, #8]
 800534c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800534e:	f000 fa0b 	bl	8005768 <prvCopyDataToQueue>
 8005352:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	2b00      	cmp	r3, #0
 800535a:	d010      	beq.n	800537e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800535c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535e:	3324      	adds	r3, #36	; 0x24
 8005360:	4618      	mov	r0, r3
 8005362:	f000 ffcf 	bl	8006304 <xTaskRemoveFromEventList>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d013      	beq.n	8005394 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800536c:	4b3f      	ldr	r3, [pc, #252]	; (800546c <xQueueGenericSend+0x1f8>)
 800536e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	e00a      	b.n	8005394 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800537e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005380:	2b00      	cmp	r3, #0
 8005382:	d007      	beq.n	8005394 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005384:	4b39      	ldr	r3, [pc, #228]	; (800546c <xQueueGenericSend+0x1f8>)
 8005386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005394:	f001 fefe 	bl	8007194 <vPortExitCritical>
				return pdPASS;
 8005398:	2301      	movs	r3, #1
 800539a:	e063      	b.n	8005464 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d103      	bne.n	80053aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053a2:	f001 fef7 	bl	8007194 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	e05c      	b.n	8005464 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d106      	bne.n	80053be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053b0:	f107 0314 	add.w	r3, r7, #20
 80053b4:	4618      	mov	r0, r3
 80053b6:	f001 f809 	bl	80063cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053ba:	2301      	movs	r3, #1
 80053bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053be:	f001 fee9 	bl	8007194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053c2:	f000 fd7b 	bl	8005ebc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053c6:	f001 feb5 	bl	8007134 <vPortEnterCritical>
 80053ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053d0:	b25b      	sxtb	r3, r3
 80053d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d6:	d103      	bne.n	80053e0 <xQueueGenericSend+0x16c>
 80053d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053e6:	b25b      	sxtb	r3, r3
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ec:	d103      	bne.n	80053f6 <xQueueGenericSend+0x182>
 80053ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053f6:	f001 fecd 	bl	8007194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053fa:	1d3a      	adds	r2, r7, #4
 80053fc:	f107 0314 	add.w	r3, r7, #20
 8005400:	4611      	mov	r1, r2
 8005402:	4618      	mov	r0, r3
 8005404:	f000 fff8 	bl	80063f8 <xTaskCheckForTimeOut>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d124      	bne.n	8005458 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800540e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005410:	f000 faa2 	bl	8005958 <prvIsQueueFull>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d018      	beq.n	800544c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	3310      	adds	r3, #16
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	4611      	mov	r1, r2
 8005422:	4618      	mov	r0, r3
 8005424:	f000 ff1e 	bl	8006264 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005428:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800542a:	f000 fa2d 	bl	8005888 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800542e:	f000 fd53 	bl	8005ed8 <xTaskResumeAll>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	f47f af7c 	bne.w	8005332 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800543a:	4b0c      	ldr	r3, [pc, #48]	; (800546c <xQueueGenericSend+0x1f8>)
 800543c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	f3bf 8f4f 	dsb	sy
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	e772      	b.n	8005332 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800544c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800544e:	f000 fa1b 	bl	8005888 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005452:	f000 fd41 	bl	8005ed8 <xTaskResumeAll>
 8005456:	e76c      	b.n	8005332 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800545a:	f000 fa15 	bl	8005888 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800545e:	f000 fd3b 	bl	8005ed8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005462:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005464:	4618      	mov	r0, r3
 8005466:	3738      	adds	r7, #56	; 0x38
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	e000ed04 	.word	0xe000ed04

08005470 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b090      	sub	sp, #64	; 0x40
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
 800547c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10a      	bne.n	800549e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800549a:	bf00      	nop
 800549c:	e7fe      	b.n	800549c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d103      	bne.n	80054ac <xQueueGenericSendFromISR+0x3c>
 80054a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <xQueueGenericSendFromISR+0x40>
 80054ac:	2301      	movs	r3, #1
 80054ae:	e000      	b.n	80054b2 <xQueueGenericSendFromISR+0x42>
 80054b0:	2300      	movs	r3, #0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10a      	bne.n	80054cc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80054b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054c8:	bf00      	nop
 80054ca:	e7fe      	b.n	80054ca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d103      	bne.n	80054da <xQueueGenericSendFromISR+0x6a>
 80054d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d101      	bne.n	80054de <xQueueGenericSendFromISR+0x6e>
 80054da:	2301      	movs	r3, #1
 80054dc:	e000      	b.n	80054e0 <xQueueGenericSendFromISR+0x70>
 80054de:	2300      	movs	r3, #0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10a      	bne.n	80054fa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80054e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e8:	f383 8811 	msr	BASEPRI, r3
 80054ec:	f3bf 8f6f 	isb	sy
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	623b      	str	r3, [r7, #32]
}
 80054f6:	bf00      	nop
 80054f8:	e7fe      	b.n	80054f8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054fa:	f001 fefd 	bl	80072f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80054fe:	f3ef 8211 	mrs	r2, BASEPRI
 8005502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	61fa      	str	r2, [r7, #28]
 8005514:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005516:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005518:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800551a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800551e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005522:	429a      	cmp	r2, r3
 8005524:	d302      	bcc.n	800552c <xQueueGenericSendFromISR+0xbc>
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b02      	cmp	r3, #2
 800552a:	d12f      	bne.n	800558c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800552c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	68b9      	ldr	r1, [r7, #8]
 8005540:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005542:	f000 f911 	bl	8005768 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005546:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800554a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554e:	d112      	bne.n	8005576 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	2b00      	cmp	r3, #0
 8005556:	d016      	beq.n	8005586 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555a:	3324      	adds	r3, #36	; 0x24
 800555c:	4618      	mov	r0, r3
 800555e:	f000 fed1 	bl	8006304 <xTaskRemoveFromEventList>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00e      	beq.n	8005586 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00b      	beq.n	8005586 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	e007      	b.n	8005586 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005576:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800557a:	3301      	adds	r3, #1
 800557c:	b2db      	uxtb	r3, r3
 800557e:	b25a      	sxtb	r2, r3
 8005580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005586:	2301      	movs	r3, #1
 8005588:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800558a:	e001      	b.n	8005590 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800558c:	2300      	movs	r3, #0
 800558e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005592:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800559a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800559c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3740      	adds	r7, #64	; 0x40
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
	...

080055a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08c      	sub	sp, #48	; 0x30
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80055b4:	2300      	movs	r3, #0
 80055b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10a      	bne.n	80055d8 <xQueueReceive+0x30>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	623b      	str	r3, [r7, #32]
}
 80055d4:	bf00      	nop
 80055d6:	e7fe      	b.n	80055d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d103      	bne.n	80055e6 <xQueueReceive+0x3e>
 80055de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <xQueueReceive+0x42>
 80055e6:	2301      	movs	r3, #1
 80055e8:	e000      	b.n	80055ec <xQueueReceive+0x44>
 80055ea:	2300      	movs	r3, #0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10a      	bne.n	8005606 <xQueueReceive+0x5e>
	__asm volatile
 80055f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	61fb      	str	r3, [r7, #28]
}
 8005602:	bf00      	nop
 8005604:	e7fe      	b.n	8005604 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005606:	f001 f83b 	bl	8006680 <xTaskGetSchedulerState>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d102      	bne.n	8005616 <xQueueReceive+0x6e>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <xQueueReceive+0x72>
 8005616:	2301      	movs	r3, #1
 8005618:	e000      	b.n	800561c <xQueueReceive+0x74>
 800561a:	2300      	movs	r3, #0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10a      	bne.n	8005636 <xQueueReceive+0x8e>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	61bb      	str	r3, [r7, #24]
}
 8005632:	bf00      	nop
 8005634:	e7fe      	b.n	8005634 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005636:	f001 fd7d 	bl	8007134 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800563a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	2b00      	cmp	r3, #0
 8005644:	d01f      	beq.n	8005686 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005646:	68b9      	ldr	r1, [r7, #8]
 8005648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800564a:	f000 f8f7 	bl	800583c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	1e5a      	subs	r2, r3, #1
 8005652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005654:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00f      	beq.n	800567e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800565e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005660:	3310      	adds	r3, #16
 8005662:	4618      	mov	r0, r3
 8005664:	f000 fe4e 	bl	8006304 <xTaskRemoveFromEventList>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d007      	beq.n	800567e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800566e:	4b3d      	ldr	r3, [pc, #244]	; (8005764 <xQueueReceive+0x1bc>)
 8005670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800567e:	f001 fd89 	bl	8007194 <vPortExitCritical>
				return pdPASS;
 8005682:	2301      	movs	r3, #1
 8005684:	e069      	b.n	800575a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d103      	bne.n	8005694 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800568c:	f001 fd82 	bl	8007194 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005690:	2300      	movs	r3, #0
 8005692:	e062      	b.n	800575a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005696:	2b00      	cmp	r3, #0
 8005698:	d106      	bne.n	80056a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800569a:	f107 0310 	add.w	r3, r7, #16
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 fe94 	bl	80063cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056a4:	2301      	movs	r3, #1
 80056a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056a8:	f001 fd74 	bl	8007194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056ac:	f000 fc06 	bl	8005ebc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056b0:	f001 fd40 	bl	8007134 <vPortEnterCritical>
 80056b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056ba:	b25b      	sxtb	r3, r3
 80056bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c0:	d103      	bne.n	80056ca <xQueueReceive+0x122>
 80056c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056d0:	b25b      	sxtb	r3, r3
 80056d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d6:	d103      	bne.n	80056e0 <xQueueReceive+0x138>
 80056d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056e0:	f001 fd58 	bl	8007194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056e4:	1d3a      	adds	r2, r7, #4
 80056e6:	f107 0310 	add.w	r3, r7, #16
 80056ea:	4611      	mov	r1, r2
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 fe83 	bl	80063f8 <xTaskCheckForTimeOut>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d123      	bne.n	8005740 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056fa:	f000 f917 	bl	800592c <prvIsQueueEmpty>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d017      	beq.n	8005734 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005706:	3324      	adds	r3, #36	; 0x24
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	4611      	mov	r1, r2
 800570c:	4618      	mov	r0, r3
 800570e:	f000 fda9 	bl	8006264 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005712:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005714:	f000 f8b8 	bl	8005888 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005718:	f000 fbde 	bl	8005ed8 <xTaskResumeAll>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d189      	bne.n	8005636 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005722:	4b10      	ldr	r3, [pc, #64]	; (8005764 <xQueueReceive+0x1bc>)
 8005724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	e780      	b.n	8005636 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005734:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005736:	f000 f8a7 	bl	8005888 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800573a:	f000 fbcd 	bl	8005ed8 <xTaskResumeAll>
 800573e:	e77a      	b.n	8005636 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005742:	f000 f8a1 	bl	8005888 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005746:	f000 fbc7 	bl	8005ed8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800574a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800574c:	f000 f8ee 	bl	800592c <prvIsQueueEmpty>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	f43f af6f 	beq.w	8005636 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005758:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800575a:	4618      	mov	r0, r3
 800575c:	3730      	adds	r7, #48	; 0x30
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	e000ed04 	.word	0xe000ed04

08005768 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005774:	2300      	movs	r3, #0
 8005776:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10d      	bne.n	80057a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d14d      	bne.n	800582a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	4618      	mov	r0, r3
 8005794:	f000 ff92 	bl	80066bc <xTaskPriorityDisinherit>
 8005798:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	609a      	str	r2, [r3, #8]
 80057a0:	e043      	b.n	800582a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d119      	bne.n	80057dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6858      	ldr	r0, [r3, #4]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b0:	461a      	mov	r2, r3
 80057b2:	68b9      	ldr	r1, [r7, #8]
 80057b4:	f001 ffee 	bl	8007794 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c0:	441a      	add	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d32b      	bcc.n	800582a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	605a      	str	r2, [r3, #4]
 80057da:	e026      	b.n	800582a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	68d8      	ldr	r0, [r3, #12]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e4:	461a      	mov	r2, r3
 80057e6:	68b9      	ldr	r1, [r7, #8]
 80057e8:	f001 ffd4 	bl	8007794 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	68da      	ldr	r2, [r3, #12]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f4:	425b      	negs	r3, r3
 80057f6:	441a      	add	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	68da      	ldr	r2, [r3, #12]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d207      	bcs.n	8005818 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005810:	425b      	negs	r3, r3
 8005812:	441a      	add	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b02      	cmp	r3, #2
 800581c:	d105      	bne.n	800582a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	3b01      	subs	r3, #1
 8005828:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005832:	697b      	ldr	r3, [r7, #20]
}
 8005834:	4618      	mov	r0, r3
 8005836:	3718      	adds	r7, #24
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	2b00      	cmp	r3, #0
 800584c:	d018      	beq.n	8005880 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	441a      	add	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68da      	ldr	r2, [r3, #12]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	429a      	cmp	r2, r3
 8005866:	d303      	bcc.n	8005870 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68d9      	ldr	r1, [r3, #12]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005878:	461a      	mov	r2, r3
 800587a:	6838      	ldr	r0, [r7, #0]
 800587c:	f001 ff8a 	bl	8007794 <memcpy>
	}
}
 8005880:	bf00      	nop
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005890:	f001 fc50 	bl	8007134 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800589a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800589c:	e011      	b.n	80058c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d012      	beq.n	80058cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3324      	adds	r3, #36	; 0x24
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 fd2a 	bl	8006304 <xTaskRemoveFromEventList>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80058b6:	f000 fe01 	bl	80064bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80058ba:	7bfb      	ldrb	r3, [r7, #15]
 80058bc:	3b01      	subs	r3, #1
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	dce9      	bgt.n	800589e <prvUnlockQueue+0x16>
 80058ca:	e000      	b.n	80058ce <prvUnlockQueue+0x46>
					break;
 80058cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	22ff      	movs	r2, #255	; 0xff
 80058d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80058d6:	f001 fc5d 	bl	8007194 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80058da:	f001 fc2b 	bl	8007134 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058e6:	e011      	b.n	800590c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d012      	beq.n	8005916 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	3310      	adds	r3, #16
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 fd05 	bl	8006304 <xTaskRemoveFromEventList>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005900:	f000 fddc 	bl	80064bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005904:	7bbb      	ldrb	r3, [r7, #14]
 8005906:	3b01      	subs	r3, #1
 8005908:	b2db      	uxtb	r3, r3
 800590a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800590c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005910:	2b00      	cmp	r3, #0
 8005912:	dce9      	bgt.n	80058e8 <prvUnlockQueue+0x60>
 8005914:	e000      	b.n	8005918 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005916:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	22ff      	movs	r2, #255	; 0xff
 800591c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005920:	f001 fc38 	bl	8007194 <vPortExitCritical>
}
 8005924:	bf00      	nop
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005934:	f001 fbfe 	bl	8007134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593c:	2b00      	cmp	r3, #0
 800593e:	d102      	bne.n	8005946 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005940:	2301      	movs	r3, #1
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	e001      	b.n	800594a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005946:	2300      	movs	r3, #0
 8005948:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800594a:	f001 fc23 	bl	8007194 <vPortExitCritical>

	return xReturn;
 800594e:	68fb      	ldr	r3, [r7, #12]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005960:	f001 fbe8 	bl	8007134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596c:	429a      	cmp	r2, r3
 800596e:	d102      	bne.n	8005976 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005970:	2301      	movs	r3, #1
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	e001      	b.n	800597a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005976:	2300      	movs	r3, #0
 8005978:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800597a:	f001 fc0b 	bl	8007194 <vPortExitCritical>

	return xReturn;
 800597e:	68fb      	ldr	r3, [r7, #12]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005992:	2300      	movs	r3, #0
 8005994:	60fb      	str	r3, [r7, #12]
 8005996:	e014      	b.n	80059c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005998:	4a0f      	ldr	r2, [pc, #60]	; (80059d8 <vQueueAddToRegistry+0x50>)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10b      	bne.n	80059bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80059a4:	490c      	ldr	r1, [pc, #48]	; (80059d8 <vQueueAddToRegistry+0x50>)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80059ae:	4a0a      	ldr	r2, [pc, #40]	; (80059d8 <vQueueAddToRegistry+0x50>)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	4413      	add	r3, r2
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80059ba:	e006      	b.n	80059ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	3301      	adds	r3, #1
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2b07      	cmp	r3, #7
 80059c6:	d9e7      	bls.n	8005998 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80059c8:	bf00      	nop
 80059ca:	bf00      	nop
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	24000784 	.word	0x24000784

080059dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80059ec:	f001 fba2 	bl	8007134 <vPortEnterCritical>
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059f6:	b25b      	sxtb	r3, r3
 80059f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fc:	d103      	bne.n	8005a06 <vQueueWaitForMessageRestricted+0x2a>
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a0c:	b25b      	sxtb	r3, r3
 8005a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a12:	d103      	bne.n	8005a1c <vQueueWaitForMessageRestricted+0x40>
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a1c:	f001 fbba 	bl	8007194 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d106      	bne.n	8005a36 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	3324      	adds	r3, #36	; 0x24
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	68b9      	ldr	r1, [r7, #8]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 fc3b 	bl	80062ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a36:	6978      	ldr	r0, [r7, #20]
 8005a38:	f7ff ff26 	bl	8005888 <prvUnlockQueue>
	}
 8005a3c:	bf00      	nop
 8005a3e:	3718      	adds	r7, #24
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b08e      	sub	sp, #56	; 0x38
 8005a48:	af04      	add	r7, sp, #16
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
 8005a50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10a      	bne.n	8005a6e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5c:	f383 8811 	msr	BASEPRI, r3
 8005a60:	f3bf 8f6f 	isb	sy
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	623b      	str	r3, [r7, #32]
}
 8005a6a:	bf00      	nop
 8005a6c:	e7fe      	b.n	8005a6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10a      	bne.n	8005a8a <xTaskCreateStatic+0x46>
	__asm volatile
 8005a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a78:	f383 8811 	msr	BASEPRI, r3
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	61fb      	str	r3, [r7, #28]
}
 8005a86:	bf00      	nop
 8005a88:	e7fe      	b.n	8005a88 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a8a:	235c      	movs	r3, #92	; 0x5c
 8005a8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	2b5c      	cmp	r3, #92	; 0x5c
 8005a92:	d00a      	beq.n	8005aaa <xTaskCreateStatic+0x66>
	__asm volatile
 8005a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	61bb      	str	r3, [r7, #24]
}
 8005aa6:	bf00      	nop
 8005aa8:	e7fe      	b.n	8005aa8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005aaa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d01e      	beq.n	8005af0 <xTaskCreateStatic+0xac>
 8005ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d01b      	beq.n	8005af0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ac0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005aca:	2300      	movs	r3, #0
 8005acc:	9303      	str	r3, [sp, #12]
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	9302      	str	r3, [sp, #8]
 8005ad2:	f107 0314 	add.w	r3, r7, #20
 8005ad6:	9301      	str	r3, [sp, #4]
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	68b9      	ldr	r1, [r7, #8]
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f000 f850 	bl	8005b88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ae8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005aea:	f000 f8dd 	bl	8005ca8 <prvAddNewTaskToReadyList>
 8005aee:	e001      	b.n	8005af4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005af0:	2300      	movs	r3, #0
 8005af2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005af4:	697b      	ldr	r3, [r7, #20]
	}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3728      	adds	r7, #40	; 0x28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b08c      	sub	sp, #48	; 0x30
 8005b02:	af04      	add	r7, sp, #16
 8005b04:	60f8      	str	r0, [r7, #12]
 8005b06:	60b9      	str	r1, [r7, #8]
 8005b08:	603b      	str	r3, [r7, #0]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b0e:	88fb      	ldrh	r3, [r7, #6]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4618      	mov	r0, r3
 8005b14:	f001 fc30 	bl	8007378 <pvPortMalloc>
 8005b18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00e      	beq.n	8005b3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b20:	205c      	movs	r0, #92	; 0x5c
 8005b22:	f001 fc29 	bl	8007378 <pvPortMalloc>
 8005b26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	631a      	str	r2, [r3, #48]	; 0x30
 8005b34:	e005      	b.n	8005b42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b36:	6978      	ldr	r0, [r7, #20]
 8005b38:	f001 fcea 	bl	8007510 <vPortFree>
 8005b3c:	e001      	b.n	8005b42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d017      	beq.n	8005b78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b50:	88fa      	ldrh	r2, [r7, #6]
 8005b52:	2300      	movs	r3, #0
 8005b54:	9303      	str	r3, [sp, #12]
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	9302      	str	r3, [sp, #8]
 8005b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5c:	9301      	str	r3, [sp, #4]
 8005b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	68b9      	ldr	r1, [r7, #8]
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 f80e 	bl	8005b88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b6c:	69f8      	ldr	r0, [r7, #28]
 8005b6e:	f000 f89b 	bl	8005ca8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b72:	2301      	movs	r3, #1
 8005b74:	61bb      	str	r3, [r7, #24]
 8005b76:	e002      	b.n	8005b7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b78:	f04f 33ff 	mov.w	r3, #4294967295
 8005b7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b7e:	69bb      	ldr	r3, [r7, #24]
	}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3720      	adds	r7, #32
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b088      	sub	sp, #32
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
 8005b94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	21a5      	movs	r1, #165	; 0xa5
 8005ba2:	f001 fe05 	bl	80077b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005baa:	6879      	ldr	r1, [r7, #4]
 8005bac:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005bb0:	440b      	add	r3, r1
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	f023 0307 	bic.w	r3, r3, #7
 8005bbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	f003 0307 	and.w	r3, r3, #7
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00a      	beq.n	8005be0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	617b      	str	r3, [r7, #20]
}
 8005bdc:	bf00      	nop
 8005bde:	e7fe      	b.n	8005bde <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d01f      	beq.n	8005c26 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005be6:	2300      	movs	r3, #0
 8005be8:	61fb      	str	r3, [r7, #28]
 8005bea:	e012      	b.n	8005c12 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	7819      	ldrb	r1, [r3, #0]
 8005bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	3334      	adds	r3, #52	; 0x34
 8005bfc:	460a      	mov	r2, r1
 8005bfe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	4413      	add	r3, r2
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d006      	beq.n	8005c1a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	61fb      	str	r3, [r7, #28]
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	2b0f      	cmp	r3, #15
 8005c16:	d9e9      	bls.n	8005bec <prvInitialiseNewTask+0x64>
 8005c18:	e000      	b.n	8005c1c <prvInitialiseNewTask+0x94>
			{
				break;
 8005c1a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c24:	e003      	b.n	8005c2e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c30:	2b37      	cmp	r3, #55	; 0x37
 8005c32:	d901      	bls.n	8005c38 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c34:	2337      	movs	r3, #55	; 0x37
 8005c36:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c3c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c42:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c46:	2200      	movs	r2, #0
 8005c48:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7ff f978 	bl	8004f44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c56:	3318      	adds	r3, #24
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7ff f973 	bl	8004f44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c76:	2200      	movs	r2, #0
 8005c78:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	68f9      	ldr	r1, [r7, #12]
 8005c86:	69b8      	ldr	r0, [r7, #24]
 8005c88:	f001 f928 	bl	8006edc <pxPortInitialiseStack>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d002      	beq.n	8005c9e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c9e:	bf00      	nop
 8005ca0:	3720      	adds	r7, #32
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
	...

08005ca8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005cb0:	f001 fa40 	bl	8007134 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005cb4:	4b2d      	ldr	r3, [pc, #180]	; (8005d6c <prvAddNewTaskToReadyList+0xc4>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	4a2c      	ldr	r2, [pc, #176]	; (8005d6c <prvAddNewTaskToReadyList+0xc4>)
 8005cbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005cbe:	4b2c      	ldr	r3, [pc, #176]	; (8005d70 <prvAddNewTaskToReadyList+0xc8>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d109      	bne.n	8005cda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005cc6:	4a2a      	ldr	r2, [pc, #168]	; (8005d70 <prvAddNewTaskToReadyList+0xc8>)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ccc:	4b27      	ldr	r3, [pc, #156]	; (8005d6c <prvAddNewTaskToReadyList+0xc4>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d110      	bne.n	8005cf6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005cd4:	f000 fc16 	bl	8006504 <prvInitialiseTaskLists>
 8005cd8:	e00d      	b.n	8005cf6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005cda:	4b26      	ldr	r3, [pc, #152]	; (8005d74 <prvAddNewTaskToReadyList+0xcc>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d109      	bne.n	8005cf6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ce2:	4b23      	ldr	r3, [pc, #140]	; (8005d70 <prvAddNewTaskToReadyList+0xc8>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d802      	bhi.n	8005cf6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005cf0:	4a1f      	ldr	r2, [pc, #124]	; (8005d70 <prvAddNewTaskToReadyList+0xc8>)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005cf6:	4b20      	ldr	r3, [pc, #128]	; (8005d78 <prvAddNewTaskToReadyList+0xd0>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	4a1e      	ldr	r2, [pc, #120]	; (8005d78 <prvAddNewTaskToReadyList+0xd0>)
 8005cfe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005d00:	4b1d      	ldr	r3, [pc, #116]	; (8005d78 <prvAddNewTaskToReadyList+0xd0>)
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0c:	4b1b      	ldr	r3, [pc, #108]	; (8005d7c <prvAddNewTaskToReadyList+0xd4>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d903      	bls.n	8005d1c <prvAddNewTaskToReadyList+0x74>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	4a18      	ldr	r2, [pc, #96]	; (8005d7c <prvAddNewTaskToReadyList+0xd4>)
 8005d1a:	6013      	str	r3, [r2, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d20:	4613      	mov	r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4a15      	ldr	r2, [pc, #84]	; (8005d80 <prvAddNewTaskToReadyList+0xd8>)
 8005d2a:	441a      	add	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	3304      	adds	r3, #4
 8005d30:	4619      	mov	r1, r3
 8005d32:	4610      	mov	r0, r2
 8005d34:	f7ff f913 	bl	8004f5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d38:	f001 fa2c 	bl	8007194 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d3c:	4b0d      	ldr	r3, [pc, #52]	; (8005d74 <prvAddNewTaskToReadyList+0xcc>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00e      	beq.n	8005d62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d44:	4b0a      	ldr	r3, [pc, #40]	; (8005d70 <prvAddNewTaskToReadyList+0xc8>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d207      	bcs.n	8005d62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d52:	4b0c      	ldr	r3, [pc, #48]	; (8005d84 <prvAddNewTaskToReadyList+0xdc>)
 8005d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d62:	bf00      	nop
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	24000c98 	.word	0x24000c98
 8005d70:	240007c4 	.word	0x240007c4
 8005d74:	24000ca4 	.word	0x24000ca4
 8005d78:	24000cb4 	.word	0x24000cb4
 8005d7c:	24000ca0 	.word	0x24000ca0
 8005d80:	240007c8 	.word	0x240007c8
 8005d84:	e000ed04 	.word	0xe000ed04

08005d88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d90:	2300      	movs	r3, #0
 8005d92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d017      	beq.n	8005dca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d9a:	4b13      	ldr	r3, [pc, #76]	; (8005de8 <vTaskDelay+0x60>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00a      	beq.n	8005db8 <vTaskDelay+0x30>
	__asm volatile
 8005da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da6:	f383 8811 	msr	BASEPRI, r3
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	60bb      	str	r3, [r7, #8]
}
 8005db4:	bf00      	nop
 8005db6:	e7fe      	b.n	8005db6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005db8:	f000 f880 	bl	8005ebc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 fcea 	bl	8006798 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005dc4:	f000 f888 	bl	8005ed8 <xTaskResumeAll>
 8005dc8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d107      	bne.n	8005de0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005dd0:	4b06      	ldr	r3, [pc, #24]	; (8005dec <vTaskDelay+0x64>)
 8005dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005de0:	bf00      	nop
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	24000cc0 	.word	0x24000cc0
 8005dec:	e000ed04 	.word	0xe000ed04

08005df0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b08a      	sub	sp, #40	; 0x28
 8005df4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005dfe:	463a      	mov	r2, r7
 8005e00:	1d39      	adds	r1, r7, #4
 8005e02:	f107 0308 	add.w	r3, r7, #8
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7ff f848 	bl	8004e9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e0c:	6839      	ldr	r1, [r7, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	9202      	str	r2, [sp, #8]
 8005e14:	9301      	str	r3, [sp, #4]
 8005e16:	2300      	movs	r3, #0
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	460a      	mov	r2, r1
 8005e1e:	4921      	ldr	r1, [pc, #132]	; (8005ea4 <vTaskStartScheduler+0xb4>)
 8005e20:	4821      	ldr	r0, [pc, #132]	; (8005ea8 <vTaskStartScheduler+0xb8>)
 8005e22:	f7ff fe0f 	bl	8005a44 <xTaskCreateStatic>
 8005e26:	4603      	mov	r3, r0
 8005e28:	4a20      	ldr	r2, [pc, #128]	; (8005eac <vTaskStartScheduler+0xbc>)
 8005e2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e2c:	4b1f      	ldr	r3, [pc, #124]	; (8005eac <vTaskStartScheduler+0xbc>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e34:	2301      	movs	r3, #1
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	e001      	b.n	8005e3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d102      	bne.n	8005e4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005e44:	f000 fcfc 	bl	8006840 <xTimerCreateTimerTask>
 8005e48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d116      	bne.n	8005e7e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	613b      	str	r3, [r7, #16]
}
 8005e62:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005e64:	4b12      	ldr	r3, [pc, #72]	; (8005eb0 <vTaskStartScheduler+0xc0>)
 8005e66:	f04f 32ff 	mov.w	r2, #4294967295
 8005e6a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005e6c:	4b11      	ldr	r3, [pc, #68]	; (8005eb4 <vTaskStartScheduler+0xc4>)
 8005e6e:	2201      	movs	r2, #1
 8005e70:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005e72:	4b11      	ldr	r3, [pc, #68]	; (8005eb8 <vTaskStartScheduler+0xc8>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e78:	f001 f8ba 	bl	8006ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e7c:	e00e      	b.n	8005e9c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e84:	d10a      	bne.n	8005e9c <vTaskStartScheduler+0xac>
	__asm volatile
 8005e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	60fb      	str	r3, [r7, #12]
}
 8005e98:	bf00      	nop
 8005e9a:	e7fe      	b.n	8005e9a <vTaskStartScheduler+0xaa>
}
 8005e9c:	bf00      	nop
 8005e9e:	3718      	adds	r7, #24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	080077e4 	.word	0x080077e4
 8005ea8:	080064d5 	.word	0x080064d5
 8005eac:	24000cbc 	.word	0x24000cbc
 8005eb0:	24000cb8 	.word	0x24000cb8
 8005eb4:	24000ca4 	.word	0x24000ca4
 8005eb8:	24000c9c 	.word	0x24000c9c

08005ebc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ec0:	4b04      	ldr	r3, [pc, #16]	; (8005ed4 <vTaskSuspendAll+0x18>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	4a03      	ldr	r2, [pc, #12]	; (8005ed4 <vTaskSuspendAll+0x18>)
 8005ec8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005eca:	bf00      	nop
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	24000cc0 	.word	0x24000cc0

08005ed8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ee6:	4b42      	ldr	r3, [pc, #264]	; (8005ff0 <xTaskResumeAll+0x118>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10a      	bne.n	8005f04 <xTaskResumeAll+0x2c>
	__asm volatile
 8005eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	603b      	str	r3, [r7, #0]
}
 8005f00:	bf00      	nop
 8005f02:	e7fe      	b.n	8005f02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f04:	f001 f916 	bl	8007134 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f08:	4b39      	ldr	r3, [pc, #228]	; (8005ff0 <xTaskResumeAll+0x118>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	4a38      	ldr	r2, [pc, #224]	; (8005ff0 <xTaskResumeAll+0x118>)
 8005f10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f12:	4b37      	ldr	r3, [pc, #220]	; (8005ff0 <xTaskResumeAll+0x118>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d162      	bne.n	8005fe0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f1a:	4b36      	ldr	r3, [pc, #216]	; (8005ff4 <xTaskResumeAll+0x11c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d05e      	beq.n	8005fe0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f22:	e02f      	b.n	8005f84 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f24:	4b34      	ldr	r3, [pc, #208]	; (8005ff8 <xTaskResumeAll+0x120>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3318      	adds	r3, #24
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff f871 	bl	8005018 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7ff f86c 	bl	8005018 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f44:	4b2d      	ldr	r3, [pc, #180]	; (8005ffc <xTaskResumeAll+0x124>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d903      	bls.n	8005f54 <xTaskResumeAll+0x7c>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	4a2a      	ldr	r2, [pc, #168]	; (8005ffc <xTaskResumeAll+0x124>)
 8005f52:	6013      	str	r3, [r2, #0]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f58:	4613      	mov	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4a27      	ldr	r2, [pc, #156]	; (8006000 <xTaskResumeAll+0x128>)
 8005f62:	441a      	add	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	3304      	adds	r3, #4
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	f7fe fff7 	bl	8004f5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f74:	4b23      	ldr	r3, [pc, #140]	; (8006004 <xTaskResumeAll+0x12c>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d302      	bcc.n	8005f84 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005f7e:	4b22      	ldr	r3, [pc, #136]	; (8006008 <xTaskResumeAll+0x130>)
 8005f80:	2201      	movs	r2, #1
 8005f82:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f84:	4b1c      	ldr	r3, [pc, #112]	; (8005ff8 <xTaskResumeAll+0x120>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1cb      	bne.n	8005f24 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f92:	f000 fb55 	bl	8006640 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f96:	4b1d      	ldr	r3, [pc, #116]	; (800600c <xTaskResumeAll+0x134>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d010      	beq.n	8005fc4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005fa2:	f000 f847 	bl	8006034 <xTaskIncrementTick>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d002      	beq.n	8005fb2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005fac:	4b16      	ldr	r3, [pc, #88]	; (8006008 <xTaskResumeAll+0x130>)
 8005fae:	2201      	movs	r2, #1
 8005fb0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1f1      	bne.n	8005fa2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005fbe:	4b13      	ldr	r3, [pc, #76]	; (800600c <xTaskResumeAll+0x134>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005fc4:	4b10      	ldr	r3, [pc, #64]	; (8006008 <xTaskResumeAll+0x130>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d009      	beq.n	8005fe0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005fd0:	4b0f      	ldr	r3, [pc, #60]	; (8006010 <xTaskResumeAll+0x138>)
 8005fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005fe0:	f001 f8d8 	bl	8007194 <vPortExitCritical>

	return xAlreadyYielded;
 8005fe4:	68bb      	ldr	r3, [r7, #8]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	24000cc0 	.word	0x24000cc0
 8005ff4:	24000c98 	.word	0x24000c98
 8005ff8:	24000c58 	.word	0x24000c58
 8005ffc:	24000ca0 	.word	0x24000ca0
 8006000:	240007c8 	.word	0x240007c8
 8006004:	240007c4 	.word	0x240007c4
 8006008:	24000cac 	.word	0x24000cac
 800600c:	24000ca8 	.word	0x24000ca8
 8006010:	e000ed04 	.word	0xe000ed04

08006014 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800601a:	4b05      	ldr	r3, [pc, #20]	; (8006030 <xTaskGetTickCount+0x1c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006020:	687b      	ldr	r3, [r7, #4]
}
 8006022:	4618      	mov	r0, r3
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	24000c9c 	.word	0x24000c9c

08006034 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800603a:	2300      	movs	r3, #0
 800603c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800603e:	4b4f      	ldr	r3, [pc, #316]	; (800617c <xTaskIncrementTick+0x148>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	f040 808f 	bne.w	8006166 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006048:	4b4d      	ldr	r3, [pc, #308]	; (8006180 <xTaskIncrementTick+0x14c>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3301      	adds	r3, #1
 800604e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006050:	4a4b      	ldr	r2, [pc, #300]	; (8006180 <xTaskIncrementTick+0x14c>)
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d120      	bne.n	800609e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800605c:	4b49      	ldr	r3, [pc, #292]	; (8006184 <xTaskIncrementTick+0x150>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00a      	beq.n	800607c <xTaskIncrementTick+0x48>
	__asm volatile
 8006066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	603b      	str	r3, [r7, #0]
}
 8006078:	bf00      	nop
 800607a:	e7fe      	b.n	800607a <xTaskIncrementTick+0x46>
 800607c:	4b41      	ldr	r3, [pc, #260]	; (8006184 <xTaskIncrementTick+0x150>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	4b41      	ldr	r3, [pc, #260]	; (8006188 <xTaskIncrementTick+0x154>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a3f      	ldr	r2, [pc, #252]	; (8006184 <xTaskIncrementTick+0x150>)
 8006088:	6013      	str	r3, [r2, #0]
 800608a:	4a3f      	ldr	r2, [pc, #252]	; (8006188 <xTaskIncrementTick+0x154>)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6013      	str	r3, [r2, #0]
 8006090:	4b3e      	ldr	r3, [pc, #248]	; (800618c <xTaskIncrementTick+0x158>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	3301      	adds	r3, #1
 8006096:	4a3d      	ldr	r2, [pc, #244]	; (800618c <xTaskIncrementTick+0x158>)
 8006098:	6013      	str	r3, [r2, #0]
 800609a:	f000 fad1 	bl	8006640 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800609e:	4b3c      	ldr	r3, [pc, #240]	; (8006190 <xTaskIncrementTick+0x15c>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d349      	bcc.n	800613c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060a8:	4b36      	ldr	r3, [pc, #216]	; (8006184 <xTaskIncrementTick+0x150>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d104      	bne.n	80060bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060b2:	4b37      	ldr	r3, [pc, #220]	; (8006190 <xTaskIncrementTick+0x15c>)
 80060b4:	f04f 32ff 	mov.w	r2, #4294967295
 80060b8:	601a      	str	r2, [r3, #0]
					break;
 80060ba:	e03f      	b.n	800613c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060bc:	4b31      	ldr	r3, [pc, #196]	; (8006184 <xTaskIncrementTick+0x150>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d203      	bcs.n	80060dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80060d4:	4a2e      	ldr	r2, [pc, #184]	; (8006190 <xTaskIncrementTick+0x15c>)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80060da:	e02f      	b.n	800613c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	3304      	adds	r3, #4
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7fe ff99 	bl	8005018 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d004      	beq.n	80060f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	3318      	adds	r3, #24
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fe ff90 	bl	8005018 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060fc:	4b25      	ldr	r3, [pc, #148]	; (8006194 <xTaskIncrementTick+0x160>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	429a      	cmp	r2, r3
 8006102:	d903      	bls.n	800610c <xTaskIncrementTick+0xd8>
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006108:	4a22      	ldr	r2, [pc, #136]	; (8006194 <xTaskIncrementTick+0x160>)
 800610a:	6013      	str	r3, [r2, #0]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006110:	4613      	mov	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4a1f      	ldr	r2, [pc, #124]	; (8006198 <xTaskIncrementTick+0x164>)
 800611a:	441a      	add	r2, r3
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	3304      	adds	r3, #4
 8006120:	4619      	mov	r1, r3
 8006122:	4610      	mov	r0, r2
 8006124:	f7fe ff1b 	bl	8004f5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800612c:	4b1b      	ldr	r3, [pc, #108]	; (800619c <xTaskIncrementTick+0x168>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006132:	429a      	cmp	r2, r3
 8006134:	d3b8      	bcc.n	80060a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006136:	2301      	movs	r3, #1
 8006138:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800613a:	e7b5      	b.n	80060a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800613c:	4b17      	ldr	r3, [pc, #92]	; (800619c <xTaskIncrementTick+0x168>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006142:	4915      	ldr	r1, [pc, #84]	; (8006198 <xTaskIncrementTick+0x164>)
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	440b      	add	r3, r1
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d901      	bls.n	8006158 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006154:	2301      	movs	r3, #1
 8006156:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006158:	4b11      	ldr	r3, [pc, #68]	; (80061a0 <xTaskIncrementTick+0x16c>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d007      	beq.n	8006170 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006160:	2301      	movs	r3, #1
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	e004      	b.n	8006170 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006166:	4b0f      	ldr	r3, [pc, #60]	; (80061a4 <xTaskIncrementTick+0x170>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3301      	adds	r3, #1
 800616c:	4a0d      	ldr	r2, [pc, #52]	; (80061a4 <xTaskIncrementTick+0x170>)
 800616e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006170:	697b      	ldr	r3, [r7, #20]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3718      	adds	r7, #24
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	24000cc0 	.word	0x24000cc0
 8006180:	24000c9c 	.word	0x24000c9c
 8006184:	24000c50 	.word	0x24000c50
 8006188:	24000c54 	.word	0x24000c54
 800618c:	24000cb0 	.word	0x24000cb0
 8006190:	24000cb8 	.word	0x24000cb8
 8006194:	24000ca0 	.word	0x24000ca0
 8006198:	240007c8 	.word	0x240007c8
 800619c:	240007c4 	.word	0x240007c4
 80061a0:	24000cac 	.word	0x24000cac
 80061a4:	24000ca8 	.word	0x24000ca8

080061a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061ae:	4b28      	ldr	r3, [pc, #160]	; (8006250 <vTaskSwitchContext+0xa8>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061b6:	4b27      	ldr	r3, [pc, #156]	; (8006254 <vTaskSwitchContext+0xac>)
 80061b8:	2201      	movs	r2, #1
 80061ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80061bc:	e041      	b.n	8006242 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80061be:	4b25      	ldr	r3, [pc, #148]	; (8006254 <vTaskSwitchContext+0xac>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061c4:	4b24      	ldr	r3, [pc, #144]	; (8006258 <vTaskSwitchContext+0xb0>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	60fb      	str	r3, [r7, #12]
 80061ca:	e010      	b.n	80061ee <vTaskSwitchContext+0x46>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10a      	bne.n	80061e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80061d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d6:	f383 8811 	msr	BASEPRI, r3
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	607b      	str	r3, [r7, #4]
}
 80061e4:	bf00      	nop
 80061e6:	e7fe      	b.n	80061e6 <vTaskSwitchContext+0x3e>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	3b01      	subs	r3, #1
 80061ec:	60fb      	str	r3, [r7, #12]
 80061ee:	491b      	ldr	r1, [pc, #108]	; (800625c <vTaskSwitchContext+0xb4>)
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	4613      	mov	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	440b      	add	r3, r1
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d0e4      	beq.n	80061cc <vTaskSwitchContext+0x24>
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	4613      	mov	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4413      	add	r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4a13      	ldr	r2, [pc, #76]	; (800625c <vTaskSwitchContext+0xb4>)
 800620e:	4413      	add	r3, r2
 8006210:	60bb      	str	r3, [r7, #8]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	605a      	str	r2, [r3, #4]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	3308      	adds	r3, #8
 8006224:	429a      	cmp	r2, r3
 8006226:	d104      	bne.n	8006232 <vTaskSwitchContext+0x8a>
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	605a      	str	r2, [r3, #4]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	4a09      	ldr	r2, [pc, #36]	; (8006260 <vTaskSwitchContext+0xb8>)
 800623a:	6013      	str	r3, [r2, #0]
 800623c:	4a06      	ldr	r2, [pc, #24]	; (8006258 <vTaskSwitchContext+0xb0>)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6013      	str	r3, [r2, #0]
}
 8006242:	bf00      	nop
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	24000cc0 	.word	0x24000cc0
 8006254:	24000cac 	.word	0x24000cac
 8006258:	24000ca0 	.word	0x24000ca0
 800625c:	240007c8 	.word	0x240007c8
 8006260:	240007c4 	.word	0x240007c4

08006264 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d10a      	bne.n	800628a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006278:	f383 8811 	msr	BASEPRI, r3
 800627c:	f3bf 8f6f 	isb	sy
 8006280:	f3bf 8f4f 	dsb	sy
 8006284:	60fb      	str	r3, [r7, #12]
}
 8006286:	bf00      	nop
 8006288:	e7fe      	b.n	8006288 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800628a:	4b07      	ldr	r3, [pc, #28]	; (80062a8 <vTaskPlaceOnEventList+0x44>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	3318      	adds	r3, #24
 8006290:	4619      	mov	r1, r3
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7fe fe87 	bl	8004fa6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006298:	2101      	movs	r1, #1
 800629a:	6838      	ldr	r0, [r7, #0]
 800629c:	f000 fa7c 	bl	8006798 <prvAddCurrentTaskToDelayedList>
}
 80062a0:	bf00      	nop
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	240007c4 	.word	0x240007c4

080062ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10a      	bne.n	80062d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80062be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	617b      	str	r3, [r7, #20]
}
 80062d0:	bf00      	nop
 80062d2:	e7fe      	b.n	80062d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062d4:	4b0a      	ldr	r3, [pc, #40]	; (8006300 <vTaskPlaceOnEventListRestricted+0x54>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	3318      	adds	r3, #24
 80062da:	4619      	mov	r1, r3
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f7fe fe3e 	bl	8004f5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80062e8:	f04f 33ff 	mov.w	r3, #4294967295
 80062ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80062ee:	6879      	ldr	r1, [r7, #4]
 80062f0:	68b8      	ldr	r0, [r7, #8]
 80062f2:	f000 fa51 	bl	8006798 <prvAddCurrentTaskToDelayedList>
	}
 80062f6:	bf00      	nop
 80062f8:	3718      	adds	r7, #24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	240007c4 	.word	0x240007c4

08006304 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10a      	bne.n	8006330 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800631a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631e:	f383 8811 	msr	BASEPRI, r3
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	f3bf 8f4f 	dsb	sy
 800632a:	60fb      	str	r3, [r7, #12]
}
 800632c:	bf00      	nop
 800632e:	e7fe      	b.n	800632e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	3318      	adds	r3, #24
 8006334:	4618      	mov	r0, r3
 8006336:	f7fe fe6f 	bl	8005018 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800633a:	4b1e      	ldr	r3, [pc, #120]	; (80063b4 <xTaskRemoveFromEventList+0xb0>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d11d      	bne.n	800637e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	3304      	adds	r3, #4
 8006346:	4618      	mov	r0, r3
 8006348:	f7fe fe66 	bl	8005018 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006350:	4b19      	ldr	r3, [pc, #100]	; (80063b8 <xTaskRemoveFromEventList+0xb4>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	d903      	bls.n	8006360 <xTaskRemoveFromEventList+0x5c>
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635c:	4a16      	ldr	r2, [pc, #88]	; (80063b8 <xTaskRemoveFromEventList+0xb4>)
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006364:	4613      	mov	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4a13      	ldr	r2, [pc, #76]	; (80063bc <xTaskRemoveFromEventList+0xb8>)
 800636e:	441a      	add	r2, r3
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	3304      	adds	r3, #4
 8006374:	4619      	mov	r1, r3
 8006376:	4610      	mov	r0, r2
 8006378:	f7fe fdf1 	bl	8004f5e <vListInsertEnd>
 800637c:	e005      	b.n	800638a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	3318      	adds	r3, #24
 8006382:	4619      	mov	r1, r3
 8006384:	480e      	ldr	r0, [pc, #56]	; (80063c0 <xTaskRemoveFromEventList+0xbc>)
 8006386:	f7fe fdea 	bl	8004f5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638e:	4b0d      	ldr	r3, [pc, #52]	; (80063c4 <xTaskRemoveFromEventList+0xc0>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	429a      	cmp	r2, r3
 8006396:	d905      	bls.n	80063a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006398:	2301      	movs	r3, #1
 800639a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800639c:	4b0a      	ldr	r3, [pc, #40]	; (80063c8 <xTaskRemoveFromEventList+0xc4>)
 800639e:	2201      	movs	r2, #1
 80063a0:	601a      	str	r2, [r3, #0]
 80063a2:	e001      	b.n	80063a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80063a4:	2300      	movs	r3, #0
 80063a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80063a8:	697b      	ldr	r3, [r7, #20]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3718      	adds	r7, #24
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	24000cc0 	.word	0x24000cc0
 80063b8:	24000ca0 	.word	0x24000ca0
 80063bc:	240007c8 	.word	0x240007c8
 80063c0:	24000c58 	.word	0x24000c58
 80063c4:	240007c4 	.word	0x240007c4
 80063c8:	24000cac 	.word	0x24000cac

080063cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80063d4:	4b06      	ldr	r3, [pc, #24]	; (80063f0 <vTaskInternalSetTimeOutState+0x24>)
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80063dc:	4b05      	ldr	r3, [pc, #20]	; (80063f4 <vTaskInternalSetTimeOutState+0x28>)
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	605a      	str	r2, [r3, #4]
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr
 80063f0:	24000cb0 	.word	0x24000cb0
 80063f4:	24000c9c 	.word	0x24000c9c

080063f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b088      	sub	sp, #32
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10a      	bne.n	800641e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	613b      	str	r3, [r7, #16]
}
 800641a:	bf00      	nop
 800641c:	e7fe      	b.n	800641c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10a      	bne.n	800643a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	60fb      	str	r3, [r7, #12]
}
 8006436:	bf00      	nop
 8006438:	e7fe      	b.n	8006438 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800643a:	f000 fe7b 	bl	8007134 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800643e:	4b1d      	ldr	r3, [pc, #116]	; (80064b4 <xTaskCheckForTimeOut+0xbc>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006456:	d102      	bne.n	800645e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006458:	2300      	movs	r3, #0
 800645a:	61fb      	str	r3, [r7, #28]
 800645c:	e023      	b.n	80064a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	4b15      	ldr	r3, [pc, #84]	; (80064b8 <xTaskCheckForTimeOut+0xc0>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	429a      	cmp	r2, r3
 8006468:	d007      	beq.n	800647a <xTaskCheckForTimeOut+0x82>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	69ba      	ldr	r2, [r7, #24]
 8006470:	429a      	cmp	r2, r3
 8006472:	d302      	bcc.n	800647a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006474:	2301      	movs	r3, #1
 8006476:	61fb      	str	r3, [r7, #28]
 8006478:	e015      	b.n	80064a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	429a      	cmp	r2, r3
 8006482:	d20b      	bcs.n	800649c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	1ad2      	subs	r2, r2, r3
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7ff ff9b 	bl	80063cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006496:	2300      	movs	r3, #0
 8006498:	61fb      	str	r3, [r7, #28]
 800649a:	e004      	b.n	80064a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	2200      	movs	r2, #0
 80064a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80064a2:	2301      	movs	r3, #1
 80064a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80064a6:	f000 fe75 	bl	8007194 <vPortExitCritical>

	return xReturn;
 80064aa:	69fb      	ldr	r3, [r7, #28]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3720      	adds	r7, #32
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	24000c9c 	.word	0x24000c9c
 80064b8:	24000cb0 	.word	0x24000cb0

080064bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80064bc:	b480      	push	{r7}
 80064be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80064c0:	4b03      	ldr	r3, [pc, #12]	; (80064d0 <vTaskMissedYield+0x14>)
 80064c2:	2201      	movs	r2, #1
 80064c4:	601a      	str	r2, [r3, #0]
}
 80064c6:	bf00      	nop
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	24000cac 	.word	0x24000cac

080064d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80064dc:	f000 f852 	bl	8006584 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80064e0:	4b06      	ldr	r3, [pc, #24]	; (80064fc <prvIdleTask+0x28>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d9f9      	bls.n	80064dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80064e8:	4b05      	ldr	r3, [pc, #20]	; (8006500 <prvIdleTask+0x2c>)
 80064ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80064f8:	e7f0      	b.n	80064dc <prvIdleTask+0x8>
 80064fa:	bf00      	nop
 80064fc:	240007c8 	.word	0x240007c8
 8006500:	e000ed04 	.word	0xe000ed04

08006504 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800650a:	2300      	movs	r3, #0
 800650c:	607b      	str	r3, [r7, #4]
 800650e:	e00c      	b.n	800652a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	4613      	mov	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4a12      	ldr	r2, [pc, #72]	; (8006564 <prvInitialiseTaskLists+0x60>)
 800651c:	4413      	add	r3, r2
 800651e:	4618      	mov	r0, r3
 8006520:	f7fe fcf0 	bl	8004f04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	3301      	adds	r3, #1
 8006528:	607b      	str	r3, [r7, #4]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b37      	cmp	r3, #55	; 0x37
 800652e:	d9ef      	bls.n	8006510 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006530:	480d      	ldr	r0, [pc, #52]	; (8006568 <prvInitialiseTaskLists+0x64>)
 8006532:	f7fe fce7 	bl	8004f04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006536:	480d      	ldr	r0, [pc, #52]	; (800656c <prvInitialiseTaskLists+0x68>)
 8006538:	f7fe fce4 	bl	8004f04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800653c:	480c      	ldr	r0, [pc, #48]	; (8006570 <prvInitialiseTaskLists+0x6c>)
 800653e:	f7fe fce1 	bl	8004f04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006542:	480c      	ldr	r0, [pc, #48]	; (8006574 <prvInitialiseTaskLists+0x70>)
 8006544:	f7fe fcde 	bl	8004f04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006548:	480b      	ldr	r0, [pc, #44]	; (8006578 <prvInitialiseTaskLists+0x74>)
 800654a:	f7fe fcdb 	bl	8004f04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800654e:	4b0b      	ldr	r3, [pc, #44]	; (800657c <prvInitialiseTaskLists+0x78>)
 8006550:	4a05      	ldr	r2, [pc, #20]	; (8006568 <prvInitialiseTaskLists+0x64>)
 8006552:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006554:	4b0a      	ldr	r3, [pc, #40]	; (8006580 <prvInitialiseTaskLists+0x7c>)
 8006556:	4a05      	ldr	r2, [pc, #20]	; (800656c <prvInitialiseTaskLists+0x68>)
 8006558:	601a      	str	r2, [r3, #0]
}
 800655a:	bf00      	nop
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	240007c8 	.word	0x240007c8
 8006568:	24000c28 	.word	0x24000c28
 800656c:	24000c3c 	.word	0x24000c3c
 8006570:	24000c58 	.word	0x24000c58
 8006574:	24000c6c 	.word	0x24000c6c
 8006578:	24000c84 	.word	0x24000c84
 800657c:	24000c50 	.word	0x24000c50
 8006580:	24000c54 	.word	0x24000c54

08006584 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800658a:	e019      	b.n	80065c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800658c:	f000 fdd2 	bl	8007134 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006590:	4b10      	ldr	r3, [pc, #64]	; (80065d4 <prvCheckTasksWaitingTermination+0x50>)
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	3304      	adds	r3, #4
 800659c:	4618      	mov	r0, r3
 800659e:	f7fe fd3b 	bl	8005018 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065a2:	4b0d      	ldr	r3, [pc, #52]	; (80065d8 <prvCheckTasksWaitingTermination+0x54>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3b01      	subs	r3, #1
 80065a8:	4a0b      	ldr	r2, [pc, #44]	; (80065d8 <prvCheckTasksWaitingTermination+0x54>)
 80065aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80065ac:	4b0b      	ldr	r3, [pc, #44]	; (80065dc <prvCheckTasksWaitingTermination+0x58>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	3b01      	subs	r3, #1
 80065b2:	4a0a      	ldr	r2, [pc, #40]	; (80065dc <prvCheckTasksWaitingTermination+0x58>)
 80065b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80065b6:	f000 fded 	bl	8007194 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f810 	bl	80065e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065c0:	4b06      	ldr	r3, [pc, #24]	; (80065dc <prvCheckTasksWaitingTermination+0x58>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1e1      	bne.n	800658c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80065c8:	bf00      	nop
 80065ca:	bf00      	nop
 80065cc:	3708      	adds	r7, #8
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	24000c6c 	.word	0x24000c6c
 80065d8:	24000c98 	.word	0x24000c98
 80065dc:	24000c80 	.word	0x24000c80

080065e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d108      	bne.n	8006604 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 ff8a 	bl	8007510 <vPortFree>
				vPortFree( pxTCB );
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 ff87 	bl	8007510 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006602:	e018      	b.n	8006636 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800660a:	2b01      	cmp	r3, #1
 800660c:	d103      	bne.n	8006616 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 ff7e 	bl	8007510 <vPortFree>
	}
 8006614:	e00f      	b.n	8006636 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800661c:	2b02      	cmp	r3, #2
 800661e:	d00a      	beq.n	8006636 <prvDeleteTCB+0x56>
	__asm volatile
 8006620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006624:	f383 8811 	msr	BASEPRI, r3
 8006628:	f3bf 8f6f 	isb	sy
 800662c:	f3bf 8f4f 	dsb	sy
 8006630:	60fb      	str	r3, [r7, #12]
}
 8006632:	bf00      	nop
 8006634:	e7fe      	b.n	8006634 <prvDeleteTCB+0x54>
	}
 8006636:	bf00      	nop
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
	...

08006640 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006646:	4b0c      	ldr	r3, [pc, #48]	; (8006678 <prvResetNextTaskUnblockTime+0x38>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d104      	bne.n	800665a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006650:	4b0a      	ldr	r3, [pc, #40]	; (800667c <prvResetNextTaskUnblockTime+0x3c>)
 8006652:	f04f 32ff 	mov.w	r2, #4294967295
 8006656:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006658:	e008      	b.n	800666c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800665a:	4b07      	ldr	r3, [pc, #28]	; (8006678 <prvResetNextTaskUnblockTime+0x38>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	4a04      	ldr	r2, [pc, #16]	; (800667c <prvResetNextTaskUnblockTime+0x3c>)
 800666a:	6013      	str	r3, [r2, #0]
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	24000c50 	.word	0x24000c50
 800667c:	24000cb8 	.word	0x24000cb8

08006680 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006686:	4b0b      	ldr	r3, [pc, #44]	; (80066b4 <xTaskGetSchedulerState+0x34>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d102      	bne.n	8006694 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800668e:	2301      	movs	r3, #1
 8006690:	607b      	str	r3, [r7, #4]
 8006692:	e008      	b.n	80066a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006694:	4b08      	ldr	r3, [pc, #32]	; (80066b8 <xTaskGetSchedulerState+0x38>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d102      	bne.n	80066a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800669c:	2302      	movs	r3, #2
 800669e:	607b      	str	r3, [r7, #4]
 80066a0:	e001      	b.n	80066a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80066a2:	2300      	movs	r3, #0
 80066a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80066a6:	687b      	ldr	r3, [r7, #4]
	}
 80066a8:	4618      	mov	r0, r3
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	24000ca4 	.word	0x24000ca4
 80066b8:	24000cc0 	.word	0x24000cc0

080066bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80066c8:	2300      	movs	r3, #0
 80066ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d056      	beq.n	8006780 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80066d2:	4b2e      	ldr	r3, [pc, #184]	; (800678c <xTaskPriorityDisinherit+0xd0>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d00a      	beq.n	80066f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80066dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	60fb      	str	r3, [r7, #12]
}
 80066ee:	bf00      	nop
 80066f0:	e7fe      	b.n	80066f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10a      	bne.n	8006710 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80066fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fe:	f383 8811 	msr	BASEPRI, r3
 8006702:	f3bf 8f6f 	isb	sy
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	60bb      	str	r3, [r7, #8]
}
 800670c:	bf00      	nop
 800670e:	e7fe      	b.n	800670e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006714:	1e5a      	subs	r2, r3, #1
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006722:	429a      	cmp	r2, r3
 8006724:	d02c      	beq.n	8006780 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800672a:	2b00      	cmp	r3, #0
 800672c:	d128      	bne.n	8006780 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	3304      	adds	r3, #4
 8006732:	4618      	mov	r0, r3
 8006734:	f7fe fc70 	bl	8005018 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006744:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006750:	4b0f      	ldr	r3, [pc, #60]	; (8006790 <xTaskPriorityDisinherit+0xd4>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	429a      	cmp	r2, r3
 8006756:	d903      	bls.n	8006760 <xTaskPriorityDisinherit+0xa4>
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675c:	4a0c      	ldr	r2, [pc, #48]	; (8006790 <xTaskPriorityDisinherit+0xd4>)
 800675e:	6013      	str	r3, [r2, #0]
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006764:	4613      	mov	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4a09      	ldr	r2, [pc, #36]	; (8006794 <xTaskPriorityDisinherit+0xd8>)
 800676e:	441a      	add	r2, r3
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	3304      	adds	r3, #4
 8006774:	4619      	mov	r1, r3
 8006776:	4610      	mov	r0, r2
 8006778:	f7fe fbf1 	bl	8004f5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800677c:	2301      	movs	r3, #1
 800677e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006780:	697b      	ldr	r3, [r7, #20]
	}
 8006782:	4618      	mov	r0, r3
 8006784:	3718      	adds	r7, #24
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	240007c4 	.word	0x240007c4
 8006790:	24000ca0 	.word	0x24000ca0
 8006794:	240007c8 	.word	0x240007c8

08006798 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80067a2:	4b21      	ldr	r3, [pc, #132]	; (8006828 <prvAddCurrentTaskToDelayedList+0x90>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067a8:	4b20      	ldr	r3, [pc, #128]	; (800682c <prvAddCurrentTaskToDelayedList+0x94>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	3304      	adds	r3, #4
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fe fc32 	bl	8005018 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ba:	d10a      	bne.n	80067d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d007      	beq.n	80067d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067c2:	4b1a      	ldr	r3, [pc, #104]	; (800682c <prvAddCurrentTaskToDelayedList+0x94>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3304      	adds	r3, #4
 80067c8:	4619      	mov	r1, r3
 80067ca:	4819      	ldr	r0, [pc, #100]	; (8006830 <prvAddCurrentTaskToDelayedList+0x98>)
 80067cc:	f7fe fbc7 	bl	8004f5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80067d0:	e026      	b.n	8006820 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4413      	add	r3, r2
 80067d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80067da:	4b14      	ldr	r3, [pc, #80]	; (800682c <prvAddCurrentTaskToDelayedList+0x94>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d209      	bcs.n	80067fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067ea:	4b12      	ldr	r3, [pc, #72]	; (8006834 <prvAddCurrentTaskToDelayedList+0x9c>)
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	4b0f      	ldr	r3, [pc, #60]	; (800682c <prvAddCurrentTaskToDelayedList+0x94>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3304      	adds	r3, #4
 80067f4:	4619      	mov	r1, r3
 80067f6:	4610      	mov	r0, r2
 80067f8:	f7fe fbd5 	bl	8004fa6 <vListInsert>
}
 80067fc:	e010      	b.n	8006820 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067fe:	4b0e      	ldr	r3, [pc, #56]	; (8006838 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	4b0a      	ldr	r3, [pc, #40]	; (800682c <prvAddCurrentTaskToDelayedList+0x94>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3304      	adds	r3, #4
 8006808:	4619      	mov	r1, r3
 800680a:	4610      	mov	r0, r2
 800680c:	f7fe fbcb 	bl	8004fa6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006810:	4b0a      	ldr	r3, [pc, #40]	; (800683c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	429a      	cmp	r2, r3
 8006818:	d202      	bcs.n	8006820 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800681a:	4a08      	ldr	r2, [pc, #32]	; (800683c <prvAddCurrentTaskToDelayedList+0xa4>)
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	6013      	str	r3, [r2, #0]
}
 8006820:	bf00      	nop
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	24000c9c 	.word	0x24000c9c
 800682c:	240007c4 	.word	0x240007c4
 8006830:	24000c84 	.word	0x24000c84
 8006834:	24000c54 	.word	0x24000c54
 8006838:	24000c50 	.word	0x24000c50
 800683c:	24000cb8 	.word	0x24000cb8

08006840 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b08a      	sub	sp, #40	; 0x28
 8006844:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006846:	2300      	movs	r3, #0
 8006848:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800684a:	f000 fb07 	bl	8006e5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800684e:	4b1c      	ldr	r3, [pc, #112]	; (80068c0 <xTimerCreateTimerTask+0x80>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d021      	beq.n	800689a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006856:	2300      	movs	r3, #0
 8006858:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800685a:	2300      	movs	r3, #0
 800685c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800685e:	1d3a      	adds	r2, r7, #4
 8006860:	f107 0108 	add.w	r1, r7, #8
 8006864:	f107 030c 	add.w	r3, r7, #12
 8006868:	4618      	mov	r0, r3
 800686a:	f7fe fb31 	bl	8004ed0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800686e:	6879      	ldr	r1, [r7, #4]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	9202      	str	r2, [sp, #8]
 8006876:	9301      	str	r3, [sp, #4]
 8006878:	2302      	movs	r3, #2
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	2300      	movs	r3, #0
 800687e:	460a      	mov	r2, r1
 8006880:	4910      	ldr	r1, [pc, #64]	; (80068c4 <xTimerCreateTimerTask+0x84>)
 8006882:	4811      	ldr	r0, [pc, #68]	; (80068c8 <xTimerCreateTimerTask+0x88>)
 8006884:	f7ff f8de 	bl	8005a44 <xTaskCreateStatic>
 8006888:	4603      	mov	r3, r0
 800688a:	4a10      	ldr	r2, [pc, #64]	; (80068cc <xTimerCreateTimerTask+0x8c>)
 800688c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800688e:	4b0f      	ldr	r3, [pc, #60]	; (80068cc <xTimerCreateTimerTask+0x8c>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d001      	beq.n	800689a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006896:	2301      	movs	r3, #1
 8006898:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10a      	bne.n	80068b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80068a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	613b      	str	r3, [r7, #16]
}
 80068b2:	bf00      	nop
 80068b4:	e7fe      	b.n	80068b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80068b6:	697b      	ldr	r3, [r7, #20]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3718      	adds	r7, #24
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	24000cf4 	.word	0x24000cf4
 80068c4:	080077ec 	.word	0x080077ec
 80068c8:	08006a05 	.word	0x08006a05
 80068cc:	24000cf8 	.word	0x24000cf8

080068d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b08a      	sub	sp, #40	; 0x28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80068de:	2300      	movs	r3, #0
 80068e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10a      	bne.n	80068fe <xTimerGenericCommand+0x2e>
	__asm volatile
 80068e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ec:	f383 8811 	msr	BASEPRI, r3
 80068f0:	f3bf 8f6f 	isb	sy
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	623b      	str	r3, [r7, #32]
}
 80068fa:	bf00      	nop
 80068fc:	e7fe      	b.n	80068fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80068fe:	4b1a      	ldr	r3, [pc, #104]	; (8006968 <xTimerGenericCommand+0x98>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d02a      	beq.n	800695c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	2b05      	cmp	r3, #5
 8006916:	dc18      	bgt.n	800694a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006918:	f7ff feb2 	bl	8006680 <xTaskGetSchedulerState>
 800691c:	4603      	mov	r3, r0
 800691e:	2b02      	cmp	r3, #2
 8006920:	d109      	bne.n	8006936 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006922:	4b11      	ldr	r3, [pc, #68]	; (8006968 <xTimerGenericCommand+0x98>)
 8006924:	6818      	ldr	r0, [r3, #0]
 8006926:	f107 0110 	add.w	r1, r7, #16
 800692a:	2300      	movs	r3, #0
 800692c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800692e:	f7fe fca1 	bl	8005274 <xQueueGenericSend>
 8006932:	6278      	str	r0, [r7, #36]	; 0x24
 8006934:	e012      	b.n	800695c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006936:	4b0c      	ldr	r3, [pc, #48]	; (8006968 <xTimerGenericCommand+0x98>)
 8006938:	6818      	ldr	r0, [r3, #0]
 800693a:	f107 0110 	add.w	r1, r7, #16
 800693e:	2300      	movs	r3, #0
 8006940:	2200      	movs	r2, #0
 8006942:	f7fe fc97 	bl	8005274 <xQueueGenericSend>
 8006946:	6278      	str	r0, [r7, #36]	; 0x24
 8006948:	e008      	b.n	800695c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800694a:	4b07      	ldr	r3, [pc, #28]	; (8006968 <xTimerGenericCommand+0x98>)
 800694c:	6818      	ldr	r0, [r3, #0]
 800694e:	f107 0110 	add.w	r1, r7, #16
 8006952:	2300      	movs	r3, #0
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	f7fe fd8b 	bl	8005470 <xQueueGenericSendFromISR>
 800695a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800695e:	4618      	mov	r0, r3
 8006960:	3728      	adds	r7, #40	; 0x28
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	24000cf4 	.word	0x24000cf4

0800696c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b088      	sub	sp, #32
 8006970:	af02      	add	r7, sp, #8
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006976:	4b22      	ldr	r3, [pc, #136]	; (8006a00 <prvProcessExpiredTimer+0x94>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	3304      	adds	r3, #4
 8006984:	4618      	mov	r0, r3
 8006986:	f7fe fb47 	bl	8005018 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	2b00      	cmp	r3, #0
 8006996:	d022      	beq.n	80069de <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	699a      	ldr	r2, [r3, #24]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	18d1      	adds	r1, r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	6978      	ldr	r0, [r7, #20]
 80069a6:	f000 f8d1 	bl	8006b4c <prvInsertTimerInActiveList>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d01f      	beq.n	80069f0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069b0:	2300      	movs	r3, #0
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	2300      	movs	r3, #0
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	2100      	movs	r1, #0
 80069ba:	6978      	ldr	r0, [r7, #20]
 80069bc:	f7ff ff88 	bl	80068d0 <xTimerGenericCommand>
 80069c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d113      	bne.n	80069f0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80069c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069cc:	f383 8811 	msr	BASEPRI, r3
 80069d0:	f3bf 8f6f 	isb	sy
 80069d4:	f3bf 8f4f 	dsb	sy
 80069d8:	60fb      	str	r3, [r7, #12]
}
 80069da:	bf00      	nop
 80069dc:	e7fe      	b.n	80069dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069e4:	f023 0301 	bic.w	r3, r3, #1
 80069e8:	b2da      	uxtb	r2, r3
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	6978      	ldr	r0, [r7, #20]
 80069f6:	4798      	blx	r3
}
 80069f8:	bf00      	nop
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	24000cec 	.word	0x24000cec

08006a04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a0c:	f107 0308 	add.w	r3, r7, #8
 8006a10:	4618      	mov	r0, r3
 8006a12:	f000 f857 	bl	8006ac4 <prvGetNextExpireTime>
 8006a16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f000 f803 	bl	8006a28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a22:	f000 f8d5 	bl	8006bd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a26:	e7f1      	b.n	8006a0c <prvTimerTask+0x8>

08006a28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a32:	f7ff fa43 	bl	8005ebc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a36:	f107 0308 	add.w	r3, r7, #8
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 f866 	bl	8006b0c <prvSampleTimeNow>
 8006a40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d130      	bne.n	8006aaa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10a      	bne.n	8006a64 <prvProcessTimerOrBlockTask+0x3c>
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d806      	bhi.n	8006a64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a56:	f7ff fa3f 	bl	8005ed8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a5a:	68f9      	ldr	r1, [r7, #12]
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f7ff ff85 	bl	800696c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a62:	e024      	b.n	8006aae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d008      	beq.n	8006a7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a6a:	4b13      	ldr	r3, [pc, #76]	; (8006ab8 <prvProcessTimerOrBlockTask+0x90>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <prvProcessTimerOrBlockTask+0x50>
 8006a74:	2301      	movs	r3, #1
 8006a76:	e000      	b.n	8006a7a <prvProcessTimerOrBlockTask+0x52>
 8006a78:	2300      	movs	r3, #0
 8006a7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a7c:	4b0f      	ldr	r3, [pc, #60]	; (8006abc <prvProcessTimerOrBlockTask+0x94>)
 8006a7e:	6818      	ldr	r0, [r3, #0]
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	4619      	mov	r1, r3
 8006a8a:	f7fe ffa7 	bl	80059dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a8e:	f7ff fa23 	bl	8005ed8 <xTaskResumeAll>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10a      	bne.n	8006aae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a98:	4b09      	ldr	r3, [pc, #36]	; (8006ac0 <prvProcessTimerOrBlockTask+0x98>)
 8006a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a9e:	601a      	str	r2, [r3, #0]
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	f3bf 8f6f 	isb	sy
}
 8006aa8:	e001      	b.n	8006aae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006aaa:	f7ff fa15 	bl	8005ed8 <xTaskResumeAll>
}
 8006aae:	bf00      	nop
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	24000cf0 	.word	0x24000cf0
 8006abc:	24000cf4 	.word	0x24000cf4
 8006ac0:	e000ed04 	.word	0xe000ed04

08006ac4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006acc:	4b0e      	ldr	r3, [pc, #56]	; (8006b08 <prvGetNextExpireTime+0x44>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <prvGetNextExpireTime+0x16>
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	e000      	b.n	8006adc <prvGetNextExpireTime+0x18>
 8006ada:	2200      	movs	r2, #0
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d105      	bne.n	8006af4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ae8:	4b07      	ldr	r3, [pc, #28]	; (8006b08 <prvGetNextExpireTime+0x44>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	60fb      	str	r3, [r7, #12]
 8006af2:	e001      	b.n	8006af8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006af4:	2300      	movs	r3, #0
 8006af6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006af8:	68fb      	ldr	r3, [r7, #12]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	24000cec 	.word	0x24000cec

08006b0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b14:	f7ff fa7e 	bl	8006014 <xTaskGetTickCount>
 8006b18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b1a:	4b0b      	ldr	r3, [pc, #44]	; (8006b48 <prvSampleTimeNow+0x3c>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d205      	bcs.n	8006b30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006b24:	f000 f936 	bl	8006d94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	601a      	str	r2, [r3, #0]
 8006b2e:	e002      	b.n	8006b36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b36:	4a04      	ldr	r2, [pc, #16]	; (8006b48 <prvSampleTimeNow+0x3c>)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	24000cfc 	.word	0x24000cfc

08006b4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
 8006b58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d812      	bhi.n	8006b98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	1ad2      	subs	r2, r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d302      	bcc.n	8006b86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b80:	2301      	movs	r3, #1
 8006b82:	617b      	str	r3, [r7, #20]
 8006b84:	e01b      	b.n	8006bbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b86:	4b10      	ldr	r3, [pc, #64]	; (8006bc8 <prvInsertTimerInActiveList+0x7c>)
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	3304      	adds	r3, #4
 8006b8e:	4619      	mov	r1, r3
 8006b90:	4610      	mov	r0, r2
 8006b92:	f7fe fa08 	bl	8004fa6 <vListInsert>
 8006b96:	e012      	b.n	8006bbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d206      	bcs.n	8006bae <prvInsertTimerInActiveList+0x62>
 8006ba0:	68ba      	ldr	r2, [r7, #8]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d302      	bcc.n	8006bae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	617b      	str	r3, [r7, #20]
 8006bac:	e007      	b.n	8006bbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bae:	4b07      	ldr	r3, [pc, #28]	; (8006bcc <prvInsertTimerInActiveList+0x80>)
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	4610      	mov	r0, r2
 8006bba:	f7fe f9f4 	bl	8004fa6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006bbe:	697b      	ldr	r3, [r7, #20]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3718      	adds	r7, #24
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	24000cf0 	.word	0x24000cf0
 8006bcc:	24000cec 	.word	0x24000cec

08006bd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b08e      	sub	sp, #56	; 0x38
 8006bd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006bd6:	e0ca      	b.n	8006d6e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	da18      	bge.n	8006c10 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006bde:	1d3b      	adds	r3, r7, #4
 8006be0:	3304      	adds	r3, #4
 8006be2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10a      	bne.n	8006c00 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	61fb      	str	r3, [r7, #28]
}
 8006bfc:	bf00      	nop
 8006bfe:	e7fe      	b.n	8006bfe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c06:	6850      	ldr	r0, [r2, #4]
 8006c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c0a:	6892      	ldr	r2, [r2, #8]
 8006c0c:	4611      	mov	r1, r2
 8006c0e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f2c0 80aa 	blt.w	8006d6c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1e:	695b      	ldr	r3, [r3, #20]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d004      	beq.n	8006c2e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c26:	3304      	adds	r3, #4
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7fe f9f5 	bl	8005018 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c2e:	463b      	mov	r3, r7
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7ff ff6b 	bl	8006b0c <prvSampleTimeNow>
 8006c36:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b09      	cmp	r3, #9
 8006c3c:	f200 8097 	bhi.w	8006d6e <prvProcessReceivedCommands+0x19e>
 8006c40:	a201      	add	r2, pc, #4	; (adr r2, 8006c48 <prvProcessReceivedCommands+0x78>)
 8006c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c46:	bf00      	nop
 8006c48:	08006c71 	.word	0x08006c71
 8006c4c:	08006c71 	.word	0x08006c71
 8006c50:	08006c71 	.word	0x08006c71
 8006c54:	08006ce5 	.word	0x08006ce5
 8006c58:	08006cf9 	.word	0x08006cf9
 8006c5c:	08006d43 	.word	0x08006d43
 8006c60:	08006c71 	.word	0x08006c71
 8006c64:	08006c71 	.word	0x08006c71
 8006c68:	08006ce5 	.word	0x08006ce5
 8006c6c:	08006cf9 	.word	0x08006cf9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c76:	f043 0301 	orr.w	r3, r3, #1
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	18d1      	adds	r1, r2, r3
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c90:	f7ff ff5c 	bl	8006b4c <prvInsertTimerInActiveList>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d069      	beq.n	8006d6e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ca0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ca8:	f003 0304 	and.w	r3, r3, #4
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d05e      	beq.n	8006d6e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	441a      	add	r2, r3
 8006cb8:	2300      	movs	r3, #0
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cc2:	f7ff fe05 	bl	80068d0 <xTimerGenericCommand>
 8006cc6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006cc8:	6a3b      	ldr	r3, [r7, #32]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d14f      	bne.n	8006d6e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd2:	f383 8811 	msr	BASEPRI, r3
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	61bb      	str	r3, [r7, #24]
}
 8006ce0:	bf00      	nop
 8006ce2:	e7fe      	b.n	8006ce2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cea:	f023 0301 	bic.w	r3, r3, #1
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006cf6:	e03a      	b.n	8006d6e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cfe:	f043 0301 	orr.w	r3, r3, #1
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d12:	699b      	ldr	r3, [r3, #24]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10a      	bne.n	8006d2e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1c:	f383 8811 	msr	BASEPRI, r3
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	617b      	str	r3, [r7, #20]
}
 8006d2a:	bf00      	nop
 8006d2c:	e7fe      	b.n	8006d2c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d30:	699a      	ldr	r2, [r3, #24]
 8006d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d34:	18d1      	adds	r1, r2, r3
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d3c:	f7ff ff06 	bl	8006b4c <prvInsertTimerInActiveList>
					break;
 8006d40:	e015      	b.n	8006d6e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d48:	f003 0302 	and.w	r3, r3, #2
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d103      	bne.n	8006d58 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006d50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d52:	f000 fbdd 	bl	8007510 <vPortFree>
 8006d56:	e00a      	b.n	8006d6e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d5e:	f023 0301 	bic.w	r3, r3, #1
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d6a:	e000      	b.n	8006d6e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006d6c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d6e:	4b08      	ldr	r3, [pc, #32]	; (8006d90 <prvProcessReceivedCommands+0x1c0>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	1d39      	adds	r1, r7, #4
 8006d74:	2200      	movs	r2, #0
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7fe fc16 	bl	80055a8 <xQueueReceive>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f47f af2a 	bne.w	8006bd8 <prvProcessReceivedCommands+0x8>
	}
}
 8006d84:	bf00      	nop
 8006d86:	bf00      	nop
 8006d88:	3730      	adds	r7, #48	; 0x30
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	24000cf4 	.word	0x24000cf4

08006d94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b088      	sub	sp, #32
 8006d98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d9a:	e048      	b.n	8006e2e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d9c:	4b2d      	ldr	r3, [pc, #180]	; (8006e54 <prvSwitchTimerLists+0xc0>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006da6:	4b2b      	ldr	r3, [pc, #172]	; (8006e54 <prvSwitchTimerLists+0xc0>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	3304      	adds	r3, #4
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7fe f92f 	bl	8005018 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dc8:	f003 0304 	and.w	r3, r3, #4
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d02e      	beq.n	8006e2e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d90e      	bls.n	8006e00 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dee:	4b19      	ldr	r3, [pc, #100]	; (8006e54 <prvSwitchTimerLists+0xc0>)
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	3304      	adds	r3, #4
 8006df6:	4619      	mov	r1, r3
 8006df8:	4610      	mov	r0, r2
 8006dfa:	f7fe f8d4 	bl	8004fa6 <vListInsert>
 8006dfe:	e016      	b.n	8006e2e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e00:	2300      	movs	r3, #0
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	2300      	movs	r3, #0
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	2100      	movs	r1, #0
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f7ff fd60 	bl	80068d0 <xTimerGenericCommand>
 8006e10:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10a      	bne.n	8006e2e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	603b      	str	r3, [r7, #0]
}
 8006e2a:	bf00      	nop
 8006e2c:	e7fe      	b.n	8006e2c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e2e:	4b09      	ldr	r3, [pc, #36]	; (8006e54 <prvSwitchTimerLists+0xc0>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1b1      	bne.n	8006d9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e38:	4b06      	ldr	r3, [pc, #24]	; (8006e54 <prvSwitchTimerLists+0xc0>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e3e:	4b06      	ldr	r3, [pc, #24]	; (8006e58 <prvSwitchTimerLists+0xc4>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a04      	ldr	r2, [pc, #16]	; (8006e54 <prvSwitchTimerLists+0xc0>)
 8006e44:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e46:	4a04      	ldr	r2, [pc, #16]	; (8006e58 <prvSwitchTimerLists+0xc4>)
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	6013      	str	r3, [r2, #0]
}
 8006e4c:	bf00      	nop
 8006e4e:	3718      	adds	r7, #24
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	24000cec 	.word	0x24000cec
 8006e58:	24000cf0 	.word	0x24000cf0

08006e5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e62:	f000 f967 	bl	8007134 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e66:	4b15      	ldr	r3, [pc, #84]	; (8006ebc <prvCheckForValidListAndQueue+0x60>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d120      	bne.n	8006eb0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e6e:	4814      	ldr	r0, [pc, #80]	; (8006ec0 <prvCheckForValidListAndQueue+0x64>)
 8006e70:	f7fe f848 	bl	8004f04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e74:	4813      	ldr	r0, [pc, #76]	; (8006ec4 <prvCheckForValidListAndQueue+0x68>)
 8006e76:	f7fe f845 	bl	8004f04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e7a:	4b13      	ldr	r3, [pc, #76]	; (8006ec8 <prvCheckForValidListAndQueue+0x6c>)
 8006e7c:	4a10      	ldr	r2, [pc, #64]	; (8006ec0 <prvCheckForValidListAndQueue+0x64>)
 8006e7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e80:	4b12      	ldr	r3, [pc, #72]	; (8006ecc <prvCheckForValidListAndQueue+0x70>)
 8006e82:	4a10      	ldr	r2, [pc, #64]	; (8006ec4 <prvCheckForValidListAndQueue+0x68>)
 8006e84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e86:	2300      	movs	r3, #0
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	4b11      	ldr	r3, [pc, #68]	; (8006ed0 <prvCheckForValidListAndQueue+0x74>)
 8006e8c:	4a11      	ldr	r2, [pc, #68]	; (8006ed4 <prvCheckForValidListAndQueue+0x78>)
 8006e8e:	2110      	movs	r1, #16
 8006e90:	200a      	movs	r0, #10
 8006e92:	f7fe f953 	bl	800513c <xQueueGenericCreateStatic>
 8006e96:	4603      	mov	r3, r0
 8006e98:	4a08      	ldr	r2, [pc, #32]	; (8006ebc <prvCheckForValidListAndQueue+0x60>)
 8006e9a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e9c:	4b07      	ldr	r3, [pc, #28]	; (8006ebc <prvCheckForValidListAndQueue+0x60>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d005      	beq.n	8006eb0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ea4:	4b05      	ldr	r3, [pc, #20]	; (8006ebc <prvCheckForValidListAndQueue+0x60>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	490b      	ldr	r1, [pc, #44]	; (8006ed8 <prvCheckForValidListAndQueue+0x7c>)
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7fe fd6c 	bl	8005988 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006eb0:	f000 f970 	bl	8007194 <vPortExitCritical>
}
 8006eb4:	bf00      	nop
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	24000cf4 	.word	0x24000cf4
 8006ec0:	24000cc4 	.word	0x24000cc4
 8006ec4:	24000cd8 	.word	0x24000cd8
 8006ec8:	24000cec 	.word	0x24000cec
 8006ecc:	24000cf0 	.word	0x24000cf0
 8006ed0:	24000da0 	.word	0x24000da0
 8006ed4:	24000d00 	.word	0x24000d00
 8006ed8:	080077f4 	.word	0x080077f4

08006edc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	3b04      	subs	r3, #4
 8006eec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3b04      	subs	r3, #4
 8006efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	f023 0201 	bic.w	r2, r3, #1
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	3b04      	subs	r3, #4
 8006f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f0c:	4a0c      	ldr	r2, [pc, #48]	; (8006f40 <pxPortInitialiseStack+0x64>)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3b14      	subs	r3, #20
 8006f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	3b04      	subs	r3, #4
 8006f22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f06f 0202 	mvn.w	r2, #2
 8006f2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	3b20      	subs	r3, #32
 8006f30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f32:	68fb      	ldr	r3, [r7, #12]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	08006f45 	.word	0x08006f45

08006f44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f4e:	4b12      	ldr	r3, [pc, #72]	; (8006f98 <prvTaskExitError+0x54>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f56:	d00a      	beq.n	8006f6e <prvTaskExitError+0x2a>
	__asm volatile
 8006f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	60fb      	str	r3, [r7, #12]
}
 8006f6a:	bf00      	nop
 8006f6c:	e7fe      	b.n	8006f6c <prvTaskExitError+0x28>
	__asm volatile
 8006f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f72:	f383 8811 	msr	BASEPRI, r3
 8006f76:	f3bf 8f6f 	isb	sy
 8006f7a:	f3bf 8f4f 	dsb	sy
 8006f7e:	60bb      	str	r3, [r7, #8]
}
 8006f80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f82:	bf00      	nop
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d0fc      	beq.n	8006f84 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f8a:	bf00      	nop
 8006f8c:	bf00      	nop
 8006f8e:	3714      	adds	r7, #20
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	24000010 	.word	0x24000010
 8006f9c:	00000000 	.word	0x00000000

08006fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006fa0:	4b07      	ldr	r3, [pc, #28]	; (8006fc0 <pxCurrentTCBConst2>)
 8006fa2:	6819      	ldr	r1, [r3, #0]
 8006fa4:	6808      	ldr	r0, [r1, #0]
 8006fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006faa:	f380 8809 	msr	PSP, r0
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f04f 0000 	mov.w	r0, #0
 8006fb6:	f380 8811 	msr	BASEPRI, r0
 8006fba:	4770      	bx	lr
 8006fbc:	f3af 8000 	nop.w

08006fc0 <pxCurrentTCBConst2>:
 8006fc0:	240007c4 	.word	0x240007c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fc4:	bf00      	nop
 8006fc6:	bf00      	nop

08006fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006fc8:	4808      	ldr	r0, [pc, #32]	; (8006fec <prvPortStartFirstTask+0x24>)
 8006fca:	6800      	ldr	r0, [r0, #0]
 8006fcc:	6800      	ldr	r0, [r0, #0]
 8006fce:	f380 8808 	msr	MSP, r0
 8006fd2:	f04f 0000 	mov.w	r0, #0
 8006fd6:	f380 8814 	msr	CONTROL, r0
 8006fda:	b662      	cpsie	i
 8006fdc:	b661      	cpsie	f
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	df00      	svc	0
 8006fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006fea:	bf00      	nop
 8006fec:	e000ed08 	.word	0xe000ed08

08006ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ff6:	4b46      	ldr	r3, [pc, #280]	; (8007110 <xPortStartScheduler+0x120>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a46      	ldr	r2, [pc, #280]	; (8007114 <xPortStartScheduler+0x124>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d10a      	bne.n	8007016 <xPortStartScheduler+0x26>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	613b      	str	r3, [r7, #16]
}
 8007012:	bf00      	nop
 8007014:	e7fe      	b.n	8007014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007016:	4b3e      	ldr	r3, [pc, #248]	; (8007110 <xPortStartScheduler+0x120>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a3f      	ldr	r2, [pc, #252]	; (8007118 <xPortStartScheduler+0x128>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d10a      	bne.n	8007036 <xPortStartScheduler+0x46>
	__asm volatile
 8007020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007024:	f383 8811 	msr	BASEPRI, r3
 8007028:	f3bf 8f6f 	isb	sy
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	60fb      	str	r3, [r7, #12]
}
 8007032:	bf00      	nop
 8007034:	e7fe      	b.n	8007034 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007036:	4b39      	ldr	r3, [pc, #228]	; (800711c <xPortStartScheduler+0x12c>)
 8007038:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	b2db      	uxtb	r3, r3
 8007040:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	22ff      	movs	r2, #255	; 0xff
 8007046:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	b2db      	uxtb	r3, r3
 800704e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007050:	78fb      	ldrb	r3, [r7, #3]
 8007052:	b2db      	uxtb	r3, r3
 8007054:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007058:	b2da      	uxtb	r2, r3
 800705a:	4b31      	ldr	r3, [pc, #196]	; (8007120 <xPortStartScheduler+0x130>)
 800705c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800705e:	4b31      	ldr	r3, [pc, #196]	; (8007124 <xPortStartScheduler+0x134>)
 8007060:	2207      	movs	r2, #7
 8007062:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007064:	e009      	b.n	800707a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007066:	4b2f      	ldr	r3, [pc, #188]	; (8007124 <xPortStartScheduler+0x134>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3b01      	subs	r3, #1
 800706c:	4a2d      	ldr	r2, [pc, #180]	; (8007124 <xPortStartScheduler+0x134>)
 800706e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007070:	78fb      	ldrb	r3, [r7, #3]
 8007072:	b2db      	uxtb	r3, r3
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	b2db      	uxtb	r3, r3
 8007078:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800707a:	78fb      	ldrb	r3, [r7, #3]
 800707c:	b2db      	uxtb	r3, r3
 800707e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007082:	2b80      	cmp	r3, #128	; 0x80
 8007084:	d0ef      	beq.n	8007066 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007086:	4b27      	ldr	r3, [pc, #156]	; (8007124 <xPortStartScheduler+0x134>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f1c3 0307 	rsb	r3, r3, #7
 800708e:	2b04      	cmp	r3, #4
 8007090:	d00a      	beq.n	80070a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	60bb      	str	r3, [r7, #8]
}
 80070a4:	bf00      	nop
 80070a6:	e7fe      	b.n	80070a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80070a8:	4b1e      	ldr	r3, [pc, #120]	; (8007124 <xPortStartScheduler+0x134>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	021b      	lsls	r3, r3, #8
 80070ae:	4a1d      	ldr	r2, [pc, #116]	; (8007124 <xPortStartScheduler+0x134>)
 80070b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80070b2:	4b1c      	ldr	r3, [pc, #112]	; (8007124 <xPortStartScheduler+0x134>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070ba:	4a1a      	ldr	r2, [pc, #104]	; (8007124 <xPortStartScheduler+0x134>)
 80070bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070c6:	4b18      	ldr	r3, [pc, #96]	; (8007128 <xPortStartScheduler+0x138>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a17      	ldr	r2, [pc, #92]	; (8007128 <xPortStartScheduler+0x138>)
 80070cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070d2:	4b15      	ldr	r3, [pc, #84]	; (8007128 <xPortStartScheduler+0x138>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a14      	ldr	r2, [pc, #80]	; (8007128 <xPortStartScheduler+0x138>)
 80070d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80070dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070de:	f000 f8dd 	bl	800729c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070e2:	4b12      	ldr	r3, [pc, #72]	; (800712c <xPortStartScheduler+0x13c>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070e8:	f000 f8fc 	bl	80072e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070ec:	4b10      	ldr	r3, [pc, #64]	; (8007130 <xPortStartScheduler+0x140>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a0f      	ldr	r2, [pc, #60]	; (8007130 <xPortStartScheduler+0x140>)
 80070f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80070f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070f8:	f7ff ff66 	bl	8006fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070fc:	f7ff f854 	bl	80061a8 <vTaskSwitchContext>
	prvTaskExitError();
 8007100:	f7ff ff20 	bl	8006f44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3718      	adds	r7, #24
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	e000ed00 	.word	0xe000ed00
 8007114:	410fc271 	.word	0x410fc271
 8007118:	410fc270 	.word	0x410fc270
 800711c:	e000e400 	.word	0xe000e400
 8007120:	24000df0 	.word	0x24000df0
 8007124:	24000df4 	.word	0x24000df4
 8007128:	e000ed20 	.word	0xe000ed20
 800712c:	24000010 	.word	0x24000010
 8007130:	e000ef34 	.word	0xe000ef34

08007134 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
	__asm volatile
 800713a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	607b      	str	r3, [r7, #4]
}
 800714c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800714e:	4b0f      	ldr	r3, [pc, #60]	; (800718c <vPortEnterCritical+0x58>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	3301      	adds	r3, #1
 8007154:	4a0d      	ldr	r2, [pc, #52]	; (800718c <vPortEnterCritical+0x58>)
 8007156:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007158:	4b0c      	ldr	r3, [pc, #48]	; (800718c <vPortEnterCritical+0x58>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d10f      	bne.n	8007180 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007160:	4b0b      	ldr	r3, [pc, #44]	; (8007190 <vPortEnterCritical+0x5c>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00a      	beq.n	8007180 <vPortEnterCritical+0x4c>
	__asm volatile
 800716a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716e:	f383 8811 	msr	BASEPRI, r3
 8007172:	f3bf 8f6f 	isb	sy
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	603b      	str	r3, [r7, #0]
}
 800717c:	bf00      	nop
 800717e:	e7fe      	b.n	800717e <vPortEnterCritical+0x4a>
	}
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	24000010 	.word	0x24000010
 8007190:	e000ed04 	.word	0xe000ed04

08007194 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800719a:	4b12      	ldr	r3, [pc, #72]	; (80071e4 <vPortExitCritical+0x50>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10a      	bne.n	80071b8 <vPortExitCritical+0x24>
	__asm volatile
 80071a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a6:	f383 8811 	msr	BASEPRI, r3
 80071aa:	f3bf 8f6f 	isb	sy
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	607b      	str	r3, [r7, #4]
}
 80071b4:	bf00      	nop
 80071b6:	e7fe      	b.n	80071b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80071b8:	4b0a      	ldr	r3, [pc, #40]	; (80071e4 <vPortExitCritical+0x50>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3b01      	subs	r3, #1
 80071be:	4a09      	ldr	r2, [pc, #36]	; (80071e4 <vPortExitCritical+0x50>)
 80071c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071c2:	4b08      	ldr	r3, [pc, #32]	; (80071e4 <vPortExitCritical+0x50>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d105      	bne.n	80071d6 <vPortExitCritical+0x42>
 80071ca:	2300      	movs	r3, #0
 80071cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	f383 8811 	msr	BASEPRI, r3
}
 80071d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071d6:	bf00      	nop
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	24000010 	.word	0x24000010
	...

080071f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071f0:	f3ef 8009 	mrs	r0, PSP
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	4b15      	ldr	r3, [pc, #84]	; (8007250 <pxCurrentTCBConst>)
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	f01e 0f10 	tst.w	lr, #16
 8007200:	bf08      	it	eq
 8007202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800720a:	6010      	str	r0, [r2, #0]
 800720c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007210:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007214:	f380 8811 	msr	BASEPRI, r0
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	f3bf 8f6f 	isb	sy
 8007220:	f7fe ffc2 	bl	80061a8 <vTaskSwitchContext>
 8007224:	f04f 0000 	mov.w	r0, #0
 8007228:	f380 8811 	msr	BASEPRI, r0
 800722c:	bc09      	pop	{r0, r3}
 800722e:	6819      	ldr	r1, [r3, #0]
 8007230:	6808      	ldr	r0, [r1, #0]
 8007232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007236:	f01e 0f10 	tst.w	lr, #16
 800723a:	bf08      	it	eq
 800723c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007240:	f380 8809 	msr	PSP, r0
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	f3af 8000 	nop.w

08007250 <pxCurrentTCBConst>:
 8007250:	240007c4 	.word	0x240007c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007254:	bf00      	nop
 8007256:	bf00      	nop

08007258 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
	__asm volatile
 800725e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007262:	f383 8811 	msr	BASEPRI, r3
 8007266:	f3bf 8f6f 	isb	sy
 800726a:	f3bf 8f4f 	dsb	sy
 800726e:	607b      	str	r3, [r7, #4]
}
 8007270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007272:	f7fe fedf 	bl	8006034 <xTaskIncrementTick>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d003      	beq.n	8007284 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800727c:	4b06      	ldr	r3, [pc, #24]	; (8007298 <xPortSysTickHandler+0x40>)
 800727e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	2300      	movs	r3, #0
 8007286:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	f383 8811 	msr	BASEPRI, r3
}
 800728e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007290:	bf00      	nop
 8007292:	3708      	adds	r7, #8
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	e000ed04 	.word	0xe000ed04

0800729c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800729c:	b480      	push	{r7}
 800729e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80072a0:	4b0b      	ldr	r3, [pc, #44]	; (80072d0 <vPortSetupTimerInterrupt+0x34>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072a6:	4b0b      	ldr	r3, [pc, #44]	; (80072d4 <vPortSetupTimerInterrupt+0x38>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072ac:	4b0a      	ldr	r3, [pc, #40]	; (80072d8 <vPortSetupTimerInterrupt+0x3c>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a0a      	ldr	r2, [pc, #40]	; (80072dc <vPortSetupTimerInterrupt+0x40>)
 80072b2:	fba2 2303 	umull	r2, r3, r2, r3
 80072b6:	099b      	lsrs	r3, r3, #6
 80072b8:	4a09      	ldr	r2, [pc, #36]	; (80072e0 <vPortSetupTimerInterrupt+0x44>)
 80072ba:	3b01      	subs	r3, #1
 80072bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072be:	4b04      	ldr	r3, [pc, #16]	; (80072d0 <vPortSetupTimerInterrupt+0x34>)
 80072c0:	2207      	movs	r2, #7
 80072c2:	601a      	str	r2, [r3, #0]
}
 80072c4:	bf00      	nop
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	e000e010 	.word	0xe000e010
 80072d4:	e000e018 	.word	0xe000e018
 80072d8:	24000000 	.word	0x24000000
 80072dc:	10624dd3 	.word	0x10624dd3
 80072e0:	e000e014 	.word	0xe000e014

080072e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80072f4 <vPortEnableVFP+0x10>
 80072e8:	6801      	ldr	r1, [r0, #0]
 80072ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80072ee:	6001      	str	r1, [r0, #0]
 80072f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80072f2:	bf00      	nop
 80072f4:	e000ed88 	.word	0xe000ed88

080072f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80072fe:	f3ef 8305 	mrs	r3, IPSR
 8007302:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2b0f      	cmp	r3, #15
 8007308:	d914      	bls.n	8007334 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800730a:	4a17      	ldr	r2, [pc, #92]	; (8007368 <vPortValidateInterruptPriority+0x70>)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4413      	add	r3, r2
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007314:	4b15      	ldr	r3, [pc, #84]	; (800736c <vPortValidateInterruptPriority+0x74>)
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	7afa      	ldrb	r2, [r7, #11]
 800731a:	429a      	cmp	r2, r3
 800731c:	d20a      	bcs.n	8007334 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	607b      	str	r3, [r7, #4]
}
 8007330:	bf00      	nop
 8007332:	e7fe      	b.n	8007332 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007334:	4b0e      	ldr	r3, [pc, #56]	; (8007370 <vPortValidateInterruptPriority+0x78>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800733c:	4b0d      	ldr	r3, [pc, #52]	; (8007374 <vPortValidateInterruptPriority+0x7c>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	429a      	cmp	r2, r3
 8007342:	d90a      	bls.n	800735a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007348:	f383 8811 	msr	BASEPRI, r3
 800734c:	f3bf 8f6f 	isb	sy
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	603b      	str	r3, [r7, #0]
}
 8007356:	bf00      	nop
 8007358:	e7fe      	b.n	8007358 <vPortValidateInterruptPriority+0x60>
	}
 800735a:	bf00      	nop
 800735c:	3714      	adds	r7, #20
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	e000e3f0 	.word	0xe000e3f0
 800736c:	24000df0 	.word	0x24000df0
 8007370:	e000ed0c 	.word	0xe000ed0c
 8007374:	24000df4 	.word	0x24000df4

08007378 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b08a      	sub	sp, #40	; 0x28
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007380:	2300      	movs	r3, #0
 8007382:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007384:	f7fe fd9a 	bl	8005ebc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007388:	4b5b      	ldr	r3, [pc, #364]	; (80074f8 <pvPortMalloc+0x180>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d101      	bne.n	8007394 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007390:	f000 f920 	bl	80075d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007394:	4b59      	ldr	r3, [pc, #356]	; (80074fc <pvPortMalloc+0x184>)
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4013      	ands	r3, r2
 800739c:	2b00      	cmp	r3, #0
 800739e:	f040 8093 	bne.w	80074c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d01d      	beq.n	80073e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80073a8:	2208      	movs	r2, #8
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4413      	add	r3, r2
 80073ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f003 0307 	and.w	r3, r3, #7
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d014      	beq.n	80073e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f023 0307 	bic.w	r3, r3, #7
 80073c0:	3308      	adds	r3, #8
 80073c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f003 0307 	and.w	r3, r3, #7
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00a      	beq.n	80073e4 <pvPortMalloc+0x6c>
	__asm volatile
 80073ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	617b      	str	r3, [r7, #20]
}
 80073e0:	bf00      	nop
 80073e2:	e7fe      	b.n	80073e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d06e      	beq.n	80074c8 <pvPortMalloc+0x150>
 80073ea:	4b45      	ldr	r3, [pc, #276]	; (8007500 <pvPortMalloc+0x188>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d869      	bhi.n	80074c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073f4:	4b43      	ldr	r3, [pc, #268]	; (8007504 <pvPortMalloc+0x18c>)
 80073f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80073f8:	4b42      	ldr	r3, [pc, #264]	; (8007504 <pvPortMalloc+0x18c>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073fe:	e004      	b.n	800740a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007402:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	429a      	cmp	r2, r3
 8007412:	d903      	bls.n	800741c <pvPortMalloc+0xa4>
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1f1      	bne.n	8007400 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800741c:	4b36      	ldr	r3, [pc, #216]	; (80074f8 <pvPortMalloc+0x180>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007422:	429a      	cmp	r2, r3
 8007424:	d050      	beq.n	80074c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007426:	6a3b      	ldr	r3, [r7, #32]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2208      	movs	r2, #8
 800742c:	4413      	add	r3, r2
 800742e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	1ad2      	subs	r2, r2, r3
 8007440:	2308      	movs	r3, #8
 8007442:	005b      	lsls	r3, r3, #1
 8007444:	429a      	cmp	r2, r3
 8007446:	d91f      	bls.n	8007488 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4413      	add	r3, r2
 800744e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	f003 0307 	and.w	r3, r3, #7
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00a      	beq.n	8007470 <pvPortMalloc+0xf8>
	__asm volatile
 800745a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745e:	f383 8811 	msr	BASEPRI, r3
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	613b      	str	r3, [r7, #16]
}
 800746c:	bf00      	nop
 800746e:	e7fe      	b.n	800746e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	685a      	ldr	r2, [r3, #4]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	1ad2      	subs	r2, r2, r3
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800747c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007482:	69b8      	ldr	r0, [r7, #24]
 8007484:	f000 f908 	bl	8007698 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007488:	4b1d      	ldr	r3, [pc, #116]	; (8007500 <pvPortMalloc+0x188>)
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	4a1b      	ldr	r2, [pc, #108]	; (8007500 <pvPortMalloc+0x188>)
 8007494:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007496:	4b1a      	ldr	r3, [pc, #104]	; (8007500 <pvPortMalloc+0x188>)
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	4b1b      	ldr	r3, [pc, #108]	; (8007508 <pvPortMalloc+0x190>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d203      	bcs.n	80074aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80074a2:	4b17      	ldr	r3, [pc, #92]	; (8007500 <pvPortMalloc+0x188>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a18      	ldr	r2, [pc, #96]	; (8007508 <pvPortMalloc+0x190>)
 80074a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80074aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	4b13      	ldr	r3, [pc, #76]	; (80074fc <pvPortMalloc+0x184>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	431a      	orrs	r2, r3
 80074b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ba:	2200      	movs	r2, #0
 80074bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80074be:	4b13      	ldr	r3, [pc, #76]	; (800750c <pvPortMalloc+0x194>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3301      	adds	r3, #1
 80074c4:	4a11      	ldr	r2, [pc, #68]	; (800750c <pvPortMalloc+0x194>)
 80074c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074c8:	f7fe fd06 	bl	8005ed8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	f003 0307 	and.w	r3, r3, #7
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00a      	beq.n	80074ec <pvPortMalloc+0x174>
	__asm volatile
 80074d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	60fb      	str	r3, [r7, #12]
}
 80074e8:	bf00      	nop
 80074ea:	e7fe      	b.n	80074ea <pvPortMalloc+0x172>
	return pvReturn;
 80074ec:	69fb      	ldr	r3, [r7, #28]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3728      	adds	r7, #40	; 0x28
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	240fae00 	.word	0x240fae00
 80074fc:	240fae14 	.word	0x240fae14
 8007500:	240fae04 	.word	0x240fae04
 8007504:	240fadf8 	.word	0x240fadf8
 8007508:	240fae08 	.word	0x240fae08
 800750c:	240fae0c 	.word	0x240fae0c

08007510 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d04d      	beq.n	80075be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007522:	2308      	movs	r3, #8
 8007524:	425b      	negs	r3, r3
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	4413      	add	r3, r2
 800752a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	685a      	ldr	r2, [r3, #4]
 8007534:	4b24      	ldr	r3, [pc, #144]	; (80075c8 <vPortFree+0xb8>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4013      	ands	r3, r2
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10a      	bne.n	8007554 <vPortFree+0x44>
	__asm volatile
 800753e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	60fb      	str	r3, [r7, #12]
}
 8007550:	bf00      	nop
 8007552:	e7fe      	b.n	8007552 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00a      	beq.n	8007572 <vPortFree+0x62>
	__asm volatile
 800755c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007560:	f383 8811 	msr	BASEPRI, r3
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	60bb      	str	r3, [r7, #8]
}
 800756e:	bf00      	nop
 8007570:	e7fe      	b.n	8007570 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	685a      	ldr	r2, [r3, #4]
 8007576:	4b14      	ldr	r3, [pc, #80]	; (80075c8 <vPortFree+0xb8>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4013      	ands	r3, r2
 800757c:	2b00      	cmp	r3, #0
 800757e:	d01e      	beq.n	80075be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d11a      	bne.n	80075be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	4b0e      	ldr	r3, [pc, #56]	; (80075c8 <vPortFree+0xb8>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	43db      	mvns	r3, r3
 8007592:	401a      	ands	r2, r3
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007598:	f7fe fc90 	bl	8005ebc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	685a      	ldr	r2, [r3, #4]
 80075a0:	4b0a      	ldr	r3, [pc, #40]	; (80075cc <vPortFree+0xbc>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4413      	add	r3, r2
 80075a6:	4a09      	ldr	r2, [pc, #36]	; (80075cc <vPortFree+0xbc>)
 80075a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80075aa:	6938      	ldr	r0, [r7, #16]
 80075ac:	f000 f874 	bl	8007698 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80075b0:	4b07      	ldr	r3, [pc, #28]	; (80075d0 <vPortFree+0xc0>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	3301      	adds	r3, #1
 80075b6:	4a06      	ldr	r2, [pc, #24]	; (80075d0 <vPortFree+0xc0>)
 80075b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80075ba:	f7fe fc8d 	bl	8005ed8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80075be:	bf00      	nop
 80075c0:	3718      	adds	r7, #24
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	240fae14 	.word	0x240fae14
 80075cc:	240fae04 	.word	0x240fae04
 80075d0:	240fae10 	.word	0x240fae10

080075d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075da:	f44f 237a 	mov.w	r3, #1024000	; 0xfa000
 80075de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075e0:	4b27      	ldr	r3, [pc, #156]	; (8007680 <prvHeapInit+0xac>)
 80075e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f003 0307 	and.w	r3, r3, #7
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00c      	beq.n	8007608 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	3307      	adds	r3, #7
 80075f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f023 0307 	bic.w	r3, r3, #7
 80075fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	4a1f      	ldr	r2, [pc, #124]	; (8007680 <prvHeapInit+0xac>)
 8007604:	4413      	add	r3, r2
 8007606:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800760c:	4a1d      	ldr	r2, [pc, #116]	; (8007684 <prvHeapInit+0xb0>)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007612:	4b1c      	ldr	r3, [pc, #112]	; (8007684 <prvHeapInit+0xb0>)
 8007614:	2200      	movs	r2, #0
 8007616:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	4413      	add	r3, r2
 800761e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007620:	2208      	movs	r2, #8
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	1a9b      	subs	r3, r3, r2
 8007626:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f023 0307 	bic.w	r3, r3, #7
 800762e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	4a15      	ldr	r2, [pc, #84]	; (8007688 <prvHeapInit+0xb4>)
 8007634:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007636:	4b14      	ldr	r3, [pc, #80]	; (8007688 <prvHeapInit+0xb4>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2200      	movs	r2, #0
 800763c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800763e:	4b12      	ldr	r3, [pc, #72]	; (8007688 <prvHeapInit+0xb4>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2200      	movs	r2, #0
 8007644:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	1ad2      	subs	r2, r2, r3
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007654:	4b0c      	ldr	r3, [pc, #48]	; (8007688 <prvHeapInit+0xb4>)
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	4a0a      	ldr	r2, [pc, #40]	; (800768c <prvHeapInit+0xb8>)
 8007662:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	4a09      	ldr	r2, [pc, #36]	; (8007690 <prvHeapInit+0xbc>)
 800766a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800766c:	4b09      	ldr	r3, [pc, #36]	; (8007694 <prvHeapInit+0xc0>)
 800766e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007672:	601a      	str	r2, [r3, #0]
}
 8007674:	bf00      	nop
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	24000df8 	.word	0x24000df8
 8007684:	240fadf8 	.word	0x240fadf8
 8007688:	240fae00 	.word	0x240fae00
 800768c:	240fae08 	.word	0x240fae08
 8007690:	240fae04 	.word	0x240fae04
 8007694:	240fae14 	.word	0x240fae14

08007698 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80076a0:	4b28      	ldr	r3, [pc, #160]	; (8007744 <prvInsertBlockIntoFreeList+0xac>)
 80076a2:	60fb      	str	r3, [r7, #12]
 80076a4:	e002      	b.n	80076ac <prvInsertBlockIntoFreeList+0x14>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	60fb      	str	r3, [r7, #12]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d8f7      	bhi.n	80076a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	68ba      	ldr	r2, [r7, #8]
 80076c0:	4413      	add	r3, r2
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d108      	bne.n	80076da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	685a      	ldr	r2, [r3, #4]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	441a      	add	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	441a      	add	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d118      	bne.n	8007720 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	4b15      	ldr	r3, [pc, #84]	; (8007748 <prvInsertBlockIntoFreeList+0xb0>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d00d      	beq.n	8007716 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	441a      	add	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	601a      	str	r2, [r3, #0]
 8007714:	e008      	b.n	8007728 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007716:	4b0c      	ldr	r3, [pc, #48]	; (8007748 <prvInsertBlockIntoFreeList+0xb0>)
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	601a      	str	r2, [r3, #0]
 800771e:	e003      	b.n	8007728 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	429a      	cmp	r2, r3
 800772e:	d002      	beq.n	8007736 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007736:	bf00      	nop
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	240fadf8 	.word	0x240fadf8
 8007748:	240fae00 	.word	0x240fae00

0800774c <__libc_init_array>:
 800774c:	b570      	push	{r4, r5, r6, lr}
 800774e:	4d0d      	ldr	r5, [pc, #52]	; (8007784 <__libc_init_array+0x38>)
 8007750:	4c0d      	ldr	r4, [pc, #52]	; (8007788 <__libc_init_array+0x3c>)
 8007752:	1b64      	subs	r4, r4, r5
 8007754:	10a4      	asrs	r4, r4, #2
 8007756:	2600      	movs	r6, #0
 8007758:	42a6      	cmp	r6, r4
 800775a:	d109      	bne.n	8007770 <__libc_init_array+0x24>
 800775c:	4d0b      	ldr	r5, [pc, #44]	; (800778c <__libc_init_array+0x40>)
 800775e:	4c0c      	ldr	r4, [pc, #48]	; (8007790 <__libc_init_array+0x44>)
 8007760:	f000 f82e 	bl	80077c0 <_init>
 8007764:	1b64      	subs	r4, r4, r5
 8007766:	10a4      	asrs	r4, r4, #2
 8007768:	2600      	movs	r6, #0
 800776a:	42a6      	cmp	r6, r4
 800776c:	d105      	bne.n	800777a <__libc_init_array+0x2e>
 800776e:	bd70      	pop	{r4, r5, r6, pc}
 8007770:	f855 3b04 	ldr.w	r3, [r5], #4
 8007774:	4798      	blx	r3
 8007776:	3601      	adds	r6, #1
 8007778:	e7ee      	b.n	8007758 <__libc_init_array+0xc>
 800777a:	f855 3b04 	ldr.w	r3, [r5], #4
 800777e:	4798      	blx	r3
 8007780:	3601      	adds	r6, #1
 8007782:	e7f2      	b.n	800776a <__libc_init_array+0x1e>
 8007784:	08007860 	.word	0x08007860
 8007788:	08007860 	.word	0x08007860
 800778c:	08007860 	.word	0x08007860
 8007790:	08007864 	.word	0x08007864

08007794 <memcpy>:
 8007794:	440a      	add	r2, r1
 8007796:	4291      	cmp	r1, r2
 8007798:	f100 33ff 	add.w	r3, r0, #4294967295
 800779c:	d100      	bne.n	80077a0 <memcpy+0xc>
 800779e:	4770      	bx	lr
 80077a0:	b510      	push	{r4, lr}
 80077a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077aa:	4291      	cmp	r1, r2
 80077ac:	d1f9      	bne.n	80077a2 <memcpy+0xe>
 80077ae:	bd10      	pop	{r4, pc}

080077b0 <memset>:
 80077b0:	4402      	add	r2, r0
 80077b2:	4603      	mov	r3, r0
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d100      	bne.n	80077ba <memset+0xa>
 80077b8:	4770      	bx	lr
 80077ba:	f803 1b01 	strb.w	r1, [r3], #1
 80077be:	e7f9      	b.n	80077b4 <memset+0x4>

080077c0 <_init>:
 80077c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077c2:	bf00      	nop
 80077c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077c6:	bc08      	pop	{r3}
 80077c8:	469e      	mov	lr, r3
 80077ca:	4770      	bx	lr

080077cc <_fini>:
 80077cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ce:	bf00      	nop
 80077d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077d2:	bc08      	pop	{r3}
 80077d4:	469e      	mov	lr, r3
 80077d6:	4770      	bx	lr
