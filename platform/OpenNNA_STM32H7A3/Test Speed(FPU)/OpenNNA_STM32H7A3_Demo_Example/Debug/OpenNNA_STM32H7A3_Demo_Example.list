
OpenNNA_STM32H7A3_Demo_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a168  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e60  0800a418  0800a418  0001a418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b278  0800b278  0001b278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b280  0800b280  0001b280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b284  0800b284  0001b284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0004e4ac  24000000  0800b288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001a044  2404e4b0  08059734  0006e4b0  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  240684f4  08059734  000784f4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0006e4ac  2**0
                  CONTENTS, READONLY
 10 .debug_info   000312f0  00000000  00000000  0006e4da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000059cc  00000000  00000000  0009f7ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000256a2  00000000  00000000  000a5196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000016c0  00000000  00000000  000ca838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00004688  00000000  00000000  000cbef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000060da  00000000  00000000  000d0580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00031002  00000000  00000000  000d665a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014c180  00000000  00000000  0010765c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  002537dc  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005dec  00000000  00000000  0025382c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2404e4b0 	.word	0x2404e4b0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800a400 	.word	0x0800a400

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2404e4b4 	.word	0x2404e4b4
 80002ec:	0800a400 	.word	0x0800a400

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr

08000304 <strlen>:
 8000304:	4603      	mov	r3, r0
 8000306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800030a:	2a00      	cmp	r2, #0
 800030c:	d1fb      	bne.n	8000306 <strlen+0x2>
 800030e:	1a18      	subs	r0, r3, r0
 8000310:	3801      	subs	r0, #1
 8000312:	4770      	bx	lr
	...

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003d4:	f000 b974 	b.w	80006c0 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468e      	mov	lr, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d14d      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fe:	428a      	cmp	r2, r1
 8000400:	4694      	mov	ip, r2
 8000402:	d969      	bls.n	80004d8 <__udivmoddi4+0xe8>
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	b152      	cbz	r2, 8000420 <__udivmoddi4+0x30>
 800040a:	fa01 f302 	lsl.w	r3, r1, r2
 800040e:	f1c2 0120 	rsb	r1, r2, #32
 8000412:	fa20 f101 	lsr.w	r1, r0, r1
 8000416:	fa0c fc02 	lsl.w	ip, ip, r2
 800041a:	ea41 0e03 	orr.w	lr, r1, r3
 800041e:	4094      	lsls	r4, r2
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	0c21      	lsrs	r1, r4, #16
 8000426:	fbbe f6f8 	udiv	r6, lr, r8
 800042a:	fa1f f78c 	uxth.w	r7, ip
 800042e:	fb08 e316 	mls	r3, r8, r6, lr
 8000432:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000436:	fb06 f107 	mul.w	r1, r6, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000446:	f080 811f 	bcs.w	8000688 <__udivmoddi4+0x298>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 811c 	bls.w	8000688 <__udivmoddi4+0x298>
 8000450:	3e02      	subs	r6, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3310 	mls	r3, r8, r0, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb00 f707 	mul.w	r7, r0, r7
 8000468:	42a7      	cmp	r7, r4
 800046a:	d90a      	bls.n	8000482 <__udivmoddi4+0x92>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000474:	f080 810a 	bcs.w	800068c <__udivmoddi4+0x29c>
 8000478:	42a7      	cmp	r7, r4
 800047a:	f240 8107 	bls.w	800068c <__udivmoddi4+0x29c>
 800047e:	4464      	add	r4, ip
 8000480:	3802      	subs	r0, #2
 8000482:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000486:	1be4      	subs	r4, r4, r7
 8000488:	2600      	movs	r6, #0
 800048a:	b11d      	cbz	r5, 8000494 <__udivmoddi4+0xa4>
 800048c:	40d4      	lsrs	r4, r2
 800048e:	2300      	movs	r3, #0
 8000490:	e9c5 4300 	strd	r4, r3, [r5]
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d909      	bls.n	80004b2 <__udivmoddi4+0xc2>
 800049e:	2d00      	cmp	r5, #0
 80004a0:	f000 80ef 	beq.w	8000682 <__udivmoddi4+0x292>
 80004a4:	2600      	movs	r6, #0
 80004a6:	e9c5 0100 	strd	r0, r1, [r5]
 80004aa:	4630      	mov	r0, r6
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	fab3 f683 	clz	r6, r3
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	d14a      	bne.n	8000550 <__udivmoddi4+0x160>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d302      	bcc.n	80004c4 <__udivmoddi4+0xd4>
 80004be:	4282      	cmp	r2, r0
 80004c0:	f200 80f9 	bhi.w	80006b6 <__udivmoddi4+0x2c6>
 80004c4:	1a84      	subs	r4, r0, r2
 80004c6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ca:	2001      	movs	r0, #1
 80004cc:	469e      	mov	lr, r3
 80004ce:	2d00      	cmp	r5, #0
 80004d0:	d0e0      	beq.n	8000494 <__udivmoddi4+0xa4>
 80004d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004d6:	e7dd      	b.n	8000494 <__udivmoddi4+0xa4>
 80004d8:	b902      	cbnz	r2, 80004dc <__udivmoddi4+0xec>
 80004da:	deff      	udf	#255	; 0xff
 80004dc:	fab2 f282 	clz	r2, r2
 80004e0:	2a00      	cmp	r2, #0
 80004e2:	f040 8092 	bne.w	800060a <__udivmoddi4+0x21a>
 80004e6:	eba1 010c 	sub.w	r1, r1, ip
 80004ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ee:	fa1f fe8c 	uxth.w	lr, ip
 80004f2:	2601      	movs	r6, #1
 80004f4:	0c20      	lsrs	r0, r4, #16
 80004f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004fa:	fb07 1113 	mls	r1, r7, r3, r1
 80004fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000502:	fb0e f003 	mul.w	r0, lr, r3
 8000506:	4288      	cmp	r0, r1
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x12c>
 800050a:	eb1c 0101 	adds.w	r1, ip, r1
 800050e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x12a>
 8000514:	4288      	cmp	r0, r1
 8000516:	f200 80cb 	bhi.w	80006b0 <__udivmoddi4+0x2c0>
 800051a:	4643      	mov	r3, r8
 800051c:	1a09      	subs	r1, r1, r0
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb1 f0f7 	udiv	r0, r1, r7
 8000524:	fb07 1110 	mls	r1, r7, r0, r1
 8000528:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800052c:	fb0e fe00 	mul.w	lr, lr, r0
 8000530:	45a6      	cmp	lr, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x156>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800053c:	d202      	bcs.n	8000544 <__udivmoddi4+0x154>
 800053e:	45a6      	cmp	lr, r4
 8000540:	f200 80bb 	bhi.w	80006ba <__udivmoddi4+0x2ca>
 8000544:	4608      	mov	r0, r1
 8000546:	eba4 040e 	sub.w	r4, r4, lr
 800054a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x9a>
 8000550:	f1c6 0720 	rsb	r7, r6, #32
 8000554:	40b3      	lsls	r3, r6
 8000556:	fa22 fc07 	lsr.w	ip, r2, r7
 800055a:	ea4c 0c03 	orr.w	ip, ip, r3
 800055e:	fa20 f407 	lsr.w	r4, r0, r7
 8000562:	fa01 f306 	lsl.w	r3, r1, r6
 8000566:	431c      	orrs	r4, r3
 8000568:	40f9      	lsrs	r1, r7
 800056a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800056e:	fa00 f306 	lsl.w	r3, r0, r6
 8000572:	fbb1 f8f9 	udiv	r8, r1, r9
 8000576:	0c20      	lsrs	r0, r4, #16
 8000578:	fa1f fe8c 	uxth.w	lr, ip
 800057c:	fb09 1118 	mls	r1, r9, r8, r1
 8000580:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000584:	fb08 f00e 	mul.w	r0, r8, lr
 8000588:	4288      	cmp	r0, r1
 800058a:	fa02 f206 	lsl.w	r2, r2, r6
 800058e:	d90b      	bls.n	80005a8 <__udivmoddi4+0x1b8>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000598:	f080 8088 	bcs.w	80006ac <__udivmoddi4+0x2bc>
 800059c:	4288      	cmp	r0, r1
 800059e:	f240 8085 	bls.w	80006ac <__udivmoddi4+0x2bc>
 80005a2:	f1a8 0802 	sub.w	r8, r8, #2
 80005a6:	4461      	add	r1, ip
 80005a8:	1a09      	subs	r1, r1, r0
 80005aa:	b2a4      	uxth	r4, r4
 80005ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80005b0:	fb09 1110 	mls	r1, r9, r0, r1
 80005b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005bc:	458e      	cmp	lr, r1
 80005be:	d908      	bls.n	80005d2 <__udivmoddi4+0x1e2>
 80005c0:	eb1c 0101 	adds.w	r1, ip, r1
 80005c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80005c8:	d26c      	bcs.n	80006a4 <__udivmoddi4+0x2b4>
 80005ca:	458e      	cmp	lr, r1
 80005cc:	d96a      	bls.n	80006a4 <__udivmoddi4+0x2b4>
 80005ce:	3802      	subs	r0, #2
 80005d0:	4461      	add	r1, ip
 80005d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005d6:	fba0 9402 	umull	r9, r4, r0, r2
 80005da:	eba1 010e 	sub.w	r1, r1, lr
 80005de:	42a1      	cmp	r1, r4
 80005e0:	46c8      	mov	r8, r9
 80005e2:	46a6      	mov	lr, r4
 80005e4:	d356      	bcc.n	8000694 <__udivmoddi4+0x2a4>
 80005e6:	d053      	beq.n	8000690 <__udivmoddi4+0x2a0>
 80005e8:	b15d      	cbz	r5, 8000602 <__udivmoddi4+0x212>
 80005ea:	ebb3 0208 	subs.w	r2, r3, r8
 80005ee:	eb61 010e 	sbc.w	r1, r1, lr
 80005f2:	fa01 f707 	lsl.w	r7, r1, r7
 80005f6:	fa22 f306 	lsr.w	r3, r2, r6
 80005fa:	40f1      	lsrs	r1, r6
 80005fc:	431f      	orrs	r7, r3
 80005fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000602:	2600      	movs	r6, #0
 8000604:	4631      	mov	r1, r6
 8000606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	40d8      	lsrs	r0, r3
 8000610:	fa0c fc02 	lsl.w	ip, ip, r2
 8000614:	fa21 f303 	lsr.w	r3, r1, r3
 8000618:	4091      	lsls	r1, r2
 800061a:	4301      	orrs	r1, r0
 800061c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000620:	fa1f fe8c 	uxth.w	lr, ip
 8000624:	fbb3 f0f7 	udiv	r0, r3, r7
 8000628:	fb07 3610 	mls	r6, r7, r0, r3
 800062c:	0c0b      	lsrs	r3, r1, #16
 800062e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000632:	fb00 f60e 	mul.w	r6, r0, lr
 8000636:	429e      	cmp	r6, r3
 8000638:	fa04 f402 	lsl.w	r4, r4, r2
 800063c:	d908      	bls.n	8000650 <__udivmoddi4+0x260>
 800063e:	eb1c 0303 	adds.w	r3, ip, r3
 8000642:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000646:	d22f      	bcs.n	80006a8 <__udivmoddi4+0x2b8>
 8000648:	429e      	cmp	r6, r3
 800064a:	d92d      	bls.n	80006a8 <__udivmoddi4+0x2b8>
 800064c:	3802      	subs	r0, #2
 800064e:	4463      	add	r3, ip
 8000650:	1b9b      	subs	r3, r3, r6
 8000652:	b289      	uxth	r1, r1
 8000654:	fbb3 f6f7 	udiv	r6, r3, r7
 8000658:	fb07 3316 	mls	r3, r7, r6, r3
 800065c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000660:	fb06 f30e 	mul.w	r3, r6, lr
 8000664:	428b      	cmp	r3, r1
 8000666:	d908      	bls.n	800067a <__udivmoddi4+0x28a>
 8000668:	eb1c 0101 	adds.w	r1, ip, r1
 800066c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000670:	d216      	bcs.n	80006a0 <__udivmoddi4+0x2b0>
 8000672:	428b      	cmp	r3, r1
 8000674:	d914      	bls.n	80006a0 <__udivmoddi4+0x2b0>
 8000676:	3e02      	subs	r6, #2
 8000678:	4461      	add	r1, ip
 800067a:	1ac9      	subs	r1, r1, r3
 800067c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000680:	e738      	b.n	80004f4 <__udivmoddi4+0x104>
 8000682:	462e      	mov	r6, r5
 8000684:	4628      	mov	r0, r5
 8000686:	e705      	b.n	8000494 <__udivmoddi4+0xa4>
 8000688:	4606      	mov	r6, r0
 800068a:	e6e3      	b.n	8000454 <__udivmoddi4+0x64>
 800068c:	4618      	mov	r0, r3
 800068e:	e6f8      	b.n	8000482 <__udivmoddi4+0x92>
 8000690:	454b      	cmp	r3, r9
 8000692:	d2a9      	bcs.n	80005e8 <__udivmoddi4+0x1f8>
 8000694:	ebb9 0802 	subs.w	r8, r9, r2
 8000698:	eb64 0e0c 	sbc.w	lr, r4, ip
 800069c:	3801      	subs	r0, #1
 800069e:	e7a3      	b.n	80005e8 <__udivmoddi4+0x1f8>
 80006a0:	4646      	mov	r6, r8
 80006a2:	e7ea      	b.n	800067a <__udivmoddi4+0x28a>
 80006a4:	4620      	mov	r0, r4
 80006a6:	e794      	b.n	80005d2 <__udivmoddi4+0x1e2>
 80006a8:	4640      	mov	r0, r8
 80006aa:	e7d1      	b.n	8000650 <__udivmoddi4+0x260>
 80006ac:	46d0      	mov	r8, sl
 80006ae:	e77b      	b.n	80005a8 <__udivmoddi4+0x1b8>
 80006b0:	3b02      	subs	r3, #2
 80006b2:	4461      	add	r1, ip
 80006b4:	e732      	b.n	800051c <__udivmoddi4+0x12c>
 80006b6:	4630      	mov	r0, r6
 80006b8:	e709      	b.n	80004ce <__udivmoddi4+0xde>
 80006ba:	4464      	add	r4, ip
 80006bc:	3802      	subs	r0, #2
 80006be:	e742      	b.n	8000546 <__udivmoddi4+0x156>

080006c0 <__aeabi_idiv0>:
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop

080006c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006c4:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
    /*****************第1步:创建神经网络对象**********************/
    struct layer * Network = NULL;
    Network = OpenNNA_CreateNetwork();
 80006c6:	f003 fb8d 	bl	8003de4 <OpenNNA_CreateNetwork>
    OpenNNA_Demo_Conv_OpenNNAPaper(Network);
  for(;;)
  {
	  memset(RunTimeInfo,0,400);
 80006ca:	4c0c      	ldr	r4, [pc, #48]	; (80006fc <StartDefaultTask+0x38>)
	  //OpenNNA_Demo_Dense_Mnist();
	  OpenNNA_Demo_Conv_OpenNNAPaper_Predict(Network);
	  //printf("Free RTOS Test Task end!\r\n");
      vTaskGetRunTimeStats(RunTimeInfo);
      //printf("Task Name\t\t\tRun Time\t\t\trun(%)\r\n");
      printf("%s\r\n",RunTimeInfo);
 80006cc:	4e0c      	ldr	r6, [pc, #48]	; (8000700 <StartDefaultTask+0x3c>)
    Network = OpenNNA_CreateNetwork();
 80006ce:	4605      	mov	r5, r0
    OpenNNA_Demo_Conv_OpenNNAPaper(Network);
 80006d0:	f003 fcc0 	bl	8004054 <OpenNNA_Demo_Conv_OpenNNAPaper>
	  memset(RunTimeInfo,0,400);
 80006d4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80006d8:	2100      	movs	r1, #0
 80006da:	4620      	mov	r0, r4
 80006dc:	f006 fe42 	bl	8007364 <memset>
	  OpenNNA_Demo_Conv_OpenNNAPaper_Predict(Network);
 80006e0:	4628      	mov	r0, r5
 80006e2:	f003 fe4b 	bl	800437c <OpenNNA_Demo_Conv_OpenNNAPaper_Predict>
      vTaskGetRunTimeStats(RunTimeInfo);
 80006e6:	4620      	mov	r0, r4
 80006e8:	f006 f8e4 	bl	80068b4 <vTaskGetRunTimeStats>
      printf("%s\r\n",RunTimeInfo);
 80006ec:	4621      	mov	r1, r4
 80006ee:	4630      	mov	r0, r6
 80006f0:	f007 fa84 	bl	8007bfc <iprintf>
      osDelay(1);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f004 fcb3 	bl	8005060 <osDelay>
  for(;;)
 80006fa:	e7eb      	b.n	80006d4 <StartDefaultTask+0x10>
 80006fc:	2404e4d8 	.word	0x2404e4d8
 8000700:	0800a418 	.word	0x0800a418

08000704 <_write>:
{
 8000704:	b508      	push	{r3, lr}
	 if(HAL_UART_Transmit(&huart3,ptr,len,0xffff) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <_write+0x18>)
 8000708:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070c:	b292      	uxth	r2, r2
 800070e:	f003 f987 	bl	8003a20 <HAL_UART_Transmit>
 8000712:	b108      	cbz	r0, 8000718 <_write+0x14>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000714:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000716:	e7fe      	b.n	8000716 <_write+0x12>
}
 8000718:	bd08      	pop	{r3, pc}
 800071a:	bf00      	nop
 800071c:	2404e6b8 	.word	0x2404e6b8

08000720 <SystemClock_Config>:
{
 8000720:	b510      	push	{r4, lr}
 8000722:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000724:	224c      	movs	r2, #76	; 0x4c
 8000726:	2100      	movs	r1, #0
 8000728:	a80a      	add	r0, sp, #40	; 0x28
 800072a:	f006 fe1b 	bl	8007364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072e:	2220      	movs	r2, #32
 8000730:	2100      	movs	r1, #0
 8000732:	a802      	add	r0, sp, #8
 8000734:	f006 fe16 	bl	8007364 <memset>
  RCC->CKGAENR = 0xFFFFFFFF;
 8000738:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <SystemClock_Config+0xc8>)
 800073a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800073e:	2004      	movs	r0, #4
  RCC->CKGAENR = 0xFFFFFFFF;
 8000740:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000744:	f000 fd74 	bl	8001230 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000748:	4a28      	ldr	r2, [pc, #160]	; (80007ec <SystemClock_Config+0xcc>)
 800074a:	2300      	movs	r3, #0
 800074c:	9301      	str	r3, [sp, #4]
 800074e:	6993      	ldr	r3, [r2, #24]
 8000750:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000754:	6193      	str	r3, [r2, #24]
 8000756:	6993      	ldr	r3, [r2, #24]
 8000758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075c:	9301      	str	r3, [sp, #4]
 800075e:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000760:	6993      	ldr	r3, [r2, #24]
 8000762:	049b      	lsls	r3, r3, #18
 8000764:	d5fc      	bpl.n	8000760 <SystemClock_Config+0x40>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000766:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000768:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800076a:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLN = 70;
 800076c:	2446      	movs	r4, #70	; 0x46
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800076e:	9110      	str	r1, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000772:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000774:	210c      	movs	r1, #12
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000776:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000778:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLN = 70;
 800077a:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800077c:	921c      	str	r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800077e:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80007d0 <SystemClock_Config+0xb0>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000782:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000786:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000788:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800078c:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000790:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	f000 fe0f 	bl	80013b4 <HAL_RCC_OscConfig>
 8000796:	b108      	cbz	r0, 800079c <SystemClock_Config+0x7c>
 8000798:	b672      	cpsid	i
  while (1)
 800079a:	e7fe      	b.n	800079a <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80007d8 <SystemClock_Config+0xb8>
 80007a0:	2200      	movs	r2, #0
 80007a2:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007a4:	a802      	add	r0, sp, #8
 80007a6:	2107      	movs	r1, #7
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80007ac:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80007e0 <SystemClock_Config+0xc0>
 80007b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80007b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007b8:	2340      	movs	r3, #64	; 0x40
 80007ba:	ed8d 7b06 	vstr	d7, [sp, #24]
 80007be:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007c2:	f001 f95d 	bl	8001a80 <HAL_RCC_ClockConfig>
 80007c6:	b108      	cbz	r0, 80007cc <SystemClock_Config+0xac>
 80007c8:	b672      	cpsid	i
  while (1)
 80007ca:	e7fe      	b.n	80007ca <SystemClock_Config+0xaa>
}
 80007cc:	b01e      	add	sp, #120	; 0x78
 80007ce:	bd10      	pop	{r4, pc}
 80007d0:	00000021 	.word	0x00000021
 80007d4:	00050000 	.word	0x00050000
 80007d8:	0000003f 	.word	0x0000003f
 80007dc:	00000003 	.word	0x00000003
 80007e0:	00000040 	.word	0x00000040
 80007e4:	00000040 	.word	0x00000040
 80007e8:	58024400 	.word	0x58024400
 80007ec:	58024800 	.word	0x58024800

080007f0 <main>:
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b092      	sub	sp, #72	; 0x48
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	2400      	movs	r4, #0
  HAL_Init();
 80007f6:	f000 fb27 	bl	8000e48 <HAL_Init>
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80007fa:	2600      	movs	r6, #0
  SystemClock_Config();
 80007fc:	f7ff ff90 	bl	8000720 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000800:	4b99      	ldr	r3, [pc, #612]	; (8000a68 <main+0x278>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000804:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000808:	4622      	mov	r2, r4
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800080a:	2700      	movs	r7, #0
  huart3.Instance = USART3;
 800080c:	4d97      	ldr	r5, [pc, #604]	; (8000a6c <main+0x27c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8000812:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 800081a:	f040 0004 	orr.w	r0, r0, #4
 800081e:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
 8000822:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 8000826:	f000 0004 	and.w	r0, r0, #4
 800082a:	9001      	str	r0, [sp, #4]
 800082c:	9801      	ldr	r0, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800082e:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 8000832:	f040 0020 	orr.w	r0, r0, #32
 8000836:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
 800083a:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 800083e:	f000 0020 	and.w	r0, r0, #32
 8000842:	9002      	str	r0, [sp, #8]
 8000844:	9802      	ldr	r0, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 800084a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800084e:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
 8000852:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 8000856:	f000 0080 	and.w	r0, r0, #128	; 0x80
 800085a:	9003      	str	r0, [sp, #12]
 800085c:	9803      	ldr	r0, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 8000862:	f040 0002 	orr.w	r0, r0, #2
 8000866:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
 800086a:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 800086e:	f000 0002 	and.w	r0, r0, #2
 8000872:	9004      	str	r0, [sp, #16]
 8000874:	9804      	ldr	r0, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000876:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 800087a:	f040 0008 	orr.w	r0, r0, #8
 800087e:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
 8000882:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 8000886:	f000 0008 	and.w	r0, r0, #8
 800088a:	9005      	str	r0, [sp, #20]
 800088c:	9805      	ldr	r0, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800088e:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 8000892:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8000896:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
 800089a:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 800089e:	f000 0040 	and.w	r0, r0, #64	; 0x40
 80008a2:	9006      	str	r0, [sp, #24]
 80008a4:	9806      	ldr	r0, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 80008aa:	f040 0001 	orr.w	r0, r0, #1
 80008ae:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
 80008b2:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 80008b6:	f000 0001 	and.w	r0, r0, #1
 80008ba:	9007      	str	r0, [sp, #28]
 80008bc:	9807      	ldr	r0, [sp, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008be:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 80008c2:	f040 0010 	orr.w	r0, r0, #16
 80008c6:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
 80008ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008ce:	4868      	ldr	r0, [pc, #416]	; (8000a70 <main+0x280>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008d0:	f003 0310 	and.w	r3, r3, #16
 80008d4:	9308      	str	r3, [sp, #32]
 80008d6:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008d8:	f000 fca6 	bl	8001228 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008dc:	4622      	mov	r2, r4
 80008de:	f244 0101 	movw	r1, #16385	; 0x4001
 80008e2:	4864      	ldr	r0, [pc, #400]	; (8000a74 <main+0x284>)
 80008e4:	f000 fca0 	bl	8001228 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008e8:	4622      	mov	r2, r4
 80008ea:	2102      	movs	r1, #2
 80008ec:	4862      	ldr	r0, [pc, #392]	; (8000a78 <main+0x288>)
 80008ee:	f000 fc9b 	bl	8001228 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80008f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008f6:	2300      	movs	r3, #0
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f8:	a90c      	add	r1, sp, #48	; 0x30
 80008fa:	4860      	ldr	r0, [pc, #384]	; (8000a7c <main+0x28c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = B1_Pin;
 80008fe:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000902:	f000 fb57 	bl	8000fb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000906:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800090a:	2301      	movs	r3, #1
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800090c:	a90c      	add	r1, sp, #48	; 0x30
 800090e:	4858      	ldr	r0, [pc, #352]	; (8000a70 <main+0x280>)
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000910:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8000914:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000918:	f000 fb4c 	bl	8000fb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800091c:	f244 0201 	movw	r2, #16385	; 0x4001
 8000920:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000922:	a90c      	add	r1, sp, #48	; 0x30
 8000924:	4853      	ldr	r0, [pc, #332]	; (8000a74 <main+0x284>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000926:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800092a:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092e:	f000 fb41 	bl	8000fb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000932:	2280      	movs	r2, #128	; 0x80
 8000934:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000938:	a90c      	add	r1, sp, #48	; 0x30
 800093a:	4851      	ldr	r0, [pc, #324]	; (8000a80 <main+0x290>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800093e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000942:	f000 fb37 	bl	8000fb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800094a:	2300      	movs	r3, #0
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800094c:	a90c      	add	r1, sp, #48	; 0x30
 800094e:	484d      	ldr	r0, [pc, #308]	; (8000a84 <main+0x294>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000952:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000956:	f000 fb2d 	bl	8000fb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800095a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800095e:	2302      	movs	r3, #2
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000960:	a90c      	add	r1, sp, #48	; 0x30
 8000962:	4848      	ldr	r0, [pc, #288]	; (8000a84 <main+0x294>)
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000964:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000968:	230a      	movs	r3, #10
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800096a:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800096e:	9310      	str	r3, [sp, #64]	; 0x40
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000970:	f000 fb20 	bl	8000fb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000974:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000978:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	a90c      	add	r1, sp, #48	; 0x30
 800097c:	4841      	ldr	r0, [pc, #260]	; (8000a84 <main+0x294>)
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 800097e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8000982:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f000 fb15 	bl	8000fb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 800098a:	2202      	movs	r2, #2
 800098c:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800098e:	483a      	ldr	r0, [pc, #232]	; (8000a78 <main+0x288>)
 8000990:	a90c      	add	r1, sp, #48	; 0x30
  GPIO_InitStruct.Pin = LD2_Pin;
 8000992:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8000996:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800099a:	f000 fb0b 	bl	8000fb4 <HAL_GPIO_Init>
  huart3.Init.BaudRate = 115200;
 800099e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart3.Instance = USART3;
 80009a2:	4a39      	ldr	r2, [pc, #228]	; (8000a88 <main+0x298>)
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009a4:	4628      	mov	r0, r5
  huart3.Init.Parity = UART_PARITY_NONE;
 80009a6:	612c      	str	r4, [r5, #16]
  huart3.Init.BaudRate = 115200;
 80009a8:	e9c5 2300 	strd	r2, r3, [r5]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009ac:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009ae:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009b2:	e9c5 3405 	strd	r3, r4, [r5, #20]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b6:	e9c5 4407 	strd	r4, r4, [r5, #28]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ba:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009be:	f003 f8fb 	bl	8003bb8 <HAL_UART_Init>
 80009c2:	b108      	cbz	r0, 80009c8 <main+0x1d8>
 80009c4:	b672      	cpsid	i
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <main+0x1d6>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c8:	4601      	mov	r1, r0
 80009ca:	4628      	mov	r0, r5
 80009cc:	f003 f97e 	bl	8003ccc <HAL_UARTEx_SetTxFifoThreshold>
 80009d0:	b108      	cbz	r0, 80009d6 <main+0x1e6>
 80009d2:	b672      	cpsid	i
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <main+0x1e4>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d6:	4601      	mov	r1, r0
 80009d8:	4628      	mov	r0, r5
 80009da:	f003 f9b9 	bl	8003d50 <HAL_UARTEx_SetRxFifoThreshold>
 80009de:	b108      	cbz	r0, 80009e4 <main+0x1f4>
 80009e0:	b672      	cpsid	i
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <main+0x1f2>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009e4:	4628      	mov	r0, r5
 80009e6:	f003 f953 	bl	8003c90 <HAL_UARTEx_DisableFifoMode>
 80009ea:	4603      	mov	r3, r0
 80009ec:	b108      	cbz	r0, 80009f2 <main+0x202>
 80009ee:	b672      	cpsid	i
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <main+0x200>
  htim3.Instance = TIM3;
 80009f2:	4c26      	ldr	r4, [pc, #152]	; (8000a8c <main+0x29c>)
  htim3.Init.Prescaler = 280-1;
 80009f4:	f240 1217 	movw	r2, #279	; 0x117
  htim3.Instance = TIM3;
 80009f8:	4925      	ldr	r1, [pc, #148]	; (8000a90 <main+0x2a0>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fa:	9009      	str	r0, [sp, #36]	; 0x24
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fc:	60a0      	str	r0, [r4, #8]
  htim3.Init.Prescaler = 280-1;
 80009fe:	e9c4 1200 	strd	r1, r2, [r4]
  htim3.Init.Period = 50-1;
 8000a02:	2131      	movs	r1, #49	; 0x31
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a04:	2280      	movs	r2, #128	; 0x80
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a06:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 8000a0a:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  htim3.Init.Period = 50-1;
 8000a0e:	e9c4 1003 	strd	r1, r0, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a12:	4620      	mov	r0, r4
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a14:	61a2      	str	r2, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a16:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a1a:	f002 f99d 	bl	8002d58 <HAL_TIM_Base_Init>
 8000a1e:	b108      	cbz	r0, 8000a24 <main+0x234>
 8000a20:	b672      	cpsid	i
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <main+0x232>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a28:	a90c      	add	r1, sp, #48	; 0x30
 8000a2a:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a2c:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a2e:	f002 faa5 	bl	8002f7c <HAL_TIM_ConfigClockSource>
 8000a32:	4603      	mov	r3, r0
 8000a34:	b108      	cbz	r0, 8000a3a <main+0x24a>
 8000a36:	b672      	cpsid	i
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <main+0x248>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a3a:	4620      	mov	r0, r4
 8000a3c:	a909      	add	r1, sp, #36	; 0x24
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3e:	9309      	str	r3, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a40:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a42:	f002 fc27 	bl	8003294 <HAL_TIMEx_MasterConfigSynchronization>
 8000a46:	4604      	mov	r4, r0
 8000a48:	b108      	cbz	r0, 8000a4e <main+0x25e>
 8000a4a:	b672      	cpsid	i
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <main+0x25c>
  osKernelInitialize();
 8000a4e:	f004 fa91 	bl	8004f74 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000a52:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <main+0x2a4>)
 8000a54:	4621      	mov	r1, r4
 8000a56:	4810      	ldr	r0, [pc, #64]	; (8000a98 <main+0x2a8>)
 8000a58:	f004 fab8 	bl	8004fcc <osThreadNew>
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <main+0x2ac>)
 8000a5e:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000a60:	f004 fa9a 	bl	8004f98 <osKernelStart>
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <main+0x274>
 8000a66:	bf00      	nop
 8000a68:	58024400 	.word	0x58024400
 8000a6c:	2404e6b8 	.word	0x2404e6b8
 8000a70:	58021400 	.word	0x58021400
 8000a74:	58020400 	.word	0x58020400
 8000a78:	58021000 	.word	0x58021000
 8000a7c:	58020800 	.word	0x58020800
 8000a80:	58021800 	.word	0x58021800
 8000a84:	58020000 	.word	0x58020000
 8000a88:	40004800 	.word	0x40004800
 8000a8c:	2404e66c 	.word	0x2404e66c
 8000a90:	40000400 	.word	0x40000400
 8000a94:	0800a42c 	.word	0x0800a42c
 8000a98:	080006c5 	.word	0x080006c5
 8000a9c:	2404e668 	.word	0x2404e668

08000aa0 <configureTimerForRunTimeStats>:
{
 8000aa0:	b508      	push	{r3, lr}
	HAL_TIM_Base_Start_IT(&htim3);
 8000aa2:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <configureTimerForRunTimeStats+0x14>)
 8000aa4:	f002 fa0e 	bl	8002ec4 <HAL_TIM_Base_Start_IT>
	FreeRTOSRunTimeTicks=0;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <configureTimerForRunTimeStats+0x18>)
 8000aaa:	2000      	movs	r0, #0
 8000aac:	2100      	movs	r1, #0
 8000aae:	e9c3 0100 	strd	r0, r1, [r3]
}
 8000ab2:	bd08      	pop	{r3, pc}
 8000ab4:	2404e66c 	.word	0x2404e66c
 8000ab8:	2404e4d0 	.word	0x2404e4d0

08000abc <getRunTimeCounterValue>:
return FreeRTOSRunTimeTicks;
 8000abc:	4b01      	ldr	r3, [pc, #4]	; (8000ac4 <getRunTimeCounterValue+0x8>)
 8000abe:	e9d3 0100 	ldrd	r0, r1, [r3]
}
 8000ac2:	4770      	bx	lr
 8000ac4:	2404e4d0 	.word	0x2404e4d0

08000ac8 <HAL_TIM_PeriodElapsedCallback>:
    if (htim == (&htim3))
 8000ac8:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aca:	4283      	cmp	r3, r0
 8000acc:	d000      	beq.n	8000ad0 <HAL_TIM_PeriodElapsedCallback+0x8>
 8000ace:	4770      	bx	lr
{
 8000ad0:	b410      	push	{r4}
    	FreeRTOSRunTimeTicks++;
 8000ad2:	4c06      	ldr	r4, [pc, #24]	; (8000aec <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000ad4:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000ad8:	1c50      	adds	r0, r2, #1
 8000ada:	f143 0100 	adc.w	r1, r3, #0
 8000ade:	e9c4 0100 	strd	r0, r1, [r4]
}
 8000ae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	2404e66c 	.word	0x2404e66c
 8000aec:	2404e4d0 	.word	0x2404e4d0

08000af0 <Error_Handler>:
 8000af0:	b672      	cpsid	i
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <Error_Handler+0x2>

08000af4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af4:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <HAL_MspInit+0x30>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	210f      	movs	r1, #15
 8000afa:	f06f 0001 	mvn.w	r0, #1
{
 8000afe:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b00:	f8d3 4154 	ldr.w	r4, [r3, #340]	; 0x154
{
 8000b04:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b06:	f044 0402 	orr.w	r4, r4, #2
 8000b0a:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
 8000b0e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	9301      	str	r3, [sp, #4]
 8000b18:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1a:	b003      	add	sp, #12
 8000b1c:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b20:	f000 b9e6 	b.w	8000ef0 <HAL_NVIC_SetPriority>
 8000b24:	58024400 	.word	0x58024400

08000b28 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <HAL_TIM_Base_MspInit+0x40>)
 8000b2a:	6802      	ldr	r2, [r0, #0]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d000      	beq.n	8000b32 <HAL_TIM_Base_MspInit+0xa>
 8000b30:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <HAL_TIM_Base_MspInit+0x44>)
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000b34:	201d      	movs	r0, #29
 8000b36:	2200      	movs	r2, #0
 8000b38:	2105      	movs	r1, #5
{
 8000b3a:	b510      	push	{r4, lr}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b3c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
{
 8000b40:	b082      	sub	sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b42:	f044 0402 	orr.w	r4, r4, #2
 8000b46:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8000b4a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	9301      	str	r3, [sp, #4]
 8000b54:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000b56:	f000 f9cb 	bl	8000ef0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b5a:	201d      	movs	r0, #29
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b5c:	b002      	add	sp, #8
 8000b5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b62:	f000 ba03 	b.w	8000f6c <HAL_NVIC_EnableIRQ>
 8000b66:	bf00      	nop
 8000b68:	40000400 	.word	0x40000400
 8000b6c:	58024400 	.word	0x58024400

08000b70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b70:	b510      	push	{r4, lr}
 8000b72:	b0b6      	sub	sp, #216	; 0xd8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	2100      	movs	r1, #0
{
 8000b76:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b78:	22b8      	movs	r2, #184	; 0xb8
 8000b7a:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	9106      	str	r1, [sp, #24]
 8000b7e:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000b82:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b86:	f006 fbed 	bl	8007364 <memset>
  if(huart->Instance==USART3)
 8000b8a:	4b21      	ldr	r3, [pc, #132]	; (8000c10 <HAL_UART_MspInit+0xa0>)
 8000b8c:	6822      	ldr	r2, [r4, #0]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d001      	beq.n	8000b96 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b92:	b036      	add	sp, #216	; 0xd8
 8000b94:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b96:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b98:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b9a:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b9c:	f001 fa5c 	bl	8002058 <HAL_RCCEx_PeriphCLKConfig>
 8000ba0:	bb40      	cbnz	r0, 8000bf4 <HAL_UART_MspInit+0x84>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <HAL_UART_MspInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ba4:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba6:	a902      	add	r1, sp, #8
 8000ba8:	481b      	ldr	r0, [pc, #108]	; (8000c18 <HAL_UART_MspInit+0xa8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8000baa:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8000bae:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000bb2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8000bb6:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8000bba:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000bbe:	9200      	str	r2, [sp, #0]
 8000bc0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8000bc6:	f042 0208 	orr.w	r2, r2, #8
 8000bca:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8000bce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bd2:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd4:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000bd8:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8000c00 <HAL_UART_MspInit+0x90>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bdc:	9301      	str	r3, [sp, #4]
 8000bde:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000be0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000be4:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8000c08 <HAL_UART_MspInit+0x98>
 8000be8:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bec:	f000 f9e2 	bl	8000fb4 <HAL_GPIO_Init>
}
 8000bf0:	b036      	add	sp, #216	; 0xd8
 8000bf2:	bd10      	pop	{r4, pc}
      Error_Handler();
 8000bf4:	f7ff ff7c 	bl	8000af0 <Error_Handler>
 8000bf8:	e7d3      	b.n	8000ba2 <HAL_UART_MspInit+0x32>
 8000bfa:	bf00      	nop
 8000bfc:	f3af 8000 	nop.w
 8000c00:	00000300 	.word	0x00000300
 8000c04:	00000002 	.word	0x00000002
	...
 8000c10:	40004800 	.word	0x40004800
 8000c14:	58024400 	.word	0x58024400
 8000c18:	58020c00 	.word	0x58020c00

08000c1c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <NMI_Handler>
 8000c1e:	bf00      	nop

08000c20 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <HardFault_Handler>
 8000c22:	bf00      	nop

08000c24 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <MemManage_Handler>
 8000c26:	bf00      	nop

08000c28 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <BusFault_Handler>
 8000c2a:	bf00      	nop

08000c2c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <UsageFault_Handler>
 8000c2e:	bf00      	nop

08000c30 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c36:	f000 f937 	bl	8000ea8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c3a:	f005 fde5 	bl	8006808 <xTaskGetSchedulerState>
 8000c3e:	2801      	cmp	r0, #1
 8000c40:	d100      	bne.n	8000c44 <SysTick_Handler+0x10>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c42:	bd08      	pop	{r3, pc}
 8000c44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 8000c48:	f006 b96c 	b.w	8006f24 <xPortSysTickHandler>

08000c4c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c4c:	4801      	ldr	r0, [pc, #4]	; (8000c54 <TIM3_IRQHandler+0x8>)
 8000c4e:	f002 ba69 	b.w	8003124 <HAL_TIM_IRQHandler>
 8000c52:	bf00      	nop
 8000c54:	2404e66c 	.word	0x2404e66c

08000c58 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000c58:	2001      	movs	r0, #1
 8000c5a:	4770      	bx	lr

08000c5c <_kill>:

int _kill(int pid, int sig)
{
 8000c5c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000c5e:	f006 fb49 	bl	80072f4 <__errno>
 8000c62:	2216      	movs	r2, #22
 8000c64:	4603      	mov	r3, r0
	return -1;
}
 8000c66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	errno = EINVAL;
 8000c6a:	601a      	str	r2, [r3, #0]
}
 8000c6c:	bd08      	pop	{r3, pc}
 8000c6e:	bf00      	nop

08000c70 <_exit>:

void _exit (int status)
{
 8000c70:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000c72:	f006 fb3f 	bl	80072f4 <__errno>
 8000c76:	2316      	movs	r3, #22
 8000c78:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8000c7a:	e7fe      	b.n	8000c7a <_exit+0xa>

08000c7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c7c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7e:	1e16      	subs	r6, r2, #0
 8000c80:	dd07      	ble.n	8000c92 <_read+0x16>
 8000c82:	460c      	mov	r4, r1
 8000c84:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8000c86:	f3af 8000 	nop.w
 8000c8a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d1f9      	bne.n	8000c86 <_read+0xa>
	}

return len;
}
 8000c92:	4630      	mov	r0, r6
 8000c94:	bd70      	pop	{r4, r5, r6, pc}
 8000c96:	bf00      	nop

08000c98 <_close>:
}

int _close(int file)
{
	return -1;
}
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000ca0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8000ca4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000ca6:	604b      	str	r3, [r1, #4]
}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000cac:	2001      	movs	r0, #1
 8000cae:	4770      	bx	lr

08000cb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	4770      	bx	lr

08000cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb4:	b538      	push	{r3, r4, r5, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb6:	4c0d      	ldr	r4, [pc, #52]	; (8000cec <_sbrk+0x38>)
{
 8000cb8:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cba:	490d      	ldr	r1, [pc, #52]	; (8000cf0 <_sbrk+0x3c>)
 8000cbc:	4d0d      	ldr	r5, [pc, #52]	; (8000cf4 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8000cbe:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cc0:	1b49      	subs	r1, r1, r5
  if (NULL == __sbrk_heap_end)
 8000cc2:	b12a      	cbz	r2, 8000cd0 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cc4:	4413      	add	r3, r2
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d808      	bhi.n	8000cdc <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000cca:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 8000ccc:	6023      	str	r3, [r4, #0]
}
 8000cce:	bd38      	pop	{r3, r4, r5, pc}
    __sbrk_heap_end = &_end;
 8000cd0:	4809      	ldr	r0, [pc, #36]	; (8000cf8 <_sbrk+0x44>)
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000cd6:	4413      	add	r3, r2
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d9f6      	bls.n	8000cca <_sbrk+0x16>
    errno = ENOMEM;
 8000cdc:	f006 fb0a 	bl	80072f4 <__errno>
 8000ce0:	230c      	movs	r3, #12
    return (void *)-1;
 8000ce2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    errno = ENOMEM;
 8000ce6:	6003      	str	r3, [r0, #0]
}
 8000ce8:	4610      	mov	r0, r2
 8000cea:	bd38      	pop	{r3, r4, r5, pc}
 8000cec:	2404e748 	.word	0x2404e748
 8000cf0:	24100000 	.word	0x24100000
 8000cf4:	00000400 	.word	0x00000400
 8000cf8:	240684f8 	.word	0x240684f8

08000cfc <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cfc:	4922      	ldr	r1, [pc, #136]	; (8000d88 <SystemInit+0x8c>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cfe:	4a23      	ldr	r2, [pc, #140]	; (8000d8c <SystemInit+0x90>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d00:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8000d08:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d0e:	6813      	ldr	r3, [r2, #0]
 8000d10:	f003 030f 	and.w	r3, r3, #15
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d805      	bhi.n	8000d24 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d18:	6813      	ldr	r3, [r2, #0]
 8000d1a:	f023 030f 	bic.w	r3, r3, #15
 8000d1e:	f043 0303 	orr.w	r3, r3, #3
 8000d22:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d24:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <SystemInit+0x94>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d26:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d28:	4a1a      	ldr	r2, [pc, #104]	; (8000d94 <SystemInit+0x98>)
  RCC->CR |= RCC_CR_HSION;
 8000d2a:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d2c:	4817      	ldr	r0, [pc, #92]	; (8000d8c <SystemInit+0x90>)
  RCC->CR |= RCC_CR_HSION;
 8000d2e:	f041 0101 	orr.w	r1, r1, #1
 8000d32:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000d34:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8000d36:	6819      	ldr	r1, [r3, #0]
 8000d38:	400a      	ands	r2, r1
 8000d3a:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d3c:	6803      	ldr	r3, [r0, #0]
 8000d3e:	f013 0f0c 	tst.w	r3, #12
 8000d42:	d005      	beq.n	8000d50 <SystemInit+0x54>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d44:	6803      	ldr	r3, [r0, #0]
 8000d46:	f023 030f 	bic.w	r3, r3, #15
 8000d4a:	f043 0303 	orr.w	r3, r3, #3
 8000d4e:	6003      	str	r3, [r0, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <SystemInit+0x94>)
 8000d52:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d54:	4910      	ldr	r1, [pc, #64]	; (8000d98 <SystemInit+0x9c>)
  RCC->PLLCKSELR = 0x02020200;
 8000d56:	4c11      	ldr	r4, [pc, #68]	; (8000d9c <SystemInit+0xa0>)
  RCC->PLLCFGR = 0x01FF0000;
 8000d58:	4811      	ldr	r0, [pc, #68]	; (8000da0 <SystemInit+0xa4>)
  RCC->CDCFGR1 = 0x00000000;
 8000d5a:	619a      	str	r2, [r3, #24]
  RCC->CDCFGR2 = 0x00000000;
 8000d5c:	61da      	str	r2, [r3, #28]
  RCC->SRDCFGR = 0x00000000;
 8000d5e:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000d60:	629c      	str	r4, [r3, #40]	; 0x28
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d62:	f243 04d2 	movw	r4, #12498	; 0x30d2
  RCC->PLLCFGR = 0x01FF0000;
 8000d66:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8000d68:	6319      	str	r1, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 8000d6a:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x01010280;
 8000d6c:	6399      	str	r1, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 8000d6e:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x01010280;
 8000d70:	6419      	str	r1, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8000d72:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8000d74:	6819      	ldr	r1, [r3, #0]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d76:	480b      	ldr	r0, [pc, #44]	; (8000da4 <SystemInit+0xa8>)
  RCC->CR &= 0xFFFBFFFFU;
 8000d78:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000d7c:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8000d7e:	661a      	str	r2, [r3, #96]	; 0x60
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d80:	6004      	str	r4, [r0, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00
 8000d8c:	52002000 	.word	0x52002000
 8000d90:	58024400 	.word	0x58024400
 8000d94:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d98:	01010280 	.word	0x01010280
 8000d9c:	02020200 	.word	0x02020200
 8000da0:	01ff0000 	.word	0x01ff0000
 8000da4:	52004000 	.word	0x52004000

08000da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dac:	f7ff ffa6 	bl	8000cfc <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000db2:	490d      	ldr	r1, [pc, #52]	; (8000de8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc8:	4c0a      	ldr	r4, [pc, #40]	; (8000df4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f006 fa93 	bl	8007300 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dda:	f7ff fd09 	bl	80007f0 <main>
  bx  lr
 8000dde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000de0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000de4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000de8:	2404e4ac 	.word	0x2404e4ac
  ldr r2, =_sidata
 8000dec:	0800b288 	.word	0x0800b288
  ldr r2, =_sbss
 8000df0:	2404e4b0 	.word	0x2404e4b0
  ldr r4, =_ebss
 8000df4:	240684f4 	.word	0x240684f4

08000df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC_IRQHandler>
	...

08000dfc <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <HAL_InitTick+0x40>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b90b      	cbnz	r3, 8000e06 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8000e02:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000e04:	4770      	bx	lr
{
 8000e06:	b510      	push	{r4, lr}
 8000e08:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e0e:	4a0c      	ldr	r2, [pc, #48]	; (8000e40 <HAL_InitTick+0x44>)
 8000e10:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e14:	6810      	ldr	r0, [r2, #0]
 8000e16:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e1a:	f000 f8b5 	bl	8000f88 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1e:	2c0f      	cmp	r4, #15
 8000e20:	d800      	bhi.n	8000e24 <HAL_InitTick+0x28>
 8000e22:	b108      	cbz	r0, 8000e28 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8000e24:	2001      	movs	r0, #1
}
 8000e26:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	4621      	mov	r1, r4
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e30:	f000 f85e 	bl	8000ef0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <HAL_InitTick+0x48>)
 8000e36:	2000      	movs	r0, #0
 8000e38:	601c      	str	r4, [r3, #0]
}
 8000e3a:	bd10      	pop	{r4, pc}
 8000e3c:	24000008 	.word	0x24000008
 8000e40:	24000000 	.word	0x24000000
 8000e44:	2400000c 	.word	0x2400000c

08000e48 <HAL_Init>:
{
 8000e48:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4a:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000e4c:	4c12      	ldr	r4, [pc, #72]	; (8000e98 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4e:	f000 f83d 	bl	8000ecc <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000e52:	f000 fd75 	bl	8001940 <HAL_RCC_GetSysClockFreq>
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <HAL_Init+0x54>)
 8000e58:	4911      	ldr	r1, [pc, #68]	; (8000ea0 <HAL_Init+0x58>)
 8000e5a:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000e5c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000e5e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000e62:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000e66:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000e68:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000e6a:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8000e6e:	490d      	ldr	r1, [pc, #52]	; (8000ea4 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000e70:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000e74:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000e76:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8000e7a:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e7c:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000e7e:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e80:	f7ff ffbc 	bl	8000dfc <HAL_InitTick>
 8000e84:	b110      	cbz	r0, 8000e8c <HAL_Init+0x44>
    return HAL_ERROR;
 8000e86:	2401      	movs	r4, #1
}
 8000e88:	4620      	mov	r0, r4
 8000e8a:	bd10      	pop	{r4, pc}
 8000e8c:	4604      	mov	r4, r0
  HAL_MspInit();
 8000e8e:	f7ff fe31 	bl	8000af4 <HAL_MspInit>
}
 8000e92:	4620      	mov	r0, r4
 8000e94:	bd10      	pop	{r4, pc}
 8000e96:	bf00      	nop
 8000e98:	24000004 	.word	0x24000004
 8000e9c:	58024400 	.word	0x58024400
 8000ea0:	0800a450 	.word	0x0800a450
 8000ea4:	24000000 	.word	0x24000000

08000ea8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000ea8:	4a03      	ldr	r2, [pc, #12]	; (8000eb8 <HAL_IncTick+0x10>)
 8000eaa:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <HAL_IncTick+0x14>)
 8000eac:	6811      	ldr	r1, [r2, #0]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	440b      	add	r3, r1
 8000eb2:	6013      	str	r3, [r2, #0]
}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	2404e74c 	.word	0x2404e74c
 8000ebc:	24000008 	.word	0x24000008

08000ec0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ec0:	4b01      	ldr	r3, [pc, #4]	; (8000ec8 <HAL_GetTick+0x8>)
 8000ec2:	6818      	ldr	r0, [r3, #0]
}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	2404e74c 	.word	0x2404e74c

08000ecc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ecc:	4906      	ldr	r1, [pc, #24]	; (8000ee8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ece:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed2:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed6:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000edc:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee0:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8000ee2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000ee4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00
 8000eec:	05fa0000 	.word	0x05fa0000

08000ef0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <HAL_NVIC_SetPriority+0x70>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef8:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000efa:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efe:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f02:	f1be 0f04 	cmp.w	lr, #4
 8000f06:	bf28      	it	cs
 8000f08:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0c:	f1bc 0f06 	cmp.w	ip, #6
 8000f10:	d91a      	bls.n	8000f48 <HAL_NVIC_SetPriority+0x58>
 8000f12:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f14:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f18:	fa0c fc03 	lsl.w	ip, ip, r3
 8000f1c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 8000f24:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f26:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000f2a:	ea21 010c 	bic.w	r1, r1, ip
 8000f2e:	fa01 f103 	lsl.w	r1, r1, r3
 8000f32:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000f36:	db0a      	blt.n	8000f4e <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f38:	0109      	lsls	r1, r1, #4
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <HAL_NVIC_SetPriority+0x74>)
 8000f3c:	b2c9      	uxtb	r1, r1
 8000f3e:	4403      	add	r3, r0
 8000f40:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f44:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f48:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	e7e8      	b.n	8000f20 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4e:	f000 000f 	and.w	r0, r0, #15
 8000f52:	0109      	lsls	r1, r1, #4
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <HAL_NVIC_SetPriority+0x78>)
 8000f56:	b2c9      	uxtb	r1, r1
 8000f58:	4403      	add	r3, r0
 8000f5a:	7619      	strb	r1, [r3, #24]
 8000f5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f60:	e000ed00 	.word	0xe000ed00
 8000f64:	e000e100 	.word	0xe000e100
 8000f68:	e000ecfc 	.word	0xe000ecfc

08000f6c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000f6c:	2800      	cmp	r0, #0
 8000f6e:	db07      	blt.n	8000f80 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f70:	2301      	movs	r3, #1
 8000f72:	f000 011f 	and.w	r1, r0, #31
 8000f76:	4a03      	ldr	r2, [pc, #12]	; (8000f84 <HAL_NVIC_EnableIRQ+0x18>)
 8000f78:	0940      	lsrs	r0, r0, #5
 8000f7a:	408b      	lsls	r3, r1
 8000f7c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000e100 	.word	0xe000e100

08000f88 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f88:	1e43      	subs	r3, r0, #1
 8000f8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f8e:	d20c      	bcs.n	8000faa <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f90:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f94:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f96:	4906      	ldr	r1, [pc, #24]	; (8000fb0 <HAL_SYSTICK_Config+0x28>)
 8000f98:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9c:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9e:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa4:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa6:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000faa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fb8:	680c      	ldr	r4, [r1, #0]
{
 8000fba:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fbc:	2c00      	cmp	r4, #0
 8000fbe:	f000 80a6 	beq.w	800110e <HAL_GPIO_Init+0x15a>
 8000fc2:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc6:	4f8e      	ldr	r7, [pc, #568]	; (8001200 <HAL_GPIO_Init+0x24c>)
  uint32_t position = 0x00U;
 8000fc8:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8000fce:	ea12 0e04 	ands.w	lr, r2, r4
 8000fd2:	f000 8095 	beq.w	8001100 <HAL_GPIO_Init+0x14c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fd6:	684d      	ldr	r5, [r1, #4]
 8000fd8:	f005 0903 	and.w	r9, r5, #3
 8000fdc:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 8000fe0:	2e01      	cmp	r6, #1
 8000fe2:	f240 8097 	bls.w	8001114 <HAL_GPIO_Init+0x160>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe6:	f1b9 0f03 	cmp.w	r9, #3
 8000fea:	f040 80d1 	bne.w	8001190 <HAL_GPIO_Init+0x1dc>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fee:	fa09 f20c 	lsl.w	r2, r9, ip
 8000ff2:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 8000ff6:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ff8:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ffc:	ea06 0808 	and.w	r8, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001000:	ea42 0208 	orr.w	r2, r2, r8
      GPIOx->MODER = temp;
 8001004:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001006:	d07b      	beq.n	8001100 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001008:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800100c:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001010:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001014:	f042 0202 	orr.w	r2, r2, #2
 8001018:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800101c:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001020:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8001024:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 8001028:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800102c:	f002 0202 	and.w	r2, r2, #2
 8001030:	9201      	str	r2, [sp, #4]
 8001032:	9a01      	ldr	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001034:	220f      	movs	r2, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 8001036:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800103a:	fa02 f209 	lsl.w	r2, r2, r9
 800103e:	ea26 0202 	bic.w	r2, r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001042:	4e70      	ldr	r6, [pc, #448]	; (8001204 <HAL_GPIO_Init+0x250>)
 8001044:	42b0      	cmp	r0, r6
 8001046:	d029      	beq.n	800109c <HAL_GPIO_Init+0xe8>
 8001048:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800104c:	42b0      	cmp	r0, r6
 800104e:	f000 80ac 	beq.w	80011aa <HAL_GPIO_Init+0x1f6>
 8001052:	4e6d      	ldr	r6, [pc, #436]	; (8001208 <HAL_GPIO_Init+0x254>)
 8001054:	42b0      	cmp	r0, r6
 8001056:	f000 80ae 	beq.w	80011b6 <HAL_GPIO_Init+0x202>
 800105a:	4e6c      	ldr	r6, [pc, #432]	; (800120c <HAL_GPIO_Init+0x258>)
 800105c:	42b0      	cmp	r0, r6
 800105e:	f000 809e 	beq.w	800119e <HAL_GPIO_Init+0x1ea>
 8001062:	4e6b      	ldr	r6, [pc, #428]	; (8001210 <HAL_GPIO_Init+0x25c>)
 8001064:	42b0      	cmp	r0, r6
 8001066:	f000 80b2 	beq.w	80011ce <HAL_GPIO_Init+0x21a>
 800106a:	4e6a      	ldr	r6, [pc, #424]	; (8001214 <HAL_GPIO_Init+0x260>)
 800106c:	42b0      	cmp	r0, r6
 800106e:	f000 80b4 	beq.w	80011da <HAL_GPIO_Init+0x226>
 8001072:	4e69      	ldr	r6, [pc, #420]	; (8001218 <HAL_GPIO_Init+0x264>)
 8001074:	42b0      	cmp	r0, r6
 8001076:	f000 80a4 	beq.w	80011c2 <HAL_GPIO_Init+0x20e>
 800107a:	4e68      	ldr	r6, [pc, #416]	; (800121c <HAL_GPIO_Init+0x268>)
 800107c:	42b0      	cmp	r0, r6
 800107e:	f000 80b2 	beq.w	80011e6 <HAL_GPIO_Init+0x232>
 8001082:	4e67      	ldr	r6, [pc, #412]	; (8001220 <HAL_GPIO_Init+0x26c>)
 8001084:	42b0      	cmp	r0, r6
 8001086:	f000 80b4 	beq.w	80011f2 <HAL_GPIO_Init+0x23e>
 800108a:	4e66      	ldr	r6, [pc, #408]	; (8001224 <HAL_GPIO_Init+0x270>)
 800108c:	42b0      	cmp	r0, r6
 800108e:	bf0c      	ite	eq
 8001090:	2609      	moveq	r6, #9
 8001092:	260a      	movne	r6, #10
 8001094:	fa06 f909 	lsl.w	r9, r6, r9
 8001098:	ea42 0209 	orr.w	r2, r2, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 800109c:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010a4:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 80010a6:	ea6f 080e 	mvn.w	r8, lr
        temp = EXTI->RTSR1;
 80010aa:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80010ac:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80010b0:	bf54      	ite	pl
 80010b2:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 80010b6:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->RTSR1 = temp;
 80010ba:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010bc:	02aa      	lsls	r2, r5, #10
        temp = EXTI->FTSR1;
 80010be:	6876      	ldr	r6, [r6, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80010c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80010c4:	bf54      	ite	pl
 80010c6:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 80010ca:	ea4e 0606 	orrmi.w	r6, lr, r6
        EXTI->FTSR1 = temp;
 80010ce:	6056      	str	r6, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80010d0:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010d4:	03aa      	lsls	r2, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80010d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80010da:	bf54      	ite	pl
 80010dc:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 80010e0:	ea4e 0606 	orrmi.w	r6, lr, r6

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010e4:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80010e6:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 80010ea:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80010ee:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 80010f2:	bf54      	ite	pl
 80010f4:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 80010f8:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80010fc:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 8001100:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001102:	f10c 0c02 	add.w	ip, ip, #2
 8001106:	fa34 f203 	lsrs.w	r2, r4, r3
 800110a:	f47f af5e 	bne.w	8000fca <HAL_GPIO_Init+0x16>
  }
}
 800110e:	b003      	add	sp, #12
 8001110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001114:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 8001118:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800111a:	fa08 f80c 	lsl.w	r8, r8, ip
 800111e:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001122:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001124:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001128:	fa06 f60c 	lsl.w	r6, r6, ip
 800112c:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8001130:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001132:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 8001136:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800113a:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800113c:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001140:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8001142:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8001144:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001146:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800114a:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800114c:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001150:	fa06 f60c 	lsl.w	r6, r6, ip
 8001154:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 8001158:	fa09 f20c 	lsl.w	r2, r9, ip
 800115c:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115e:	f47f af4a 	bne.w	8000ff6 <HAL_GPIO_Init+0x42>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001162:	f003 0607 	and.w	r6, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001166:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800116a:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 800116e:	260f      	movs	r6, #15
 8001170:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8001174:	fa06 f60b 	lsl.w	r6, r6, fp
        temp = GPIOx->AFR[position >> 3U];
 8001178:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800117c:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001180:	690e      	ldr	r6, [r1, #16]
 8001182:	fa06 f60b 	lsl.w	r6, r6, fp
 8001186:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 800118a:	f8c9 6020 	str.w	r6, [r9, #32]
 800118e:	e732      	b.n	8000ff6 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001190:	f04f 0803 	mov.w	r8, #3
 8001194:	fa08 f80c 	lsl.w	r8, r8, ip
 8001198:	ea6f 0808 	mvn.w	r8, r8
 800119c:	e7d2      	b.n	8001144 <HAL_GPIO_Init+0x190>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800119e:	2603      	movs	r6, #3
 80011a0:	fa06 f909 	lsl.w	r9, r6, r9
 80011a4:	ea42 0209 	orr.w	r2, r2, r9
 80011a8:	e778      	b.n	800109c <HAL_GPIO_Init+0xe8>
 80011aa:	2601      	movs	r6, #1
 80011ac:	fa06 f909 	lsl.w	r9, r6, r9
 80011b0:	ea42 0209 	orr.w	r2, r2, r9
 80011b4:	e772      	b.n	800109c <HAL_GPIO_Init+0xe8>
 80011b6:	2602      	movs	r6, #2
 80011b8:	fa06 f909 	lsl.w	r9, r6, r9
 80011bc:	ea42 0209 	orr.w	r2, r2, r9
 80011c0:	e76c      	b.n	800109c <HAL_GPIO_Init+0xe8>
 80011c2:	2606      	movs	r6, #6
 80011c4:	fa06 f909 	lsl.w	r9, r6, r9
 80011c8:	ea42 0209 	orr.w	r2, r2, r9
 80011cc:	e766      	b.n	800109c <HAL_GPIO_Init+0xe8>
 80011ce:	2604      	movs	r6, #4
 80011d0:	fa06 f909 	lsl.w	r9, r6, r9
 80011d4:	ea42 0209 	orr.w	r2, r2, r9
 80011d8:	e760      	b.n	800109c <HAL_GPIO_Init+0xe8>
 80011da:	2605      	movs	r6, #5
 80011dc:	fa06 f909 	lsl.w	r9, r6, r9
 80011e0:	ea42 0209 	orr.w	r2, r2, r9
 80011e4:	e75a      	b.n	800109c <HAL_GPIO_Init+0xe8>
 80011e6:	2607      	movs	r6, #7
 80011e8:	fa06 f909 	lsl.w	r9, r6, r9
 80011ec:	ea42 0209 	orr.w	r2, r2, r9
 80011f0:	e754      	b.n	800109c <HAL_GPIO_Init+0xe8>
 80011f2:	2608      	movs	r6, #8
 80011f4:	fa06 f909 	lsl.w	r9, r6, r9
 80011f8:	ea42 0209 	orr.w	r2, r2, r9
 80011fc:	e74e      	b.n	800109c <HAL_GPIO_Init+0xe8>
 80011fe:	bf00      	nop
 8001200:	58024400 	.word	0x58024400
 8001204:	58020000 	.word	0x58020000
 8001208:	58020800 	.word	0x58020800
 800120c:	58020c00 	.word	0x58020c00
 8001210:	58021000 	.word	0x58021000
 8001214:	58021400 	.word	0x58021400
 8001218:	58021800 	.word	0x58021800
 800121c:	58021c00 	.word	0x58021c00
 8001220:	58022000 	.word	0x58022000
 8001224:	58022400 	.word	0x58022400

08001228 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001228:	b902      	cbnz	r2, 800122c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800122a:	0409      	lsls	r1, r1, #16
 800122c:	6181      	str	r1, [r0, #24]
  }
}
 800122e:	4770      	bx	lr

08001230 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001230:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001232:	4c1d      	ldr	r4, [pc, #116]	; (80012a8 <HAL_PWREx_ConfigSupply+0x78>)
{
 8001234:	4605      	mov	r5, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001236:	68e3      	ldr	r3, [r4, #12]
 8001238:	f003 0307 	and.w	r3, r3, #7
 800123c:	2b06      	cmp	r3, #6
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800123e:	68e3      	ldr	r3, [r4, #12]
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001240:	d005      	beq.n	800124e <HAL_PWREx_ConfigSupply+0x1e>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001242:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001246:	1a18      	subs	r0, r3, r0
 8001248:	bf18      	it	ne
 800124a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800124c:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800124e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001252:	4303      	orrs	r3, r0
 8001254:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8001256:	f7ff fe33 	bl	8000ec0 <HAL_GetTick>
 800125a:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800125c:	e005      	b.n	800126a <HAL_PWREx_ConfigSupply+0x3a>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800125e:	f7ff fe2f 	bl	8000ec0 <HAL_GetTick>
 8001262:	1b83      	subs	r3, r0, r6
 8001264:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001268:	d81b      	bhi.n	80012a2 <HAL_PWREx_ConfigSupply+0x72>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800126a:	6863      	ldr	r3, [r4, #4]
 800126c:	049a      	lsls	r2, r3, #18
 800126e:	d5f6      	bpl.n	800125e <HAL_PWREx_ConfigSupply+0x2e>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001270:	f1a5 031d 	sub.w	r3, r5, #29
 8001274:	2b01      	cmp	r3, #1
 8001276:	d905      	bls.n	8001284 <HAL_PWREx_ConfigSupply+0x54>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 8001278:	f1a5 002d 	sub.w	r0, r5, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800127c:	2801      	cmp	r0, #1
 800127e:	d901      	bls.n	8001284 <HAL_PWREx_ConfigSupply+0x54>
  return HAL_OK;
 8001280:	2000      	movs	r0, #0
}
 8001282:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 8001284:	f7ff fe1c 	bl	8000ec0 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001288:	4d07      	ldr	r5, [pc, #28]	; (80012a8 <HAL_PWREx_ConfigSupply+0x78>)
    tickstart = HAL_GetTick ();
 800128a:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800128c:	e005      	b.n	800129a <HAL_PWREx_ConfigSupply+0x6a>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800128e:	f7ff fe17 	bl	8000ec0 <HAL_GetTick>
 8001292:	1b00      	subs	r0, r0, r4
 8001294:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001298:	d803      	bhi.n	80012a2 <HAL_PWREx_ConfigSupply+0x72>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800129a:	68eb      	ldr	r3, [r5, #12]
 800129c:	03db      	lsls	r3, r3, #15
 800129e:	d5f6      	bpl.n	800128e <HAL_PWREx_ConfigSupply+0x5e>
 80012a0:	e7ee      	b.n	8001280 <HAL_PWREx_ConfigSupply+0x50>
      return HAL_ERROR;
 80012a2:	2001      	movs	r0, #1
}
 80012a4:	bd70      	pop	{r4, r5, r6, pc}
 80012a6:	bf00      	nop
 80012a8:	58024800 	.word	0x58024800

080012ac <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80012ac:	4b3b      	ldr	r3, [pc, #236]	; (800139c <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 80012ae:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80012b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80012b2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80012b4:	6add      	ldr	r5, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 80012b6:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80012ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80012bc:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 80012c0:	d038      	beq.n	8001334 <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80012c2:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80012c6:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80012ca:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80012ce:	fb05 f101 	mul.w	r1, r5, r1
 80012d2:	2a01      	cmp	r2, #1
 80012d4:	ee07 1a90 	vmov	s15, r1
 80012d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 80012dc:	d002      	beq.n	80012e4 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 80012de:	2a02      	cmp	r2, #2
 80012e0:	d04e      	beq.n	8001380 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 80012e2:	b34a      	cbz	r2, 8001338 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80012e4:	ee07 0a90 	vmov	s15, r0
 80012e8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80013a0 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 80012ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80012f6:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80013a4 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 80012fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012fe:	ee06 3a90 	vmov	s13, r3
 8001302:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8001306:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800130a:	ee76 6a85 	vadd.f32	s13, s13, s10
 800130e:	eee7 6a25 	vfma.f32	s13, s14, s11
 8001312:	ee66 6a26 	vmul.f32	s13, s12, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001316:	4b21      	ldr	r3, [pc, #132]	; (800139c <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800131e:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001320:	ee07 3a90 	vmov	s15, r3
 8001324:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800132c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001330:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8001334:	bc30      	pop	{r4, r5}
 8001336:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	0692      	lsls	r2, r2, #26
 800133c:	d527      	bpl.n	800138e <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800133e:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001340:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001344:	4a18      	ldr	r2, [pc, #96]	; (80013a8 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001346:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800134a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800134c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001354:	ed9f 5a13 	vldr	s10, [pc, #76]	; 80013a4 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8001358:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800135c:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800135e:	ee06 3a90 	vmov	s13, r3
 8001362:	ee05 2a90 	vmov	s11, r2
 8001366:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800136a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800136e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001372:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8001376:	eee7 6a05 	vfma.f32	s13, s14, s10
 800137a:	ee66 6a26 	vmul.f32	s13, s12, s13
 800137e:	e7ca      	b.n	8001316 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001380:	ee07 0a90 	vmov	s15, r0
 8001384:	eddf 6a09 	vldr	s13, [pc, #36]	; 80013ac <HAL_RCC_GetSysClockFreq.part.0+0x100>
 8001388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800138c:	e7b0      	b.n	80012f0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800138e:	ee07 0a90 	vmov	s15, r0
 8001392:	eddf 6a07 	vldr	s13, [pc, #28]	; 80013b0 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8001396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800139a:	e7a9      	b.n	80012f0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800139c:	58024400 	.word	0x58024400
 80013a0:	4a742400 	.word	0x4a742400
 80013a4:	39000000 	.word	0x39000000
 80013a8:	03d09000 	.word	0x03d09000
 80013ac:	4af42400 	.word	0x4af42400
 80013b0:	4c742400 	.word	0x4c742400

080013b4 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80013b4:	2800      	cmp	r0, #0
 80013b6:	f000 81ce 	beq.w	8001756 <HAL_RCC_OscConfig+0x3a2>
{
 80013ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013bc:	6803      	ldr	r3, [r0, #0]
 80013be:	4604      	mov	r4, r0
 80013c0:	07d9      	lsls	r1, r3, #31
 80013c2:	d53b      	bpl.n	800143c <HAL_RCC_OscConfig+0x88>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013c4:	4996      	ldr	r1, [pc, #600]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 80013c6:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013c8:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013ca:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80013ce:	2a10      	cmp	r2, #16
 80013d0:	f000 80fd 	beq.w	80015ce <HAL_RCC_OscConfig+0x21a>
 80013d4:	2a18      	cmp	r2, #24
 80013d6:	f000 80f5 	beq.w	80015c4 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013da:	6863      	ldr	r3, [r4, #4]
 80013dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e0:	d018      	beq.n	8001414 <HAL_RCC_OscConfig+0x60>
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 8154 	beq.w	8001690 <HAL_RCC_OscConfig+0x2dc>
 80013e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013ec:	f000 8254 	beq.w	8001898 <HAL_RCC_OscConfig+0x4e4>
 80013f0:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80013f4:	4b8a      	ldr	r3, [pc, #552]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	f000 8214 	beq.w	8001824 <HAL_RCC_OscConfig+0x470>
 80013fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	e004      	b.n	800141e <HAL_RCC_OscConfig+0x6a>
 8001414:	4a82      	ldr	r2, [pc, #520]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001416:	6813      	ldr	r3, [r2, #0]
 8001418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800141e:	f7ff fd4f 	bl	8000ec0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001422:	4e7f      	ldr	r6, [pc, #508]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
        tickstart = HAL_GetTick();
 8001424:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001426:	e005      	b.n	8001434 <HAL_RCC_OscConfig+0x80>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001428:	f7ff fd4a 	bl	8000ec0 <HAL_GetTick>
 800142c:	1b40      	subs	r0, r0, r5
 800142e:	2864      	cmp	r0, #100	; 0x64
 8001430:	f200 812c 	bhi.w	800168c <HAL_RCC_OscConfig+0x2d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001434:	6833      	ldr	r3, [r6, #0]
 8001436:	039b      	lsls	r3, r3, #14
 8001438:	d5f6      	bpl.n	8001428 <HAL_RCC_OscConfig+0x74>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800143a:	6823      	ldr	r3, [r4, #0]
 800143c:	079d      	lsls	r5, r3, #30
 800143e:	d47e      	bmi.n	800153e <HAL_RCC_OscConfig+0x18a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001440:	06d9      	lsls	r1, r3, #27
 8001442:	d528      	bpl.n	8001496 <HAL_RCC_OscConfig+0xe2>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001444:	4976      	ldr	r1, [pc, #472]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001446:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001448:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800144a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800144e:	2a08      	cmp	r2, #8
 8001450:	f000 80cd 	beq.w	80015ee <HAL_RCC_OscConfig+0x23a>
 8001454:	2a18      	cmp	r2, #24
 8001456:	f000 80c5 	beq.w	80015e4 <HAL_RCC_OscConfig+0x230>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800145a:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800145c:	4d70      	ldr	r5, [pc, #448]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 8152 	beq.w	8001708 <HAL_RCC_OscConfig+0x354>
        __HAL_RCC_CSI_ENABLE();
 8001464:	682b      	ldr	r3, [r5, #0]
 8001466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800146a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800146c:	f7ff fd28 	bl	8000ec0 <HAL_GetTick>
 8001470:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001472:	e005      	b.n	8001480 <HAL_RCC_OscConfig+0xcc>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001474:	f7ff fd24 	bl	8000ec0 <HAL_GetTick>
 8001478:	1b80      	subs	r0, r0, r6
 800147a:	2802      	cmp	r0, #2
 800147c:	f200 8106 	bhi.w	800168c <HAL_RCC_OscConfig+0x2d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001480:	682b      	ldr	r3, [r5, #0]
 8001482:	05db      	lsls	r3, r3, #23
 8001484:	d5f6      	bpl.n	8001474 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001486:	68eb      	ldr	r3, [r5, #12]
 8001488:	6a22      	ldr	r2, [r4, #32]
 800148a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800148e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001492:	60eb      	str	r3, [r5, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001494:	6823      	ldr	r3, [r4, #0]
 8001496:	071d      	lsls	r5, r3, #28
 8001498:	d516      	bpl.n	80014c8 <HAL_RCC_OscConfig+0x114>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800149a:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800149c:	4d60      	ldr	r5, [pc, #384]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 8110 	beq.w	80016c4 <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_LSI_ENABLE();
 80014a4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80014ac:	f7ff fd08 	bl	8000ec0 <HAL_GetTick>
 80014b0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014b2:	e005      	b.n	80014c0 <HAL_RCC_OscConfig+0x10c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b4:	f7ff fd04 	bl	8000ec0 <HAL_GetTick>
 80014b8:	1b80      	subs	r0, r0, r6
 80014ba:	2802      	cmp	r0, #2
 80014bc:	f200 80e6 	bhi.w	800168c <HAL_RCC_OscConfig+0x2d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014c0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80014c2:	0798      	lsls	r0, r3, #30
 80014c4:	d5f6      	bpl.n	80014b4 <HAL_RCC_OscConfig+0x100>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014c6:	6823      	ldr	r3, [r4, #0]
 80014c8:	069a      	lsls	r2, r3, #26
 80014ca:	d516      	bpl.n	80014fa <HAL_RCC_OscConfig+0x146>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80014cc:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 80014ce:	4d54      	ldr	r5, [pc, #336]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 8108 	beq.w	80016e6 <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_HSI48_ENABLE();
 80014d6:	682b      	ldr	r3, [r5, #0]
 80014d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014dc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80014de:	f7ff fcef 	bl	8000ec0 <HAL_GetTick>
 80014e2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014e4:	e005      	b.n	80014f2 <HAL_RCC_OscConfig+0x13e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80014e6:	f7ff fceb 	bl	8000ec0 <HAL_GetTick>
 80014ea:	1b80      	subs	r0, r0, r6
 80014ec:	2802      	cmp	r0, #2
 80014ee:	f200 80cd 	bhi.w	800168c <HAL_RCC_OscConfig+0x2d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014f2:	682b      	ldr	r3, [r5, #0]
 80014f4:	049f      	lsls	r7, r3, #18
 80014f6:	d5f6      	bpl.n	80014e6 <HAL_RCC_OscConfig+0x132>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f8:	6823      	ldr	r3, [r4, #0]
 80014fa:	0759      	lsls	r1, r3, #29
 80014fc:	f100 8087 	bmi.w	800160e <HAL_RCC_OscConfig+0x25a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001500:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001502:	b1d0      	cbz	r0, 800153a <HAL_RCC_OscConfig+0x186>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001504:	4d46      	ldr	r5, [pc, #280]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001506:	692b      	ldr	r3, [r5, #16]
 8001508:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800150c:	2b18      	cmp	r3, #24
 800150e:	f000 8195 	beq.w	800183c <HAL_RCC_OscConfig+0x488>
        __HAL_RCC_PLL_DISABLE();
 8001512:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001514:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001516:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800151a:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800151c:	f000 811d 	beq.w	800175a <HAL_RCC_OscConfig+0x3a6>
        tickstart = HAL_GetTick();
 8001520:	f7ff fcce 	bl	8000ec0 <HAL_GetTick>
 8001524:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001526:	e005      	b.n	8001534 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001528:	f7ff fcca 	bl	8000ec0 <HAL_GetTick>
 800152c:	1b00      	subs	r0, r0, r4
 800152e:	2802      	cmp	r0, #2
 8001530:	f200 80ac 	bhi.w	800168c <HAL_RCC_OscConfig+0x2d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001534:	682b      	ldr	r3, [r5, #0]
 8001536:	019b      	lsls	r3, r3, #6
 8001538:	d4f6      	bmi.n	8001528 <HAL_RCC_OscConfig+0x174>
  return HAL_OK;
 800153a:	2000      	movs	r0, #0
}
 800153c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800153e:	4a38      	ldr	r2, [pc, #224]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001540:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001542:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001544:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8001548:	d122      	bne.n	8001590 <HAL_RCC_OscConfig+0x1dc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800154a:	4b35      	ldr	r3, [pc, #212]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 800154c:	68e2      	ldr	r2, [r4, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	0759      	lsls	r1, r3, #29
 8001552:	d501      	bpl.n	8001558 <HAL_RCC_OscConfig+0x1a4>
 8001554:	2a00      	cmp	r2, #0
 8001556:	d043      	beq.n	80015e0 <HAL_RCC_OscConfig+0x22c>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001558:	4d31      	ldr	r5, [pc, #196]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 800155a:	682b      	ldr	r3, [r5, #0]
 800155c:	f023 0319 	bic.w	r3, r3, #25
 8001560:	4313      	orrs	r3, r2
 8001562:	602b      	str	r3, [r5, #0]
          tickstart = HAL_GetTick();
 8001564:	f7ff fcac 	bl	8000ec0 <HAL_GetTick>
 8001568:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800156a:	e005      	b.n	8001578 <HAL_RCC_OscConfig+0x1c4>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800156c:	f7ff fca8 	bl	8000ec0 <HAL_GetTick>
 8001570:	1b80      	subs	r0, r0, r6
 8001572:	2802      	cmp	r0, #2
 8001574:	f200 808a 	bhi.w	800168c <HAL_RCC_OscConfig+0x2d8>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001578:	682b      	ldr	r3, [r5, #0]
 800157a:	075b      	lsls	r3, r3, #29
 800157c:	d5f6      	bpl.n	800156c <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157e:	686b      	ldr	r3, [r5, #4]
 8001580:	6922      	ldr	r2, [r4, #16]
 8001582:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001586:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800158a:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800158c:	6823      	ldr	r3, [r4, #0]
 800158e:	e757      	b.n	8001440 <HAL_RCC_OscConfig+0x8c>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001590:	2b18      	cmp	r3, #24
 8001592:	f000 80dc 	beq.w	800174e <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001596:	4d22      	ldr	r5, [pc, #136]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001598:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800159a:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800159c:	2a00      	cmp	r2, #0
 800159e:	f000 80c5 	beq.w	800172c <HAL_RCC_OscConfig+0x378>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015a2:	f023 0319 	bic.w	r3, r3, #25
 80015a6:	4313      	orrs	r3, r2
 80015a8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80015aa:	f7ff fc89 	bl	8000ec0 <HAL_GetTick>
 80015ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015b0:	e004      	b.n	80015bc <HAL_RCC_OscConfig+0x208>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b2:	f7ff fc85 	bl	8000ec0 <HAL_GetTick>
 80015b6:	1b80      	subs	r0, r0, r6
 80015b8:	2802      	cmp	r0, #2
 80015ba:	d867      	bhi.n	800168c <HAL_RCC_OscConfig+0x2d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015bc:	682b      	ldr	r3, [r5, #0]
 80015be:	075f      	lsls	r7, r3, #29
 80015c0:	d5f7      	bpl.n	80015b2 <HAL_RCC_OscConfig+0x1fe>
 80015c2:	e7dc      	b.n	800157e <HAL_RCC_OscConfig+0x1ca>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80015c4:	f001 0103 	and.w	r1, r1, #3
 80015c8:	2902      	cmp	r1, #2
 80015ca:	f47f af06 	bne.w	80013da <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ce:	4a14      	ldr	r2, [pc, #80]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 80015d0:	6812      	ldr	r2, [r2, #0]
 80015d2:	0392      	lsls	r2, r2, #14
 80015d4:	f57f af32 	bpl.w	800143c <HAL_RCC_OscConfig+0x88>
 80015d8:	6862      	ldr	r2, [r4, #4]
 80015da:	2a00      	cmp	r2, #0
 80015dc:	f47f af2e 	bne.w	800143c <HAL_RCC_OscConfig+0x88>
        return HAL_ERROR;
 80015e0:	2001      	movs	r0, #1
}
 80015e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80015e4:	f001 0103 	and.w	r1, r1, #3
 80015e8:	2901      	cmp	r1, #1
 80015ea:	f47f af36 	bne.w	800145a <HAL_RCC_OscConfig+0xa6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015ee:	4a0c      	ldr	r2, [pc, #48]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 80015f0:	6812      	ldr	r2, [r2, #0]
 80015f2:	05d2      	lsls	r2, r2, #23
 80015f4:	d502      	bpl.n	80015fc <HAL_RCC_OscConfig+0x248>
 80015f6:	69e2      	ldr	r2, [r4, #28]
 80015f8:	2a80      	cmp	r2, #128	; 0x80
 80015fa:	d1f1      	bne.n	80015e0 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015fc:	4908      	ldr	r1, [pc, #32]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 80015fe:	6a20      	ldr	r0, [r4, #32]
 8001600:	68ca      	ldr	r2, [r1, #12]
 8001602:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 8001606:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800160a:	60ca      	str	r2, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800160c:	e743      	b.n	8001496 <HAL_RCC_OscConfig+0xe2>
    PWR->CR1 |= PWR_CR1_DBP;
 800160e:	4d05      	ldr	r5, [pc, #20]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001610:	682b      	ldr	r3, [r5, #0]
 8001612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001616:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001618:	f7ff fc52 	bl	8000ec0 <HAL_GetTick>
 800161c:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x27e>
 8001620:	58024400 	.word	0x58024400
 8001624:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001628:	f7ff fc4a 	bl	8000ec0 <HAL_GetTick>
 800162c:	1b80      	subs	r0, r0, r6
 800162e:	2864      	cmp	r0, #100	; 0x64
 8001630:	d82c      	bhi.n	800168c <HAL_RCC_OscConfig+0x2d8>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001632:	682b      	ldr	r3, [r5, #0]
 8001634:	05da      	lsls	r2, r3, #23
 8001636:	d5f7      	bpl.n	8001628 <HAL_RCC_OscConfig+0x274>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001638:	68a3      	ldr	r3, [r4, #8]
 800163a:	2b01      	cmp	r3, #1
 800163c:	f000 815e 	beq.w	80018fc <HAL_RCC_OscConfig+0x548>
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 8137 	beq.w	80018b4 <HAL_RCC_OscConfig+0x500>
 8001646:	2b05      	cmp	r3, #5
 8001648:	f000 815e 	beq.w	8001908 <HAL_RCC_OscConfig+0x554>
 800164c:	2b85      	cmp	r3, #133	; 0x85
 800164e:	4ba8      	ldr	r3, [pc, #672]	; (80018f0 <HAL_RCC_OscConfig+0x53c>)
 8001650:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001652:	f000 8167 	beq.w	8001924 <HAL_RCC_OscConfig+0x570>
 8001656:	f022 0201 	bic.w	r2, r2, #1
 800165a:	671a      	str	r2, [r3, #112]	; 0x70
 800165c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800165e:	f022 0204 	bic.w	r2, r2, #4
 8001662:	671a      	str	r2, [r3, #112]	; 0x70
 8001664:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001666:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800166a:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800166c:	f7ff fc28 	bl	8000ec0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001670:	4e9f      	ldr	r6, [pc, #636]	; (80018f0 <HAL_RCC_OscConfig+0x53c>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001672:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001676:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001678:	e004      	b.n	8001684 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800167a:	f7ff fc21 	bl	8000ec0 <HAL_GetTick>
 800167e:	1b40      	subs	r0, r0, r5
 8001680:	42b8      	cmp	r0, r7
 8001682:	d803      	bhi.n	800168c <HAL_RCC_OscConfig+0x2d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001684:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001686:	079b      	lsls	r3, r3, #30
 8001688:	d5f7      	bpl.n	800167a <HAL_RCC_OscConfig+0x2c6>
 800168a:	e739      	b.n	8001500 <HAL_RCC_OscConfig+0x14c>
            return HAL_TIMEOUT;
 800168c:	2003      	movs	r0, #3
}
 800168e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001690:	4d97      	ldr	r5, [pc, #604]	; (80018f0 <HAL_RCC_OscConfig+0x53c>)
 8001692:	682b      	ldr	r3, [r5, #0]
 8001694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001698:	602b      	str	r3, [r5, #0]
 800169a:	682b      	ldr	r3, [r5, #0]
 800169c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016a0:	602b      	str	r3, [r5, #0]
 80016a2:	682b      	ldr	r3, [r5, #0]
 80016a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80016aa:	f7ff fc09 	bl	8000ec0 <HAL_GetTick>
 80016ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016b0:	e004      	b.n	80016bc <HAL_RCC_OscConfig+0x308>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b2:	f7ff fc05 	bl	8000ec0 <HAL_GetTick>
 80016b6:	1b80      	subs	r0, r0, r6
 80016b8:	2864      	cmp	r0, #100	; 0x64
 80016ba:	d8e7      	bhi.n	800168c <HAL_RCC_OscConfig+0x2d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016bc:	682b      	ldr	r3, [r5, #0]
 80016be:	039f      	lsls	r7, r3, #14
 80016c0:	d4f7      	bmi.n	80016b2 <HAL_RCC_OscConfig+0x2fe>
 80016c2:	e6ba      	b.n	800143a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 80016c4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80016c6:	f023 0301 	bic.w	r3, r3, #1
 80016ca:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80016cc:	f7ff fbf8 	bl	8000ec0 <HAL_GetTick>
 80016d0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016d2:	e004      	b.n	80016de <HAL_RCC_OscConfig+0x32a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016d4:	f7ff fbf4 	bl	8000ec0 <HAL_GetTick>
 80016d8:	1b80      	subs	r0, r0, r6
 80016da:	2802      	cmp	r0, #2
 80016dc:	d8d6      	bhi.n	800168c <HAL_RCC_OscConfig+0x2d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016de:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80016e0:	0799      	lsls	r1, r3, #30
 80016e2:	d4f7      	bmi.n	80016d4 <HAL_RCC_OscConfig+0x320>
 80016e4:	e6ef      	b.n	80014c6 <HAL_RCC_OscConfig+0x112>
      __HAL_RCC_HSI48_DISABLE();
 80016e6:	682b      	ldr	r3, [r5, #0]
 80016e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016ec:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80016ee:	f7ff fbe7 	bl	8000ec0 <HAL_GetTick>
 80016f2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016f4:	e004      	b.n	8001700 <HAL_RCC_OscConfig+0x34c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80016f6:	f7ff fbe3 	bl	8000ec0 <HAL_GetTick>
 80016fa:	1b80      	subs	r0, r0, r6
 80016fc:	2802      	cmp	r0, #2
 80016fe:	d8c5      	bhi.n	800168c <HAL_RCC_OscConfig+0x2d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001700:	682b      	ldr	r3, [r5, #0]
 8001702:	0498      	lsls	r0, r3, #18
 8001704:	d4f7      	bmi.n	80016f6 <HAL_RCC_OscConfig+0x342>
 8001706:	e6f7      	b.n	80014f8 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_CSI_DISABLE();
 8001708:	682b      	ldr	r3, [r5, #0]
 800170a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800170e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001710:	f7ff fbd6 	bl	8000ec0 <HAL_GetTick>
 8001714:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001716:	e004      	b.n	8001722 <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001718:	f7ff fbd2 	bl	8000ec0 <HAL_GetTick>
 800171c:	1b80      	subs	r0, r0, r6
 800171e:	2802      	cmp	r0, #2
 8001720:	d8b4      	bhi.n	800168c <HAL_RCC_OscConfig+0x2d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001722:	682b      	ldr	r3, [r5, #0]
 8001724:	05df      	lsls	r7, r3, #23
 8001726:	d4f7      	bmi.n	8001718 <HAL_RCC_OscConfig+0x364>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001728:	6823      	ldr	r3, [r4, #0]
 800172a:	e6b4      	b.n	8001496 <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_DISABLE();
 800172c:	f023 0301 	bic.w	r3, r3, #1
 8001730:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001732:	f7ff fbc5 	bl	8000ec0 <HAL_GetTick>
 8001736:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001738:	e004      	b.n	8001744 <HAL_RCC_OscConfig+0x390>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800173a:	f7ff fbc1 	bl	8000ec0 <HAL_GetTick>
 800173e:	1b80      	subs	r0, r0, r6
 8001740:	2802      	cmp	r0, #2
 8001742:	d8a3      	bhi.n	800168c <HAL_RCC_OscConfig+0x2d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001744:	682b      	ldr	r3, [r5, #0]
 8001746:	0758      	lsls	r0, r3, #29
 8001748:	d4f7      	bmi.n	800173a <HAL_RCC_OscConfig+0x386>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800174a:	6823      	ldr	r3, [r4, #0]
 800174c:	e678      	b.n	8001440 <HAL_RCC_OscConfig+0x8c>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800174e:	0790      	lsls	r0, r2, #30
 8001750:	f47f af21 	bne.w	8001596 <HAL_RCC_OscConfig+0x1e2>
 8001754:	e6f9      	b.n	800154a <HAL_RCC_OscConfig+0x196>
    return HAL_ERROR;
 8001756:	2001      	movs	r0, #1
}
 8001758:	4770      	bx	lr
        tickstart = HAL_GetTick();
 800175a:	f7ff fbb1 	bl	8000ec0 <HAL_GetTick>
 800175e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001760:	e004      	b.n	800176c <HAL_RCC_OscConfig+0x3b8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001762:	f7ff fbad 	bl	8000ec0 <HAL_GetTick>
 8001766:	1b80      	subs	r0, r0, r6
 8001768:	2802      	cmp	r0, #2
 800176a:	d88f      	bhi.n	800168c <HAL_RCC_OscConfig+0x2d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800176c:	682b      	ldr	r3, [r5, #0]
 800176e:	0199      	lsls	r1, r3, #6
 8001770:	d4f7      	bmi.n	8001762 <HAL_RCC_OscConfig+0x3ae>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001772:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8001774:	4b5f      	ldr	r3, [pc, #380]	; (80018f4 <HAL_RCC_OscConfig+0x540>)
 8001776:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001778:	400b      	ands	r3, r1
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800177a:	495f      	ldr	r1, [pc, #380]	; (80018f8 <HAL_RCC_OscConfig+0x544>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800177c:	4e5c      	ldr	r6, [pc, #368]	; (80018f0 <HAL_RCC_OscConfig+0x53c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800177e:	4313      	orrs	r3, r2
 8001780:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001782:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001786:	62ab      	str	r3, [r5, #40]	; 0x28
 8001788:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800178c:	3b01      	subs	r3, #1
 800178e:	3a01      	subs	r2, #1
 8001790:	025b      	lsls	r3, r3, #9
 8001792:	0412      	lsls	r2, r2, #16
 8001794:	b29b      	uxth	r3, r3
 8001796:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800179a:	4313      	orrs	r3, r2
 800179c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800179e:	3a01      	subs	r2, #1
 80017a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80017a4:	4313      	orrs	r3, r2
 80017a6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80017a8:	3a01      	subs	r2, #1
 80017aa:	0612      	lsls	r2, r2, #24
 80017ac:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80017b0:	4313      	orrs	r3, r2
 80017b2:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80017b4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80017b6:	f023 0301 	bic.w	r3, r3, #1
 80017ba:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80017bc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80017be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80017c0:	4011      	ands	r1, r2
 80017c2:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80017c6:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80017c8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80017ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80017cc:	f023 030c 	bic.w	r3, r3, #12
 80017d0:	4313      	orrs	r3, r2
 80017d2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80017d4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80017d6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80017d8:	f023 0302 	bic.w	r3, r3, #2
 80017dc:	4313      	orrs	r3, r2
 80017de:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80017e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80017e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e6:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80017e8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80017ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ee:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80017f0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80017f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f6:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80017f8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8001800:	682b      	ldr	r3, [r5, #0]
 8001802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001806:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001808:	f7ff fb5a 	bl	8000ec0 <HAL_GetTick>
 800180c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800180e:	e005      	b.n	800181c <HAL_RCC_OscConfig+0x468>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001810:	f7ff fb56 	bl	8000ec0 <HAL_GetTick>
 8001814:	1b00      	subs	r0, r0, r4
 8001816:	2802      	cmp	r0, #2
 8001818:	f63f af38 	bhi.w	800168c <HAL_RCC_OscConfig+0x2d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800181c:	6833      	ldr	r3, [r6, #0]
 800181e:	019a      	lsls	r2, r3, #6
 8001820:	d5f6      	bpl.n	8001810 <HAL_RCC_OscConfig+0x45c>
 8001822:	e68a      	b.n	800153a <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001824:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	e5f0      	b.n	800141e <HAL_RCC_OscConfig+0x6a>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800183c:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800183e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001840:	6b2d      	ldr	r5, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001842:	f43f ae7b 	beq.w	800153c <HAL_RCC_OscConfig+0x188>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001846:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800184a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800184c:	428b      	cmp	r3, r1
 800184e:	f47f aec7 	bne.w	80015e0 <HAL_RCC_OscConfig+0x22c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001852:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001856:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001858:	429a      	cmp	r2, r3
 800185a:	f47f aec1 	bne.w	80015e0 <HAL_RCC_OscConfig+0x22c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800185e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001860:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8001864:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001866:	429a      	cmp	r2, r3
 8001868:	f47f aeba 	bne.w	80015e0 <HAL_RCC_OscConfig+0x22c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800186c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800186e:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8001872:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001874:	429a      	cmp	r2, r3
 8001876:	f47f aeb3 	bne.w	80015e0 <HAL_RCC_OscConfig+0x22c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800187a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800187c:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8001880:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001882:	429a      	cmp	r2, r3
 8001884:	f47f aeac 	bne.w	80015e0 <HAL_RCC_OscConfig+0x22c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001888:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800188a:	f3c5 6506 	ubfx	r5, r5, #24, #7
 800188e:	3801      	subs	r0, #1
  return HAL_OK;
 8001890:	1a28      	subs	r0, r5, r0
 8001892:	bf18      	it	ne
 8001894:	2001      	movne	r0, #1
}
 8001896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001898:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <HAL_RCC_OscConfig+0x53c>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	e5b4      	b.n	800141e <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b4:	4d0e      	ldr	r5, [pc, #56]	; (80018f0 <HAL_RCC_OscConfig+0x53c>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018b6:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018bc:	f023 0301 	bic.w	r3, r3, #1
 80018c0:	672b      	str	r3, [r5, #112]	; 0x70
 80018c2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018c8:	672b      	str	r3, [r5, #112]	; 0x70
 80018ca:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018cc:	f023 0304 	bic.w	r3, r3, #4
 80018d0:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80018d2:	f7ff faf5 	bl	8000ec0 <HAL_GetTick>
 80018d6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018d8:	e005      	b.n	80018e6 <HAL_RCC_OscConfig+0x532>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018da:	f7ff faf1 	bl	8000ec0 <HAL_GetTick>
 80018de:	1b80      	subs	r0, r0, r6
 80018e0:	42b8      	cmp	r0, r7
 80018e2:	f63f aed3 	bhi.w	800168c <HAL_RCC_OscConfig+0x2d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018e6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018e8:	0798      	lsls	r0, r3, #30
 80018ea:	d4f6      	bmi.n	80018da <HAL_RCC_OscConfig+0x526>
 80018ec:	e608      	b.n	8001500 <HAL_RCC_OscConfig+0x14c>
 80018ee:	bf00      	nop
 80018f0:	58024400 	.word	0x58024400
 80018f4:	fffffc0c 	.word	0xfffffc0c
 80018f8:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018fc:	4a0f      	ldr	r2, [pc, #60]	; (800193c <HAL_RCC_OscConfig+0x588>)
 80018fe:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001906:	e6b1      	b.n	800166c <HAL_RCC_OscConfig+0x2b8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <HAL_RCC_OscConfig+0x588>)
 800190a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800190c:	f042 0204 	orr.w	r2, r2, #4
 8001910:	671a      	str	r2, [r3, #112]	; 0x70
 8001912:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001914:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001918:	671a      	str	r2, [r3, #112]	; 0x70
 800191a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800191c:	f042 0201 	orr.w	r2, r2, #1
 8001920:	671a      	str	r2, [r3, #112]	; 0x70
 8001922:	e6a3      	b.n	800166c <HAL_RCC_OscConfig+0x2b8>
 8001924:	f042 0204 	orr.w	r2, r2, #4
 8001928:	671a      	str	r2, [r3, #112]	; 0x70
 800192a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800192c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001930:	671a      	str	r2, [r3, #112]	; 0x70
 8001932:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001934:	f042 0201 	orr.w	r2, r2, #1
 8001938:	671a      	str	r2, [r3, #112]	; 0x70
 800193a:	e697      	b.n	800166c <HAL_RCC_OscConfig+0x2b8>
 800193c:	58024400 	.word	0x58024400

08001940 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001940:	4a47      	ldr	r2, [pc, #284]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x120>)
 8001942:	6913      	ldr	r3, [r2, #16]
 8001944:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001948:	2b10      	cmp	r3, #16
 800194a:	d004      	beq.n	8001956 <HAL_RCC_GetSysClockFreq+0x16>
 800194c:	2b18      	cmp	r3, #24
 800194e:	d00d      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0x2c>
 8001950:	b11b      	cbz	r3, 800195a <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 8001952:	4844      	ldr	r0, [pc, #272]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x124>)
 8001954:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001956:	4844      	ldr	r0, [pc, #272]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x128>)
 8001958:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800195a:	6813      	ldr	r3, [r2, #0]
 800195c:	0699      	lsls	r1, r3, #26
 800195e:	d54a      	bpl.n	80019f6 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001960:	6813      	ldr	r3, [r2, #0]
 8001962:	4842      	ldr	r0, [pc, #264]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001964:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001968:	40d8      	lsrs	r0, r3
 800196a:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800196c:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 800196e:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001970:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001972:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    if (pllm != 0U)
 8001974:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001978:	6b51      	ldr	r1, [r2, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800197a:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 800197e:	d038      	beq.n	80019f2 <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001980:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001984:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001988:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800198c:	fb05 f101 	mul.w	r1, r5, r1
 8001990:	2b01      	cmp	r3, #1
 8001992:	ee07 1a90 	vmov	s15, r1
 8001996:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      switch (pllsource)
 800199a:	d002      	beq.n	80019a2 <HAL_RCC_GetSysClockFreq+0x62>
 800199c:	2b02      	cmp	r3, #2
 800199e:	d02c      	beq.n	80019fa <HAL_RCC_GetSysClockFreq+0xba>
 80019a0:	b393      	cbz	r3, 8001a08 <HAL_RCC_GetSysClockFreq+0xc8>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80019a2:	ee07 0a90 	vmov	s15, r0
 80019a6:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001a70 <HAL_RCC_GetSysClockFreq+0x130>
 80019aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ae:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80019b0:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80019b4:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8001a74 <HAL_RCC_GetSysClockFreq+0x134>
 80019b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019bc:	ee06 3a90 	vmov	s13, r3
 80019c0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80019c4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80019c8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80019cc:	eee7 6a25 	vfma.f32	s13, s14, s11
 80019d0:	ee66 6a26 	vmul.f32	s13, s12, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80019d4:	4b22      	ldr	r3, [pc, #136]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x120>)
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80019dc:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80019de:	ee07 3a90 	vmov	s15, r3
 80019e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019ee:	ee17 0a90 	vmov	r0, s15
}
 80019f2:	bc30      	pop	{r4, r5}
 80019f4:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80019f6:	481d      	ldr	r0, [pc, #116]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x12c>)
}
 80019f8:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80019fa:	ee07 0a90 	vmov	s15, r0
 80019fe:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001a78 <HAL_RCC_GetSysClockFreq+0x138>
 8001a02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a06:	e7d2      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001a08:	6813      	ldr	r3, [r2, #0]
 8001a0a:	069b      	lsls	r3, r3, #26
 8001a0c:	d520      	bpl.n	8001a50 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001a0e:	6814      	ldr	r4, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a10:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001a14:	4915      	ldr	r1, [pc, #84]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a16:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001a1a:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001a1c:	f3c4 04c1 	ubfx	r4, r4, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a24:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8001a74 <HAL_RCC_GetSysClockFreq+0x134>
 8001a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001a2c:	40e1      	lsrs	r1, r4
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a2e:	ee06 3a90 	vmov	s13, r3
 8001a32:	ee05 1a90 	vmov	s11, r1
 8001a36:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001a3a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001a3e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001a42:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8001a46:	eee7 6a05 	vfma.f32	s13, s14, s10
 8001a4a:	ee66 6a26 	vmul.f32	s13, s12, s13
 8001a4e:	e7c1      	b.n	80019d4 <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a50:	ee07 0a90 	vmov	s15, r0
 8001a54:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001a7c <HAL_RCC_GetSysClockFreq+0x13c>
 8001a58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a5c:	e7a7      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0x6e>
 8001a5e:	bf00      	nop
 8001a60:	58024400 	.word	0x58024400
 8001a64:	003d0900 	.word	0x003d0900
 8001a68:	007a1200 	.word	0x007a1200
 8001a6c:	03d09000 	.word	0x03d09000
 8001a70:	4a742400 	.word	0x4a742400
 8001a74:	39000000 	.word	0x39000000
 8001a78:	4af42400 	.word	0x4af42400
 8001a7c:	4c742400 	.word	0x4c742400

08001a80 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001a80:	2800      	cmp	r0, #0
 8001a82:	f000 810c 	beq.w	8001c9e <HAL_RCC_ClockConfig+0x21e>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a86:	4a8c      	ldr	r2, [pc, #560]	; (8001cb8 <HAL_RCC_ClockConfig+0x238>)
 8001a88:	6813      	ldr	r3, [r2, #0]
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	428b      	cmp	r3, r1
{
 8001a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a94:	4604      	mov	r4, r0
 8001a96:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a98:	d20c      	bcs.n	8001ab4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9a:	6813      	ldr	r3, [r2, #0]
 8001a9c:	f023 030f 	bic.w	r3, r3, #15
 8001aa0:	430b      	orrs	r3, r1
 8001aa2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa4:	6813      	ldr	r3, [r2, #0]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	428b      	cmp	r3, r1
 8001aac:	d002      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8001aae:	2001      	movs	r0, #1
}
 8001ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ab4:	6823      	ldr	r3, [r4, #0]
 8001ab6:	075f      	lsls	r7, r3, #29
 8001ab8:	d50b      	bpl.n	8001ad2 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001aba:	4980      	ldr	r1, [pc, #512]	; (8001cbc <HAL_RCC_ClockConfig+0x23c>)
 8001abc:	6920      	ldr	r0, [r4, #16]
 8001abe:	698a      	ldr	r2, [r1, #24]
 8001ac0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001ac4:	4290      	cmp	r0, r2
 8001ac6:	d904      	bls.n	8001ad2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ac8:	698a      	ldr	r2, [r1, #24]
 8001aca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001ace:	4302      	orrs	r2, r0
 8001ad0:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad2:	071e      	lsls	r6, r3, #28
 8001ad4:	d50b      	bpl.n	8001aee <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001ad6:	4979      	ldr	r1, [pc, #484]	; (8001cbc <HAL_RCC_ClockConfig+0x23c>)
 8001ad8:	6960      	ldr	r0, [r4, #20]
 8001ada:	69ca      	ldr	r2, [r1, #28]
 8001adc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001ae0:	4290      	cmp	r0, r2
 8001ae2:	d904      	bls.n	8001aee <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ae4:	69ca      	ldr	r2, [r1, #28]
 8001ae6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001aea:	4302      	orrs	r2, r0
 8001aec:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aee:	06d8      	lsls	r0, r3, #27
 8001af0:	d50b      	bpl.n	8001b0a <HAL_RCC_ClockConfig+0x8a>
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001af2:	4972      	ldr	r1, [pc, #456]	; (8001cbc <HAL_RCC_ClockConfig+0x23c>)
 8001af4:	69a0      	ldr	r0, [r4, #24]
 8001af6:	69ca      	ldr	r2, [r1, #28]
 8001af8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001afc:	4290      	cmp	r0, r2
 8001afe:	d904      	bls.n	8001b0a <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b00:	69ca      	ldr	r2, [r1, #28]
 8001b02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b06:	4302      	orrs	r2, r0
 8001b08:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b0a:	0699      	lsls	r1, r3, #26
 8001b0c:	d50b      	bpl.n	8001b26 <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001b0e:	496b      	ldr	r1, [pc, #428]	; (8001cbc <HAL_RCC_ClockConfig+0x23c>)
 8001b10:	69e0      	ldr	r0, [r4, #28]
 8001b12:	6a0a      	ldr	r2, [r1, #32]
 8001b14:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001b18:	4290      	cmp	r0, r2
 8001b1a:	d904      	bls.n	8001b26 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001b1c:	6a0a      	ldr	r2, [r1, #32]
 8001b1e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b22:	4302      	orrs	r2, r0
 8001b24:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b26:	079a      	lsls	r2, r3, #30
 8001b28:	f140 80ab 	bpl.w	8001c82 <HAL_RCC_ClockConfig+0x202>
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001b2c:	4863      	ldr	r0, [pc, #396]	; (8001cbc <HAL_RCC_ClockConfig+0x23c>)
 8001b2e:	68e1      	ldr	r1, [r4, #12]
 8001b30:	6982      	ldr	r2, [r0, #24]
 8001b32:	f002 020f 	and.w	r2, r2, #15
 8001b36:	4291      	cmp	r1, r2
 8001b38:	d904      	bls.n	8001b44 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b3a:	6982      	ldr	r2, [r0, #24]
 8001b3c:	f022 020f 	bic.w	r2, r2, #15
 8001b40:	430a      	orrs	r2, r1
 8001b42:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b44:	07d8      	lsls	r0, r3, #31
 8001b46:	d530      	bpl.n	8001baa <HAL_RCC_ClockConfig+0x12a>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b48:	4a5c      	ldr	r2, [pc, #368]	; (8001cbc <HAL_RCC_ClockConfig+0x23c>)
 8001b4a:	68a1      	ldr	r1, [r4, #8]
 8001b4c:	6993      	ldr	r3, [r2, #24]
 8001b4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b52:	430b      	orrs	r3, r1
 8001b54:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b56:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b58:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5a:	2902      	cmp	r1, #2
 8001b5c:	f000 80a1 	beq.w	8001ca2 <HAL_RCC_ClockConfig+0x222>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b60:	2903      	cmp	r1, #3
 8001b62:	f000 8098 	beq.w	8001c96 <HAL_RCC_ClockConfig+0x216>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b66:	2901      	cmp	r1, #1
 8001b68:	f000 80a1 	beq.w	8001cae <HAL_RCC_ClockConfig+0x22e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b6c:	0758      	lsls	r0, r3, #29
 8001b6e:	d59e      	bpl.n	8001aae <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b70:	4e52      	ldr	r6, [pc, #328]	; (8001cbc <HAL_RCC_ClockConfig+0x23c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b72:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b76:	6933      	ldr	r3, [r6, #16]
 8001b78:	f023 0307 	bic.w	r3, r3, #7
 8001b7c:	430b      	orrs	r3, r1
 8001b7e:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8001b80:	f7ff f99e 	bl	8000ec0 <HAL_GetTick>
 8001b84:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b86:	e005      	b.n	8001b94 <HAL_RCC_ClockConfig+0x114>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b88:	f7ff f99a 	bl	8000ec0 <HAL_GetTick>
 8001b8c:	1bc0      	subs	r0, r0, r7
 8001b8e:	4540      	cmp	r0, r8
 8001b90:	f200 808b 	bhi.w	8001caa <HAL_RCC_ClockConfig+0x22a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b94:	6933      	ldr	r3, [r6, #16]
 8001b96:	6862      	ldr	r2, [r4, #4]
 8001b98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b9c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8001ba0:	d1f2      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba2:	6823      	ldr	r3, [r4, #0]
 8001ba4:	0799      	lsls	r1, r3, #30
 8001ba6:	d506      	bpl.n	8001bb6 <HAL_RCC_ClockConfig+0x136>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001ba8:	68e1      	ldr	r1, [r4, #12]
 8001baa:	4844      	ldr	r0, [pc, #272]	; (8001cbc <HAL_RCC_ClockConfig+0x23c>)
 8001bac:	6982      	ldr	r2, [r0, #24]
 8001bae:	f002 020f 	and.w	r2, r2, #15
 8001bb2:	428a      	cmp	r2, r1
 8001bb4:	d869      	bhi.n	8001c8a <HAL_RCC_ClockConfig+0x20a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb6:	4940      	ldr	r1, [pc, #256]	; (8001cb8 <HAL_RCC_ClockConfig+0x238>)
 8001bb8:	680a      	ldr	r2, [r1, #0]
 8001bba:	f002 020f 	and.w	r2, r2, #15
 8001bbe:	42aa      	cmp	r2, r5
 8001bc0:	d90a      	bls.n	8001bd8 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc2:	680a      	ldr	r2, [r1, #0]
 8001bc4:	f022 020f 	bic.w	r2, r2, #15
 8001bc8:	432a      	orrs	r2, r5
 8001bca:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bcc:	680a      	ldr	r2, [r1, #0]
 8001bce:	f002 020f 	and.w	r2, r2, #15
 8001bd2:	42aa      	cmp	r2, r5
 8001bd4:	f47f af6b 	bne.w	8001aae <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001bd8:	075a      	lsls	r2, r3, #29
 8001bda:	d50b      	bpl.n	8001bf4 <HAL_RCC_ClockConfig+0x174>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001bdc:	4937      	ldr	r1, [pc, #220]	; (8001cbc <HAL_RCC_ClockConfig+0x23c>)
 8001bde:	6920      	ldr	r0, [r4, #16]
 8001be0:	698a      	ldr	r2, [r1, #24]
 8001be2:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001be6:	4290      	cmp	r0, r2
 8001be8:	d204      	bcs.n	8001bf4 <HAL_RCC_ClockConfig+0x174>
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001bea:	698a      	ldr	r2, [r1, #24]
 8001bec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001bf0:	4302      	orrs	r2, r0
 8001bf2:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf4:	071f      	lsls	r7, r3, #28
 8001bf6:	d50b      	bpl.n	8001c10 <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001bf8:	4930      	ldr	r1, [pc, #192]	; (8001cbc <HAL_RCC_ClockConfig+0x23c>)
 8001bfa:	6960      	ldr	r0, [r4, #20]
 8001bfc:	69ca      	ldr	r2, [r1, #28]
 8001bfe:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001c02:	4290      	cmp	r0, r2
 8001c04:	d204      	bcs.n	8001c10 <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c06:	69ca      	ldr	r2, [r1, #28]
 8001c08:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c0c:	4302      	orrs	r2, r0
 8001c0e:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c10:	06de      	lsls	r6, r3, #27
 8001c12:	d50b      	bpl.n	8001c2c <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001c14:	4929      	ldr	r1, [pc, #164]	; (8001cbc <HAL_RCC_ClockConfig+0x23c>)
 8001c16:	69a0      	ldr	r0, [r4, #24]
 8001c18:	69ca      	ldr	r2, [r1, #28]
 8001c1a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001c1e:	4290      	cmp	r0, r2
 8001c20:	d204      	bcs.n	8001c2c <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c22:	69ca      	ldr	r2, [r1, #28]
 8001c24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c28:	4302      	orrs	r2, r0
 8001c2a:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c2c:	069d      	lsls	r5, r3, #26
 8001c2e:	d50b      	bpl.n	8001c48 <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001c30:	4a22      	ldr	r2, [pc, #136]	; (8001cbc <HAL_RCC_ClockConfig+0x23c>)
 8001c32:	69e1      	ldr	r1, [r4, #28]
 8001c34:	6a13      	ldr	r3, [r2, #32]
 8001c36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c3a:	4299      	cmp	r1, r3
 8001c3c:	d204      	bcs.n	8001c48 <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001c3e:	6a13      	ldr	r3, [r2, #32]
 8001c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c44:	430b      	orrs	r3, r1
 8001c46:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001c48:	f7ff fe7a 	bl	8001940 <HAL_RCC_GetSysClockFreq>
 8001c4c:	4a1b      	ldr	r2, [pc, #108]	; (8001cbc <HAL_RCC_ClockConfig+0x23c>)
 8001c4e:	4603      	mov	r3, r0
 8001c50:	481b      	ldr	r0, [pc, #108]	; (8001cc0 <HAL_RCC_ClockConfig+0x240>)
 8001c52:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001c54:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001c56:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8001c5a:	4d1a      	ldr	r5, [pc, #104]	; (8001cc4 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001c5c:	f002 020f 	and.w	r2, r2, #15
 8001c60:	4c19      	ldr	r4, [pc, #100]	; (8001cc8 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001c62:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001c64:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001c66:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8001c6a:	4818      	ldr	r0, [pc, #96]	; (8001ccc <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001c6c:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001c70:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick (uwTickPrio);
 8001c72:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8001c74:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001c76:	40d3      	lsrs	r3, r2
 8001c78:	6023      	str	r3, [r4, #0]
}
 8001c7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8001c7e:	f7ff b8bd 	b.w	8000dfc <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c82:	07da      	lsls	r2, r3, #31
 8001c84:	f53f af60 	bmi.w	8001b48 <HAL_RCC_ClockConfig+0xc8>
 8001c88:	e795      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c8a:	6982      	ldr	r2, [r0, #24]
 8001c8c:	f022 020f 	bic.w	r2, r2, #15
 8001c90:	4311      	orrs	r1, r2
 8001c92:	6181      	str	r1, [r0, #24]
 8001c94:	e78f      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x136>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c96:	019f      	lsls	r7, r3, #6
 8001c98:	f53f af6a 	bmi.w	8001b70 <HAL_RCC_ClockConfig+0xf0>
 8001c9c:	e707      	b.n	8001aae <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001c9e:	2001      	movs	r0, #1
}
 8001ca0:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ca2:	039b      	lsls	r3, r3, #14
 8001ca4:	f53f af64 	bmi.w	8001b70 <HAL_RCC_ClockConfig+0xf0>
 8001ca8:	e701      	b.n	8001aae <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8001caa:	2003      	movs	r0, #3
 8001cac:	e700      	b.n	8001ab0 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cae:	05de      	lsls	r6, r3, #23
 8001cb0:	f53f af5e 	bmi.w	8001b70 <HAL_RCC_ClockConfig+0xf0>
 8001cb4:	e6fb      	b.n	8001aae <HAL_RCC_ClockConfig+0x2e>
 8001cb6:	bf00      	nop
 8001cb8:	52002000 	.word	0x52002000
 8001cbc:	58024400 	.word	0x58024400
 8001cc0:	0800a450 	.word	0x0800a450
 8001cc4:	24000000 	.word	0x24000000
 8001cc8:	24000004 	.word	0x24000004
 8001ccc:	2400000c 	.word	0x2400000c

08001cd0 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cd0:	4a18      	ldr	r2, [pc, #96]	; (8001d34 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd2:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cd4:	6913      	ldr	r3, [r2, #16]
 8001cd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cda:	2b10      	cmp	r3, #16
 8001cdc:	d01a      	beq.n	8001d14 <HAL_RCC_GetHCLKFreq+0x44>
 8001cde:	2b18      	cmp	r3, #24
 8001ce0:	d023      	beq.n	8001d2a <HAL_RCC_GetHCLKFreq+0x5a>
 8001ce2:	b1cb      	cbz	r3, 8001d18 <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 8001ce4:	4814      	ldr	r0, [pc, #80]	; (8001d38 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8001ce6:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <HAL_RCC_GetHCLKFreq+0x64>)
 8001ce8:	4914      	ldr	r1, [pc, #80]	; (8001d3c <HAL_RCC_GetHCLKFreq+0x6c>)
 8001cea:	699a      	ldr	r2, [r3, #24]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001cec:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8001cee:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001cf2:	4c13      	ldr	r4, [pc, #76]	; (8001d40 <HAL_RCC_GetHCLKFreq+0x70>)
 8001cf4:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cf8:	4d12      	ldr	r5, [pc, #72]	; (8001d44 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8001cfa:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001cfc:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8001cfe:	f002 021f 	and.w	r2, r2, #31
 8001d02:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001d06:	f003 001f 	and.w	r0, r3, #31
 8001d0a:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 8001d0e:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001d10:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8001d12:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d14:	480c      	ldr	r0, [pc, #48]	; (8001d48 <HAL_RCC_GetHCLKFreq+0x78>)
 8001d16:	e7e6      	b.n	8001ce6 <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d18:	6813      	ldr	r3, [r2, #0]
 8001d1a:	069b      	lsls	r3, r3, #26
 8001d1c:	d508      	bpl.n	8001d30 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	480a      	ldr	r0, [pc, #40]	; (8001d4c <HAL_RCC_GetHCLKFreq+0x7c>)
 8001d22:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8001d26:	40d0      	lsrs	r0, r2
 8001d28:	e7dd      	b.n	8001ce6 <HAL_RCC_GetHCLKFreq+0x16>
 8001d2a:	f7ff fabf 	bl	80012ac <HAL_RCC_GetSysClockFreq.part.0>
 8001d2e:	e7da      	b.n	8001ce6 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001d30:	4806      	ldr	r0, [pc, #24]	; (8001d4c <HAL_RCC_GetHCLKFreq+0x7c>)
 8001d32:	e7d8      	b.n	8001ce6 <HAL_RCC_GetHCLKFreq+0x16>
 8001d34:	58024400 	.word	0x58024400
 8001d38:	003d0900 	.word	0x003d0900
 8001d3c:	0800a450 	.word	0x0800a450
 8001d40:	24000004 	.word	0x24000004
 8001d44:	24000000 	.word	0x24000000
 8001d48:	007a1200 	.word	0x007a1200
 8001d4c:	03d09000 	.word	0x03d09000

08001d50 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d50:	4a1c      	ldr	r2, [pc, #112]	; (8001dc4 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d52:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d54:	6913      	ldr	r3, [r2, #16]
 8001d56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d5a:	2b10      	cmp	r3, #16
 8001d5c:	d021      	beq.n	8001da2 <HAL_RCC_GetPCLK1Freq+0x52>
 8001d5e:	2b18      	cmp	r3, #24
 8001d60:	d02b      	beq.n	8001dba <HAL_RCC_GetPCLK1Freq+0x6a>
 8001d62:	b303      	cbz	r3, 8001da6 <HAL_RCC_GetPCLK1Freq+0x56>
    sysclockfreq = CSI_VALUE;
 8001d64:	4818      	ldr	r0, [pc, #96]	; (8001dc8 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8001d66:	4a17      	ldr	r2, [pc, #92]	; (8001dc4 <HAL_RCC_GetPCLK1Freq+0x74>)
 8001d68:	4918      	ldr	r1, [pc, #96]	; (8001dcc <HAL_RCC_GetPCLK1Freq+0x7c>)
 8001d6a:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 8001d6c:	4d18      	ldr	r5, [pc, #96]	; (8001dd0 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8001d6e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001d72:	4c18      	ldr	r4, [pc, #96]	; (8001dd4 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8001d74:	5ccb      	ldrb	r3, [r1, r3]
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001d7e:	6990      	ldr	r0, [r2, #24]
 8001d80:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8001d84:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001d86:	5c08      	ldrb	r0, [r1, r0]
 8001d88:	f000 001f 	and.w	r0, r0, #31
 8001d8c:	40c3      	lsrs	r3, r0
 8001d8e:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8001d90:	69d2      	ldr	r2, [r2, #28]
 8001d92:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8001d96:	5c88      	ldrb	r0, [r1, r2]
 8001d98:	f000 001f 	and.w	r0, r0, #31
#endif
}
 8001d9c:	fa23 f000 	lsr.w	r0, r3, r0
 8001da0:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001da2:	480d      	ldr	r0, [pc, #52]	; (8001dd8 <HAL_RCC_GetPCLK1Freq+0x88>)
 8001da4:	e7df      	b.n	8001d66 <HAL_RCC_GetPCLK1Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001da6:	6813      	ldr	r3, [r2, #0]
 8001da8:	069b      	lsls	r3, r3, #26
 8001daa:	d509      	bpl.n	8001dc0 <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001dac:	6810      	ldr	r0, [r2, #0]
 8001dae:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCC_GetPCLK1Freq+0x8c>)
 8001db0:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8001db4:	fa23 f000 	lsr.w	r0, r3, r0
 8001db8:	e7d5      	b.n	8001d66 <HAL_RCC_GetPCLK1Freq+0x16>
 8001dba:	f7ff fa77 	bl	80012ac <HAL_RCC_GetSysClockFreq.part.0>
 8001dbe:	e7d2      	b.n	8001d66 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001dc0:	4806      	ldr	r0, [pc, #24]	; (8001ddc <HAL_RCC_GetPCLK1Freq+0x8c>)
 8001dc2:	e7d0      	b.n	8001d66 <HAL_RCC_GetPCLK1Freq+0x16>
 8001dc4:	58024400 	.word	0x58024400
 8001dc8:	003d0900 	.word	0x003d0900
 8001dcc:	0800a450 	.word	0x0800a450
 8001dd0:	24000000 	.word	0x24000000
 8001dd4:	24000004 	.word	0x24000004
 8001dd8:	007a1200 	.word	0x007a1200
 8001ddc:	03d09000 	.word	0x03d09000

08001de0 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001de0:	4a1c      	ldr	r2, [pc, #112]	; (8001e54 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001de2:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001de4:	6913      	ldr	r3, [r2, #16]
 8001de6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dea:	2b10      	cmp	r3, #16
 8001dec:	d021      	beq.n	8001e32 <HAL_RCC_GetPCLK2Freq+0x52>
 8001dee:	2b18      	cmp	r3, #24
 8001df0:	d02b      	beq.n	8001e4a <HAL_RCC_GetPCLK2Freq+0x6a>
 8001df2:	b303      	cbz	r3, 8001e36 <HAL_RCC_GetPCLK2Freq+0x56>
    sysclockfreq = CSI_VALUE;
 8001df4:	4818      	ldr	r0, [pc, #96]	; (8001e58 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8001df6:	4a17      	ldr	r2, [pc, #92]	; (8001e54 <HAL_RCC_GetPCLK2Freq+0x74>)
 8001df8:	4918      	ldr	r1, [pc, #96]	; (8001e5c <HAL_RCC_GetPCLK2Freq+0x7c>)
 8001dfa:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 8001dfc:	4d18      	ldr	r5, [pc, #96]	; (8001e60 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8001dfe:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001e02:	4c18      	ldr	r4, [pc, #96]	; (8001e64 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8001e04:	5ccb      	ldrb	r3, [r1, r3]
 8001e06:	f003 031f 	and.w	r3, r3, #31
 8001e0a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001e0e:	6990      	ldr	r0, [r2, #24]
 8001e10:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8001e14:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001e16:	5c08      	ldrb	r0, [r1, r0]
 8001e18:	f000 001f 	and.w	r0, r0, #31
 8001e1c:	40c3      	lsrs	r3, r0
 8001e1e:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8001e20:	69d2      	ldr	r2, [r2, #28]
 8001e22:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8001e26:	5c88      	ldrb	r0, [r1, r2]
 8001e28:	f000 001f 	and.w	r0, r0, #31
#endif
}
 8001e2c:	fa23 f000 	lsr.w	r0, r3, r0
 8001e30:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e32:	480d      	ldr	r0, [pc, #52]	; (8001e68 <HAL_RCC_GetPCLK2Freq+0x88>)
 8001e34:	e7df      	b.n	8001df6 <HAL_RCC_GetPCLK2Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e36:	6813      	ldr	r3, [r2, #0]
 8001e38:	069b      	lsls	r3, r3, #26
 8001e3a:	d509      	bpl.n	8001e50 <HAL_RCC_GetPCLK2Freq+0x70>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e3c:	6810      	ldr	r0, [r2, #0]
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <HAL_RCC_GetPCLK2Freq+0x8c>)
 8001e40:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8001e44:	fa23 f000 	lsr.w	r0, r3, r0
 8001e48:	e7d5      	b.n	8001df6 <HAL_RCC_GetPCLK2Freq+0x16>
 8001e4a:	f7ff fa2f 	bl	80012ac <HAL_RCC_GetSysClockFreq.part.0>
 8001e4e:	e7d2      	b.n	8001df6 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e50:	4806      	ldr	r0, [pc, #24]	; (8001e6c <HAL_RCC_GetPCLK2Freq+0x8c>)
 8001e52:	e7d0      	b.n	8001df6 <HAL_RCC_GetPCLK2Freq+0x16>
 8001e54:	58024400 	.word	0x58024400
 8001e58:	003d0900 	.word	0x003d0900
 8001e5c:	0800a450 	.word	0x0800a450
 8001e60:	24000000 	.word	0x24000000
 8001e64:	24000004 	.word	0x24000004
 8001e68:	007a1200 	.word	0x007a1200
 8001e6c:	03d09000 	.word	0x03d09000

08001e70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8001e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001e72:	4c3a      	ldr	r4, [pc, #232]	; (8001f5c <RCCEx_PLL2_Config+0xec>)
 8001e74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d067      	beq.n	8001f4e <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8001e7e:	6823      	ldr	r3, [r4, #0]
 8001e80:	4606      	mov	r6, r0
 8001e82:	460f      	mov	r7, r1
 8001e84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e88:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e8a:	f7ff f819 	bl	8000ec0 <HAL_GetTick>
 8001e8e:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8001e90:	e004      	b.n	8001e9c <RCCEx_PLL2_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001e92:	f7ff f815 	bl	8000ec0 <HAL_GetTick>
 8001e96:	1b43      	subs	r3, r0, r5
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d856      	bhi.n	8001f4a <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8001e9c:	6823      	ldr	r3, [r4, #0]
 8001e9e:	011a      	lsls	r2, r3, #4
 8001ea0:	d4f7      	bmi.n	8001e92 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8001ea2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ea4:	6832      	ldr	r2, [r6, #0]
 8001ea6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001eaa:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001eae:	62a3      	str	r3, [r4, #40]	; 0x28
 8001eb0:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	3a01      	subs	r2, #1
 8001eb8:	025b      	lsls	r3, r3, #9
 8001eba:	0412      	lsls	r2, r2, #16
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	6872      	ldr	r2, [r6, #4]
 8001ec6:	3a01      	subs	r2, #1
 8001ec8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	6932      	ldr	r2, [r6, #16]
 8001ed0:	3a01      	subs	r2, #1
 8001ed2:	0612      	lsls	r2, r2, #24
 8001ed4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8001edc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ede:	6972      	ldr	r2, [r6, #20]
 8001ee0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8001ee8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001eea:	69b3      	ldr	r3, [r6, #24]
 8001eec:	f022 0220 	bic.w	r2, r2, #32
 8001ef0:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8001ef2:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8001ef4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8001ef6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ef8:	f022 0210 	bic.w	r2, r2, #16
 8001efc:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8001efe:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001f00:	69f2      	ldr	r2, [r6, #28]
 8001f02:	400b      	ands	r3, r1
 8001f04:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f08:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8001f0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f0c:	f043 0310 	orr.w	r3, r3, #16
 8001f10:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001f12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001f14:	b1ef      	cbz	r7, 8001f52 <RCCEx_PLL2_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8001f16:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001f18:	bf0c      	ite	eq
 8001f1a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001f1e:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8001f22:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8001f24:	4c0d      	ldr	r4, [pc, #52]	; (8001f5c <RCCEx_PLL2_Config+0xec>)
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f2c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f2e:	f7fe ffc7 	bl	8000ec0 <HAL_GetTick>
 8001f32:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8001f34:	e004      	b.n	8001f40 <RCCEx_PLL2_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001f36:	f7fe ffc3 	bl	8000ec0 <HAL_GetTick>
 8001f3a:	1b40      	subs	r0, r0, r5
 8001f3c:	2802      	cmp	r0, #2
 8001f3e:	d804      	bhi.n	8001f4a <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8001f40:	6823      	ldr	r3, [r4, #0]
 8001f42:	011b      	lsls	r3, r3, #4
 8001f44:	d5f7      	bpl.n	8001f36 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 8001f46:	2000      	movs	r0, #0
}
 8001f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8001f4a:	2003      	movs	r0, #3
}
 8001f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001f4e:	2001      	movs	r0, #1
}
 8001f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001f52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f56:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f58:	e7e4      	b.n	8001f24 <RCCEx_PLL2_Config+0xb4>
 8001f5a:	bf00      	nop
 8001f5c:	58024400 	.word	0x58024400
 8001f60:	ffff0007 	.word	0xffff0007

08001f64 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8001f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001f66:	4c3a      	ldr	r4, [pc, #232]	; (8002050 <RCCEx_PLL3_Config+0xec>)
 8001f68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	d067      	beq.n	8002042 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8001f72:	6823      	ldr	r3, [r4, #0]
 8001f74:	4606      	mov	r6, r0
 8001f76:	460f      	mov	r7, r1
 8001f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f7e:	f7fe ff9f 	bl	8000ec0 <HAL_GetTick>
 8001f82:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8001f84:	e004      	b.n	8001f90 <RCCEx_PLL3_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001f86:	f7fe ff9b 	bl	8000ec0 <HAL_GetTick>
 8001f8a:	1b43      	subs	r3, r0, r5
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d856      	bhi.n	800203e <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8001f90:	6823      	ldr	r3, [r4, #0]
 8001f92:	009a      	lsls	r2, r3, #2
 8001f94:	d4f7      	bmi.n	8001f86 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8001f96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f98:	6832      	ldr	r2, [r6, #0]
 8001f9a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8001f9e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001fa2:	62a3      	str	r3, [r4, #40]	; 0x28
 8001fa4:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	3a01      	subs	r2, #1
 8001fac:	025b      	lsls	r3, r3, #9
 8001fae:	0412      	lsls	r2, r2, #16
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	6872      	ldr	r2, [r6, #4]
 8001fba:	3a01      	subs	r2, #1
 8001fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	6932      	ldr	r2, [r6, #16]
 8001fc4:	3a01      	subs	r2, #1
 8001fc6:	0612      	lsls	r2, r2, #24
 8001fc8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8001fd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001fd2:	6972      	ldr	r2, [r6, #20]
 8001fd4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8001fdc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001fde:	69b3      	ldr	r3, [r6, #24]
 8001fe0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fe4:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8001fe6:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8001fe8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8001fea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001fec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ff0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8001ff2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001ff4:	69f2      	ldr	r2, [r6, #28]
 8001ff6:	400b      	ands	r3, r1
 8001ff8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ffc:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8001ffe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002004:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8002006:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8002008:	b1ef      	cbz	r7, 8002046 <RCCEx_PLL3_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800200a:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800200c:	bf0c      	ite	eq
 800200e:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8002012:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8002016:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8002018:	4c0d      	ldr	r4, [pc, #52]	; (8002050 <RCCEx_PLL3_Config+0xec>)
 800201a:	6823      	ldr	r3, [r4, #0]
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002020:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002022:	f7fe ff4d 	bl	8000ec0 <HAL_GetTick>
 8002026:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002028:	e004      	b.n	8002034 <RCCEx_PLL3_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800202a:	f7fe ff49 	bl	8000ec0 <HAL_GetTick>
 800202e:	1b40      	subs	r0, r0, r5
 8002030:	2802      	cmp	r0, #2
 8002032:	d804      	bhi.n	800203e <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002034:	6823      	ldr	r3, [r4, #0]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	d5f7      	bpl.n	800202a <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 800203a:	2000      	movs	r0, #0
}
 800203c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800203e:	2003      	movs	r0, #3
}
 8002040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002042:	2001      	movs	r0, #1
}
 8002044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8002046:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800204a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800204c:	e7e4      	b.n	8002018 <RCCEx_PLL3_Config+0xb4>
 800204e:	bf00      	nop
 8002050:	58024400 	.word	0x58024400
 8002054:	ffff0007 	.word	0xffff0007

08002058 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800205c:	6803      	ldr	r3, [r0, #0]
{
 800205e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002060:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8002064:	d01c      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8002066:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8002068:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800206c:	f000 84ac 	beq.w	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x970>
 8002070:	d823      	bhi.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002072:	2a00      	cmp	r2, #0
 8002074:	f000 83b8 	beq.w	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x790>
 8002078:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800207c:	d120      	bne.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800207e:	2102      	movs	r1, #2
 8002080:	3004      	adds	r0, #4
 8002082:	f7ff fef5 	bl	8001e70 <RCCEx_PLL2_Config>
 8002086:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002088:	2e00      	cmp	r6, #0
 800208a:	f040 84a5 	bne.w	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x980>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800208e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002090:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002092:	489a      	ldr	r0, [pc, #616]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002094:	2600      	movs	r6, #0
 8002096:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8002098:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800209c:	430a      	orrs	r2, r1
 800209e:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80020a0:	05d8      	lsls	r0, r3, #23
 80020a2:	d511      	bpl.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 80020a4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80020a6:	2a04      	cmp	r2, #4
 80020a8:	f200 84e2 	bhi.w	8002a70 <HAL_RCCEx_PeriphCLKConfig+0xa18>
 80020ac:	e8df f012 	tbh	[pc, r2, lsl #1]
 80020b0:	0473046c 	.word	0x0473046c
 80020b4:	02cd0458 	.word	0x02cd0458
 80020b8:	02cd      	.short	0x02cd
    switch(PeriphClkInit->SpdifrxClockSelection)
 80020ba:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80020be:	d0e8      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80020c0:	05d8      	lsls	r0, r3, #23
    switch(PeriphClkInit->SpdifrxClockSelection)
 80020c2:	f04f 0601 	mov.w	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80020c6:	d4ed      	bmi.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 80020c8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80020ca:	0599      	lsls	r1, r3, #22
 80020cc:	d51b      	bpl.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai2AClockSelection)
 80020ce:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80020d0:	2a80      	cmp	r2, #128	; 0x80
 80020d2:	f000 8467 	beq.w	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 80020d6:	f200 80c7 	bhi.w	8002268 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80020da:	2a00      	cmp	r2, #0
 80020dc:	f000 837e 	beq.w	80027dc <HAL_RCCEx_PeriphCLKConfig+0x784>
 80020e0:	2a40      	cmp	r2, #64	; 0x40
 80020e2:	f040 80ca 	bne.w	800227a <HAL_RCCEx_PeriphCLKConfig+0x222>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80020e6:	2100      	movs	r1, #0
 80020e8:	1d20      	adds	r0, r4, #4
 80020ea:	f7ff fec1 	bl	8001e70 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80020ee:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80020f0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80020f2:	2d00      	cmp	r5, #0
 80020f4:	f040 8354 	bne.w	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80020f8:	4980      	ldr	r1, [pc, #512]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80020fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020fc:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80020fe:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 8002102:	4302      	orrs	r2, r0
 8002104:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002106:	055a      	lsls	r2, r3, #21
 8002108:	d51d      	bpl.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0xee>
    switch(PeriphClkInit->Sai2BClockSelection)
 800210a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800210c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002110:	f000 8451 	beq.w	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x95e>
 8002114:	f200 80b4 	bhi.w	8002280 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8002118:	2a00      	cmp	r2, #0
 800211a:	f000 8353 	beq.w	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x76c>
 800211e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002122:	f040 80b7 	bne.w	8002294 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002126:	2100      	movs	r1, #0
 8002128:	1d20      	adds	r0, r4, #4
 800212a:	f7ff fea1 	bl	8001e70 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800212e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002130:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002132:	2d00      	cmp	r5, #0
 8002134:	f040 8330 	bne.w	8002798 <HAL_RCCEx_PeriphCLKConfig+0x740>
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002138:	4970      	ldr	r1, [pc, #448]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800213a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800213c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800213e:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8002142:	4302      	orrs	r2, r0
 8002144:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002146:	019f      	lsls	r7, r3, #6
 8002148:	d518      	bpl.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x124>
    switch(PeriphClkInit->OspiClockSelection)
 800214a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800214c:	2a20      	cmp	r2, #32
 800214e:	f000 83e3 	beq.w	8002918 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8002152:	f200 80a2 	bhi.w	800229a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8002156:	b13a      	cbz	r2, 8002168 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002158:	2a10      	cmp	r2, #16
 800215a:	f040 80a1 	bne.w	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x248>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800215e:	4967      	ldr	r1, [pc, #412]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002160:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002162:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002166:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8002168:	2d00      	cmp	r5, #0
 800216a:	f040 8345 	bne.w	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800216e:	4963      	ldr	r1, [pc, #396]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002170:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002172:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002174:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002178:	4302      	orrs	r2, r0
 800217a:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800217c:	04d8      	lsls	r0, r3, #19
 800217e:	d51d      	bpl.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi123ClockSelection)
 8002180:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002182:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002186:	f000 83f7 	beq.w	8002978 <HAL_RCCEx_PeriphCLKConfig+0x920>
 800218a:	f200 808c 	bhi.w	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800218e:	2a00      	cmp	r2, #0
 8002190:	f000 831e 	beq.w	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x778>
 8002194:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002198:	f040 808d 	bne.w	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800219c:	2100      	movs	r1, #0
 800219e:	1d20      	adds	r0, r4, #4
 80021a0:	f7ff fe66 	bl	8001e70 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80021a4:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80021a6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80021a8:	2d00      	cmp	r5, #0
 80021aa:	f040 82f7 	bne.w	800279c <HAL_RCCEx_PeriphCLKConfig+0x744>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80021ae:	4953      	ldr	r1, [pc, #332]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80021b0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80021b2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80021b4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80021b8:	4302      	orrs	r2, r0
 80021ba:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80021bc:	0499      	lsls	r1, r3, #18
 80021be:	d519      	bpl.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    switch(PeriphClkInit->Spi45ClockSelection)
 80021c0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80021c2:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80021c6:	f000 838b 	beq.w	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x888>
 80021ca:	d877      	bhi.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x264>
 80021cc:	b142      	cbz	r2, 80021e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80021ce:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80021d2:	d17b      	bne.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x274>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80021d4:	2101      	movs	r1, #1
 80021d6:	1d20      	adds	r0, r4, #4
 80021d8:	f7ff fe4a 	bl	8001e70 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80021dc:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80021de:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80021e0:	2d00      	cmp	r5, #0
 80021e2:	f040 830b 	bne.w	80027fc <HAL_RCCEx_PeriphCLKConfig+0x7a4>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80021e6:	4945      	ldr	r1, [pc, #276]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80021e8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80021ea:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80021ec:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80021f0:	4302      	orrs	r2, r0
 80021f2:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80021f4:	045a      	lsls	r2, r3, #17
 80021f6:	d51b      	bpl.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    switch(PeriphClkInit->Spi6ClockSelection)
 80021f8:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 80021fc:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002200:	f000 8380 	beq.w	8002904 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8002204:	d865      	bhi.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8002206:	b142      	cbz	r2, 800221a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002208:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800220c:	d168      	bne.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x288>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800220e:	2101      	movs	r1, #1
 8002210:	1d20      	adds	r0, r4, #4
 8002212:	f7ff fe2d 	bl	8001e70 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002216:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002218:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800221a:	2d00      	cmp	r5, #0
 800221c:	f040 8307 	bne.w	800282e <HAL_RCCEx_PeriphCLKConfig+0x7d6>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002220:	4936      	ldr	r1, [pc, #216]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002222:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8002226:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002228:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800222c:	4302      	orrs	r2, r0
 800222e:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002230:	041f      	lsls	r7, r3, #16
 8002232:	d50d      	bpl.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    switch(PeriphClkInit->FdcanClockSelection)
 8002234:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8002236:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800223a:	f000 835b 	beq.w	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 800223e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002242:	f000 8237 	beq.w	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8002246:	2a00      	cmp	r2, #0
 8002248:	f000 823a 	beq.w	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x668>
 800224c:	2601      	movs	r6, #1
 800224e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002250:	01d8      	lsls	r0, r3, #7
 8002252:	d55f      	bpl.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    switch(PeriphClkInit->FmcClockSelection)
 8002254:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002256:	2a03      	cmp	r2, #3
 8002258:	f200 8407 	bhi.w	8002a6a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800225c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002260:	03230056 	.word	0x03230056
 8002264:	00560050 	.word	0x00560050
    switch(PeriphClkInit->Sai2AClockSelection)
 8002268:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800226c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002270:	f43f af3f 	beq.w	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8002274:	2ac0      	cmp	r2, #192	; 0xc0
 8002276:	f43f af3c 	beq.w	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800227a:	2601      	movs	r6, #1
 800227c:	4635      	mov	r5, r6
 800227e:	e742      	b.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai2BClockSelection)
 8002280:	f422 7100 	bic.w	r1, r2, #512	; 0x200
 8002284:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8002288:	f43f af53 	beq.w	8002132 <HAL_RCCEx_PeriphCLKConfig+0xda>
 800228c:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 8002290:	f43f af4f 	beq.w	8002132 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002294:	2601      	movs	r6, #1
 8002296:	4635      	mov	r5, r6
 8002298:	e755      	b.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0xee>
    switch(PeriphClkInit->OspiClockSelection)
 800229a:	2a30      	cmp	r2, #48	; 0x30
 800229c:	f43f af64 	beq.w	8002168 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80022a0:	2601      	movs	r6, #1
 80022a2:	4635      	mov	r5, r6
 80022a4:	e76a      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x124>
    switch(PeriphClkInit->Spi123ClockSelection)
 80022a6:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80022aa:	f43f af7d 	beq.w	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80022ae:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80022b2:	f43f af79 	beq.w	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80022b6:	2601      	movs	r6, #1
 80022b8:	4635      	mov	r5, r6
 80022ba:	e77f      	b.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi45ClockSelection)
 80022bc:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80022c0:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80022c4:	d08c      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80022c6:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80022ca:	d089      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80022cc:	2601      	movs	r6, #1
 80022ce:	4635      	mov	r5, r6
 80022d0:	e790      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    switch(PeriphClkInit->Spi6ClockSelection)
 80022d2:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80022d6:	d0a0      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80022d8:	d905      	bls.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80022da:	f1b2 4fc0 	cmp.w	r2, #1610612736	; 0x60000000
 80022de:	d09c      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80022e0:	2601      	movs	r6, #1
 80022e2:	4635      	mov	r5, r6
 80022e4:	e7a4      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80022e6:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80022ea:	d096      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80022ec:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80022f0:	d1f6      	bne.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x288>
    if(ret == HAL_OK)
 80022f2:	2d00      	cmp	r5, #0
 80022f4:	f040 829b 	bne.w	800282e <HAL_RCCEx_PeriphCLKConfig+0x7d6>
 80022f8:	e792      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80022fa:	bf00      	nop
 80022fc:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002300:	2102      	movs	r1, #2
 8002302:	1d20      	adds	r0, r4, #4
 8002304:	f7ff fdb4 	bl	8001e70 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002308:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800230a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800230c:	2d00      	cmp	r5, #0
 800230e:	f000 8290 	beq.w	8002832 <HAL_RCCEx_PeriphCLKConfig+0x7da>
 8002312:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002314:	0259      	lsls	r1, r3, #9
 8002316:	f100 81f1 	bmi.w	80026fc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800231a:	07df      	lsls	r7, r3, #31
 800231c:	d530      	bpl.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x328>
    switch(PeriphClkInit->Usart16ClockSelection)
 800231e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8002322:	2a28      	cmp	r2, #40	; 0x28
 8002324:	d82a      	bhi.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002326:	e8df f012 	tbh	[pc, r2, lsl #1]
 800232a:	01dd      	.short	0x01dd
 800232c:	00290029 	.word	0x00290029
 8002330:	00290029 	.word	0x00290029
 8002334:	00290029 	.word	0x00290029
 8002338:	036e0029 	.word	0x036e0029
 800233c:	00290029 	.word	0x00290029
 8002340:	00290029 	.word	0x00290029
 8002344:	00290029 	.word	0x00290029
 8002348:	01d60029 	.word	0x01d60029
 800234c:	00290029 	.word	0x00290029
 8002350:	00290029 	.word	0x00290029
 8002354:	00290029 	.word	0x00290029
 8002358:	01dd0029 	.word	0x01dd0029
 800235c:	00290029 	.word	0x00290029
 8002360:	00290029 	.word	0x00290029
 8002364:	00290029 	.word	0x00290029
 8002368:	01dd0029 	.word	0x01dd0029
 800236c:	00290029 	.word	0x00290029
 8002370:	00290029 	.word	0x00290029
 8002374:	00290029 	.word	0x00290029
 8002378:	01dd0029 	.word	0x01dd0029
 800237c:	2601      	movs	r6, #1
 800237e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002380:	0798      	lsls	r0, r3, #30
 8002382:	d516      	bpl.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002384:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002386:	2a05      	cmp	r2, #5
 8002388:	f200 8375 	bhi.w	8002a76 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800238c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002390:	0331000d 	.word	0x0331000d
 8002394:	000d0006 	.word	0x000d0006
 8002398:	000d000d 	.word	0x000d000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800239c:	2101      	movs	r1, #1
 800239e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80023a2:	f7ff fddf 	bl	8001f64 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023a6:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80023a8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80023aa:	2d00      	cmp	r5, #0
 80023ac:	f000 8228 	beq.w	8002800 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
 80023b0:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023b2:	0759      	lsls	r1, r3, #29
 80023b4:	d517      	bpl.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80023b6:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80023ba:	2a05      	cmp	r2, #5
 80023bc:	f200 8352 	bhi.w	8002a64 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80023c0:	e8df f012 	tbh	[pc, r2, lsl #1]
 80023c4:	030d000d 	.word	0x030d000d
 80023c8:	000d0006 	.word	0x000d0006
 80023cc:	000d000d 	.word	0x000d000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80023d0:	2101      	movs	r1, #1
 80023d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80023d6:	f7ff fdc5 	bl	8001f64 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023da:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80023dc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80023de:	2d00      	cmp	r5, #0
 80023e0:	f000 821c 	beq.w	800281c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 80023e4:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023e6:	069a      	lsls	r2, r3, #26
 80023e8:	d51d      	bpl.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80023ea:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 80023ee:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80023f2:	f000 826b 	beq.w	80028cc <HAL_RCCEx_PeriphCLKConfig+0x874>
 80023f6:	f200 80e5 	bhi.w	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 80023fa:	b14a      	cbz	r2, 8002410 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 80023fc:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8002400:	f040 80ea 	bne.w	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002404:	2100      	movs	r1, #0
 8002406:	1d20      	adds	r0, r4, #4
 8002408:	f7ff fd32 	bl	8001e70 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800240c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800240e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002410:	2d00      	cmp	r5, #0
 8002412:	f040 81ef 	bne.w	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002416:	49a6      	ldr	r1, [pc, #664]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002418:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800241c:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800241e:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8002422:	4302      	orrs	r2, r0
 8002424:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002426:	065f      	lsls	r7, r3, #25
 8002428:	d51d      	bpl.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800242a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 800242e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002432:	f000 8241 	beq.w	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8002436:	f200 80d2 	bhi.w	80025de <HAL_RCCEx_PeriphCLKConfig+0x586>
 800243a:	b14a      	cbz	r2, 8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800243c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002440:	f040 80d7 	bne.w	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002444:	2100      	movs	r1, #0
 8002446:	1d20      	adds	r0, r4, #4
 8002448:	f7ff fd12 	bl	8001e70 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800244c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800244e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002450:	2d00      	cmp	r5, #0
 8002452:	f040 81f6 	bne.w	8002842 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002456:	4996      	ldr	r1, [pc, #600]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002458:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 800245c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800245e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8002462:	4302      	orrs	r2, r0
 8002464:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002466:	0618      	lsls	r0, r3, #24
 8002468:	d51d      	bpl.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800246a:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 800246e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002472:	f000 820e 	beq.w	8002892 <HAL_RCCEx_PeriphCLKConfig+0x83a>
 8002476:	f200 80bf 	bhi.w	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
 800247a:	b14a      	cbz	r2, 8002490 <HAL_RCCEx_PeriphCLKConfig+0x438>
 800247c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002480:	f040 80c4 	bne.w	800260c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002484:	2100      	movs	r1, #0
 8002486:	1d20      	adds	r0, r4, #4
 8002488:	f7ff fcf2 	bl	8001e70 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800248c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800248e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002490:	2d00      	cmp	r5, #0
 8002492:	f040 81bd 	bne.w	8002810 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002496:	4986      	ldr	r1, [pc, #536]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002498:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 800249c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800249e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024a2:	4302      	orrs	r2, r0
 80024a4:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80024a6:	0719      	lsls	r1, r3, #28
 80024a8:	d50b      	bpl.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80024aa:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80024ae:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80024b2:	f000 8248 	beq.w	8002946 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80024b6:	487e      	ldr	r0, [pc, #504]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80024b8:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80024ba:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80024be:	430a      	orrs	r2, r1
 80024c0:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80024c2:	06da      	lsls	r2, r3, #27
 80024c4:	d50b      	bpl.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x486>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80024c6:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 80024ca:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80024ce:	f000 822d 	beq.w	800292c <HAL_RCCEx_PeriphCLKConfig+0x8d4>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80024d2:	4877      	ldr	r0, [pc, #476]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80024d4:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80024d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80024da:	430a      	orrs	r2, r1
 80024dc:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024de:	031f      	lsls	r7, r3, #12
 80024e0:	d50e      	bpl.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    switch(PeriphClkInit->AdcClockSelection)
 80024e2:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 80024e6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80024ea:	f000 80ba 	beq.w	8002662 <HAL_RCCEx_PeriphCLKConfig+0x60a>
 80024ee:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80024f2:	f000 80bd 	beq.w	8002670 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80024f6:	2900      	cmp	r1, #0
 80024f8:	f000 81bb 	beq.w	8002872 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80024fc:	2601      	movs	r6, #1
 80024fe:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002500:	0358      	lsls	r0, r3, #13
 8002502:	d50f      	bpl.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    switch(PeriphClkInit->UsbClockSelection)
 8002504:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002508:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800250c:	f000 80bc 	beq.w	8002688 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8002510:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8002514:	f000 80bf 	beq.w	8002696 <HAL_RCCEx_PeriphCLKConfig+0x63e>
 8002518:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800251c:	f000 81b1 	beq.w	8002882 <HAL_RCCEx_PeriphCLKConfig+0x82a>
 8002520:	2601      	movs	r6, #1
 8002522:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002524:	03d9      	lsls	r1, r3, #15
 8002526:	d509      	bpl.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    switch(PeriphClkInit->SdmmcClockSelection)
 8002528:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800252a:	2a00      	cmp	r2, #0
 800252c:	f000 8198 	beq.w	8002860 <HAL_RCCEx_PeriphCLKConfig+0x808>
 8002530:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002534:	f000 8136 	beq.w	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8002538:	2601      	movs	r6, #1
 800253a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800253c:	009a      	lsls	r2, r3, #2
 800253e:	f100 811e 	bmi.w	800277e <HAL_RCCEx_PeriphCLKConfig+0x726>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002542:	039f      	lsls	r7, r3, #14
 8002544:	d465      	bmi.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    return HAL_OK;
 8002546:	1e30      	subs	r0, r6, #0
 8002548:	bf18      	it	ne
 800254a:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800254c:	02de      	lsls	r6, r3, #11
 800254e:	d506      	bpl.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x506>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002550:	4957      	ldr	r1, [pc, #348]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002552:	6fa5      	ldr	r5, [r4, #120]	; 0x78
 8002554:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002556:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800255a:	432a      	orrs	r2, r5
 800255c:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800255e:	029d      	lsls	r5, r3, #10
 8002560:	d506      	bpl.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x518>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002562:	4953      	ldr	r1, [pc, #332]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002564:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8002566:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002568:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800256c:	432a      	orrs	r2, r5
 800256e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8002570:	0519      	lsls	r1, r3, #20
 8002572:	d506      	bpl.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8002574:	494e      	ldr	r1, [pc, #312]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002576:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8002578:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800257a:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 800257e:	432a      	orrs	r2, r5
 8002580:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002582:	005a      	lsls	r2, r3, #1
 8002584:	d509      	bpl.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x542>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002586:	4a4a      	ldr	r2, [pc, #296]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002588:	6911      	ldr	r1, [r2, #16]
 800258a:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800258e:	6111      	str	r1, [r2, #16]
 8002590:	6911      	ldr	r1, [r2, #16]
 8002592:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 8002596:	4329      	orrs	r1, r5
 8002598:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800259a:	2b00      	cmp	r3, #0
 800259c:	da06      	bge.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x554>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800259e:	4944      	ldr	r1, [pc, #272]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80025a0:	6d25      	ldr	r5, [r4, #80]	; 0x50
 80025a2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80025a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025a8:	432a      	orrs	r2, r5
 80025aa:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80025ac:	021b      	lsls	r3, r3, #8
 80025ae:	d507      	bpl.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x568>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80025b0:	4a3f      	ldr	r2, [pc, #252]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80025b2:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80025b6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80025b8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80025bc:	430b      	orrs	r3, r1
 80025be:	6553      	str	r3, [r2, #84]	; 0x54
}
 80025c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Lptim1ClockSelection)
 80025c4:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80025c8:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80025cc:	f43f af20 	beq.w	8002410 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 80025d0:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80025d4:	f43f af1c 	beq.w	8002410 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 80025d8:	2601      	movs	r6, #1
 80025da:	4635      	mov	r5, r6
 80025dc:	e723      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80025de:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 80025e2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80025e6:	f43f af33 	beq.w	8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80025ea:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80025ee:	f43f af2f 	beq.w	8002450 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80025f2:	2601      	movs	r6, #1
 80025f4:	4635      	mov	r5, r6
 80025f6:	e736      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80025f8:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80025fc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002600:	f43f af46 	beq.w	8002490 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8002604:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8002608:	f43f af42 	beq.w	8002490 <HAL_RCCEx_PeriphCLKConfig+0x438>
 800260c:	2601      	movs	r6, #1
 800260e:	4635      	mov	r5, r6
 8002610:	e749      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    switch(PeriphClkInit->RngClockSelection)
 8002612:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002616:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800261a:	f000 8118 	beq.w	800284e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800261e:	d906      	bls.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8002620:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 8002624:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002628:	d003      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x5da>
 800262a:	2001      	movs	r0, #1
 800262c:	e78e      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800262e:	2a00      	cmp	r2, #0
 8002630:	d1fb      	bne.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    if(ret == HAL_OK)
 8002632:	2d00      	cmp	r5, #0
 8002634:	d1f9      	bne.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002636:	4d1e      	ldr	r5, [pc, #120]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
    return HAL_OK;
 8002638:	1e30      	subs	r0, r6, #0
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800263a:	6d69      	ldr	r1, [r5, #84]	; 0x54
    return HAL_OK;
 800263c:	bf18      	it	ne
 800263e:	2001      	movne	r0, #1
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002640:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002644:	430a      	orrs	r2, r1
 8002646:	656a      	str	r2, [r5, #84]	; 0x54
 8002648:	e780      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    switch(PeriphClkInit->Sai1ClockSelection)
 800264a:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 800264c:	2d00      	cmp	r5, #0
 800264e:	f040 80a1 	bne.w	8002794 <HAL_RCCEx_PeriphCLKConfig+0x73c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002652:	4917      	ldr	r1, [pc, #92]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002654:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002656:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002658:	f022 0207 	bic.w	r2, r2, #7
 800265c:	4302      	orrs	r2, r0
 800265e:	650a      	str	r2, [r1, #80]	; 0x50
 8002660:	e533      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002662:	2102      	movs	r1, #2
 8002664:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002668:	f7ff fc7c 	bl	8001f64 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800266c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800266e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002670:	2d00      	cmp	r5, #0
 8002672:	f040 80d1 	bne.w	8002818 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002676:	490e      	ldr	r1, [pc, #56]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002678:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800267c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800267e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002682:	4302      	orrs	r2, r0
 8002684:	658a      	str	r2, [r1, #88]	; 0x58
 8002686:	e73b      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002688:	2101      	movs	r1, #1
 800268a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800268e:	f7ff fc69 	bl	8001f64 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002692:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002694:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002696:	2d00      	cmp	r5, #0
 8002698:	f040 80bc 	bne.w	8002814 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800269c:	4904      	ldr	r1, [pc, #16]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800269e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80026a2:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80026a4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80026a8:	4302      	orrs	r2, r0
 80026aa:	654a      	str	r2, [r1, #84]	; 0x54
 80026ac:	e73a      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 80026ae:	bf00      	nop
 80026b0:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80026b4:	2101      	movs	r1, #1
 80026b6:	1d20      	adds	r0, r4, #4
 80026b8:	f7ff fbda 	bl	8001e70 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80026bc:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80026be:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80026c0:	2d00      	cmp	r5, #0
 80026c2:	f040 80c2 	bne.w	800284a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026c6:	49aa      	ldr	r1, [pc, #680]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80026c8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80026ca:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80026cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026d0:	4302      	orrs	r2, r0
 80026d2:	650a      	str	r2, [r1, #80]	; 0x50
 80026d4:	e5bc      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80026d6:	2101      	movs	r1, #1
 80026d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80026dc:	f7ff fc42 	bl	8001f64 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80026e0:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80026e2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80026e4:	2d00      	cmp	r5, #0
 80026e6:	f040 80ae 	bne.w	8002846 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80026ea:	49a1      	ldr	r1, [pc, #644]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80026ec:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80026f0:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80026f2:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80026f6:	4302      	orrs	r2, r0
 80026f8:	654a      	str	r2, [r1, #84]	; 0x54
 80026fa:	e641      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x328>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026fc:	4f9d      	ldr	r7, [pc, #628]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002704:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8002706:	f7fe fbdb 	bl	8000ec0 <HAL_GetTick>
 800270a:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800270c:	e006      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270e:	f7fe fbd7 	bl	8000ec0 <HAL_GetTick>
 8002712:	eba0 0008 	sub.w	r0, r0, r8
 8002716:	2864      	cmp	r0, #100	; 0x64
 8002718:	f200 817f 	bhi.w	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x9c2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	05da      	lsls	r2, r3, #23
 8002720:	d5f5      	bpl.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x6b6>
    if(ret == HAL_OK)
 8002722:	2d00      	cmp	r5, #0
 8002724:	f040 819b 	bne.w	8002a5e <HAL_RCCEx_PeriphCLKConfig+0xa06>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002728:	4a91      	ldr	r2, [pc, #580]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800272a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800272e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002730:	4059      	eors	r1, r3
 8002732:	f411 7f40 	tst.w	r1, #768	; 0x300
 8002736:	d00b      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002738:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800273a:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800273c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8002740:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8002744:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002746:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8002748:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800274c:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800274e:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002754:	f000 8165 	beq.w	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002758:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800275c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002760:	f000 8173 	beq.w	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8002764:	4982      	ldr	r1, [pc, #520]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002766:	690a      	ldr	r2, [r1, #16]
 8002768:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800276c:	610a      	str	r2, [r1, #16]
 800276e:	4a80      	ldr	r2, [pc, #512]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002774:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002776:	430b      	orrs	r3, r1
 8002778:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800277a:	6823      	ldr	r3, [r4, #0]
 800277c:	e5cd      	b.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800277e:	2102      	movs	r1, #2
 8002780:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002784:	f7ff fbee 	bl	8001f64 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002788:	6823      	ldr	r3, [r4, #0]
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800278a:	2800      	cmp	r0, #0
 800278c:	f43f aed9 	beq.w	8002542 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      status=HAL_ERROR;
 8002790:	2601      	movs	r6, #1
 8002792:	e6d6      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8002794:	462e      	mov	r6, r5
 8002796:	e498      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002798:	462e      	mov	r6, r5
 800279a:	e4d4      	b.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0xee>
 800279c:	462e      	mov	r6, r5
 800279e:	e50d      	b.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x164>
 80027a0:	462e      	mov	r6, r5
 80027a2:	e4b0      	b.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0xae>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80027a4:	2102      	movs	r1, #2
 80027a6:	1d20      	adds	r0, r4, #4
 80027a8:	f7ff fb62 	bl	8001e70 <RCCEx_PLL2_Config>
 80027ac:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80027ae:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80027b0:	2d00      	cmp	r5, #0
 80027b2:	d15c      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x816>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80027b4:	496e      	ldr	r1, [pc, #440]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80027b6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80027b8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80027ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027be:	4302      	orrs	r2, r0
 80027c0:	64ca      	str	r2, [r1, #76]	; 0x4c
 80027c2:	e6bb      	b.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027c4:	496a      	ldr	r1, [pc, #424]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80027c6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80027c8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80027cc:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80027ce:	e4b0      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0xda>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027d0:	4967      	ldr	r1, [pc, #412]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80027d2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80027d4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80027d8:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80027da:	e4e5      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027dc:	4964      	ldr	r1, [pc, #400]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80027de:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80027e0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80027e4:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80027e6:	e484      	b.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027e8:	4861      	ldr	r0, [pc, #388]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80027ea:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80027ec:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80027f0:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 80027f2:	e44e      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 80027f4:	462e      	mov	r6, r5
 80027f6:	e616      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80027f8:	462e      	mov	r6, r5
 80027fa:	e4bf      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x124>
 80027fc:	462e      	mov	r6, r5
 80027fe:	e4f9      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002800:	495b      	ldr	r1, [pc, #364]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002802:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002804:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002806:	f022 0207 	bic.w	r2, r2, #7
 800280a:	4302      	orrs	r2, r0
 800280c:	654a      	str	r2, [r1, #84]	; 0x54
 800280e:	e5d0      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002810:	462e      	mov	r6, r5
 8002812:	e648      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002814:	462e      	mov	r6, r5
 8002816:	e685      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8002818:	462e      	mov	r6, r5
 800281a:	e671      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800281c:	4954      	ldr	r1, [pc, #336]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800281e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8002822:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002824:	f022 0207 	bic.w	r2, r2, #7
 8002828:	4302      	orrs	r2, r0
 800282a:	658a      	str	r2, [r1, #88]	; 0x58
 800282c:	e5db      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800282e:	462e      	mov	r6, r5
 8002830:	e4fe      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002832:	494f      	ldr	r1, [pc, #316]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002834:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002836:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002838:	f022 0203 	bic.w	r2, r2, #3
 800283c:	4302      	orrs	r2, r0
 800283e:	64ca      	str	r2, [r1, #76]	; 0x4c
 8002840:	e568      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8002842:	462e      	mov	r6, r5
 8002844:	e60f      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002846:	462e      	mov	r6, r5
 8002848:	e59a      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x328>
 800284a:	462e      	mov	r6, r5
 800284c:	e500      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800284e:	4848      	ldr	r0, [pc, #288]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002850:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002852:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002856:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8002858:	2d00      	cmp	r5, #0
 800285a:	f47f aee6 	bne.w	800262a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800285e:	e6ea      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x5de>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002860:	4943      	ldr	r1, [pc, #268]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002862:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002864:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002868:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800286a:	2d00      	cmp	r5, #0
 800286c:	d0a2      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 800286e:	462e      	mov	r6, r5
 8002870:	e664      	b.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002872:	1d20      	adds	r0, r4, #4
 8002874:	f7ff fafc 	bl	8001e70 <RCCEx_PLL2_Config>
 8002878:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800287a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800287c:	2d00      	cmp	r5, #0
 800287e:	d1cb      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8002880:	e6f9      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002882:	493b      	ldr	r1, [pc, #236]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002884:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002886:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800288a:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800288c:	2d00      	cmp	r5, #0
 800288e:	d1c1      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8002890:	e704      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x644>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002892:	2102      	movs	r1, #2
 8002894:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002898:	f7ff fb64 	bl	8001f64 <RCCEx_PLL3_Config>
 800289c:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800289e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80028a0:	2d00      	cmp	r5, #0
 80028a2:	d1b5      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 80028a4:	e5f7      	b.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x43e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028a6:	4932      	ldr	r1, [pc, #200]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80028a8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80028aa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80028ae:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80028b0:	2d00      	cmp	r5, #0
 80028b2:	f47f ad2e 	bne.w	8002312 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80028b6:	e7bc      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x7da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80028b8:	2102      	movs	r1, #2
 80028ba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80028be:	f7ff fb51 	bl	8001f64 <RCCEx_PLL3_Config>
 80028c2:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80028c4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80028c6:	2d00      	cmp	r5, #0
 80028c8:	d1bb      	bne.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
 80028ca:	e5c4      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80028cc:	2102      	movs	r1, #2
 80028ce:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80028d2:	f7ff fb47 	bl	8001f64 <RCCEx_PLL3_Config>
 80028d6:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80028d8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80028da:	2d00      	cmp	r5, #0
 80028dc:	d18a      	bne.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
 80028de:	e59a      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x3be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80028e0:	2101      	movs	r1, #1
 80028e2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80028e6:	f7ff fb3d 	bl	8001f64 <RCCEx_PLL3_Config>
 80028ea:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80028ec:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80028ee:	2d00      	cmp	r5, #0
 80028f0:	d184      	bne.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x7a4>
 80028f2:	e478      	b.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028f4:	491e      	ldr	r1, [pc, #120]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80028f6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80028f8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80028fc:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80028fe:	2d00      	cmp	r5, #0
 8002900:	d1a3      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8002902:	e6e0      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002904:	2101      	movs	r1, #1
 8002906:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800290a:	f7ff fb2b 	bl	8001f64 <RCCEx_PLL3_Config>
 800290e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002910:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8002912:	2d00      	cmp	r5, #0
 8002914:	d18b      	bne.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x7d6>
 8002916:	e483      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002918:	2102      	movs	r1, #2
 800291a:	1d20      	adds	r0, r4, #4
 800291c:	f7ff faa8 	bl	8001e70 <RCCEx_PLL2_Config>
 8002920:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002922:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8002924:	2d00      	cmp	r5, #0
 8002926:	f47f af67 	bne.w	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
 800292a:	e420      	b.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x116>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800292c:	2102      	movs	r1, #2
 800292e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002932:	f7ff fb17 	bl	8001f64 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002936:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800293a:	6823      	ldr	r3, [r4, #0]
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800293c:	2800      	cmp	r0, #0
 800293e:	f43f adc8 	beq.w	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
        status = HAL_ERROR;
 8002942:	2601      	movs	r6, #1
 8002944:	e5c5      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002946:	2102      	movs	r1, #2
 8002948:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800294c:	f7ff fb0a 	bl	8001f64 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002950:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002954:	6823      	ldr	r3, [r4, #0]
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002956:	2800      	cmp	r0, #0
 8002958:	f43f adad 	beq.w	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
          status = HAL_ERROR;
 800295c:	2601      	movs	r6, #1
 800295e:	e5aa      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002960:	2100      	movs	r1, #0
 8002962:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002966:	f7ff fafd 	bl	8001f64 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800296a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800296c:	4605      	mov	r5, r0
      break;
 800296e:	e66d      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8002970:	58024400 	.word	0x58024400
 8002974:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002978:	2100      	movs	r1, #0
 800297a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800297e:	f7ff faf1 	bl	8001f64 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002982:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002984:	4605      	mov	r5, r0
      break;
 8002986:	e40f      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002988:	493c      	ldr	r1, [pc, #240]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
      break;
 800298a:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800298c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800298e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002992:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8002994:	e65a      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002996:	2100      	movs	r1, #0
 8002998:	1d20      	adds	r0, r4, #4
 800299a:	f7ff fa69 	bl	8001e70 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800299e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029a0:	4605      	mov	r5, r0
      break;
 80029a2:	e653      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029a4:	2100      	movs	r1, #0
 80029a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80029aa:	f7ff fadb 	bl	8001f64 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80029ae:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029b0:	4605      	mov	r5, r0
      break;
 80029b2:	f7ff bb9e 	b.w	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029b6:	2100      	movs	r1, #0
 80029b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80029bc:	f7ff fad2 	bl	8001f64 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80029c0:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029c2:	4605      	mov	r5, r0
      break;
 80029c4:	f7ff bbb5 	b.w	8002132 <HAL_RCCEx_PeriphCLKConfig+0xda>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80029c8:	2102      	movs	r1, #2
 80029ca:	3024      	adds	r0, #36	; 0x24
 80029cc:	f7ff faca 	bl	8001f64 <RCCEx_PLL3_Config>
 80029d0:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80029d2:	2e00      	cmp	r6, #0
 80029d4:	f43f ab5b 	beq.w	800208e <HAL_RCCEx_PeriphCLKConfig+0x36>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029d8:	6823      	ldr	r3, [r4, #0]
 80029da:	f7ff bb61 	b.w	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80029de:	2101      	movs	r1, #1
 80029e0:	1d20      	adds	r0, r4, #4
 80029e2:	f7ff fa45 	bl	8001e70 <RCCEx_PLL2_Config>
 80029e6:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029e8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80029ea:	2d00      	cmp	r5, #0
 80029ec:	f47f acfa 	bne.w	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 80029f0:	e714      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80029f2:	2101      	movs	r1, #1
 80029f4:	1d20      	adds	r0, r4, #4
 80029f6:	f7ff fa3b 	bl	8001e70 <RCCEx_PLL2_Config>
 80029fa:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029fc:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80029fe:	2d00      	cmp	r5, #0
 8002a00:	f47f acd6 	bne.w	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8002a04:	e6fc      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a06:	2101      	movs	r1, #1
 8002a08:	1d20      	adds	r0, r4, #4
 8002a0a:	f7ff fa31 	bl	8001e70 <RCCEx_PLL2_Config>
 8002a0e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002a10:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8002a12:	2d00      	cmp	r5, #0
 8002a14:	f47f af17 	bne.w	8002846 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 8002a18:	e667      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x692>
            ret = HAL_TIMEOUT;
 8002a1a:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002a1c:	6823      	ldr	r3, [r4, #0]
            ret = HAL_TIMEOUT;
 8002a1e:	4635      	mov	r5, r6
 8002a20:	e47b      	b.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
        tickstart = HAL_GetTick();
 8002a22:	f7fe fa4d 	bl	8000ec0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a26:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8002a7c <HAL_RCCEx_PeriphCLKConfig+0xa24>
        tickstart = HAL_GetTick();
 8002a2a:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a2c:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a30:	e004      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a32:	f7fe fa45 	bl	8000ec0 <HAL_GetTick>
 8002a36:	1bc0      	subs	r0, r0, r7
 8002a38:	4548      	cmp	r0, r9
 8002a3a:	d8ee      	bhi.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x9c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a3c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8002a40:	079b      	lsls	r3, r3, #30
 8002a42:	d5f6      	bpl.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x9da>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a44:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8002a48:	e686      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002a4a:	480c      	ldr	r0, [pc, #48]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8002a4c:	4a0c      	ldr	r2, [pc, #48]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0xa28>)
 8002a4e:	6901      	ldr	r1, [r0, #16]
 8002a50:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8002a54:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	6102      	str	r2, [r0, #16]
 8002a5c:	e687      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x716>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	462e      	mov	r6, r5
 8002a62:	e45a      	b.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002a64:	2601      	movs	r6, #1
 8002a66:	4635      	mov	r5, r6
 8002a68:	e4bd      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    switch(PeriphClkInit->FmcClockSelection)
 8002a6a:	2601      	movs	r6, #1
 8002a6c:	4635      	mov	r5, r6
 8002a6e:	e451      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002a70:	2601      	movs	r6, #1
 8002a72:	f7ff bb29 	b.w	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002a76:	2601      	movs	r6, #1
 8002a78:	4635      	mov	r5, r6
 8002a7a:	e49a      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002a7c:	58024400 	.word	0x58024400
 8002a80:	00ffffcf 	.word	0x00ffffcf

08002a84 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8002a84:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8002a86:	f7ff f923 	bl	8001cd0 <HAL_RCC_GetHCLKFreq>
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8002a8c:	4a05      	ldr	r2, [pc, #20]	; (8002aa4 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002a94:	5cd3      	ldrb	r3, [r2, r3]
 8002a96:	f003 031f 	and.w	r3, r3, #31
}
 8002a9a:	40d8      	lsrs	r0, r3
 8002a9c:	bd08      	pop	{r3, pc}
 8002a9e:	bf00      	nop
 8002aa0:	58024400 	.word	0x58024400
 8002aa4:	0800a450 	.word	0x0800a450

08002aa8 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002aa8:	4b4f      	ldr	r3, [pc, #316]	; (8002be8 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 8002aaa:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002aac:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8002aae:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002ab0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 8002ab2:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8002ab6:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002aba:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 8002abc:	d05c      	beq.n	8002b78 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002abe:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002ac2:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ac6:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002aca:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8002ace:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002ad0:	ee07 4a90 	vmov	s15, r4
 8002ad4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8002ad8:	d003      	beq.n	8002ae2 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8002ada:	2902      	cmp	r1, #2
 8002adc:	d075      	beq.n	8002bca <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 8002ade:	2900      	cmp	r1, #0
 8002ae0:	d04f      	beq.n	8002b82 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002ae2:	ee07 2a90 	vmov	s15, r2
 8002ae6:	eddf 6a41 	vldr	s13, [pc, #260]	; 8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8002aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af0:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8002af4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8002af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002afc:	ee06 3a90 	vmov	s13, r3
 8002b00:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8002b04:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002b08:	ee76 6a85 	vadd.f32	s13, s13, s10
 8002b0c:	eee7 6a25 	vfma.f32	s13, s14, s11
 8002b10:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8002b14:	4a34      	ldr	r2, [pc, #208]	; (8002be8 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8002b16:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002b1a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002b1c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002b20:	ee07 3a10 	vmov	s14, r3
 8002b24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8002b28:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8002b2a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002b2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b36:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8002b3a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002b3c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002b40:	ee07 3a10 	vmov	s14, r3
 8002b44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002b48:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b54:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8002b58:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002b5a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002b5e:	ee07 3a90 	vmov	s15, r3
 8002b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b66:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b6e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002b72:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8002b76:	4770      	bx	lr
 8002b78:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002b7a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002b7e:	6082      	str	r2, [r0, #8]
}
 8002b80:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b82:	6819      	ldr	r1, [r3, #0]
 8002b84:	0689      	lsls	r1, r1, #26
 8002b86:	d527      	bpl.n	8002bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002b88:	681c      	ldr	r4, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002b8a:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002b8e:	4919      	ldr	r1, [pc, #100]	; (8002bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002b90:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002b96:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b9e:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8002bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8002ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ba6:	40d1      	lsrs	r1, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002ba8:	ee06 3a90 	vmov	s13, r3
 8002bac:	ee05 1a90 	vmov	s11, r1
 8002bb0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002bb4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8002bb8:	ee76 6a86 	vadd.f32	s13, s13, s12
 8002bbc:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8002bc0:	eee7 6a05 	vfma.f32	s13, s14, s10
 8002bc4:	ee66 6a26 	vmul.f32	s13, s12, s13
 8002bc8:	e7a4      	b.n	8002b14 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002bca:	ee07 2a90 	vmov	s15, r2
 8002bce:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8002bd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bd6:	e78a      	b.n	8002aee <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002bd8:	ee07 2a90 	vmov	s15, r2
 8002bdc:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002bfc <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8002be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be4:	e783      	b.n	8002aee <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8002be6:	bf00      	nop
 8002be8:	58024400 	.word	0x58024400
 8002bec:	4a742400 	.word	0x4a742400
 8002bf0:	39000000 	.word	0x39000000
 8002bf4:	03d09000 	.word	0x03d09000
 8002bf8:	4af42400 	.word	0x4af42400
 8002bfc:	4c742400 	.word	0x4c742400

08002c00 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c00:	4b4f      	ldr	r3, [pc, #316]	; (8002d40 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 8002c02:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c04:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8002c06:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002c08:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 8002c0a:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8002c0e:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002c12:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 8002c14:	d05c      	beq.n	8002cd0 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002c16:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002c1a:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c1e:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002c22:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8002c26:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002c28:	ee07 4a90 	vmov	s15, r4
 8002c2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8002c30:	d003      	beq.n	8002c3a <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8002c32:	2902      	cmp	r1, #2
 8002c34:	d075      	beq.n	8002d22 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 8002c36:	2900      	cmp	r1, #0
 8002c38:	d04f      	beq.n	8002cda <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002c3a:	ee07 2a90 	vmov	s15, r2
 8002c3e:	eddf 6a41 	vldr	s13, [pc, #260]	; 8002d44 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8002c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8002c4c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002d48 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8002c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c54:	ee06 3a90 	vmov	s13, r3
 8002c58:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8002c5c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002c60:	ee76 6a85 	vadd.f32	s13, s13, s10
 8002c64:	eee7 6a25 	vfma.f32	s13, s14, s11
 8002c68:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8002c6c:	4a34      	ldr	r2, [pc, #208]	; (8002d40 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 8002c6e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002c72:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002c74:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002c78:	ee07 3a10 	vmov	s14, r3
 8002c7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8002c80:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8002c82:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002c86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c8e:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8002c92:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002c94:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002c98:	ee07 3a10 	vmov	s14, r3
 8002c9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002ca0:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002ca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cac:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8002cb0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002cb2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002cb6:	ee07 3a90 	vmov	s15, r3
 8002cba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cbe:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cc6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002cca:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8002cce:	4770      	bx	lr
 8002cd0:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002cd2:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002cd6:	6082      	str	r2, [r0, #8]
}
 8002cd8:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cda:	6819      	ldr	r1, [r3, #0]
 8002cdc:	0689      	lsls	r1, r1, #26
 8002cde:	d527      	bpl.n	8002d30 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ce0:	681c      	ldr	r4, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002ce2:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ce6:	4919      	ldr	r1, [pc, #100]	; (8002d4c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002ce8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002cee:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cf6:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8002d48 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8002cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002cfe:	40d1      	lsrs	r1, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002d00:	ee06 3a90 	vmov	s13, r3
 8002d04:	ee05 1a90 	vmov	s11, r1
 8002d08:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002d0c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8002d10:	ee76 6a86 	vadd.f32	s13, s13, s12
 8002d14:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8002d18:	eee7 6a05 	vfma.f32	s13, s14, s10
 8002d1c:	ee66 6a26 	vmul.f32	s13, s12, s13
 8002d20:	e7a4      	b.n	8002c6c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002d22:	ee07 2a90 	vmov	s15, r2
 8002d26:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002d50 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8002d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d2e:	e78a      	b.n	8002c46 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002d30:	ee07 2a90 	vmov	s15, r2
 8002d34:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002d54 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8002d38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d3c:	e783      	b.n	8002c46 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8002d3e:	bf00      	nop
 8002d40:	58024400 	.word	0x58024400
 8002d44:	4a742400 	.word	0x4a742400
 8002d48:	39000000 	.word	0x39000000
 8002d4c:	03d09000 	.word	0x03d09000
 8002d50:	4af42400 	.word	0x4af42400
 8002d54:	4c742400 	.word	0x4c742400

08002d58 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	f000 80a5 	beq.w	8002ea8 <HAL_TIM_Base_Init+0x150>
{
 8002d5e:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d60:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d64:	4604      	mov	r4, r0
 8002d66:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d076      	beq.n	8002e5c <HAL_TIM_Base_Init+0x104>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d6e:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002d70:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d72:	494e      	ldr	r1, [pc, #312]	; (8002eac <HAL_TIM_Base_Init+0x154>)
 8002d74:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 8002d78:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d7c:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8002d80:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d82:	fab1 f181 	clz	r1, r1
 8002d86:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8002d8a:	d027      	beq.n	8002ddc <HAL_TIM_Base_Init+0x84>
 8002d8c:	bb31      	cbnz	r1, 8002ddc <HAL_TIM_Base_Init+0x84>
 8002d8e:	4848      	ldr	r0, [pc, #288]	; (8002eb0 <HAL_TIM_Base_Init+0x158>)
 8002d90:	4d48      	ldr	r5, [pc, #288]	; (8002eb4 <HAL_TIM_Base_Init+0x15c>)
 8002d92:	4282      	cmp	r2, r0
 8002d94:	d067      	beq.n	8002e66 <HAL_TIM_Base_Init+0x10e>
 8002d96:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002d9a:	4282      	cmp	r2, r0
 8002d9c:	d063      	beq.n	8002e66 <HAL_TIM_Base_Init+0x10e>
 8002d9e:	1b55      	subs	r5, r2, r5
 8002da0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002da4:	fab5 f585 	clz	r5, r5
 8002da8:	4282      	cmp	r2, r0
 8002daa:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8002dae:	d063      	beq.n	8002e78 <HAL_TIM_Base_Init+0x120>
 8002db0:	2d00      	cmp	r5, #0
 8002db2:	d161      	bne.n	8002e78 <HAL_TIM_Base_Init+0x120>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002db4:	4840      	ldr	r0, [pc, #256]	; (8002eb8 <HAL_TIM_Base_Init+0x160>)
 8002db6:	4941      	ldr	r1, [pc, #260]	; (8002ebc <HAL_TIM_Base_Init+0x164>)
 8002db8:	428a      	cmp	r2, r1
 8002dba:	bf18      	it	ne
 8002dbc:	4282      	cmpne	r2, r0
 8002dbe:	d065      	beq.n	8002e8c <HAL_TIM_Base_Init+0x134>
 8002dc0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002dc4:	428a      	cmp	r2, r1
 8002dc6:	d061      	beq.n	8002e8c <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dc8:	69a0      	ldr	r0, [r4, #24]
 8002dca:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dce:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dd0:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8002dd2:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dd4:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dd6:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002dd8:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dda:	e023      	b.n	8002e24 <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ddc:	4d35      	ldr	r5, [pc, #212]	; (8002eb4 <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002de2:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002de4:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 8002de6:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002de8:	fab5 f585 	clz	r5, r5
 8002dec:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dee:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002df4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002df6:	69a0      	ldr	r0, [r4, #24]
 8002df8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dfc:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8002dfe:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e00:	68e3      	ldr	r3, [r4, #12]
 8002e02:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002e04:	6863      	ldr	r3, [r4, #4]
 8002e06:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e08:	b951      	cbnz	r1, 8002e20 <HAL_TIM_Base_Init+0xc8>
 8002e0a:	b94d      	cbnz	r5, 8002e20 <HAL_TIM_Base_Init+0xc8>
 8002e0c:	492a      	ldr	r1, [pc, #168]	; (8002eb8 <HAL_TIM_Base_Init+0x160>)
 8002e0e:	4b2b      	ldr	r3, [pc, #172]	; (8002ebc <HAL_TIM_Base_Init+0x164>)
 8002e10:	429a      	cmp	r2, r3
 8002e12:	bf18      	it	ne
 8002e14:	428a      	cmpne	r2, r1
 8002e16:	d003      	beq.n	8002e20 <HAL_TIM_Base_Init+0xc8>
 8002e18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d101      	bne.n	8002e24 <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e20:	6963      	ldr	r3, [r4, #20]
 8002e22:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e24:	2301      	movs	r3, #1
  return HAL_OK;
 8002e26:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8002e28:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e2a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e2e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002e32:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002e36:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002e3a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002e3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e46:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002e4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e4e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8002e52:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002e56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002e5a:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 8002e5c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002e60:	f7fd fe62 	bl	8000b28 <HAL_TIM_Base_MspInit>
 8002e64:	e783      	b.n	8002d6e <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e66:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e6c:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e6e:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
 8002e72:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e74:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e76:	e7ba      	b.n	8002dee <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
 8002e78:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e7e:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e80:	480f      	ldr	r0, [pc, #60]	; (8002ec0 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e82:	4282      	cmp	r2, r0
 8002e84:	d0b3      	beq.n	8002dee <HAL_TIM_Base_Init+0x96>
 8002e86:	2d00      	cmp	r5, #0
 8002e88:	d1b1      	bne.n	8002dee <HAL_TIM_Base_Init+0x96>
 8002e8a:	e793      	b.n	8002db4 <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e8c:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e92:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e94:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e96:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e9c:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8002e9e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8002ea0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ea2:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002ea4:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ea6:	e7b1      	b.n	8002e0c <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
 8002ea8:	2001      	movs	r0, #1
}
 8002eaa:	4770      	bx	lr
 8002eac:	40010000 	.word	0x40010000
 8002eb0:	40000400 	.word	0x40000400
 8002eb4:	40010400 	.word	0x40010400
 8002eb8:	40014000 	.word	0x40014000
 8002ebc:	40014400 	.word	0x40014400
 8002ec0:	40000c00 	.word	0x40000c00

08002ec4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002ec4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d141      	bne.n	8002f50 <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ecc:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002ece:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed0:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <HAL_TIM_Base_Start_IT+0xa0>)
 8002ed2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002ed6:	bf18      	it	ne
 8002ed8:	429a      	cmpne	r2, r3
{
 8002eda:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002edc:	bf0c      	ite	eq
 8002ede:	2301      	moveq	r3, #1
 8002ee0:	2300      	movne	r3, #0
 8002ee2:	4d21      	ldr	r5, [pc, #132]	; (8002f68 <HAL_TIM_Base_Start_IT+0xa4>)
 8002ee4:	4c21      	ldr	r4, [pc, #132]	; (8002f6c <HAL_TIM_Base_Start_IT+0xa8>)
 8002ee6:	42aa      	cmp	r2, r5
 8002ee8:	bf08      	it	eq
 8002eea:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002eee:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ef2:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ef4:	42a2      	cmp	r2, r4
 8002ef6:	bf08      	it	eq
 8002ef8:	f043 0301 	orreq.w	r3, r3, #1
 8002efc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f00:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f04:	481a      	ldr	r0, [pc, #104]	; (8002f70 <HAL_TIM_Base_Start_IT+0xac>)
 8002f06:	42a2      	cmp	r2, r4
 8002f08:	bf08      	it	eq
 8002f0a:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f0e:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f10:	4282      	cmp	r2, r0
 8002f12:	bf08      	it	eq
 8002f14:	f043 0301 	orreq.w	r3, r3, #1
 8002f18:	4916      	ldr	r1, [pc, #88]	; (8002f74 <HAL_TIM_Base_Start_IT+0xb0>)
 8002f1a:	428a      	cmp	r2, r1
 8002f1c:	bf08      	it	eq
 8002f1e:	f043 0301 	orreq.w	r3, r3, #1
 8002f22:	b933      	cbnz	r3, 8002f32 <HAL_TIM_Base_Start_IT+0x6e>
 8002f24:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 8002f28:	1a10      	subs	r0, r2, r0
 8002f2a:	fab0 f080 	clz	r0, r0
 8002f2e:	0940      	lsrs	r0, r0, #5
 8002f30:	b198      	cbz	r0, 8002f5a <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f32:	6891      	ldr	r1, [r2, #8]
 8002f34:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <HAL_TIM_Base_Start_IT+0xb4>)
 8002f36:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f38:	2b06      	cmp	r3, #6
 8002f3a:	d00b      	beq.n	8002f54 <HAL_TIM_Base_Start_IT+0x90>
 8002f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f40:	d008      	beq.n	8002f54 <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
 8002f42:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 8002f44:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	6013      	str	r3, [r2, #0]
}
 8002f4c:	bc30      	pop	{r4, r5}
 8002f4e:	4770      	bx	lr
    return HAL_ERROR;
 8002f50:	2001      	movs	r0, #1
}
 8002f52:	4770      	bx	lr
  return HAL_OK;
 8002f54:	2000      	movs	r0, #0
}
 8002f56:	bc30      	pop	{r4, r5}
 8002f58:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8002f5a:	6813      	ldr	r3, [r2, #0]
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	e7f3      	b.n	8002f4c <HAL_TIM_Base_Start_IT+0x88>
 8002f64:	40010000 	.word	0x40010000
 8002f68:	40000400 	.word	0x40000400
 8002f6c:	40000800 	.word	0x40000800
 8002f70:	40010400 	.word	0x40010400
 8002f74:	40001800 	.word	0x40001800
 8002f78:	00010007 	.word	0x00010007

08002f7c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002f7c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	f000 8081 	beq.w	8003088 <HAL_TIM_ConfigClockSource+0x10c>
 8002f86:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8002f88:	2302      	movs	r3, #2
{
 8002f8a:	b470      	push	{r4, r5, r6}
  tmpsmcr = htim->Instance->SMCR;
 8002f8c:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(htim);
 8002f8e:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002f90:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002f94:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f98:	4b5a      	ldr	r3, [pc, #360]	; (8003104 <HAL_TIM_ConfigClockSource+0x188>)
  tmpsmcr = htim->Instance->SMCR;
 8002f9a:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f9c:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8002f9e:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8002fa0:	680b      	ldr	r3, [r1, #0]
 8002fa2:	2b70      	cmp	r3, #112	; 0x70
 8002fa4:	f000 809c 	beq.w	80030e0 <HAL_TIM_ConfigClockSource+0x164>
 8002fa8:	d825      	bhi.n	8002ff6 <HAL_TIM_ConfigClockSource+0x7a>
 8002faa:	2b50      	cmp	r3, #80	; 0x50
 8002fac:	d06e      	beq.n	800308c <HAL_TIM_ConfigClockSource+0x110>
 8002fae:	d939      	bls.n	8003024 <HAL_TIM_ConfigClockSource+0xa8>
 8002fb0:	2b60      	cmp	r3, #96	; 0x60
 8002fb2:	d118      	bne.n	8002fe6 <HAL_TIM_ConfigClockSource+0x6a>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fb4:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fb6:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fb8:	f020 0010 	bic.w	r0, r0, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fbc:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fbe:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc0:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 8002fc2:	69a3      	ldr	r3, [r4, #24]
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fc8:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmpccer = TIMx->CCER;
 8002fcc:	6a21      	ldr	r1, [r4, #32]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fce:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fd2:	61a3      	str	r3, [r4, #24]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fd4:	4b4c      	ldr	r3, [pc, #304]	; (8003108 <HAL_TIM_ConfigClockSource+0x18c>)
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fd6:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCER = tmpccer;
 8002fda:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8002fdc:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fde:	400b      	ands	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fe0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fe4:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002fe6:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8002fe8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002fea:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002fee:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8002ff2:	bc70      	pop	{r4, r5, r6}
 8002ff4:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8002ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ffa:	d060      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x142>
 8002ffc:	d933      	bls.n	8003066 <HAL_TIM_ConfigClockSource+0xea>
 8002ffe:	4943      	ldr	r1, [pc, #268]	; (800310c <HAL_TIM_ConfigClockSource+0x190>)
 8003000:	428b      	cmp	r3, r1
 8003002:	d006      	beq.n	8003012 <HAL_TIM_ConfigClockSource+0x96>
 8003004:	d929      	bls.n	800305a <HAL_TIM_ConfigClockSource+0xde>
 8003006:	4942      	ldr	r1, [pc, #264]	; (8003110 <HAL_TIM_ConfigClockSource+0x194>)
 8003008:	428b      	cmp	r3, r1
 800300a:	d002      	beq.n	8003012 <HAL_TIM_ConfigClockSource+0x96>
 800300c:	3110      	adds	r1, #16
 800300e:	428b      	cmp	r3, r1
 8003010:	d1e9      	bne.n	8002fe6 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr = TIMx->SMCR;
 8003012:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003014:	493c      	ldr	r1, [pc, #240]	; (8003108 <HAL_TIM_ConfigClockSource+0x18c>)
 8003016:	4001      	ands	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 8003018:	2000      	movs	r0, #0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800301a:	430b      	orrs	r3, r1
 800301c:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8003020:	60a3      	str	r3, [r4, #8]
}
 8003022:	e7e0      	b.n	8002fe6 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 8003024:	2b40      	cmp	r3, #64	; 0x40
 8003026:	d123      	bne.n	8003070 <HAL_TIM_ConfigClockSource+0xf4>
  tmpccer = TIMx->CCER;
 8003028:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800302a:	6a25      	ldr	r5, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800302c:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800302e:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003032:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003036:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8003038:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 800303a:	4b33      	ldr	r3, [pc, #204]	; (8003108 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800303c:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800303e:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003040:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003044:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003048:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800304a:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800304c:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 800304e:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003050:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003052:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003056:	60a3      	str	r3, [r4, #8]
}
 8003058:	e7c5      	b.n	8002fe6 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800305a:	f023 0110 	bic.w	r1, r3, #16
 800305e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003062:	d1c0      	bne.n	8002fe6 <HAL_TIM_ConfigClockSource+0x6a>
 8003064:	e7d5      	b.n	8003012 <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 8003066:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 800306a:	bf18      	it	ne
 800306c:	2001      	movne	r0, #1
 800306e:	e7ba      	b.n	8002fe6 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 8003070:	d8b9      	bhi.n	8002fe6 <HAL_TIM_ConfigClockSource+0x6a>
 8003072:	2b20      	cmp	r3, #32
 8003074:	d0cd      	beq.n	8003012 <HAL_TIM_ConfigClockSource+0x96>
 8003076:	d903      	bls.n	8003080 <HAL_TIM_ConfigClockSource+0x104>
 8003078:	2b30      	cmp	r3, #48	; 0x30
 800307a:	d0ca      	beq.n	8003012 <HAL_TIM_ConfigClockSource+0x96>
 800307c:	2001      	movs	r0, #1
 800307e:	e7b2      	b.n	8002fe6 <HAL_TIM_ConfigClockSource+0x6a>
 8003080:	f033 0110 	bics.w	r1, r3, #16
 8003084:	d1af      	bne.n	8002fe6 <HAL_TIM_ConfigClockSource+0x6a>
 8003086:	e7c4      	b.n	8003012 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8003088:	2002      	movs	r0, #2
}
 800308a:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 800308c:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800308e:	6a25      	ldr	r5, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003090:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003092:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003096:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800309a:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800309c:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 800309e:	4b1a      	ldr	r3, [pc, #104]	; (8003108 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030a0:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030a2:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030a4:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030a8:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80030ac:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 80030ae:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 80030b0:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 80030b2:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80030b4:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030b6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80030ba:	60a3      	str	r3, [r4, #8]
}
 80030bc:	e793      	b.n	8002fe6 <HAL_TIM_ConfigClockSource+0x6a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030be:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80030c2:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030c4:	432b      	orrs	r3, r5
 80030c6:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030c8:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 80030cc:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030ce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80030d2:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030d4:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030d6:	68a3      	ldr	r3, [r4, #8]
 80030d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030dc:	60a3      	str	r3, [r4, #8]
      break;
 80030de:	e782      	b.n	8002fe6 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030e0:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80030e4:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030e6:	432b      	orrs	r3, r5
 80030e8:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030ea:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 80030ee:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030f0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80030f4:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80030f6:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80030f8:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80030fe:	60a3      	str	r3, [r4, #8]
      break;
 8003100:	e771      	b.n	8002fe6 <HAL_TIM_ConfigClockSource+0x6a>
 8003102:	bf00      	nop
 8003104:	ffce0088 	.word	0xffce0088
 8003108:	ffcfff8f 	.word	0xffcfff8f
 800310c:	00100020 	.word	0x00100020
 8003110:	00100030 	.word	0x00100030

08003114 <HAL_TIM_OC_DelayElapsedCallback>:
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop

08003118 <HAL_TIM_IC_CaptureCallback>:
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop

0800311c <HAL_TIM_PWM_PulseFinishedCallback>:
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop

08003120 <HAL_TIM_TriggerCallback>:
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop

08003124 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003124:	6803      	ldr	r3, [r0, #0]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	0791      	lsls	r1, r2, #30
{
 800312a:	b510      	push	{r4, lr}
 800312c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800312e:	d502      	bpl.n	8003136 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	0792      	lsls	r2, r2, #30
 8003134:	d468      	bmi.n	8003208 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	0752      	lsls	r2, r2, #29
 800313a:	d502      	bpl.n	8003142 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	0750      	lsls	r0, r2, #29
 8003140:	d44f      	bmi.n	80031e2 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	0711      	lsls	r1, r2, #28
 8003146:	d502      	bpl.n	800314e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	0712      	lsls	r2, r2, #28
 800314c:	d437      	bmi.n	80031be <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	06d0      	lsls	r0, r2, #27
 8003152:	d502      	bpl.n	800315a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	06d1      	lsls	r1, r2, #27
 8003158:	d41e      	bmi.n	8003198 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	07d2      	lsls	r2, r2, #31
 800315e:	d502      	bpl.n	8003166 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	07d0      	lsls	r0, r2, #31
 8003164:	d469      	bmi.n	800323a <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	0611      	lsls	r1, r2, #24
 800316a:	d502      	bpl.n	8003172 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	0612      	lsls	r2, r2, #24
 8003170:	d46b      	bmi.n	800324a <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	05d0      	lsls	r0, r2, #23
 8003176:	d502      	bpl.n	800317e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	0611      	lsls	r1, r2, #24
 800317c:	d46d      	bmi.n	800325a <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	0652      	lsls	r2, r2, #25
 8003182:	d502      	bpl.n	800318a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	0650      	lsls	r0, r2, #25
 8003188:	d46f      	bmi.n	800326a <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	0691      	lsls	r1, r2, #26
 800318e:	d502      	bpl.n	8003196 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	0692      	lsls	r2, r2, #26
 8003194:	d449      	bmi.n	800322a <HAL_TIM_IRQHandler+0x106>
}
 8003196:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003198:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800319c:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800319e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031a0:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031a2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80031aa:	d16f      	bne.n	800328c <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ac:	f7ff ffb2 	bl	8003114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b0:	4620      	mov	r0, r4
 80031b2:	f7ff ffb3 	bl	800311c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031b8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ba:	7722      	strb	r2, [r4, #28]
 80031bc:	e7cd      	b.n	800315a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031be:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031c2:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 80031c4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031c6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031c8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	079b      	lsls	r3, r3, #30
 80031ce:	d15a      	bne.n	8003286 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031d0:	f7ff ffa0 	bl	8003114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d4:	4620      	mov	r0, r4
 80031d6:	f7ff ffa1 	bl	800311c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031da:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031dc:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031de:	7722      	strb	r2, [r4, #28]
 80031e0:	e7b5      	b.n	800314e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031e2:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031e6:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80031e8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031ea:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031ec:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80031f4:	d144      	bne.n	8003280 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f6:	f7ff ff8d 	bl	8003114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031fa:	4620      	mov	r0, r4
 80031fc:	f7ff ff8e 	bl	800311c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003200:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003202:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003204:	7722      	strb	r2, [r4, #28]
 8003206:	e79c      	b.n	8003142 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003208:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800320c:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800320e:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003210:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	0799      	lsls	r1, r3, #30
 8003216:	d130      	bne.n	800327a <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003218:	f7ff ff7c 	bl	8003114 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800321c:	4620      	mov	r0, r4
 800321e:	f7ff ff7d 	bl	800311c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003222:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003224:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003226:	7722      	strb	r2, [r4, #28]
 8003228:	e785      	b.n	8003136 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800322a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800322e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003230:	611a      	str	r2, [r3, #16]
}
 8003232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003236:	f000 b887 	b.w	8003348 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800323a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800323e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003240:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003242:	f7fd fc41 	bl	8000ac8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003246:	6823      	ldr	r3, [r4, #0]
 8003248:	e78d      	b.n	8003166 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800324a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800324e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003250:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003252:	f000 f87b 	bl	800334c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	e78b      	b.n	8003172 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800325a:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800325e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003260:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003262:	f000 f875 	bl	8003350 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003266:	6823      	ldr	r3, [r4, #0]
 8003268:	e789      	b.n	800317e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800326a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800326e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003270:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003272:	f7ff ff55 	bl	8003120 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003276:	6823      	ldr	r3, [r4, #0]
 8003278:	e787      	b.n	800318a <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800327a:	f7ff ff4d 	bl	8003118 <HAL_TIM_IC_CaptureCallback>
 800327e:	e7d0      	b.n	8003222 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8003280:	f7ff ff4a 	bl	8003118 <HAL_TIM_IC_CaptureCallback>
 8003284:	e7bc      	b.n	8003200 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8003286:	f7ff ff47 	bl	8003118 <HAL_TIM_IC_CaptureCallback>
 800328a:	e7a6      	b.n	80031da <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800328c:	f7ff ff44 	bl	8003118 <HAL_TIM_IC_CaptureCallback>
 8003290:	e791      	b.n	80031b6 <HAL_TIM_IRQHandler+0x92>
 8003292:	bf00      	nop

08003294 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003294:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003298:	2b01      	cmp	r3, #1
 800329a:	d04b      	beq.n	8003334 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800329c:	6803      	ldr	r3, [r0, #0]
 800329e:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80032a0:	2002      	movs	r0, #2
{
 80032a2:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032a4:	4d24      	ldr	r5, [pc, #144]	; (8003338 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 80032a6:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032aa:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 80032ac:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80032ae:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032b0:	d029      	beq.n	8003306 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80032b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80032b6:	42ab      	cmp	r3, r5
 80032b8:	d025      	beq.n	8003306 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ba:	4d20      	ldr	r5, [pc, #128]	; (800333c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 80032bc:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032c0:	42ab      	cmp	r3, r5
 80032c2:	bf18      	it	ne
 80032c4:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 80032c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80032cc:	bf0c      	ite	eq
 80032ce:	f04f 0c01 	moveq.w	ip, #1
 80032d2:	f04f 0c00 	movne.w	ip, #0
 80032d6:	42ab      	cmp	r3, r5
 80032d8:	bf08      	it	eq
 80032da:	f04c 0c01 	orreq.w	ip, ip, #1
 80032de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80032e2:	42ab      	cmp	r3, r5
 80032e4:	bf08      	it	eq
 80032e6:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032ea:	680d      	ldr	r5, [r1, #0]
 80032ec:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ee:	4d14      	ldr	r5, [pc, #80]	; (8003340 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 80032f0:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032f2:	42ab      	cmp	r3, r5
 80032f4:	bf14      	ite	ne
 80032f6:	4660      	movne	r0, ip
 80032f8:	f04c 0001 	orreq.w	r0, ip, #1
 80032fc:	b960      	cbnz	r0, 8003318 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80032fe:	4811      	ldr	r0, [pc, #68]	; (8003344 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003300:	4283      	cmp	r3, r0
 8003302:	d009      	beq.n	8003318 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003304:	e00d      	b.n	8003322 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003306:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003308:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800330c:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800330e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003310:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003314:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8003316:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003318:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800331a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800331e:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003320:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003322:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003324:	2101      	movs	r1, #1

  return HAL_OK;
 8003326:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8003328:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800332c:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8003330:	bc30      	pop	{r4, r5}
 8003332:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003334:	2002      	movs	r0, #2
}
 8003336:	4770      	bx	lr
 8003338:	40010000 	.word	0x40010000
 800333c:	40000400 	.word	0x40000400
 8003340:	40001800 	.word	0x40001800
 8003344:	40014000 	.word	0x40014000

08003348 <HAL_TIMEx_CommutCallback>:
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop

0800334c <HAL_TIMEx_BreakCallback>:
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop

08003350 <HAL_TIMEx_Break2Callback>:
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop

08003354 <UART_SetConfig>:
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003354:	6901      	ldr	r1, [r0, #16]
 8003356:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8003358:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800335a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800335c:	49ae      	ldr	r1, [pc, #696]	; (8003618 <UART_SetConfig+0x2c4>)
{
 800335e:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003360:	6945      	ldr	r5, [r0, #20]
{
 8003362:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003364:	69c0      	ldr	r0, [r0, #28]
{
 8003366:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003368:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800336a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800336c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800336e:	4029      	ands	r1, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003370:	4daa      	ldr	r5, [pc, #680]	; (800361c <UART_SetConfig+0x2c8>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003372:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003374:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003376:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003378:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003380:	ea42 0201 	orr.w	r2, r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003384:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003386:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003388:	d07d      	beq.n	8003486 <UART_SetConfig+0x132>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800338a:	6a22      	ldr	r2, [r4, #32]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800338c:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800338e:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003390:	4aa3      	ldr	r2, [pc, #652]	; (8003620 <UART_SetConfig+0x2cc>)
 8003392:	402a      	ands	r2, r5

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003394:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003396:	4311      	orrs	r1, r2
 8003398:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800339a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800339c:	f022 020f 	bic.w	r2, r2, #15
 80033a0:	432a      	orrs	r2, r5
 80033a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033a4:	4a9f      	ldr	r2, [pc, #636]	; (8003624 <UART_SetConfig+0x2d0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d02a      	beq.n	8003400 <UART_SetConfig+0xac>
 80033aa:	4a9f      	ldr	r2, [pc, #636]	; (8003628 <UART_SetConfig+0x2d4>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d05b      	beq.n	8003468 <UART_SetConfig+0x114>
 80033b0:	4a9e      	ldr	r2, [pc, #632]	; (800362c <UART_SetConfig+0x2d8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	f000 81ad 	beq.w	8003712 <UART_SetConfig+0x3be>
 80033b8:	4a9d      	ldr	r2, [pc, #628]	; (8003630 <UART_SetConfig+0x2dc>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	f000 81d2 	beq.w	8003764 <UART_SetConfig+0x410>
 80033c0:	4a9c      	ldr	r2, [pc, #624]	; (8003634 <UART_SetConfig+0x2e0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	f000 810c 	beq.w	80035e0 <UART_SetConfig+0x28c>
 80033c8:	4a9b      	ldr	r2, [pc, #620]	; (8003638 <UART_SetConfig+0x2e4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	f000 81d4 	beq.w	8003778 <UART_SetConfig+0x424>
 80033d0:	4a9a      	ldr	r2, [pc, #616]	; (800363c <UART_SetConfig+0x2e8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	f000 8225 	beq.w	8003822 <UART_SetConfig+0x4ce>
 80033d8:	4a99      	ldr	r2, [pc, #612]	; (8003640 <UART_SetConfig+0x2ec>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	f000 81d8 	beq.w	8003790 <UART_SetConfig+0x43c>
 80033e0:	4a98      	ldr	r2, [pc, #608]	; (8003644 <UART_SetConfig+0x2f0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	f000 8229 	beq.w	800383a <UART_SetConfig+0x4e6>
 80033e8:	4a97      	ldr	r2, [pc, #604]	; (8003648 <UART_SetConfig+0x2f4>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d142      	bne.n	8003474 <UART_SetConfig+0x120>
 80033ee:	4b97      	ldr	r3, [pc, #604]	; (800364c <UART_SetConfig+0x2f8>)
 80033f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033f6:	2b28      	cmp	r3, #40	; 0x28
 80033f8:	d83c      	bhi.n	8003474 <UART_SetConfig+0x120>
 80033fa:	4a95      	ldr	r2, [pc, #596]	; (8003650 <UART_SetConfig+0x2fc>)
 80033fc:	5cd3      	ldrb	r3, [r2, r3]
 80033fe:	e007      	b.n	8003410 <UART_SetConfig+0xbc>
 8003400:	4b92      	ldr	r3, [pc, #584]	; (800364c <UART_SetConfig+0x2f8>)
 8003402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003404:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003408:	2b28      	cmp	r3, #40	; 0x28
 800340a:	d833      	bhi.n	8003474 <UART_SetConfig+0x120>
 800340c:	4a91      	ldr	r2, [pc, #580]	; (8003654 <UART_SetConfig+0x300>)
 800340e:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003410:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003414:	f000 809a 	beq.w	800354c <UART_SetConfig+0x1f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003418:	2b20      	cmp	r3, #32
 800341a:	f200 8133 	bhi.w	8003684 <UART_SetConfig+0x330>
 800341e:	2b20      	cmp	r3, #32
 8003420:	d828      	bhi.n	8003474 <UART_SetConfig+0x120>
 8003422:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003426:	012c      	.short	0x012c
 8003428:	00270129 	.word	0x00270129
 800342c:	01210027 	.word	0x01210027
 8003430:	00270027 	.word	0x00270027
 8003434:	00f20027 	.word	0x00f20027
 8003438:	00270027 	.word	0x00270027
 800343c:	00270027 	.word	0x00270027
 8003440:	00270027 	.word	0x00270027
 8003444:	00e70027 	.word	0x00e70027
 8003448:	00270027 	.word	0x00270027
 800344c:	00270027 	.word	0x00270027
 8003450:	00270027 	.word	0x00270027
 8003454:	00270027 	.word	0x00270027
 8003458:	00270027 	.word	0x00270027
 800345c:	00270027 	.word	0x00270027
 8003460:	00270027 	.word	0x00270027
 8003464:	01bf0027 	.word	0x01bf0027
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003468:	4b78      	ldr	r3, [pc, #480]	; (800364c <UART_SetConfig+0x2f8>)
 800346a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	2b05      	cmp	r3, #5
 8003472:	d965      	bls.n	8003540 <UART_SetConfig+0x1ec>
        ret = HAL_ERROR;
 8003474:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003476:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8003478:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 800347c:	6723      	str	r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 800347e:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8003480:	6763      	str	r3, [r4, #116]	; 0x74

  return ret;
}
 8003482:	b007      	add	sp, #28
 8003484:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003486:	6898      	ldr	r0, [r3, #8]
 8003488:	4a65      	ldr	r2, [pc, #404]	; (8003620 <UART_SetConfig+0x2cc>)
 800348a:	4002      	ands	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 800348c:	486f      	ldr	r0, [pc, #444]	; (800364c <UART_SetConfig+0x2f8>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800348e:	430a      	orrs	r2, r1
 8003490:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003494:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003496:	f022 020f 	bic.w	r2, r2, #15
 800349a:	430a      	orrs	r2, r1
 800349c:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800349e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	2b05      	cmp	r3, #5
 80034a6:	d8e5      	bhi.n	8003474 <UART_SetConfig+0x120>
 80034a8:	4a6b      	ldr	r2, [pc, #428]	; (8003658 <UART_SetConfig+0x304>)
 80034aa:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	f200 8103 	bhi.w	80036b8 <UART_SetConfig+0x364>
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d9de      	bls.n	8003474 <UART_SetConfig+0x120>
 80034b6:	3b02      	subs	r3, #2
 80034b8:	2b1e      	cmp	r3, #30
 80034ba:	d8db      	bhi.n	8003474 <UART_SetConfig+0x120>
 80034bc:	a201      	add	r2, pc, #4	; (adr r2, 80034c4 <UART_SetConfig+0x170>)
 80034be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c2:	bf00      	nop
 80034c4:	080037a9 	.word	0x080037a9
 80034c8:	08003475 	.word	0x08003475
 80034cc:	080037d5 	.word	0x080037d5
 80034d0:	08003475 	.word	0x08003475
 80034d4:	08003475 	.word	0x08003475
 80034d8:	08003475 	.word	0x08003475
 80034dc:	080037cb 	.word	0x080037cb
 80034e0:	08003475 	.word	0x08003475
 80034e4:	08003475 	.word	0x08003475
 80034e8:	08003475 	.word	0x08003475
 80034ec:	08003475 	.word	0x08003475
 80034f0:	08003475 	.word	0x08003475
 80034f4:	08003475 	.word	0x08003475
 80034f8:	08003475 	.word	0x08003475
 80034fc:	080037b7 	.word	0x080037b7
 8003500:	08003475 	.word	0x08003475
 8003504:	08003475 	.word	0x08003475
 8003508:	08003475 	.word	0x08003475
 800350c:	08003475 	.word	0x08003475
 8003510:	08003475 	.word	0x08003475
 8003514:	08003475 	.word	0x08003475
 8003518:	08003475 	.word	0x08003475
 800351c:	08003475 	.word	0x08003475
 8003520:	08003475 	.word	0x08003475
 8003524:	08003475 	.word	0x08003475
 8003528:	08003475 	.word	0x08003475
 800352c:	08003475 	.word	0x08003475
 8003530:	08003475 	.word	0x08003475
 8003534:	08003475 	.word	0x08003475
 8003538:	08003475 	.word	0x08003475
 800353c:	080037df 	.word	0x080037df
 8003540:	4a46      	ldr	r2, [pc, #280]	; (800365c <UART_SetConfig+0x308>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003542:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003546:	5cd3      	ldrb	r3, [r2, r3]
 8003548:	f47f af66 	bne.w	8003418 <UART_SetConfig+0xc4>
    switch (clocksource)
 800354c:	2b20      	cmp	r3, #32
 800354e:	f200 80ea 	bhi.w	8003726 <UART_SetConfig+0x3d2>
 8003552:	2b20      	cmp	r3, #32
 8003554:	d88e      	bhi.n	8003474 <UART_SetConfig+0x120>
 8003556:	a201      	add	r2, pc, #4	; (adr r2, 800355c <UART_SetConfig+0x208>)
 8003558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355c:	080037f1 	.word	0x080037f1
 8003560:	080037e3 	.word	0x080037e3
 8003564:	08003475 	.word	0x08003475
 8003568:	08003475 	.word	0x08003475
 800356c:	08003815 	.word	0x08003815
 8003570:	08003475 	.word	0x08003475
 8003574:	08003475 	.word	0x08003475
 8003578:	08003475 	.word	0x08003475
 800357c:	0800380b 	.word	0x0800380b
 8003580:	08003475 	.word	0x08003475
 8003584:	08003475 	.word	0x08003475
 8003588:	08003475 	.word	0x08003475
 800358c:	08003475 	.word	0x08003475
 8003590:	08003475 	.word	0x08003475
 8003594:	08003475 	.word	0x08003475
 8003598:	08003475 	.word	0x08003475
 800359c:	080037f7 	.word	0x080037f7
 80035a0:	08003475 	.word	0x08003475
 80035a4:	08003475 	.word	0x08003475
 80035a8:	08003475 	.word	0x08003475
 80035ac:	08003475 	.word	0x08003475
 80035b0:	08003475 	.word	0x08003475
 80035b4:	08003475 	.word	0x08003475
 80035b8:	08003475 	.word	0x08003475
 80035bc:	08003475 	.word	0x08003475
 80035c0:	08003475 	.word	0x08003475
 80035c4:	08003475 	.word	0x08003475
 80035c8:	08003475 	.word	0x08003475
 80035cc:	08003475 	.word	0x08003475
 80035d0:	08003475 	.word	0x08003475
 80035d4:	08003475 	.word	0x08003475
 80035d8:	08003475 	.word	0x08003475
 80035dc:	0800381f 	.word	0x0800381f
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035e0:	4b1a      	ldr	r3, [pc, #104]	; (800364c <UART_SetConfig+0x2f8>)
 80035e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	2b05      	cmp	r3, #5
 80035ea:	f63f af43 	bhi.w	8003474 <UART_SetConfig+0x120>
 80035ee:	4a1c      	ldr	r2, [pc, #112]	; (8003660 <UART_SetConfig+0x30c>)
 80035f0:	5cd3      	ldrb	r3, [r2, r3]
 80035f2:	e70d      	b.n	8003410 <UART_SetConfig+0xbc>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035f4:	4b15      	ldr	r3, [pc, #84]	; (800364c <UART_SetConfig+0x2f8>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	0692      	lsls	r2, r2, #26
 80035fa:	f140 80c7 	bpl.w	800378c <UART_SetConfig+0x438>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4818      	ldr	r0, [pc, #96]	; (8003664 <UART_SetConfig+0x310>)
 8003602:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003606:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8003608:	e041      	b.n	800368e <UART_SetConfig+0x33a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800360a:	a803      	add	r0, sp, #12
 800360c:	f7ff faf8 	bl	8002c00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003610:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8003612:	bb78      	cbnz	r0, 8003674 <UART_SetConfig+0x320>
          pclk = (uint32_t) HSI_VALUE;
 8003614:	2000      	movs	r0, #0
 8003616:	e72e      	b.n	8003476 <UART_SetConfig+0x122>
 8003618:	cfff69f3 	.word	0xcfff69f3
 800361c:	58000c00 	.word	0x58000c00
 8003620:	11fff4ff 	.word	0x11fff4ff
 8003624:	40011000 	.word	0x40011000
 8003628:	40004400 	.word	0x40004400
 800362c:	40004800 	.word	0x40004800
 8003630:	40004c00 	.word	0x40004c00
 8003634:	40005000 	.word	0x40005000
 8003638:	40011400 	.word	0x40011400
 800363c:	40007800 	.word	0x40007800
 8003640:	40007c00 	.word	0x40007c00
 8003644:	40011800 	.word	0x40011800
 8003648:	40011c00 	.word	0x40011c00
 800364c:	58024400 	.word	0x58024400
 8003650:	0800a460 	.word	0x0800a460
 8003654:	0800a460 	.word	0x0800a460
 8003658:	0800a494 	.word	0x0800a494
 800365c:	0800a48c 	.word	0x0800a48c
 8003660:	0800a48c 	.word	0x0800a48c
 8003664:	03d09000 	.word	0x03d09000
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003668:	4668      	mov	r0, sp
 800366a:	f7ff fa1d 	bl	8002aa8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800366e:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8003670:	2800      	cmp	r0, #0
 8003672:	d0cf      	beq.n	8003614 <UART_SetConfig+0x2c0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003674:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003676:	e00a      	b.n	800368e <UART_SetConfig+0x33a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003678:	f7fe fbb2 	bl	8001de0 <HAL_RCC_GetPCLK2Freq>
        break;
 800367c:	e7c9      	b.n	8003612 <UART_SetConfig+0x2be>
        pclk = HAL_RCC_GetPCLK1Freq();
 800367e:	f7fe fb67 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
        break;
 8003682:	e7c6      	b.n	8003612 <UART_SetConfig+0x2be>
    switch (clocksource)
 8003684:	2b40      	cmp	r3, #64	; 0x40
 8003686:	f47f aef5 	bne.w	8003474 <UART_SetConfig+0x120>
 800368a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800368e:	4b71      	ldr	r3, [pc, #452]	; (8003854 <UART_SetConfig+0x500>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003690:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003694:	6862      	ldr	r2, [r4, #4]
 8003696:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800369a:	fbb0 f3f3 	udiv	r3, r0, r3
 800369e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80036a2:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036a6:	f1a3 0210 	sub.w	r2, r3, #16
 80036aa:	428a      	cmp	r2, r1
 80036ac:	f63f aee2 	bhi.w	8003474 <UART_SetConfig+0x120>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036b0:	6822      	ldr	r2, [r4, #0]
 80036b2:	2000      	movs	r0, #0
 80036b4:	60d3      	str	r3, [r2, #12]
 80036b6:	e6de      	b.n	8003476 <UART_SetConfig+0x122>
    switch (clocksource)
 80036b8:	2b40      	cmp	r3, #64	; 0x40
 80036ba:	f47f aedb 	bne.w	8003474 <UART_SetConfig+0x120>
 80036be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80036c2:	4b64      	ldr	r3, [pc, #400]	; (8003854 <UART_SetConfig+0x500>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036c4:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80036c6:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036ca:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80036ce:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036d2:	4299      	cmp	r1, r3
 80036d4:	f63f aece 	bhi.w	8003474 <UART_SetConfig+0x120>
 80036d8:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80036dc:	f63f aeca 	bhi.w	8003474 <UART_SetConfig+0x120>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036e0:	2300      	movs	r3, #0
 80036e2:	4619      	mov	r1, r3
 80036e4:	f7fc fe6c 	bl	80003c0 <__aeabi_uldivmod>
 80036e8:	462a      	mov	r2, r5
 80036ea:	0209      	lsls	r1, r1, #8
 80036ec:	0203      	lsls	r3, r0, #8
 80036ee:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80036f2:	0868      	lsrs	r0, r5, #1
 80036f4:	1818      	adds	r0, r3, r0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	f141 0100 	adc.w	r1, r1, #0
 80036fe:	f7fc fe5f 	bl	80003c0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003702:	4a55      	ldr	r2, [pc, #340]	; (8003858 <UART_SetConfig+0x504>)
 8003704:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003708:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800370a:	4291      	cmp	r1, r2
 800370c:	f63f aeb2 	bhi.w	8003474 <UART_SetConfig+0x120>
 8003710:	e7ce      	b.n	80036b0 <UART_SetConfig+0x35c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003712:	4b52      	ldr	r3, [pc, #328]	; (800385c <UART_SetConfig+0x508>)
 8003714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	2b05      	cmp	r3, #5
 800371c:	f63f aeaa 	bhi.w	8003474 <UART_SetConfig+0x120>
 8003720:	4a4f      	ldr	r2, [pc, #316]	; (8003860 <UART_SetConfig+0x50c>)
 8003722:	5cd3      	ldrb	r3, [r2, r3]
 8003724:	e674      	b.n	8003410 <UART_SetConfig+0xbc>
    switch (clocksource)
 8003726:	2b40      	cmp	r3, #64	; 0x40
 8003728:	f47f aea4 	bne.w	8003474 <UART_SetConfig+0x120>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800372c:	4b49      	ldr	r3, [pc, #292]	; (8003854 <UART_SetConfig+0x500>)
 800372e:	6862      	ldr	r2, [r4, #4]
 8003730:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 8003734:	0853      	lsrs	r3, r2, #1
 8003736:	fbb0 f0f1 	udiv	r0, r0, r1
 800373a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800373e:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003742:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003746:	f1a0 0210 	sub.w	r2, r0, #16
 800374a:	429a      	cmp	r2, r3
 800374c:	f63f ae92 	bhi.w	8003474 <UART_SetConfig+0x120>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003750:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003754:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8003758:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800375a:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 800375c:	4303      	orrs	r3, r0
 800375e:	2000      	movs	r0, #0
 8003760:	60d3      	str	r3, [r2, #12]
 8003762:	e688      	b.n	8003476 <UART_SetConfig+0x122>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003764:	4b3d      	ldr	r3, [pc, #244]	; (800385c <UART_SetConfig+0x508>)
 8003766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	2b05      	cmp	r3, #5
 800376e:	f63f ae81 	bhi.w	8003474 <UART_SetConfig+0x120>
 8003772:	4a3c      	ldr	r2, [pc, #240]	; (8003864 <UART_SetConfig+0x510>)
 8003774:	5cd3      	ldrb	r3, [r2, r3]
 8003776:	e64b      	b.n	8003410 <UART_SetConfig+0xbc>
 8003778:	4b38      	ldr	r3, [pc, #224]	; (800385c <UART_SetConfig+0x508>)
 800377a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003780:	2b28      	cmp	r3, #40	; 0x28
 8003782:	f63f ae77 	bhi.w	8003474 <UART_SetConfig+0x120>
 8003786:	4a38      	ldr	r2, [pc, #224]	; (8003868 <UART_SetConfig+0x514>)
 8003788:	5cd3      	ldrb	r3, [r2, r3]
 800378a:	e641      	b.n	8003410 <UART_SetConfig+0xbc>
          pclk = (uint32_t) HSI_VALUE;
 800378c:	4837      	ldr	r0, [pc, #220]	; (800386c <UART_SetConfig+0x518>)
 800378e:	e77e      	b.n	800368e <UART_SetConfig+0x33a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003790:	4b32      	ldr	r3, [pc, #200]	; (800385c <UART_SetConfig+0x508>)
 8003792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	2b05      	cmp	r3, #5
 800379a:	f63f ae6b 	bhi.w	8003474 <UART_SetConfig+0x120>
 800379e:	4a34      	ldr	r2, [pc, #208]	; (8003870 <UART_SetConfig+0x51c>)
 80037a0:	5cd3      	ldrb	r3, [r2, r3]
 80037a2:	e635      	b.n	8003410 <UART_SetConfig+0xbc>
        pclk = (uint32_t) CSI_VALUE;
 80037a4:	4833      	ldr	r0, [pc, #204]	; (8003874 <UART_SetConfig+0x520>)
 80037a6:	e772      	b.n	800368e <UART_SetConfig+0x33a>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80037a8:	f7ff f96c 	bl	8002a84 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 80037ac:	2800      	cmp	r0, #0
 80037ae:	f43f af31 	beq.w	8003614 <UART_SetConfig+0x2c0>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80037b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80037b4:	e785      	b.n	80036c2 <UART_SetConfig+0x36e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037b6:	4b29      	ldr	r3, [pc, #164]	; (800385c <UART_SetConfig+0x508>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	0690      	lsls	r0, r2, #26
 80037bc:	d53b      	bpl.n	8003836 <UART_SetConfig+0x4e2>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	482a      	ldr	r0, [pc, #168]	; (800386c <UART_SetConfig+0x518>)
 80037c2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80037c6:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80037c8:	e77b      	b.n	80036c2 <UART_SetConfig+0x36e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80037ca:	a803      	add	r0, sp, #12
 80037cc:	f7ff fa18 	bl	8002c00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80037d0:	9804      	ldr	r0, [sp, #16]
        break;
 80037d2:	e7eb      	b.n	80037ac <UART_SetConfig+0x458>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80037d4:	4668      	mov	r0, sp
 80037d6:	f7ff f967 	bl	8002aa8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80037da:	9801      	ldr	r0, [sp, #4]
        break;
 80037dc:	e7e6      	b.n	80037ac <UART_SetConfig+0x458>
        pclk = (uint32_t) CSI_VALUE;
 80037de:	4825      	ldr	r0, [pc, #148]	; (8003874 <UART_SetConfig+0x520>)
 80037e0:	e76f      	b.n	80036c2 <UART_SetConfig+0x36e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80037e2:	f7fe fafd 	bl	8001de0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80037e6:	2800      	cmp	r0, #0
 80037e8:	f43f af14 	beq.w	8003614 <UART_SetConfig+0x2c0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80037ee:	e79d      	b.n	800372c <UART_SetConfig+0x3d8>
        pclk = HAL_RCC_GetPCLK1Freq();
 80037f0:	f7fe faae 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
        break;
 80037f4:	e7f7      	b.n	80037e6 <UART_SetConfig+0x492>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037f6:	4b19      	ldr	r3, [pc, #100]	; (800385c <UART_SetConfig+0x508>)
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	0691      	lsls	r1, r2, #26
 80037fc:	d527      	bpl.n	800384e <UART_SetConfig+0x4fa>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	481a      	ldr	r0, [pc, #104]	; (800386c <UART_SetConfig+0x518>)
 8003802:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003806:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8003808:	e790      	b.n	800372c <UART_SetConfig+0x3d8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800380a:	a803      	add	r0, sp, #12
 800380c:	f7ff f9f8 	bl	8002c00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003810:	9804      	ldr	r0, [sp, #16]
        break;
 8003812:	e7e8      	b.n	80037e6 <UART_SetConfig+0x492>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003814:	4668      	mov	r0, sp
 8003816:	f7ff f947 	bl	8002aa8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800381a:	9801      	ldr	r0, [sp, #4]
        break;
 800381c:	e7e3      	b.n	80037e6 <UART_SetConfig+0x492>
        pclk = (uint32_t) CSI_VALUE;
 800381e:	4815      	ldr	r0, [pc, #84]	; (8003874 <UART_SetConfig+0x520>)
 8003820:	e784      	b.n	800372c <UART_SetConfig+0x3d8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003822:	4b0e      	ldr	r3, [pc, #56]	; (800385c <UART_SetConfig+0x508>)
 8003824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	2b05      	cmp	r3, #5
 800382c:	f63f ae22 	bhi.w	8003474 <UART_SetConfig+0x120>
 8003830:	4a11      	ldr	r2, [pc, #68]	; (8003878 <UART_SetConfig+0x524>)
 8003832:	5cd3      	ldrb	r3, [r2, r3]
 8003834:	e5ec      	b.n	8003410 <UART_SetConfig+0xbc>
          pclk = (uint32_t) HSI_VALUE;
 8003836:	480d      	ldr	r0, [pc, #52]	; (800386c <UART_SetConfig+0x518>)
 8003838:	e743      	b.n	80036c2 <UART_SetConfig+0x36e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800383a:	4b08      	ldr	r3, [pc, #32]	; (800385c <UART_SetConfig+0x508>)
 800383c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003842:	2b28      	cmp	r3, #40	; 0x28
 8003844:	f63f ae16 	bhi.w	8003474 <UART_SetConfig+0x120>
 8003848:	4a0c      	ldr	r2, [pc, #48]	; (800387c <UART_SetConfig+0x528>)
 800384a:	5cd3      	ldrb	r3, [r2, r3]
 800384c:	e5e0      	b.n	8003410 <UART_SetConfig+0xbc>
          pclk = (uint32_t) HSI_VALUE;
 800384e:	4807      	ldr	r0, [pc, #28]	; (800386c <UART_SetConfig+0x518>)
 8003850:	e76c      	b.n	800372c <UART_SetConfig+0x3d8>
 8003852:	bf00      	nop
 8003854:	0800a49c 	.word	0x0800a49c
 8003858:	000ffcff 	.word	0x000ffcff
 800385c:	58024400 	.word	0x58024400
 8003860:	0800a48c 	.word	0x0800a48c
 8003864:	0800a48c 	.word	0x0800a48c
 8003868:	0800a460 	.word	0x0800a460
 800386c:	03d09000 	.word	0x03d09000
 8003870:	0800a48c 	.word	0x0800a48c
 8003874:	003d0900 	.word	0x003d0900
 8003878:	0800a48c 	.word	0x0800a48c
 800387c:	0800a460 	.word	0x0800a460

08003880 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003880:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003882:	07da      	lsls	r2, r3, #31
{
 8003884:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003886:	d506      	bpl.n	8003896 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003888:	6801      	ldr	r1, [r0, #0]
 800388a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800388c:	684a      	ldr	r2, [r1, #4]
 800388e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003892:	4322      	orrs	r2, r4
 8003894:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003896:	079c      	lsls	r4, r3, #30
 8003898:	d506      	bpl.n	80038a8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800389a:	6801      	ldr	r1, [r0, #0]
 800389c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800389e:	684a      	ldr	r2, [r1, #4]
 80038a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038a4:	4322      	orrs	r2, r4
 80038a6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038a8:	0759      	lsls	r1, r3, #29
 80038aa:	d506      	bpl.n	80038ba <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038ac:	6801      	ldr	r1, [r0, #0]
 80038ae:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80038b0:	684a      	ldr	r2, [r1, #4]
 80038b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038b6:	4322      	orrs	r2, r4
 80038b8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038ba:	071a      	lsls	r2, r3, #28
 80038bc:	d506      	bpl.n	80038cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038be:	6801      	ldr	r1, [r0, #0]
 80038c0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80038c2:	684a      	ldr	r2, [r1, #4]
 80038c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038c8:	4322      	orrs	r2, r4
 80038ca:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038cc:	06dc      	lsls	r4, r3, #27
 80038ce:	d506      	bpl.n	80038de <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038d0:	6801      	ldr	r1, [r0, #0]
 80038d2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80038d4:	688a      	ldr	r2, [r1, #8]
 80038d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038da:	4322      	orrs	r2, r4
 80038dc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038de:	0699      	lsls	r1, r3, #26
 80038e0:	d506      	bpl.n	80038f0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038e2:	6801      	ldr	r1, [r0, #0]
 80038e4:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80038e6:	688a      	ldr	r2, [r1, #8]
 80038e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038ec:	4322      	orrs	r2, r4
 80038ee:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038f0:	065a      	lsls	r2, r3, #25
 80038f2:	d50a      	bpl.n	800390a <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038f4:	6801      	ldr	r1, [r0, #0]
 80038f6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80038f8:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038fa:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038fe:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003902:	ea42 0204 	orr.w	r2, r2, r4
 8003906:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003908:	d00b      	beq.n	8003922 <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800390a:	061b      	lsls	r3, r3, #24
 800390c:	d506      	bpl.n	800391c <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800390e:	6802      	ldr	r2, [r0, #0]
 8003910:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003912:	6853      	ldr	r3, [r2, #4]
 8003914:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003918:	430b      	orrs	r3, r1
 800391a:	6053      	str	r3, [r2, #4]
  }
}
 800391c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003920:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003922:	684a      	ldr	r2, [r1, #4]
 8003924:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8003926:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800392a:	4322      	orrs	r2, r4
 800392c:	604a      	str	r2, [r1, #4]
 800392e:	e7ec      	b.n	800390a <UART_AdvFeatureConfig+0x8a>

08003930 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003934:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003938:	4607      	mov	r7, r0
 800393a:	460e      	mov	r6, r1
 800393c:	4615      	mov	r5, r2
 800393e:	4699      	mov	r9, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003940:	6804      	ldr	r4, [r0, #0]
 8003942:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8003946:	d10a      	bne.n	800395e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003948:	69e3      	ldr	r3, [r4, #28]
 800394a:	ea36 0303 	bics.w	r3, r6, r3
 800394e:	bf0c      	ite	eq
 8003950:	2301      	moveq	r3, #1
 8003952:	2300      	movne	r3, #0
 8003954:	429d      	cmp	r5, r3
 8003956:	d0f7      	beq.n	8003948 <UART_WaitOnFlagUntilTimeout+0x18>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8003958:	2000      	movs	r0, #0
}
 800395a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800395e:	69e3      	ldr	r3, [r4, #28]
 8003960:	ea36 0303 	bics.w	r3, r6, r3
 8003964:	bf0c      	ite	eq
 8003966:	2301      	moveq	r3, #1
 8003968:	2300      	movne	r3, #0
 800396a:	42ab      	cmp	r3, r5
 800396c:	d1f4      	bne.n	8003958 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800396e:	f7fd faa7 	bl	8000ec0 <HAL_GetTick>
 8003972:	eba0 0009 	sub.w	r0, r0, r9
 8003976:	4540      	cmp	r0, r8
 8003978:	d833      	bhi.n	80039e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800397a:	f1b8 0f00 	cmp.w	r8, #0
 800397e:	d030      	beq.n	80039e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003980:	683c      	ldr	r4, [r7, #0]
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	4622      	mov	r2, r4
 8003986:	0759      	lsls	r1, r3, #29
 8003988:	d5db      	bpl.n	8003942 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800398a:	69e3      	ldr	r3, [r4, #28]
 800398c:	051b      	lsls	r3, r3, #20
 800398e:	d5d8      	bpl.n	8003942 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003990:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003994:	6223      	str	r3, [r4, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003996:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800399a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399e:	e844 3100 	strex	r1, r3, [r4]
 80039a2:	b139      	cbz	r1, 80039b4 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a4:	e852 3f00 	ldrex	r3, [r2]
 80039a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ac:	e842 3100 	strex	r1, r3, [r2]
 80039b0:	2900      	cmp	r1, #0
 80039b2:	d1f7      	bne.n	80039a4 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b4:	f102 0308 	add.w	r3, r2, #8
 80039b8:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039bc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c0:	f102 0008 	add.w	r0, r2, #8
 80039c4:	e840 3100 	strex	r1, r3, [r0]
 80039c8:	2900      	cmp	r1, #0
 80039ca:	d1f3      	bne.n	80039b4 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 80039cc:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 80039ce:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80039d0:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 80039d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80039d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 80039e0:	e7bb      	b.n	800395a <UART_WaitOnFlagUntilTimeout+0x2a>
 80039e2:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e4:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80039e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ec:	e842 3100 	strex	r1, r3, [r2]
 80039f0:	2900      	cmp	r1, #0
 80039f2:	d1f7      	bne.n	80039e4 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f4:	f102 0308 	add.w	r3, r2, #8
 80039f8:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a00:	f102 0008 	add.w	r0, r2, #8
 8003a04:	e840 3100 	strex	r1, r3, [r0]
 8003a08:	2900      	cmp	r1, #0
 8003a0a:	d1f3      	bne.n	80039f4 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 8003a0c:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8003a0e:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8003a10:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8003a14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003a18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 8003a1c:	e79d      	b.n	800395a <UART_WaitOnFlagUntilTimeout+0x2a>
 8003a1e:	bf00      	nop

08003a20 <HAL_UART_Transmit>:
{
 8003a20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a24:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003a26:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8003a2a:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8003a2c:	2b20      	cmp	r3, #32
 8003a2e:	f040 8095 	bne.w	8003b5c <HAL_UART_Transmit+0x13c>
    if ((pData == NULL) || (Size == 0U))
 8003a32:	4689      	mov	r9, r1
 8003a34:	2900      	cmp	r1, #0
 8003a36:	d04c      	beq.n	8003ad2 <HAL_UART_Transmit+0xb2>
 8003a38:	fab2 f782 	clz	r7, r2
 8003a3c:	4614      	mov	r4, r2
 8003a3e:	097f      	lsrs	r7, r7, #5
 8003a40:	2a00      	cmp	r2, #0
 8003a42:	d046      	beq.n	8003ad2 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8003a44:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8003a48:	4605      	mov	r5, r0
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	f000 8086 	beq.w	8003b5c <HAL_UART_Transmit+0x13c>
 8003a50:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a52:	f8c0 708c 	str.w	r7, [r0, #140]	; 0x8c
    __HAL_LOCK(huart);
 8003a56:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a5a:	2321      	movs	r3, #33	; 0x21
 8003a5c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 8003a60:	f7fd fa2e 	bl	8000ec0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a64:	68ab      	ldr	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8003a66:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 8003a68:	f8a5 4054 	strh.w	r4, [r5, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8003a70:	f8a5 4056 	strh.w	r4, [r5, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a74:	f000 8096 	beq.w	8003ba4 <HAL_UART_Transmit+0x184>
    while (huart->TxXferCount > 0U)
 8003a78:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    __HAL_UNLOCK(huart);
 8003a7c:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8003a7e:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8003a80:	f885 2080 	strb.w	r2, [r5, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8003a84:	b1b3      	cbz	r3, 8003ab4 <HAL_UART_Transmit+0x94>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a86:	682c      	ldr	r4, [r5, #0]
 8003a88:	1c71      	adds	r1, r6, #1
 8003a8a:	d126      	bne.n	8003ada <HAL_UART_Transmit+0xba>
 8003a8c:	69e2      	ldr	r2, [r4, #28]
 8003a8e:	0612      	lsls	r2, r2, #24
 8003a90:	d5fc      	bpl.n	8003a8c <HAL_UART_Transmit+0x6c>
      if (pdata8bits == NULL)
 8003a92:	f1b9 0f00 	cmp.w	r9, #0
 8003a96:	d05c      	beq.n	8003b52 <HAL_UART_Transmit+0x132>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a98:	f819 3b01 	ldrb.w	r3, [r9], #1
 8003a9c:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 8003a9e:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003aaa:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1e9      	bne.n	8003a88 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ab4:	4643      	mov	r3, r8
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2140      	movs	r1, #64	; 0x40
 8003aba:	4628      	mov	r0, r5
 8003abc:	9600      	str	r6, [sp, #0]
 8003abe:	f7ff ff37 	bl	8003930 <UART_WaitOnFlagUntilTimeout>
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	d175      	bne.n	8003bb2 <HAL_UART_Transmit+0x192>
    huart->gState = HAL_UART_STATE_READY;
 8003ac6:	2320      	movs	r3, #32
 8003ac8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 8003acc:	b003      	add	sp, #12
 8003ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8003ad2:	2001      	movs	r0, #1
}
 8003ad4:	b003      	add	sp, #12
 8003ad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ada:	69e3      	ldr	r3, [r4, #28]
 8003adc:	061b      	lsls	r3, r3, #24
 8003ade:	d4d8      	bmi.n	8003a92 <HAL_UART_Transmit+0x72>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae0:	f7fd f9ee 	bl	8000ec0 <HAL_GetTick>
 8003ae4:	eba0 0008 	sub.w	r0, r0, r8
 8003ae8:	4286      	cmp	r6, r0
 8003aea:	d33b      	bcc.n	8003b64 <HAL_UART_Transmit+0x144>
 8003aec:	2e00      	cmp	r6, #0
 8003aee:	d039      	beq.n	8003b64 <HAL_UART_Transmit+0x144>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003af0:	682c      	ldr	r4, [r5, #0]
 8003af2:	6822      	ldr	r2, [r4, #0]
 8003af4:	4623      	mov	r3, r4
 8003af6:	0752      	lsls	r2, r2, #29
 8003af8:	d5c6      	bpl.n	8003a88 <HAL_UART_Transmit+0x68>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003afa:	69e2      	ldr	r2, [r4, #28]
 8003afc:	0510      	lsls	r0, r2, #20
 8003afe:	d5c3      	bpl.n	8003a88 <HAL_UART_Transmit+0x68>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b04:	6222      	str	r2, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b06:	e854 2f00 	ldrex	r2, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b0a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0e:	e844 2100 	strex	r1, r2, [r4]
 8003b12:	b139      	cbz	r1, 8003b24 <HAL_UART_Transmit+0x104>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b14:	e853 2f00 	ldrex	r2, [r3]
 8003b18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1c:	e843 2100 	strex	r1, r2, [r3]
 8003b20:	2900      	cmp	r1, #0
 8003b22:	d1f7      	bne.n	8003b14 <HAL_UART_Transmit+0xf4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b24:	f103 0208 	add.w	r2, r3, #8
 8003b28:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b2c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b30:	f103 0008 	add.w	r0, r3, #8
 8003b34:	e840 2100 	strex	r1, r2, [r0]
 8003b38:	2900      	cmp	r1, #0
 8003b3a:	d1f3      	bne.n	8003b24 <HAL_UART_Transmit+0x104>
          huart->gState = HAL_UART_STATE_READY;
 8003b3c:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8003b3e:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8003b40:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 8003b44:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003b48:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b4c:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          return HAL_TIMEOUT;
 8003b50:	e7c0      	b.n	8003ad4 <HAL_UART_Transmit+0xb4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b52:	f837 3b02 	ldrh.w	r3, [r7], #2
 8003b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5a:	e79f      	b.n	8003a9c <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 8003b5c:	2002      	movs	r0, #2
}
 8003b5e:	b003      	add	sp, #12
 8003b60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b64:	682b      	ldr	r3, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b66:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b6a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6e:	e843 2100 	strex	r1, r2, [r3]
 8003b72:	2900      	cmp	r1, #0
 8003b74:	d1f7      	bne.n	8003b66 <HAL_UART_Transmit+0x146>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b76:	f103 0208 	add.w	r2, r3, #8
 8003b7a:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b82:	f103 0008 	add.w	r0, r3, #8
 8003b86:	e840 2100 	strex	r1, r2, [r0]
 8003b8a:	2900      	cmp	r1, #0
 8003b8c:	d1f3      	bne.n	8003b76 <HAL_UART_Transmit+0x156>
        huart->gState = HAL_UART_STATE_READY;
 8003b8e:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8003b90:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8003b92:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8003b96:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003b9a:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 8003b9e:	b003      	add	sp, #12
 8003ba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ba4:	692b      	ldr	r3, [r5, #16]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f47f af66 	bne.w	8003a78 <HAL_UART_Transmit+0x58>
 8003bac:	464f      	mov	r7, r9
      pdata8bits  = NULL;
 8003bae:	4699      	mov	r9, r3
 8003bb0:	e762      	b.n	8003a78 <HAL_UART_Transmit+0x58>
      return HAL_TIMEOUT;
 8003bb2:	2003      	movs	r0, #3
 8003bb4:	e78e      	b.n	8003ad4 <HAL_UART_Transmit+0xb4>
 8003bb6:	bf00      	nop

08003bb8 <HAL_UART_Init>:
  if (huart == NULL)
 8003bb8:	2800      	cmp	r0, #0
 8003bba:	d066      	beq.n	8003c8a <HAL_UART_Init+0xd2>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003bbc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8003bc0:	b570      	push	{r4, r5, r6, lr}
 8003bc2:	4604      	mov	r4, r0
 8003bc4:	b082      	sub	sp, #8
  if (huart->gState == HAL_UART_STATE_RESET)
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d04c      	beq.n	8003c64 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 8003bca:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003bcc:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bce:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8003bd0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8003bd4:	6813      	ldr	r3, [r2, #0]
 8003bd6:	f023 0301 	bic.w	r3, r3, #1
 8003bda:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bdc:	f7ff fbba 	bl	8003354 <UART_SetConfig>
 8003be0:	2801      	cmp	r0, #1
 8003be2:	d03c      	beq.n	8003c5e <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003be4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d135      	bne.n	8003c56 <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bea:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bec:	2500      	movs	r5, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bee:	6859      	ldr	r1, [r3, #4]
 8003bf0:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 8003bf4:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bf6:	6899      	ldr	r1, [r3, #8]
 8003bf8:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 8003bfc:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003bfe:	6819      	ldr	r1, [r3, #0]
 8003c00:	f041 0101 	orr.w	r1, r1, #1
 8003c04:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c06:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8003c0a:	f7fd f959 	bl	8000ec0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c0e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003c10:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	0712      	lsls	r2, r2, #28
 8003c16:	d40e      	bmi.n	8003c36 <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	075b      	lsls	r3, r3, #29
 8003c1c:	d427      	bmi.n	8003c6e <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8003c20:	2220      	movs	r2, #32
  return HAL_OK;
 8003c22:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8003c24:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8003c28:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8003c2c:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c30:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8003c32:	b002      	add	sp, #8
 8003c34:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c36:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	462a      	mov	r2, r5
 8003c3e:	4620      	mov	r0, r4
 8003c40:	9100      	str	r1, [sp, #0]
 8003c42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c46:	f7ff fe73 	bl	8003930 <UART_WaitOnFlagUntilTimeout>
 8003c4a:	b9e0      	cbnz	r0, 8003c86 <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	075b      	lsls	r3, r3, #29
 8003c52:	d40c      	bmi.n	8003c6e <HAL_UART_Init+0xb6>
 8003c54:	e7e3      	b.n	8003c1e <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 8003c56:	4620      	mov	r0, r4
 8003c58:	f7ff fe12 	bl	8003880 <UART_AdvFeatureConfig>
 8003c5c:	e7c5      	b.n	8003bea <HAL_UART_Init+0x32>
    return HAL_ERROR;
 8003c5e:	2001      	movs	r0, #1
}
 8003c60:	b002      	add	sp, #8
 8003c62:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8003c64:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8003c68:	f7fc ff82 	bl	8000b70 <HAL_UART_MspInit>
 8003c6c:	e7ad      	b.n	8003bca <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c6e:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 8003c72:	4633      	mov	r3, r6
 8003c74:	2200      	movs	r2, #0
 8003c76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c7a:	9000      	str	r0, [sp, #0]
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	f7ff fe57 	bl	8003930 <UART_WaitOnFlagUntilTimeout>
 8003c82:	2800      	cmp	r0, #0
 8003c84:	d0cb      	beq.n	8003c1e <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 8003c86:	2003      	movs	r0, #3
 8003c88:	e7d3      	b.n	8003c32 <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 8003c8a:	2001      	movs	r0, #1
}
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop

08003c90 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c90:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8003c94:	2a01      	cmp	r2, #1
 8003c96:	d017      	beq.n	8003cc8 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c98:	6802      	ldr	r2, [r0, #0]
 8003c9a:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8003c9c:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003c9e:	2100      	movs	r1, #0
{
 8003ca0:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 8003ca2:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8003ca6:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ca8:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003caa:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003cac:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8003cb0:	f024 0401 	bic.w	r4, r4, #1
 8003cb4:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003cb6:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cb8:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8003cba:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8003cbc:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8003cc0:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 8003cc4:	bc30      	pop	{r4, r5}
 8003cc6:	4770      	bx	lr
  __HAL_LOCK(huart);
 8003cc8:	2002      	movs	r0, #2
}
 8003cca:	4770      	bx	lr

08003ccc <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ccc:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8003cd0:	2a01      	cmp	r2, #1
 8003cd2:	d037      	beq.n	8003d44 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cd4:	6802      	ldr	r2, [r0, #0]
 8003cd6:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8003cd8:	2024      	movs	r0, #36	; 0x24
{
 8003cda:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8003cdc:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ce0:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ce2:	6810      	ldr	r0, [r2, #0]
 8003ce4:	f020 0001 	bic.w	r0, r0, #1
 8003ce8:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003cea:	6890      	ldr	r0, [r2, #8]
 8003cec:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8003cf0:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003cf2:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003cf4:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003cf6:	b310      	cbz	r0, 8003d3e <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003cf8:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003cfa:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003cfc:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d00:	4911      	ldr	r1, [pc, #68]	; (8003d48 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d02:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d06:	4d11      	ldr	r5, [pc, #68]	; (8003d4c <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d08:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d0c:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d10:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d14:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8003d16:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d1a:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d1c:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d20:	fbb1 f1f5 	udiv	r1, r1, r5
 8003d24:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 8003d28:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d30:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8003d32:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8003d34:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8003d38:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 8003d3c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8003d3e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8003d40:	4608      	mov	r0, r1
 8003d42:	e7ef      	b.n	8003d24 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8003d44:	2002      	movs	r0, #2
}
 8003d46:	4770      	bx	lr
 8003d48:	0800a4bc 	.word	0x0800a4bc
 8003d4c:	0800a4b4 	.word	0x0800a4b4

08003d50 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8003d50:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8003d54:	2a01      	cmp	r2, #1
 8003d56:	d037      	beq.n	8003dc8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d58:	6802      	ldr	r2, [r0, #0]
 8003d5a:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8003d5c:	2024      	movs	r0, #36	; 0x24
{
 8003d5e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8003d60:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d64:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003d66:	6810      	ldr	r0, [r2, #0]
 8003d68:	f020 0001 	bic.w	r0, r0, #1
 8003d6c:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003d6e:	6890      	ldr	r0, [r2, #8]
 8003d70:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8003d74:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d76:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003d78:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d7a:	b310      	cbz	r0, 8003dc2 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003d7c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d7e:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d80:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d84:	4911      	ldr	r1, [pc, #68]	; (8003dcc <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d86:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d8a:	4d11      	ldr	r5, [pc, #68]	; (8003dd0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d8c:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d90:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d94:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d98:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8003d9a:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d9e:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003da0:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003da4:	fbb1 f1f5 	udiv	r1, r1, r5
 8003da8:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 8003dac:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 8003dae:	2100      	movs	r1, #0
 8003db0:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003db4:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8003db6:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8003db8:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8003dbc:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 8003dc0:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8003dc2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8003dc4:	4608      	mov	r0, r1
 8003dc6:	e7ef      	b.n	8003da8 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8003dc8:	2002      	movs	r0, #2
}
 8003dca:	4770      	bx	lr
 8003dcc:	0800a4bc 	.word	0x0800a4bc
 8003dd0:	0800a4b4 	.word	0x0800a4b4

08003dd4 <OpenNNA_Malloc>:
 * size: 要申请的内存长度
 * return: 内存地址
 */
void * OpenNNA_Malloc(unsigned long size)
{
    OpenNNA_Heap_Sum +=size;
 8003dd4:	4a02      	ldr	r2, [pc, #8]	; (8003de0 <OpenNNA_Malloc+0xc>)
 8003dd6:	6813      	ldr	r3, [r2, #0]
 8003dd8:	4403      	add	r3, r0
 8003dda:	6013      	str	r3, [r2, #0]
    //return (void *)malloc(size);
    return (void *)pvPortMalloc(size);
 8003ddc:	f003 b96c 	b.w	80070b8 <pvPortMalloc>
 8003de0:	2404e758 	.word	0x2404e758

08003de4 <OpenNNA_CreateNetwork>:
    OpenNNA_Heap_Sum +=size;
 8003de4:	4a0a      	ldr	r2, [pc, #40]	; (8003e10 <OpenNNA_CreateNetwork+0x2c>)
    return (void *)pvPortMalloc(size);
 8003de6:	2030      	movs	r0, #48	; 0x30
    OpenNNA_Heap_Sum +=size;
 8003de8:	6813      	ldr	r3, [r2, #0]
 8003dea:	4403      	add	r3, r0

/* Function :OpenNNA_CreateNetwork :创建一个神经网络对象
 * return: 神经网络对象
*/
struct layer * OpenNNA_CreateNetwork(void)
{
 8003dec:	b510      	push	{r4, lr}
    OpenNNA_Heap_Sum +=size;
 8003dee:	6013      	str	r3, [r2, #0]
    return (void *)pvPortMalloc(size);
 8003df0:	f003 f962 	bl	80070b8 <pvPortMalloc>
    struct layer * Network = NULL;
    Network = OpenNNA_Malloc(sizeof(layers));//为神经网络对象申请堆内存
    Network->layer_next = NULL;
    Network->layer_prev = NULL;
    Network->Layer_Index = 0;
    Network->Layer_Name = LIB_NAME;
 8003df4:	4c07      	ldr	r4, [pc, #28]	; (8003e14 <OpenNNA_CreateNetwork+0x30>)
    Network->layer_next = NULL;
 8003df6:	2200      	movs	r2, #0
    Network->Layer_Name_Alias = Author;
 8003df8:	4907      	ldr	r1, [pc, #28]	; (8003e18 <OpenNNA_CreateNetwork+0x34>)
    Network->layer_next = NULL;
 8003dfa:	62c2      	str	r2, [r0, #44]	; 0x2c
    Network->Layer_Index = 0;
 8003dfc:	e9c0 2200 	strd	r2, r2, [r0]
    Network->Layer_Name_Alias = Author;
 8003e00:	e9c0 4102 	strd	r4, r1, [r0, #8]
    Network->Layer_Para_Base = NULL;
    Network->Layer_Para_Extra = NULL;
 8003e04:	e9c0 2204 	strd	r2, r2, [r0, #16]
    Network->Input_Feature_Map=NULL;
    Network->Output_Feature_Map=NULL;
 8003e08:	e9c0 2206 	strd	r2, r2, [r0, #24]
#if(DEBUG==1)
    OpenNNA_Logo();
#endif
    return Network;
}
 8003e0c:	bd10      	pop	{r4, pc}
 8003e0e:	bf00      	nop
 8003e10:	2404e758 	.word	0x2404e758
 8003e14:	0800a4c4 	.word	0x0800a4c4
 8003e18:	0800a4f0 	.word	0x0800a4f0

08003e1c <OpenNNA_Add_Layer>:
                            const void *Layer_Para_Base, \
                            const void *Layer_Para_Extra, \
                            const void *Weights, \
                            const void *Bias \
                            )
{
 8003e1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned int layer_index = 0;
    struct layer * layer_prev = NULL;
    if(NULL != Network) {
 8003e20:	4604      	mov	r4, r0
 8003e22:	2800      	cmp	r0, #0
 8003e24:	d03b      	beq.n	8003e9e <OpenNNA_Add_Layer+0x82>
        while(NULL != Network->layer_next)
 8003e26:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8003e28:	460e      	mov	r6, r1
 8003e2a:	4693      	mov	fp, r2
 8003e2c:	469a      	mov	sl, r3
 8003e2e:	2d00      	cmp	r5, #0
 8003e30:	d037      	beq.n	8003ea2 <OpenNNA_Add_Layer+0x86>
        {
            Network = Network->layer_next;
            layer_index = Network->Layer_Index;
 8003e32:	6869      	ldr	r1, [r5, #4]
        while(NULL != Network->layer_next)
 8003e34:	462c      	mov	r4, r5
 8003e36:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 8003e38:	2d00      	cmp	r5, #0
 8003e3a:	d1fa      	bne.n	8003e32 <OpenNNA_Add_Layer+0x16>
            {
                Network->pfunc_Operator = operators[i].pfunc_Operator;//算子函数指针填入
                break;
            }
        }
        if(NULL == Network->pfunc_Operator && 0 != Network->Layer_Index)//未找到算子报错，index=0时忽略
 8003e3c:	f111 0901 	adds.w	r9, r1, #1
 8003e40:	bf14      	ite	ne
 8003e42:	2701      	movne	r7, #1
 8003e44:	2700      	moveq	r7, #0
    OpenNNA_Heap_Sum +=size;
 8003e46:	4a1a      	ldr	r2, [pc, #104]	; (8003eb0 <OpenNNA_Add_Layer+0x94>)
    return (void *)pvPortMalloc(size);
 8003e48:	2030      	movs	r0, #48	; 0x30
 8003e4a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8003eb4 <OpenNNA_Add_Layer+0x98>
    OpenNNA_Heap_Sum +=size;
 8003e4e:	6813      	ldr	r3, [r2, #0]
 8003e50:	4403      	add	r3, r0
 8003e52:	6013      	str	r3, [r2, #0]
    return (void *)pvPortMalloc(size);
 8003e54:	f003 f930 	bl	80070b8 <pvPortMalloc>
        Network->Layer_Para_Extra = Layer_Para_Extra;
 8003e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    return (void *)pvPortMalloc(size);
 8003e5a:	4605      	mov	r5, r0
        Network->layer_next = OpenNNA_Malloc(sizeof(layers));//新建一个Layer
 8003e5c:	62e0      	str	r0, [r4, #44]	; 0x2c
        Network->Layer_Para_Extra = Layer_Para_Extra;
 8003e5e:	6143      	str	r3, [r0, #20]
        Network->layer_next = NULL;
 8003e60:	2300      	movs	r3, #0
        Network->Layer_Para_Base = Layer_Para_Base;
 8003e62:	f8c0 a010 	str.w	sl, [r0, #16]
        Network->Layer_Index = layer_index + 1;
 8003e66:	e9c0 4900 	strd	r4, r9, [r0]
        Network->Layer_Name = Layer_Name;
 8003e6a:	e9c0 6b02 	strd	r6, fp, [r0, #8]
        for (int i = 0; i < sizeof(operators); ++i) {
 8003e6e:	461c      	mov	r4, r3
        Network->pfunc_Operator = NULL;
 8003e70:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
        Network->Output_Feature_Map = NULL;
 8003e74:	e9c0 3306 	strd	r3, r3, [r0, #24]
        for (int i = 0; i < sizeof(operators); ++i) {
 8003e78:	e000      	b.n	8003e7c <OpenNNA_Add_Layer+0x60>
 8003e7a:	3401      	adds	r4, #1
            if (!strcmp(Layer_Name, operators[i].Operator_Name))//0找到
 8003e7c:	f858 1034 	ldr.w	r1, [r8, r4, lsl #3]
 8003e80:	4630      	mov	r0, r6
 8003e82:	f7fc fa35 	bl	80002f0 <strcmp>
 8003e86:	2800      	cmp	r0, #0
 8003e88:	d1f7      	bne.n	8003e7a <OpenNNA_Add_Layer+0x5e>
                Network->pfunc_Operator = operators[i].pfunc_Operator;//算子函数指针填入
 8003e8a:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 8003e8e:	6863      	ldr	r3, [r4, #4]
 8003e90:	62ab      	str	r3, [r5, #40]	; 0x28
        if(NULL == Network->pfunc_Operator && 0 != Network->Layer_Index)//未找到算子报错，index=0时忽略
 8003e92:	b903      	cbnz	r3, 8003e96 <OpenNNA_Add_Layer+0x7a>
 8003e94:	b947      	cbnz	r7, 8003ea8 <OpenNNA_Add_Layer+0x8c>
            sprintf(mesg, "Layer %d Operator:%s NOT FOUND IN LIB!!!\n", Network->Layer_Index, Layer_Name);
            OpenNNA_Printf(mesg);
#endif
            return -1;
        }
        Network->Weights = Weights;
 8003e96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e98:	622b      	str	r3, [r5, #32]
        Network->Bias =Bias;
 8003e9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e9c:	626b      	str	r3, [r5, #36]	; 0x24
    }
    return 0;
}
 8003e9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while(NULL != Network->layer_next)
 8003ea2:	2701      	movs	r7, #1
 8003ea4:	46b9      	mov	r9, r7
 8003ea6:	e7ce      	b.n	8003e46 <OpenNNA_Add_Layer+0x2a>
            return -1;
 8003ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003eac:	e7f7      	b.n	8003e9e <OpenNNA_Add_Layer+0x82>
 8003eae:	bf00      	nop
 8003eb0:	2404e758 	.word	0x2404e758
 8003eb4:	24000010 	.word	0x24000010

08003eb8 <OpenNNA_GetFmapHeap>:
 * struct layer * Network: 网络对象
 * int *Input_Fmap_HeapSize: 输入特征图堆内存大小
 * int *Output_Fmap_HeapSize: 输出特征图堆内存大小
*/
void OpenNNA_GetFmapHeap(struct layer * Network,int *Input_Fmap_HeapSize,int *Output_Fmap_HeapSize)
{
 8003eb8:	b4f0      	push	{r4, r5, r6, r7}
    while(NULL != Network->layer_next)
 8003eba:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003ebc:	b9fc      	cbnz	r4, 8003efe <OpenNNA_GetFmapHeap+0x46>
 8003ebe:	e041      	b.n	8003f44 <OpenNNA_GetFmapHeap+0x8c>
    {
        if(Network->Layer_Index != 0)
        {
            //计算输入特征图的最大堆内存
            *Input_Fmap_HeapSize = *Input_Fmap_HeapSize<\
            sizeof(data_t)*((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Row\
 8003ec0:	6906      	ldr	r6, [r0, #16]
            sizeof(data_t)*((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Row\
            *\
            ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Channel\
            *\
            ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Col\
            :\
 8003ec2:	6808      	ldr	r0, [r1, #0]
    while(NULL != Network->layer_next)
 8003ec4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
            *\
 8003ec6:	e9d6 7300 	ldrd	r7, r3, [r6]
 8003eca:	fb07 f303 	mul.w	r3, r7, r3
            *\
 8003ece:	68b7      	ldr	r7, [r6, #8]
 8003ed0:	fb07 f303 	mul.w	r3, r7, r3
 8003ed4:	009b      	lsls	r3, r3, #2
            :\
 8003ed6:	4283      	cmp	r3, r0
 8003ed8:	bf38      	it	cc
 8003eda:	4603      	movcc	r3, r0
            *Input_Fmap_HeapSize = *Input_Fmap_HeapSize<\
 8003edc:	600b      	str	r3, [r1, #0]
            sizeof(data_t)*((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Row\
            *\
            ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Channel\
            *\
            ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Col\
            :\
 8003ede:	6810      	ldr	r0, [r2, #0]
            *\
 8003ee0:	e9d6 7303 	ldrd	r7, r3, [r6, #12]
            *\
 8003ee4:	6976      	ldr	r6, [r6, #20]
            *\
 8003ee6:	fb07 f303 	mul.w	r3, r7, r3
            *\
 8003eea:	fb06 f303 	mul.w	r3, r6, r3
 8003eee:	009b      	lsls	r3, r3, #2
            :\
 8003ef0:	4283      	cmp	r3, r0
 8003ef2:	bf38      	it	cc
 8003ef4:	4603      	movcc	r3, r0
            *Output_Fmap_HeapSize = *Output_Fmap_HeapSize<\
 8003ef6:	6013      	str	r3, [r2, #0]
    while(NULL != Network->layer_next)
 8003ef8:	b13d      	cbz	r5, 8003f0a <OpenNNA_GetFmapHeap+0x52>
{
 8003efa:	4620      	mov	r0, r4
 8003efc:	462c      	mov	r4, r5
        if(Network->Layer_Index != 0)
 8003efe:	6843      	ldr	r3, [r0, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1dd      	bne.n	8003ec0 <OpenNNA_GetFmapHeap+0x8>
    while(NULL != Network->layer_next)
 8003f04:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8003f06:	2d00      	cmp	r5, #0
 8003f08:	d1f7      	bne.n	8003efa <OpenNNA_GetFmapHeap+0x42>
        }
        Network = Network->layer_next;
    }
    //计算输入特征图的最大堆内存
    *Input_Fmap_HeapSize = *Input_Fmap_HeapSize<\
            sizeof(data_t)*((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Row\
 8003f0a:	6920      	ldr	r0, [r4, #16]
            *\
 8003f0c:	e9d0 4300 	ldrd	r4, r3, [r0]
 8003f10:	fb04 f303 	mul.w	r3, r4, r3
            ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Channel\
            *\
 8003f14:	6884      	ldr	r4, [r0, #8]
 8003f16:	fb04 f303 	mul.w	r3, r4, r3
            sizeof(data_t)*((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Row\
            *\
            ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Channel\
            *\
            ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Col\
            :\
 8003f1a:	680c      	ldr	r4, [r1, #0]
            *\
 8003f1c:	009b      	lsls	r3, r3, #2
            :\
 8003f1e:	42a3      	cmp	r3, r4
 8003f20:	bf38      	it	cc
 8003f22:	4623      	movcc	r3, r4
    *Input_Fmap_HeapSize = *Input_Fmap_HeapSize<\
 8003f24:	600b      	str	r3, [r1, #0]
            sizeof(data_t)*((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Row\
            *\
            ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Channel\
            *\
            ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Col\
            :\
 8003f26:	6811      	ldr	r1, [r2, #0]
            *\
 8003f28:	e9d0 4303 	ldrd	r4, r3, [r0, #12]
            *\
 8003f2c:	6940      	ldr	r0, [r0, #20]
            *\
 8003f2e:	fb04 f303 	mul.w	r3, r4, r3
            *\
 8003f32:	fb00 f303 	mul.w	r3, r0, r3
 8003f36:	009b      	lsls	r3, r3, #2
            :\
 8003f38:	428b      	cmp	r3, r1
 8003f3a:	bf38      	it	cc
 8003f3c:	460b      	movcc	r3, r1
            *Output_Fmap_HeapSize;
}
 8003f3e:	bcf0      	pop	{r4, r5, r6, r7}
    *Output_Fmap_HeapSize = *Output_Fmap_HeapSize<\
 8003f40:	6013      	str	r3, [r2, #0]
}
 8003f42:	4770      	bx	lr
    while(NULL != Network->layer_next)
 8003f44:	4604      	mov	r4, r0
 8003f46:	e7e0      	b.n	8003f0a <OpenNNA_GetFmapHeap+0x52>

08003f48 <OpenNNA_Init>:
 * 这个函数主要做以下几件事情:
 * 1.以网络为粒度，为每一层分配输入/输出堆内存
 * 2.将最后一层和第0层(Host节点)连接，构成循环链表。方便推理函数遍历干活
*/
void OpenNNA_Init(struct layer * Network)
{
 8003f48:	b570      	push	{r4, r5, r6, lr}
 8003f4a:	b082      	sub	sp, #8
    OpenNNA_Printf("Init OK!\n");
#endif
#elif(Dynamic_Fmap_heap == 0)//静态特征图堆内存(管理粒度:网络)
    struct layer * Host = Network;//第0层
    struct layer * Last_Layer = NULL;//最后一层
    int Input_Fmap_HeapSize = 0;//获取最大的输入特征图堆内存
 8003f4c:	2300      	movs	r3, #0
{
 8003f4e:	4604      	mov	r4, r0
    OpenNNA_Heap_Sum +=size;
 8003f50:	4d28      	ldr	r5, [pc, #160]	; (8003ff4 <OpenNNA_Init+0xac>)
    int Output_Fmap_HeapSize = 0;//获取最大的输出特征图堆内存
    unsigned int fmap_heap_flip = 1;//翻转堆内存(第一层的输出地址是第二层的输入地址，第二层的输出地址，是第一层的输入地址。
    char mesg[100] = {0};
    //获取输入/输出特征图堆内存
    OpenNNA_GetFmapHeap(Network,&Input_Fmap_HeapSize,&Output_Fmap_HeapSize);
 8003f52:	4669      	mov	r1, sp
 8003f54:	aa01      	add	r2, sp, #4
#if(DEBUG==1)
    sprintf(mesg,"Static Fmap Heap Enable!\nMax Input Fmap Heap = %d bytes, Max Output Fmap Heap = %d bytes\n",Input_Fmap_HeapSize,Output_Fmap_HeapSize);
    OpenNNA_Printf(mesg);
#endif
    //最大堆内存，由于堆内存翻转设计，也就是OpenNNA将会以最大特征图占用为标准，申请两块对称的堆内存空间
    Max_Fmap_Heap=(Input_Fmap_HeapSize > Output_Fmap_HeapSize ? Input_Fmap_HeapSize : Output_Fmap_HeapSize);
 8003f56:	4e28      	ldr	r6, [pc, #160]	; (8003ff8 <OpenNNA_Init+0xb0>)
    int Output_Fmap_HeapSize = 0;//获取最大的输出特征图堆内存
 8003f58:	e9cd 3300 	strd	r3, r3, [sp]
    OpenNNA_GetFmapHeap(Network,&Input_Fmap_HeapSize,&Output_Fmap_HeapSize);
 8003f5c:	f7ff ffac 	bl	8003eb8 <OpenNNA_GetFmapHeap>
    Max_Fmap_Heap=(Input_Fmap_HeapSize > Output_Fmap_HeapSize ? Input_Fmap_HeapSize : Output_Fmap_HeapSize);
 8003f60:	e9dd 3000 	ldrd	r3, r0, [sp]
 8003f64:	4298      	cmp	r0, r3
 8003f66:	bfb8      	it	lt
 8003f68:	4618      	movlt	r0, r3
    OpenNNA_Heap_Sum +=size;
 8003f6a:	682b      	ldr	r3, [r5, #0]
 8003f6c:	4403      	add	r3, r0
    Max_Fmap_Heap=(Input_Fmap_HeapSize > Output_Fmap_HeapSize ? Input_Fmap_HeapSize : Output_Fmap_HeapSize);
 8003f6e:	6030      	str	r0, [r6, #0]
    OpenNNA_Heap_Sum +=size;
 8003f70:	602b      	str	r3, [r5, #0]
    return (void *)pvPortMalloc(size);
 8003f72:	f003 f8a1 	bl	80070b8 <pvPortMalloc>
    Input_Fmap_Heap = OpenNNA_Malloc(Max_Fmap_Heap);//为输入特征图申请堆内存空间
    Output_Fmap_Heap = OpenNNA_Malloc(Max_Fmap_Heap);//为输出特征图申请堆内存空间
 8003f76:	6832      	ldr	r2, [r6, #0]
    OpenNNA_Heap_Sum +=size;
 8003f78:	682b      	ldr	r3, [r5, #0]
    Input_Fmap_Heap = OpenNNA_Malloc(Max_Fmap_Heap);//为输入特征图申请堆内存空间
 8003f7a:	4e20      	ldr	r6, [pc, #128]	; (8003ffc <OpenNNA_Init+0xb4>)
    OpenNNA_Heap_Sum +=size;
 8003f7c:	4413      	add	r3, r2
    Input_Fmap_Heap = OpenNNA_Malloc(Max_Fmap_Heap);//为输入特征图申请堆内存空间
 8003f7e:	6030      	str	r0, [r6, #0]
    return (void *)pvPortMalloc(size);
 8003f80:	4610      	mov	r0, r2
    OpenNNA_Heap_Sum +=size;
 8003f82:	602b      	str	r3, [r5, #0]
    return (void *)pvPortMalloc(size);
 8003f84:	f003 f898 	bl	80070b8 <pvPortMalloc>
    Output_Fmap_Heap = OpenNNA_Malloc(Max_Fmap_Heap);//为输出特征图申请堆内存空间
 8003f88:	4b1d      	ldr	r3, [pc, #116]	; (8004000 <OpenNNA_Init+0xb8>)
    //对称堆内存分配到每一个层
    while(NULL != Network->layer_next)
 8003f8a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    Output_Fmap_Heap = OpenNNA_Malloc(Max_Fmap_Heap);//为输出特征图申请堆内存空间
 8003f8c:	6018      	str	r0, [r3, #0]
    while(NULL != Network->layer_next)
 8003f8e:	2900      	cmp	r1, #0
 8003f90:	d02e      	beq.n	8003ff0 <OpenNNA_Init+0xa8>
    {
        if((fmap_heap_flip==1)&&(0!=Network->Layer_Index)) {
            Network->Input_Feature_Map = Input_Fmap_Heap;
 8003f92:	6835      	ldr	r5, [r6, #0]
 8003f94:	4623      	mov	r3, r4
 8003f96:	461a      	mov	r2, r3
 8003f98:	460b      	mov	r3, r1
        if((fmap_heap_flip==1)&&(0!=Network->Layer_Index)) {
 8003f9a:	6851      	ldr	r1, [r2, #4]
 8003f9c:	b1a1      	cbz	r1, 8003fc8 <OpenNNA_Init+0x80>
            Network->Output_Feature_Map = Output_Fmap_Heap;
 8003f9e:	e9c2 5006 	strd	r5, r0, [r2, #24]
    while(NULL != Network->layer_next)
 8003fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa4:	b1e2      	cbz	r2, 8003fe0 <OpenNNA_Init+0x98>
            fmap_heap_flip=0;
        }
        else if((fmap_heap_flip==0)&&(0!=Network->Layer_Index)){
 8003fa6:	6859      	ldr	r1, [r3, #4]
 8003fa8:	b1a9      	cbz	r1, 8003fd6 <OpenNNA_Init+0x8e>
            Network->Input_Feature_Map = Output_Fmap_Heap;
            Network->Output_Feature_Map = Input_Fmap_Heap;
 8003faa:	e9c3 0506 	strd	r0, r5, [r3, #24]
    while(NULL != Network->layer_next)
 8003fae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1f2      	bne.n	8003f9a <OpenNNA_Init+0x52>
 8003fb4:	4613      	mov	r3, r2
            fmap_heap_flip=1;
        }
        Network = Network->layer_next;
    }
    if((fmap_heap_flip==1)&&(0!=Network->Layer_Index)) {
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	b1b2      	cbz	r2, 8003fe8 <OpenNNA_Init+0xa0>
        Network->Input_Feature_Map = Input_Fmap_Heap;
 8003fba:	6832      	ldr	r2, [r6, #0]
        Network->Input_Feature_Map = Output_Fmap_Heap;
        Network->Output_Feature_Map = Input_Fmap_Heap;
        fmap_heap_flip=1;
    }
    //将最后一层和第0层(Host节点)连接，构成循环链表。方便推理函数遍历干活
    Network->layer_next = Host;
 8003fbc:	62dc      	str	r4, [r3, #44]	; 0x2c
        Network->Input_Feature_Map = Input_Fmap_Heap;
 8003fbe:	e9c3 2006 	strd	r2, r0, [r3, #24]
    //将第0层的prev和最后一层连接，构成双向循环链表
    Last_Layer = Network;
    Network = Network->layer_next;//跳转到第0层
    Network->layer_prev= Last_Layer;//第0层prev连接最后一层
 8003fc2:	6023      	str	r3, [r4, #0]
#if(DEBUG==1)
    OpenNNA_Printf("Init OK!\n");
#endif
#endif
}
 8003fc4:	b002      	add	sp, #8
 8003fc6:	bd70      	pop	{r4, r5, r6, pc}
    while(NULL != Network->layer_next)
 8003fc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fca:	2900      	cmp	r1, #0
 8003fcc:	d1e3      	bne.n	8003f96 <OpenNNA_Init+0x4e>
    if((fmap_heap_flip==1)&&(0!=Network->Layer_Index)) {
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	2a00      	cmp	r2, #0
 8003fd2:	d1f2      	bne.n	8003fba <OpenNNA_Init+0x72>
 8003fd4:	e008      	b.n	8003fe8 <OpenNNA_Init+0xa0>
    while(NULL != Network->layer_next)
 8003fd6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003fd8:	4613      	mov	r3, r2
 8003fda:	460a      	mov	r2, r1
 8003fdc:	2900      	cmp	r1, #0
 8003fde:	d1e2      	bne.n	8003fa6 <OpenNNA_Init+0x5e>
    else if((fmap_heap_flip==0)&&(0!=Network->Layer_Index)){
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	b10a      	cbz	r2, 8003fe8 <OpenNNA_Init+0xa0>
        Network->Output_Feature_Map = Input_Fmap_Heap;
 8003fe4:	e9c3 0506 	strd	r0, r5, [r3, #24]
    Network->layer_next = Host;
 8003fe8:	62dc      	str	r4, [r3, #44]	; 0x2c
    Network->layer_prev= Last_Layer;//第0层prev连接最后一层
 8003fea:	6023      	str	r3, [r4, #0]
}
 8003fec:	b002      	add	sp, #8
 8003fee:	bd70      	pop	{r4, r5, r6, pc}
    while(NULL != Network->layer_next)
 8003ff0:	4623      	mov	r3, r4
 8003ff2:	e7e0      	b.n	8003fb6 <OpenNNA_Init+0x6e>
 8003ff4:	2404e758 	.word	0x2404e758
 8003ff8:	2404e754 	.word	0x2404e754
 8003ffc:	2404e750 	.word	0x2404e750
 8004000:	2404e75c 	.word	0x2404e75c

08004004 <OpenNNA_Predict>:
#endif
/* Function :OpenNNA_Init :神经网络推理
 * struct layer * Network: 网络对象
*/
void OpenNNA_Predict(struct layer * Network, const void *Network_Input, void *Network_Output)
{
 8004004:	b538      	push	{r3, r4, r5, lr}
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Row*\
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Col\
    );
#elif(Dynamic_Fmap_heap==0)
    //跳转到第一层
    Network = Network->layer_next;
 8004006:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
{
 8004008:	4615      	mov	r5, r2
    //将用户传入的神经网络输入copy到第一层的堆内存上
    memcpy(Network->Input_Feature_Map,Network_Input,\
    sizeof(data_t)*\
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Col\
 800400a:	6920      	ldr	r0, [r4, #16]
    *\
 800400c:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
 8004010:	fb02 f303 	mul.w	r3, r2, r3
    memcpy(Network->Input_Feature_Map,Network_Input,\
 8004014:	6802      	ldr	r2, [r0, #0]
 8004016:	69a0      	ldr	r0, [r4, #24]
 8004018:	fb03 f202 	mul.w	r2, r3, r2
 800401c:	0092      	lsls	r2, r2, #2
 800401e:	f003 f993 	bl	8007348 <memcpy>
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Row\
    *\
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Channel\
    );
    //遍历每一层计算一次
    while(0!=Network->Layer_Index)
 8004022:	6863      	ldr	r3, [r4, #4]
 8004024:	b133      	cbz	r3, 8004034 <OpenNNA_Predict+0x30>
    {
        Network->pfunc_Operator(Network);//将本层参数传入算子进行计算
 8004026:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004028:	4620      	mov	r0, r4
 800402a:	4798      	blx	r3
        Network = Network->layer_next;//计算完成跳转到下一层
 800402c:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
    while(0!=Network->Layer_Index)
 800402e:	6863      	ldr	r3, [r4, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1f8      	bne.n	8004026 <OpenNNA_Predict+0x22>
    }
    //跳回最后一层取结果
    Network = Network->layer_prev;
 8004034:	6822      	ldr	r2, [r4, #0]
    //把最后一层的结果取出
    memcpy(Network_Output,Network->Output_Feature_Map,\
 8004036:	4628      	mov	r0, r5
    sizeof(data_t)*\
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Col\
 8004038:	6913      	ldr	r3, [r2, #16]
    memcpy(Network_Output,Network->Output_Feature_Map,\
 800403a:	69d1      	ldr	r1, [r2, #28]
    *\
 800403c:	e9d3 4204 	ldrd	r4, r2, [r3, #16]
    memcpy(Network_Output,Network->Output_Feature_Map,\
 8004040:	68db      	ldr	r3, [r3, #12]
    *\
 8004042:	fb04 f202 	mul.w	r2, r4, r2
    memcpy(Network_Output,Network->Output_Feature_Map,\
 8004046:	fb03 f202 	mul.w	r2, r3, r2
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Row\
    *\
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Channel\
    );
#endif
}
 800404a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    memcpy(Network_Output,Network->Output_Feature_Map,\
 800404e:	0092      	lsls	r2, r2, #2
 8004050:	f003 b97a 	b.w	8007348 <memcpy>

08004054 <OpenNNA_Demo_Conv_OpenNNAPaper>:

    data_t NN_Output_Fmap[1][1][10]={0};



int OpenNNA_Demo_Conv_OpenNNAPaper(struct layer * Network) {
 8004054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004058:	4605      	mov	r5, r0
 800405a:	b095      	sub	sp, #84	; 0x54
    /*****************第2步:配置网络层参数**********************/
    //第一层Padding(对称填充=4，Mnist 1,28,28 填充至 1,32,32
    struct Layer_Para_base *Layer_Para_Base1 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 800405c:	2018      	movs	r0, #24
    struct Layer_Para_Padding *Layer_Para_Padding1 = OpenNNA_Malloc(sizeof(Layer_Para_Padding));
    Layer_Para_Base1->Input_Fmap_Channel=1;
 800405e:	f04f 0a01 	mov.w	sl, #1
    struct Layer_Para_base *Layer_Para_Base1 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 8004062:	f7ff feb7 	bl	8003dd4 <OpenNNA_Malloc>
 8004066:	4683      	mov	fp, r0
    struct Layer_Para_Padding *Layer_Para_Padding1 = OpenNNA_Malloc(sizeof(Layer_Para_Padding));
 8004068:	2004      	movs	r0, #4
    Layer_Para_Base1->Input_Fmap_Row=28;
    Layer_Para_Base1->Input_Fmap_Col=28;
    Layer_Para_Base1->Output_Fmap_Channel=1;
    Layer_Para_Base1->Output_Fmap_Row=32;
 800406a:	2420      	movs	r4, #32
    struct Layer_Para_Padding *Layer_Para_Padding1 = OpenNNA_Malloc(sizeof(Layer_Para_Padding));
 800406c:	f7ff feb2 	bl	8003dd4 <OpenNNA_Malloc>
    Layer_Para_Base1->Output_Fmap_Col=32;

    //填充两圈
    Layer_Para_Padding1->padding = 2;
 8004070:	2702      	movs	r7, #2
    Layer_Para_Base1->Input_Fmap_Row=28;
 8004072:	231c      	movs	r3, #28
    Layer_Para_Base1->Input_Fmap_Channel=1;
 8004074:	f8cb a000 	str.w	sl, [fp]
    Layer_Para_Base1->Output_Fmap_Channel=1;
 8004078:	f8cb a00c 	str.w	sl, [fp, #12]
    struct Layer_Para_Conv2d *Layer_Para_Conv2d2 = OpenNNA_Malloc(sizeof(Layer_Para_Conv2d));
    Layer_Para_Base2->Input_Fmap_Channel=1;
    Layer_Para_Base2->Input_Fmap_Row=32;
    Layer_Para_Base2->Input_Fmap_Col=32;
    Layer_Para_Base2->Output_Fmap_Channel=16;
    Layer_Para_Base2->Output_Fmap_Row=30;
 800407c:	f04f 0810 	mov.w	r8, #16
    Layer_Para_Padding1->padding = 2;
 8004080:	9013      	str	r0, [sp, #76]	; 0x4c
    Layer_Para_Base2->Output_Fmap_Row=30;
 8004082:	261e      	movs	r6, #30
    Layer_Para_Base1->Input_Fmap_Col=28;
 8004084:	e9cb 3301 	strd	r3, r3, [fp, #4]
    Layer_Para_Base1->Output_Fmap_Col=32;
 8004088:	e9cb 4404 	strd	r4, r4, [fp, #16]
    Layer_Para_Padding1->padding = 2;
 800408c:	6007      	str	r7, [r0, #0]
    struct Layer_Para_base *Layer_Para_Base2 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 800408e:	2018      	movs	r0, #24
 8004090:	f7ff fea0 	bl	8003dd4 <OpenNNA_Malloc>
 8004094:	4681      	mov	r9, r0
    struct Layer_Para_Conv2d *Layer_Para_Conv2d2 = OpenNNA_Malloc(sizeof(Layer_Para_Conv2d));
 8004096:	2018      	movs	r0, #24
 8004098:	f7ff fe9c 	bl	8003dd4 <OpenNNA_Malloc>
    Layer_Para_Base2->Output_Fmap_Col=30;

    Layer_Para_Conv2d2->kernel_row=3;
 800409c:	2303      	movs	r3, #3
    Layer_Para_Base2->Input_Fmap_Col=32;
 800409e:	f8c9 4008 	str.w	r4, [r9, #8]
    Layer_Para_Base2->Output_Fmap_Col=30;
 80040a2:	f8c9 6014 	str.w	r6, [r9, #20]
    Layer_Para_Conv2d2->kernel_col=3;
 80040a6:	9008      	str	r0, [sp, #32]
    Layer_Para_Base2->Input_Fmap_Row=32;
 80040a8:	e9c9 a400 	strd	sl, r4, [r9]
    Layer_Para_Base2->Output_Fmap_Row=30;
 80040ac:	e9c9 8603 	strd	r8, r6, [r9, #12]
    Layer_Para_Conv2d2->kernel_channel=1;
    Layer_Para_Conv2d2->filters=16;
 80040b0:	e9c0 a802 	strd	sl, r8, [r0, #8]
    Layer_Para_Conv2d2->kernel_row=3;
 80040b4:	6043      	str	r3, [r0, #4]
    Layer_Para_Conv2d2->kernel_col=3;
 80040b6:	6003      	str	r3, [r0, #0]
    Layer_Para_Conv2d2->strides_row=1;
    Layer_Para_Conv2d2->strides_col=1;
 80040b8:	e9c0 aa04 	strd	sl, sl, [r0, #16]

    //第三层ReLu激活函数
    struct Layer_Para_base *Layer_Para_Base3 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 80040bc:	2018      	movs	r0, #24
 80040be:	f7ff fe89 	bl	8003dd4 <OpenNNA_Malloc>
 80040c2:	9004      	str	r0, [sp, #16]
    struct Layer_Para_ReLU *Layer_Para_ReLU3 = OpenNNA_Malloc(sizeof(Layer_Para_ReLU));
 80040c4:	2000      	movs	r0, #0
 80040c6:	f7ff fe85 	bl	8003dd4 <OpenNNA_Malloc>
    Layer_Para_Base3->Input_Fmap_Channel=16;
 80040ca:	9b04      	ldr	r3, [sp, #16]
    struct Layer_Para_ReLU *Layer_Para_ReLU3 = OpenNNA_Malloc(sizeof(Layer_Para_ReLU));
 80040cc:	9009      	str	r0, [sp, #36]	; 0x24
    Layer_Para_Base3->Output_Fmap_Channel=16;
    Layer_Para_Base3->Output_Fmap_Row=30;
    Layer_Para_Base3->Output_Fmap_Col=30;

    //第四层maxpool
    struct Layer_Para_base *Layer_Para_Base4 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 80040ce:	2018      	movs	r0, #24
    Layer_Para_Base3->Input_Fmap_Row=30;
 80040d0:	e9c3 8600 	strd	r8, r6, [r3]
    Layer_Para_Base3->Output_Fmap_Channel=16;
 80040d4:	e9c3 6802 	strd	r6, r8, [r3, #8]
    Layer_Para_Base3->Output_Fmap_Col=30;
 80040d8:	e9c3 6604 	strd	r6, r6, [r3, #16]
    struct Layer_Para_base *Layer_Para_Base4 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 80040dc:	f7ff fe7a 	bl	8003dd4 <OpenNNA_Malloc>
 80040e0:	9005      	str	r0, [sp, #20]
    struct Layer_Para_MaxPool *Layer_Para_MaxPool4 = OpenNNA_Malloc(sizeof(Layer_Para_MaxPool));
 80040e2:	4640      	mov	r0, r8
 80040e4:	f7ff fe76 	bl	8003dd4 <OpenNNA_Malloc>
    Layer_Para_Base4->Input_Fmap_Channel=16;
 80040e8:	9905      	ldr	r1, [sp, #20]
    Layer_Para_Base4->Output_Fmap_Col=15;

    Layer_Para_MaxPool4->strides_col=2;
    Layer_Para_MaxPool4->strides_row=2;
    Layer_Para_MaxPool4->kernel_row=2;
    Layer_Para_MaxPool4->kernel_col=2;
 80040ea:	900a      	str	r0, [sp, #40]	; 0x28
    Layer_Para_Base4->Input_Fmap_Row=30;
 80040ec:	e9c1 8600 	strd	r8, r6, [r1]
    Layer_Para_Base4->Output_Fmap_Channel=16;
 80040f0:	e9c1 6802 	strd	r6, r8, [r1, #8]
    Layer_Para_Base4->Output_Fmap_Row=15;
 80040f4:	260f      	movs	r6, #15
    Layer_Para_Base4->Output_Fmap_Col=15;
 80040f6:	e9c1 6604 	strd	r6, r6, [r1, #16]
    Layer_Para_MaxPool4->strides_row=2;
 80040fa:	e9c0 7702 	strd	r7, r7, [r0, #8]
    Layer_Para_MaxPool4->kernel_row=2;
 80040fe:	6047      	str	r7, [r0, #4]
    Layer_Para_MaxPool4->kernel_col=2;
 8004100:	6007      	str	r7, [r0, #0]

    //第五层Conv2d
    struct Layer_Para_base *Layer_Para_Base5 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 8004102:	2018      	movs	r0, #24
 8004104:	f7ff fe66 	bl	8003dd4 <OpenNNA_Malloc>
 8004108:	9006      	str	r0, [sp, #24]
    struct Layer_Para_Conv2d *Layer_Para_Conv2d5 = OpenNNA_Malloc(sizeof(Layer_Para_Conv2d));
 800410a:	2018      	movs	r0, #24
 800410c:	f7ff fe62 	bl	8003dd4 <OpenNNA_Malloc>
    Layer_Para_Base5->Input_Fmap_Channel=16;
 8004110:	9906      	ldr	r1, [sp, #24]
    Layer_Para_Base5->Input_Fmap_Col=15;
    Layer_Para_Base5->Output_Fmap_Channel=32;
    Layer_Para_Base5->Output_Fmap_Row=13;
    Layer_Para_Base5->Output_Fmap_Col=13;

    Layer_Para_Conv2d5->kernel_row=3;
 8004112:	2303      	movs	r3, #3
    Layer_Para_Conv2d5->kernel_col=3;
    Layer_Para_Conv2d5->kernel_channel=16;
    Layer_Para_Conv2d5->filters=32;
    Layer_Para_Conv2d5->strides_row=1;
    Layer_Para_Conv2d5->strides_col=1;
 8004114:	900b      	str	r0, [sp, #44]	; 0x2c
    Layer_Para_Base5->Input_Fmap_Col=15;
 8004116:	608e      	str	r6, [r1, #8]
    Layer_Para_Base5->Output_Fmap_Channel=32;
 8004118:	60cc      	str	r4, [r1, #12]
    Layer_Para_Base5->Input_Fmap_Row=15;
 800411a:	e9c1 8600 	strd	r8, r6, [r1]
    Layer_Para_Base5->Output_Fmap_Row=13;
 800411e:	260d      	movs	r6, #13
    Layer_Para_Base5->Output_Fmap_Col=13;
 8004120:	e9c1 6604 	strd	r6, r6, [r1, #16]
    Layer_Para_Conv2d5->kernel_col=3;
 8004124:	e9c0 3300 	strd	r3, r3, [r0]
    Layer_Para_Conv2d5->filters=32;
 8004128:	e9c0 8402 	strd	r8, r4, [r0, #8]
    Layer_Para_Conv2d5->strides_row=1;
 800412c:	f8c0 a014 	str.w	sl, [r0, #20]
    Layer_Para_Conv2d5->strides_col=1;
 8004130:	f8c0 a010 	str.w	sl, [r0, #16]

    //第六层ReLU激活函数
    struct Layer_Para_base *Layer_Para_Base6 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 8004134:	2018      	movs	r0, #24
 8004136:	f7ff fe4d 	bl	8003dd4 <OpenNNA_Malloc>
 800413a:	9007      	str	r0, [sp, #28]
    struct Layer_Para_ReLU *Layer_Para_ReLU6 = OpenNNA_Malloc(sizeof(Layer_Para_ReLU));
 800413c:	2000      	movs	r0, #0
 800413e:	f7ff fe49 	bl	8003dd4 <OpenNNA_Malloc>
    Layer_Para_Base6->Input_Fmap_Channel=32;
 8004142:	9a07      	ldr	r2, [sp, #28]
    struct Layer_Para_ReLU *Layer_Para_ReLU6 = OpenNNA_Malloc(sizeof(Layer_Para_ReLU));
 8004144:	900c      	str	r0, [sp, #48]	; 0x30
    Layer_Para_Base6->Output_Fmap_Channel=32;
    Layer_Para_Base6->Output_Fmap_Row=13;
    Layer_Para_Base6->Output_Fmap_Col=13;

    //第七层maxpool
    struct Layer_Para_base *Layer_Para_Base7 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 8004146:	2018      	movs	r0, #24
    Layer_Para_Base6->Input_Fmap_Row=13;
 8004148:	e9c2 4600 	strd	r4, r6, [r2]
    Layer_Para_Base6->Output_Fmap_Channel=32;
 800414c:	e9c2 6402 	strd	r6, r4, [r2, #8]
    Layer_Para_Base6->Output_Fmap_Col=13;
 8004150:	e9c2 6604 	strd	r6, r6, [r2, #16]
    struct Layer_Para_base *Layer_Para_Base7 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 8004154:	f7ff fe3e 	bl	8003dd4 <OpenNNA_Malloc>
 8004158:	4603      	mov	r3, r0
    struct Layer_Para_MaxPool *Layer_Para_MaxPool7 = OpenNNA_Malloc(sizeof(Layer_Para_MaxPool));
 800415a:	4640      	mov	r0, r8
    struct Layer_Para_base *Layer_Para_Base7 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 800415c:	4698      	mov	r8, r3
    struct Layer_Para_MaxPool *Layer_Para_MaxPool7 = OpenNNA_Malloc(sizeof(Layer_Para_MaxPool));
 800415e:	f7ff fe39 	bl	8003dd4 <OpenNNA_Malloc>
    Layer_Para_Base7->Output_Fmap_Col=6;

    Layer_Para_MaxPool7->strides_col=2;
    Layer_Para_MaxPool7->strides_row=2;
    Layer_Para_MaxPool7->kernel_row=2;
    Layer_Para_MaxPool7->kernel_col=2;
 8004162:	900e      	str	r0, [sp, #56]	; 0x38
    Layer_Para_Base7->Input_Fmap_Col=13;
 8004164:	f8c8 6008 	str.w	r6, [r8, #8]
    Layer_Para_Base7->Output_Fmap_Channel=32;
 8004168:	f8c8 400c 	str.w	r4, [r8, #12]
    Layer_Para_Base7->Output_Fmap_Col=6;
 800416c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    Layer_Para_Base7->Input_Fmap_Row=13;
 8004170:	e9c8 4600 	strd	r4, r6, [r8]
    Layer_Para_Base7->Output_Fmap_Row=6;
 8004174:	2606      	movs	r6, #6
 8004176:	f8c8 6010 	str.w	r6, [r8, #16]
    Layer_Para_Base7->Output_Fmap_Col=6;
 800417a:	f8c8 6014 	str.w	r6, [r8, #20]
    Layer_Para_MaxPool7->kernel_row=2;
 800417e:	6047      	str	r7, [r0, #4]
    Layer_Para_MaxPool7->kernel_col=2;
 8004180:	6007      	str	r7, [r0, #0]
    Layer_Para_MaxPool7->strides_row=2;
 8004182:	e9c0 7702 	strd	r7, r7, [r0, #8]

    //第八层Dense 64
    struct Layer_Para_base *Layer_Para_Base8 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 8004186:	2018      	movs	r0, #24
 8004188:	f7ff fe24 	bl	8003dd4 <OpenNNA_Malloc>
 800418c:	4607      	mov	r7, r0
    struct Layer_Para_Dense *Layer_Para_Dense8 = OpenNNA_Malloc(sizeof(Layer_Para_Dense));
 800418e:	2004      	movs	r0, #4
 8004190:	f7ff fe20 	bl	8003dd4 <OpenNNA_Malloc>
    Layer_Para_Base8->Input_Fmap_Channel=32;
 8004194:	603c      	str	r4, [r7, #0]
    Layer_Para_Base8->Input_Fmap_Row=6;
    Layer_Para_Base8->Input_Fmap_Col=6;
    Layer_Para_Base8->Output_Fmap_Channel=1;
    Layer_Para_Base8->Output_Fmap_Row=1;
    Layer_Para_Base8->Output_Fmap_Col=64;
 8004196:	2440      	movs	r4, #64	; 0x40
    Layer_Para_Base8->Output_Fmap_Channel=1;
 8004198:	f8c7 a00c 	str.w	sl, [r7, #12]
    Layer_Para_Base8->Output_Fmap_Row=1;
 800419c:	f8c7 a010 	str.w	sl, [r7, #16]
    Layer_Para_Base8->Output_Fmap_Col=64;
 80041a0:	617c      	str	r4, [r7, #20]

    Layer_Para_Dense8->units = 64;
 80041a2:	9010      	str	r0, [sp, #64]	; 0x40
    Layer_Para_Base8->Output_Fmap_Col=64;
 80041a4:	970f      	str	r7, [sp, #60]	; 0x3c
    Layer_Para_Base8->Input_Fmap_Col=6;
 80041a6:	e9c7 6601 	strd	r6, r6, [r7, #4]
    Layer_Para_Dense8->units = 64;
 80041aa:	6004      	str	r4, [r0, #0]

    //第九层ReLU激活函数
    struct Layer_Para_base *Layer_Para_Base9 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 80041ac:	2018      	movs	r0, #24
 80041ae:	f7ff fe11 	bl	8003dd4 <OpenNNA_Malloc>
 80041b2:	4680      	mov	r8, r0
    struct Layer_Para_ReLU *Layer_Para_ReLU9 = OpenNNA_Malloc(sizeof(Layer_Para_ReLU));
 80041b4:	2000      	movs	r0, #0
 80041b6:	f7ff fe0d 	bl	8003dd4 <OpenNNA_Malloc>
 80041ba:	9011      	str	r0, [sp, #68]	; 0x44
    Layer_Para_Base9->Output_Fmap_Channel=1;
    Layer_Para_Base9->Output_Fmap_Row=1;
    Layer_Para_Base9->Output_Fmap_Col=64;

    //第10层Dense 10
    struct Layer_Para_base *Layer_Para_Base10 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 80041bc:	2018      	movs	r0, #24
    Layer_Para_Base9->Output_Fmap_Channel=1;
 80041be:	e9c8 4a02 	strd	r4, sl, [r8, #8]
    Layer_Para_Base9->Output_Fmap_Col=64;
 80041c2:	e9c8 a404 	strd	sl, r4, [r8, #16]
    Layer_Para_Base9->Input_Fmap_Row=1;
 80041c6:	e9c8 aa00 	strd	sl, sl, [r8]
    struct Layer_Para_base *Layer_Para_Base10 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 80041ca:	f7ff fe03 	bl	8003dd4 <OpenNNA_Malloc>
 80041ce:	4607      	mov	r7, r0
    struct Layer_Para_Dense *Layer_Para_Dense10 = OpenNNA_Malloc(sizeof(Layer_Para_Dense));
 80041d0:	2004      	movs	r0, #4
 80041d2:	f7ff fdff 	bl	8003dd4 <OpenNNA_Malloc>
    Layer_Para_Base10->Input_Fmap_Channel=1;
    Layer_Para_Base10->Input_Fmap_Row=1;
    Layer_Para_Base10->Input_Fmap_Col=64;
    Layer_Para_Base10->Output_Fmap_Channel=1;
    Layer_Para_Base10->Output_Fmap_Row=1;
    Layer_Para_Base10->Output_Fmap_Col=10;
 80041d6:	230a      	movs	r3, #10
    Layer_Para_Base10->Input_Fmap_Col=64;
 80041d8:	60bc      	str	r4, [r7, #8]
    Layer_Para_Base11->Output_Fmap_Channel=1;
    Layer_Para_Base11->Output_Fmap_Row=1;
    Layer_Para_Base11->Output_Fmap_Col=10;

    /*****************第4步:添加网络层**********************/
    OpenNNA_Add_Layer(Network, "Padding", "OpenNNA-Paper", Layer_Para_Base1,Layer_Para_Padding1, NULL, NULL);
 80041da:	2400      	movs	r4, #0
    Layer_Para_Base10->Output_Fmap_Col=10;
 80041dc:	617b      	str	r3, [r7, #20]
    Layer_Para_Base10->Input_Fmap_Channel=1;
 80041de:	f8c7 a000 	str.w	sl, [r7]
    Layer_Para_Base10->Input_Fmap_Row=1;
 80041e2:	f8c7 a004 	str.w	sl, [r7, #4]
    Layer_Para_Dense10->units = 10;
 80041e6:	9012      	str	r0, [sp, #72]	; 0x48
    Layer_Para_Base10->Output_Fmap_Row=1;
 80041e8:	e9c7 aa03 	strd	sl, sl, [r7, #12]
    Layer_Para_Dense10->units = 10;
 80041ec:	6003      	str	r3, [r0, #0]
    struct Layer_Para_base *Layer_Para_Base11 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 80041ee:	2018      	movs	r0, #24
 80041f0:	f7ff fdf0 	bl	8003dd4 <OpenNNA_Malloc>
 80041f4:	4606      	mov	r6, r0
    struct Layer_Para_Softmax *Layer_Para_Softmax11 = OpenNNA_Malloc(sizeof(Layer_Para_Softmax));
 80041f6:	4620      	mov	r0, r4
 80041f8:	f7ff fdec 	bl	8003dd4 <OpenNNA_Malloc>
    OpenNNA_Add_Layer(Network, "Padding", "OpenNNA-Paper", Layer_Para_Base1,Layer_Para_Padding1, NULL, NULL);
 80041fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    Layer_Para_Base11->Input_Fmap_Col=10;
 80041fe:	230a      	movs	r3, #10
    struct Layer_Para_Softmax *Layer_Para_Softmax11 = OpenNNA_Malloc(sizeof(Layer_Para_Softmax));
 8004200:	9013      	str	r0, [sp, #76]	; 0x4c
    OpenNNA_Add_Layer(Network, "Padding", "OpenNNA-Paper", Layer_Para_Base1,Layer_Para_Padding1, NULL, NULL);
 8004202:	4945      	ldr	r1, [pc, #276]	; (8004318 <OpenNNA_Demo_Conv_OpenNNAPaper+0x2c4>)
 8004204:	4628      	mov	r0, r5
    Layer_Para_Base11->Input_Fmap_Col=10;
 8004206:	60b3      	str	r3, [r6, #8]
    Layer_Para_Base11->Output_Fmap_Col=10;
 8004208:	6173      	str	r3, [r6, #20]
    OpenNNA_Add_Layer(Network, "Padding", "OpenNNA-Paper", Layer_Para_Base1,Layer_Para_Padding1, NULL, NULL);
 800420a:	465b      	mov	r3, fp
    OpenNNA_Add_Layer(Network, "Conv2d", "Chengsen", Layer_Para_Base2,Layer_Para_Conv2d2, Conv2d_2_Weights, Conv2d_2_Bias);
 800420c:	f8df b15c 	ldr.w	fp, [pc, #348]	; 800436c <OpenNNA_Demo_Conv_OpenNNAPaper+0x318>
    Layer_Para_Base11->Input_Fmap_Row=1;
 8004210:	e9c6 aa00 	strd	sl, sl, [r6]
    Layer_Para_Base11->Output_Fmap_Row=1;
 8004214:	e9c6 aa03 	strd	sl, sl, [r6, #12]
    OpenNNA_Add_Layer(Network, "Padding", "OpenNNA-Paper", Layer_Para_Base1,Layer_Para_Padding1, NULL, NULL);
 8004218:	9200      	str	r2, [sp, #0]
 800421a:	4a40      	ldr	r2, [pc, #256]	; (800431c <OpenNNA_Demo_Conv_OpenNNAPaper+0x2c8>)
    OpenNNA_Add_Layer(Network, "ReLU", "xddcore", Layer_Para_Base3,Layer_Para_ReLU3, NULL, NULL);
    OpenNNA_Add_Layer(Network, "MaxPool", "lululu~", Layer_Para_Base4,Layer_Para_MaxPool4, NULL, NULL);
 800421c:	f8df a150 	ldr.w	sl, [pc, #336]	; 8004370 <OpenNNA_Demo_Conv_OpenNNAPaper+0x31c>
    OpenNNA_Add_Layer(Network, "Padding", "OpenNNA-Paper", Layer_Para_Base1,Layer_Para_Padding1, NULL, NULL);
 8004220:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004224:	f7ff fdfa 	bl	8003e1c <OpenNNA_Add_Layer>
    OpenNNA_Add_Layer(Network, "Conv2d", "Chengsen", Layer_Para_Base2,Layer_Para_Conv2d2, Conv2d_2_Weights, Conv2d_2_Bias);
 8004228:	9a08      	ldr	r2, [sp, #32]
 800422a:	464b      	mov	r3, r9
 800422c:	4659      	mov	r1, fp
 800422e:	9200      	str	r2, [sp, #0]
 8004230:	4628      	mov	r0, r5
 8004232:	4a3b      	ldr	r2, [pc, #236]	; (8004320 <OpenNNA_Demo_Conv_OpenNNAPaper+0x2cc>)
    OpenNNA_Add_Layer(Network, "ReLU", "xddcore", Layer_Para_Base3,Layer_Para_ReLU3, NULL, NULL);
 8004234:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8004374 <OpenNNA_Demo_Conv_OpenNNAPaper+0x320>
    OpenNNA_Add_Layer(Network, "Conv2d", "Chengsen", Layer_Para_Base2,Layer_Para_Conv2d2, Conv2d_2_Weights, Conv2d_2_Bias);
 8004238:	9202      	str	r2, [sp, #8]
 800423a:	4a3a      	ldr	r2, [pc, #232]	; (8004324 <OpenNNA_Demo_Conv_OpenNNAPaper+0x2d0>)
 800423c:	9201      	str	r2, [sp, #4]
 800423e:	4a3a      	ldr	r2, [pc, #232]	; (8004328 <OpenNNA_Demo_Conv_OpenNNAPaper+0x2d4>)
 8004240:	f7ff fdec 	bl	8003e1c <OpenNNA_Add_Layer>
    OpenNNA_Add_Layer(Network, "ReLU", "xddcore", Layer_Para_Base3,Layer_Para_ReLU3, NULL, NULL);
 8004244:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004246:	9b04      	ldr	r3, [sp, #16]
 8004248:	4649      	mov	r1, r9
 800424a:	9200      	str	r2, [sp, #0]
 800424c:	4628      	mov	r0, r5
 800424e:	4a37      	ldr	r2, [pc, #220]	; (800432c <OpenNNA_Demo_Conv_OpenNNAPaper+0x2d8>)
 8004250:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004254:	f7ff fde2 	bl	8003e1c <OpenNNA_Add_Layer>
    OpenNNA_Add_Layer(Network, "MaxPool", "lululu~", Layer_Para_Base4,Layer_Para_MaxPool4, NULL, NULL);
 8004258:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800425a:	9b05      	ldr	r3, [sp, #20]
 800425c:	4651      	mov	r1, sl
 800425e:	9200      	str	r2, [sp, #0]
 8004260:	4628      	mov	r0, r5
 8004262:	4a33      	ldr	r2, [pc, #204]	; (8004330 <OpenNNA_Demo_Conv_OpenNNAPaper+0x2dc>)
 8004264:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004268:	f7ff fdd8 	bl	8003e1c <OpenNNA_Add_Layer>
    OpenNNA_Add_Layer(Network, "Conv2d", "lalala~", Layer_Para_Base5,Layer_Para_Conv2d5, Conv2d_5_Weights, Conv2d_5_Bias);
 800426c:	4a31      	ldr	r2, [pc, #196]	; (8004334 <OpenNNA_Demo_Conv_OpenNNAPaper+0x2e0>)
 800426e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004270:	4628      	mov	r0, r5
 8004272:	9202      	str	r2, [sp, #8]
 8004274:	4a30      	ldr	r2, [pc, #192]	; (8004338 <OpenNNA_Demo_Conv_OpenNNAPaper+0x2e4>)
 8004276:	9b06      	ldr	r3, [sp, #24]
 8004278:	9100      	str	r1, [sp, #0]
 800427a:	4659      	mov	r1, fp
 800427c:	9201      	str	r2, [sp, #4]
 800427e:	4a2f      	ldr	r2, [pc, #188]	; (800433c <OpenNNA_Demo_Conv_OpenNNAPaper+0x2e8>)
 8004280:	f7ff fdcc 	bl	8003e1c <OpenNNA_Add_Layer>
    OpenNNA_Add_Layer(Network, "ReLU", "The", Layer_Para_Base6,Layer_Para_ReLU6, NULL, NULL);
 8004284:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004286:	9b07      	ldr	r3, [sp, #28]
 8004288:	4628      	mov	r0, r5
 800428a:	9100      	str	r1, [sp, #0]
 800428c:	4649      	mov	r1, r9
 800428e:	4a2c      	ldr	r2, [pc, #176]	; (8004340 <OpenNNA_Demo_Conv_OpenNNAPaper+0x2ec>)
 8004290:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004294:	f7ff fdc2 	bl	8003e1c <OpenNNA_Add_Layer>
    OpenNNA_Add_Layer(Network, "MaxPool", "Future", Layer_Para_Base7,Layer_Para_MaxPool7, NULL, NULL);
 8004298:	990e      	ldr	r1, [sp, #56]	; 0x38
 800429a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800429c:	4628      	mov	r0, r5
 800429e:	9100      	str	r1, [sp, #0]
 80042a0:	4651      	mov	r1, sl
 80042a2:	4a28      	ldr	r2, [pc, #160]	; (8004344 <OpenNNA_Demo_Conv_OpenNNAPaper+0x2f0>)
    OpenNNA_Add_Layer(Network, "Dense", "Of", Layer_Para_Base8,Layer_Para_Dense8, Dense_8_Weights, Dense_8_Bias);
 80042a4:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8004378 <OpenNNA_Demo_Conv_OpenNNAPaper+0x324>
    OpenNNA_Add_Layer(Network, "MaxPool", "Future", Layer_Para_Base7,Layer_Para_MaxPool7, NULL, NULL);
 80042a8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80042ac:	f7ff fdb6 	bl	8003e1c <OpenNNA_Add_Layer>
    OpenNNA_Add_Layer(Network, "Dense", "Of", Layer_Para_Base8,Layer_Para_Dense8, Dense_8_Weights, Dense_8_Bias);
 80042b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80042b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80042b4:	4651      	mov	r1, sl
 80042b6:	9200      	str	r2, [sp, #0]
 80042b8:	4628      	mov	r0, r5
 80042ba:	4a23      	ldr	r2, [pc, #140]	; (8004348 <OpenNNA_Demo_Conv_OpenNNAPaper+0x2f4>)
 80042bc:	9202      	str	r2, [sp, #8]
 80042be:	4a23      	ldr	r2, [pc, #140]	; (800434c <OpenNNA_Demo_Conv_OpenNNAPaper+0x2f8>)
 80042c0:	9201      	str	r2, [sp, #4]
 80042c2:	4a23      	ldr	r2, [pc, #140]	; (8004350 <OpenNNA_Demo_Conv_OpenNNAPaper+0x2fc>)
 80042c4:	f7ff fdaa 	bl	8003e1c <OpenNNA_Add_Layer>
    OpenNNA_Add_Layer(Network, "ReLU", "Possible", Layer_Para_Base9,Layer_Para_ReLU9, NULL, NULL);
 80042c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80042ca:	4643      	mov	r3, r8
 80042cc:	4649      	mov	r1, r9
 80042ce:	9200      	str	r2, [sp, #0]
 80042d0:	4628      	mov	r0, r5
 80042d2:	4a20      	ldr	r2, [pc, #128]	; (8004354 <OpenNNA_Demo_Conv_OpenNNAPaper+0x300>)
 80042d4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80042d8:	f7ff fda0 	bl	8003e1c <OpenNNA_Add_Layer>
    OpenNNA_Add_Layer(Network, "Dense", "Think", Layer_Para_Base10,Layer_Para_Dense10, Dense_10_Weights, Dense_10_Bias);
 80042dc:	4a1e      	ldr	r2, [pc, #120]	; (8004358 <OpenNNA_Demo_Conv_OpenNNAPaper+0x304>)
 80042de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80042e0:	4651      	mov	r1, sl
 80042e2:	9202      	str	r2, [sp, #8]
 80042e4:	4628      	mov	r0, r5
 80042e6:	4a1d      	ldr	r2, [pc, #116]	; (800435c <OpenNNA_Demo_Conv_OpenNNAPaper+0x308>)
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	463b      	mov	r3, r7
 80042ec:	9201      	str	r2, [sp, #4]
 80042ee:	4a1c      	ldr	r2, [pc, #112]	; (8004360 <OpenNNA_Demo_Conv_OpenNNAPaper+0x30c>)
 80042f0:	f7ff fd94 	bl	8003e1c <OpenNNA_Add_Layer>
    OpenNNA_Add_Layer(Network, "Softmax", "Different", Layer_Para_Base11,Layer_Para_Softmax11, NULL, NULL);
 80042f4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80042f6:	4633      	mov	r3, r6
 80042f8:	4a1a      	ldr	r2, [pc, #104]	; (8004364 <OpenNNA_Demo_Conv_OpenNNAPaper+0x310>)
 80042fa:	9100      	str	r1, [sp, #0]
 80042fc:	4628      	mov	r0, r5
 80042fe:	491a      	ldr	r1, [pc, #104]	; (8004368 <OpenNNA_Demo_Conv_OpenNNAPaper+0x314>)
 8004300:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004304:	f7ff fd8a 	bl	8003e1c <OpenNNA_Add_Layer>
    /*****************第5步:初始化神经网络**********************/
    OpenNNA_Init(Network);
 8004308:	4628      	mov	r0, r5
 800430a:	f7ff fe1d 	bl	8003f48 <OpenNNA_Init>
    //OpenNNA_Predict(Network, NN_Input_Fmap, NN_Output_Fmap);

    /*****************第10步:推理结束释放网络结构+申请的特征图堆内存**********************/
    //OpenNNA_Free_Network(&Network);
    return 0;
}
 800430e:	4620      	mov	r0, r4
 8004310:	b015      	add	sp, #84	; 0x54
 8004312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004316:	bf00      	nop
 8004318:	0800a530 	.word	0x0800a530
 800431c:	0800a57c 	.word	0x0800a57c
 8004320:	24000070 	.word	0x24000070
 8004324:	240000b0 	.word	0x240000b0
 8004328:	0800a58c 	.word	0x0800a58c
 800432c:	0800a598 	.word	0x0800a598
 8004330:	0800a5a0 	.word	0x0800a5a0
 8004334:	240002f0 	.word	0x240002f0
 8004338:	24000370 	.word	0x24000370
 800433c:	0800a5a8 	.word	0x0800a5a8
 8004340:	0800a5b0 	.word	0x0800a5b0
 8004344:	0800a5b4 	.word	0x0800a5b4
 8004348:	24005598 	.word	0x24005598
 800434c:	24005698 	.word	0x24005698
 8004350:	0800a5bc 	.word	0x0800a5bc
 8004354:	0800a5c0 	.word	0x0800a5c0
 8004358:	24004b70 	.word	0x24004b70
 800435c:	24004b98 	.word	0x24004b98
 8004360:	0800a5cc 	.word	0x0800a5cc
 8004364:	0800a5d4 	.word	0x0800a5d4
 8004368:	0800a574 	.word	0x0800a574
 800436c:	0800a514 	.word	0x0800a514
 8004370:	0800a538 	.word	0x0800a538
 8004374:	0800a550 	.word	0x0800a550
 8004378:	0800a548 	.word	0x0800a548

0800437c <OpenNNA_Demo_Conv_OpenNNAPaper_Predict>:

void OpenNNA_Demo_Conv_OpenNNAPaper_Predict(struct layer * Network){
OpenNNA_Predict(Network, NN_Input_Fmap, NN_Output_Fmap);
 800437c:	4a12      	ldr	r2, [pc, #72]	; (80043c8 <OpenNNA_Demo_Conv_OpenNNAPaper_Predict+0x4c>)
 800437e:	4913      	ldr	r1, [pc, #76]	; (80043cc <OpenNNA_Demo_Conv_OpenNNAPaper_Predict+0x50>)
void OpenNNA_Demo_Conv_OpenNNAPaper_Predict(struct layer * Network){
 8004380:	b570      	push	{r4, r5, r6, lr}
 8004382:	ed2d 8b02 	vpush	{d8}
 8004386:	4615      	mov	r5, r2
OpenNNA_Predict(Network, NN_Input_Fmap, NN_Output_Fmap);
 8004388:	f7ff fe3c 	bl	8004004 <OpenNNA_Predict>
/*****************第9步:根据推理结果进行动作**********************/
#if(DEBUG==0)
printf("\n推理结果:   \n");
 800438c:	4810      	ldr	r0, [pc, #64]	; (80043d0 <OpenNNA_Demo_Conv_OpenNNAPaper_Predict+0x54>)
for(int i = 0;i<10;++i)
 800438e:	2400      	movs	r4, #0
{
    printf("[%d]%f,   ",i,NN_Output_Fmap[0][0][i]*100);
 8004390:	ed9f 8a10 	vldr	s16, [pc, #64]	; 80043d4 <OpenNNA_Demo_Conv_OpenNNAPaper_Predict+0x58>
 8004394:	4e10      	ldr	r6, [pc, #64]	; (80043d8 <OpenNNA_Demo_Conv_OpenNNAPaper_Predict+0x5c>)
printf("\n推理结果:   \n");
 8004396:	f003 fccd 	bl	8007d34 <puts>
    printf("[%d]%f,   ",i,NN_Output_Fmap[0][0][i]*100);
 800439a:	ecf5 7a01 	vldmia	r5!, {s15}
 800439e:	4621      	mov	r1, r4
for(int i = 0;i<10;++i)
 80043a0:	3401      	adds	r4, #1
    printf("[%d]%f,   ",i,NN_Output_Fmap[0][0][i]*100);
 80043a2:	4630      	mov	r0, r6
 80043a4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80043a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80043ac:	ec53 2b17 	vmov	r2, r3, d7
 80043b0:	f003 fc24 	bl	8007bfc <iprintf>
for(int i = 0;i<10;++i)
 80043b4:	2c0a      	cmp	r4, #10
 80043b6:	d1f0      	bne.n	800439a <OpenNNA_Demo_Conv_OpenNNAPaper_Predict+0x1e>
}
printf("\n");
 80043b8:	4620      	mov	r0, r4
#endif
}
 80043ba:	ecbd 8b02 	vpop	{d8}
 80043be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
printf("\n");
 80043c2:	f003 bc33 	b.w	8007c2c <putchar>
 80043c6:	bf00      	nop
 80043c8:	2404e760 	.word	0x2404e760
 80043cc:	2404d698 	.word	0x2404d698
 80043d0:	0800a5e0 	.word	0x0800a5e0
 80043d4:	42c80000 	.word	0x42c80000
 80043d8:	0800a5f4 	.word	0x0800a5f4

080043dc <OpenNNA_Operator_AvgPool>:
#include "opennna_operator_avgpool.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_AvgPool(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Input_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Channel;
 80043dc:	6903      	ldr	r3, [r0, #16]
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;

    //池化算子特有参数
    reg_t kernel_col = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->kernel_col;
 80043de:	6942      	ldr	r2, [r0, #20]
{
 80043e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 80043e4:	68dd      	ldr	r5, [r3, #12]
{
 80043e6:	b093      	sub	sp, #76	; 0x4c
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 80043e8:	695c      	ldr	r4, [r3, #20]
{
 80043ea:	4680      	mov	r8, r0
    reg_t strides_col = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->strides_col;
    reg_t strides_row = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->strides_row;
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    data_t max_value=0;//在MaxPool时存储最大值,在AveragePool存储均值
    for (int i = 0; i < Output_Fmap_Channel; ++i)//output_fmap_channel
 80043ec:	2d00      	cmp	r5, #0
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 80043ee:	6918      	ldr	r0, [r3, #16]
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 80043f0:	950d      	str	r5, [sp, #52]	; 0x34
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 80043f2:	900e      	str	r0, [sp, #56]	; 0x38
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 80043f4:	9409      	str	r4, [sp, #36]	; 0x24
    reg_t Input_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Col;
 80043f6:	e9d3 1b01 	ldrd	r1, fp, [r3, #4]
    reg_t strides_col = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->strides_col;
 80043fa:	6893      	ldr	r3, [r2, #8]
    reg_t kernel_row = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->kernel_row;
 80043fc:	e9d2 9a00 	ldrd	r9, sl, [r2]
    reg_t strides_col = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->strides_col;
 8004400:	9303      	str	r3, [sp, #12]
    reg_t strides_row = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->strides_row;
 8004402:	68d3      	ldr	r3, [r2, #12]
    for (int i = 0; i < Output_Fmap_Channel; ++i)//output_fmap_channel
 8004404:	f340 808a 	ble.w	800451c <OpenNNA_Operator_AvgPool+0x140>
                                max_value = ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
                            else//求累加值
                                max_value += ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
                    }
                }
                ((data_t *)Layers->Output_Feature_Map)[(i*Output_Fmap_Col*Output_Fmap_Row) + (j*Output_Fmap_Col) + k] = (max_value/(kernel_col*kernel_row));//取平均
 8004408:	fb0a f209 	mul.w	r2, sl, r9
 800440c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004410:	2800      	cmp	r0, #0
 8004412:	ee07 2a90 	vmov	s15, r2
 8004416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800441a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800441e:	dd7d      	ble.n	800451c <OpenNNA_Operator_AvgPool+0x140>
 8004420:	fb0b f201 	mul.w	r2, fp, r1
    data_t max_value=0;//在MaxPool时存储最大值,在AveragePool存储均值
 8004424:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8004524 <OpenNNA_Operator_AvgPool+0x148>
 8004428:	fb0b f303 	mul.w	r3, fp, r3
 800442c:	920f      	str	r2, [sp, #60]	; 0x3c
 800442e:	fb04 f200 	mul.w	r2, r4, r0
 8004432:	9310      	str	r3, [sp, #64]	; 0x40
                ((data_t *)Layers->Output_Feature_Map)[(i*Output_Fmap_Col*Output_Fmap_Row) + (j*Output_Fmap_Col) + k] = (max_value/(kernel_col*kernel_row));//取平均
 8004434:	2300      	movs	r3, #0
 8004436:	920c      	str	r2, [sp, #48]	; 0x30
 8004438:	00a2      	lsls	r2, r4, #2
 800443a:	9306      	str	r3, [sp, #24]
 800443c:	9211      	str	r2, [sp, #68]	; 0x44
 800443e:	9307      	str	r3, [sp, #28]
    for (int i = 0; i < Output_Fmap_Channel; ++i)//output_fmap_channel
 8004440:	930a      	str	r3, [sp, #40]	; 0x28
                ((data_t *)Layers->Output_Feature_Map)[(i*Output_Fmap_Col*Output_Fmap_Row) + (j*Output_Fmap_Col) + k] = (max_value/(kernel_col*kernel_row));//取平均
 8004442:	9b06      	ldr	r3, [sp, #24]
 8004444:	9302      	str	r3, [sp, #8]
 8004446:	9b07      	ldr	r3, [sp, #28]
 8004448:	9308      	str	r3, [sp, #32]
        for (int j = 0; j < Output_Fmap_Row; ++j)//Output_Fmap_Row = (((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 800444a:	2300      	movs	r3, #0
 800444c:	930b      	str	r3, [sp, #44]	; 0x2c
            for (int k = 0; k < Output_Fmap_Col; ++k)//(((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 800444e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004450:	2b00      	cmp	r3, #0
 8004452:	dd47      	ble.n	80044e4 <OpenNNA_Operator_AvgPool+0x108>
 8004454:	9a02      	ldr	r2, [sp, #8]
                ((data_t *)Layers->Output_Feature_Map)[(i*Output_Fmap_Col*Output_Fmap_Row) + (j*Output_Fmap_Col) + k] = (max_value/(kernel_col*kernel_row));//取平均
 8004456:	f04f 0e00 	mov.w	lr, #0
 800445a:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800445e:	0092      	lsls	r2, r2, #2
 8004460:	9908      	ldr	r1, [sp, #32]
 8004462:	9205      	str	r2, [sp, #20]
 8004464:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004466:	189a      	adds	r2, r3, r2
 8004468:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800446c:	9301      	str	r3, [sp, #4]
 800446e:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 8004472:	9304      	str	r3, [sp, #16]
                for (int l = 0; l < kernel_row; ++l)//pool_Kernel_size_row
 8004474:	f1ba 0f00 	cmp.w	sl, #0
 8004478:	dd29      	ble.n	80044ce <OpenNNA_Operator_AvgPool+0xf2>
                                max_value = ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
 800447a:	9b05      	ldr	r3, [sp, #20]
 800447c:	ea4f 0c8e 	mov.w	ip, lr, lsl #2
 8004480:	9e02      	ldr	r6, [sp, #8]
                for (int l = 0; l < kernel_row; ++l)//pool_Kernel_size_row
 8004482:	2000      	movs	r0, #0
                                max_value = ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
 8004484:	eb03 078e 	add.w	r7, r3, lr, lsl #2
                    for (int m = 0; m < kernel_col; ++m)//pool_Kernel_size_col
 8004488:	f1b9 0f00 	cmp.w	r9, #0
 800448c:	dd1b      	ble.n	80044c6 <OpenNNA_Operator_AvgPool+0xea>
 800448e:	f8d8 4018 	ldr.w	r4, [r8, #24]
 8004492:	eb0c 0286 	add.w	r2, ip, r6, lsl #2
 8004496:	2300      	movs	r3, #0
                                max_value = ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
 8004498:	9600      	str	r6, [sp, #0]
 800449a:	19e5      	adds	r5, r4, r7
 800449c:	e005      	b.n	80044aa <OpenNNA_Operator_AvgPool+0xce>
                    for (int m = 0; m < kernel_col; ++m)//pool_Kernel_size_col
 800449e:	3301      	adds	r3, #1
                                max_value = ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
 80044a0:	edd5 7a00 	vldr	s15, [r5]
                    for (int m = 0; m < kernel_col; ++m)//pool_Kernel_size_col
 80044a4:	3204      	adds	r2, #4
 80044a6:	4599      	cmp	r9, r3
 80044a8:	d00c      	beq.n	80044c4 <OpenNNA_Operator_AvgPool+0xe8>
                            if ((l == 0 && m == 0))
 80044aa:	ea50 0603 	orrs.w	r6, r0, r3
                                max_value += ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
 80044ae:	eb04 0102 	add.w	r1, r4, r2
                            if ((l == 0 && m == 0))
 80044b2:	d0f4      	beq.n	800449e <OpenNNA_Operator_AvgPool+0xc2>
                    for (int m = 0; m < kernel_col; ++m)//pool_Kernel_size_col
 80044b4:	3301      	adds	r3, #1
                                max_value += ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
 80044b6:	ed91 7a00 	vldr	s14, [r1]
                    for (int m = 0; m < kernel_col; ++m)//pool_Kernel_size_col
 80044ba:	3204      	adds	r2, #4
 80044bc:	4599      	cmp	r9, r3
                                max_value += ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
 80044be:	ee77 7a87 	vadd.f32	s15, s15, s14
                    for (int m = 0; m < kernel_col; ++m)//pool_Kernel_size_col
 80044c2:	d1f2      	bne.n	80044aa <OpenNNA_Operator_AvgPool+0xce>
 80044c4:	9e00      	ldr	r6, [sp, #0]
                for (int l = 0; l < kernel_row; ++l)//pool_Kernel_size_row
 80044c6:	3001      	adds	r0, #1
 80044c8:	445e      	add	r6, fp
 80044ca:	4582      	cmp	sl, r0
 80044cc:	d1dc      	bne.n	8004488 <OpenNNA_Operator_AvgPool+0xac>
            for (int k = 0; k < Output_Fmap_Col; ++k)//(((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 80044ce:	9b03      	ldr	r3, [sp, #12]
                ((data_t *)Layers->Output_Feature_Map)[(i*Output_Fmap_Col*Output_Fmap_Row) + (j*Output_Fmap_Col) + k] = (max_value/(kernel_col*kernel_row));//取平均
 80044d0:	ee26 7aa7 	vmul.f32	s14, s13, s15
            for (int k = 0; k < Output_Fmap_Col; ++k)//(((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 80044d4:	9a04      	ldr	r2, [sp, #16]
 80044d6:	449e      	add	lr, r3
                ((data_t *)Layers->Output_Feature_Map)[(i*Output_Fmap_Col*Output_Fmap_Row) + (j*Output_Fmap_Col) + k] = (max_value/(kernel_col*kernel_row));//取平均
 80044d8:	9b01      	ldr	r3, [sp, #4]
 80044da:	eca3 7a01 	vstmia	r3!, {s14}
            for (int k = 0; k < Output_Fmap_Col; ++k)//(((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 80044de:	429a      	cmp	r2, r3
                ((data_t *)Layers->Output_Feature_Map)[(i*Output_Fmap_Col*Output_Fmap_Row) + (j*Output_Fmap_Col) + k] = (max_value/(kernel_col*kernel_row));//取平均
 80044e0:	9301      	str	r3, [sp, #4]
            for (int k = 0; k < Output_Fmap_Col; ++k)//(((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 80044e2:	d1c7      	bne.n	8004474 <OpenNNA_Operator_AvgPool+0x98>
        for (int j = 0; j < Output_Fmap_Row; ++j)//Output_Fmap_Row = (((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 80044e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044e6:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80044ea:	3301      	adds	r3, #1
 80044ec:	440a      	add	r2, r1
 80044ee:	9910      	ldr	r1, [sp, #64]	; 0x40
 80044f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80044f2:	9208      	str	r2, [sp, #32]
 80044f4:	9a02      	ldr	r2, [sp, #8]
 80044f6:	440a      	add	r2, r1
 80044f8:	9202      	str	r2, [sp, #8]
 80044fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d1a6      	bne.n	800444e <OpenNNA_Operator_AvgPool+0x72>
    for (int i = 0; i < Output_Fmap_Channel; ++i)//output_fmap_channel
 8004500:	9a07      	ldr	r2, [sp, #28]
 8004502:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004506:	440a      	add	r2, r1
 8004508:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800450a:	3301      	adds	r3, #1
 800450c:	9207      	str	r2, [sp, #28]
 800450e:	9a06      	ldr	r2, [sp, #24]
 8004510:	930a      	str	r3, [sp, #40]	; 0x28
 8004512:	440a      	add	r2, r1
 8004514:	9206      	str	r2, [sp, #24]
 8004516:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004518:	429a      	cmp	r2, r3
 800451a:	d192      	bne.n	8004442 <OpenNNA_Operator_AvgPool+0x66>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 800451c:	b013      	add	sp, #76	; 0x4c
 800451e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004522:	bf00      	nop
 8004524:	00000000 	.word	0x00000000

08004528 <OpenNNA_Operator_Conv2d>:
#include "opennna_operator_conv2d.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_Conv2d(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Input_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Channel;
 8004528:	6903      	ldr	r3, [r0, #16]
{
 800452a:	4601      	mov	r1, r0
 800452c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    reg_t Input_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Row;
    reg_t Input_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Col;
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 8004530:	691c      	ldr	r4, [r3, #16]
{
 8004532:	b0a3      	sub	sp, #140	; 0x8c
    reg_t Input_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Col;
 8004534:	e9d3 2901 	ldrd	r2, r9, [r3, #4]
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8004538:	695b      	ldr	r3, [r3, #20]
{
 800453a:	9020      	str	r0, [sp, #128]	; 0x80
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 800453c:	9319      	str	r3, [sp, #100]	; 0x64
 800453e:	4618      	mov	r0, r3
    //卷积运算相关的参数
    reg_t kernel_col = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_col;
 8004540:	694b      	ldr	r3, [r1, #20]
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 8004542:	9418      	str	r4, [sp, #96]	; 0x60
    reg_t kernel_row = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_row;
    reg_t kernel_channel = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_channel;

    reg_t filters = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->filters;
 8004544:	68dd      	ldr	r5, [r3, #12]
    reg_t kernel_channel = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_channel;
 8004546:	689e      	ldr	r6, [r3, #8]

    reg_t strides_col = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->strides_col;
 8004548:	691f      	ldr	r7, [r3, #16]
    reg_t strides_row = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->strides_row;
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    //以下这个卷积实现思路以输出特征图为导向，当输入特征图为图像数据时，乘加次数最优
    for (int i = 0; i < filters; ++i) {//filters must = Output_Fmap_Channel
 800454a:	2d00      	cmp	r5, #0
    reg_t filters = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->filters;
 800454c:	951a      	str	r5, [sp, #104]	; 0x68
    reg_t kernel_channel = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_channel;
 800454e:	9606      	str	r6, [sp, #24]
    reg_t strides_col = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->strides_col;
 8004550:	9714      	str	r7, [sp, #80]	; 0x50
    reg_t kernel_row = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_row;
 8004552:	e9d3 ba00 	ldrd	fp, sl, [r3]
    reg_t strides_row = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->strides_row;
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	9315      	str	r3, [sp, #84]	; 0x54
    for (int i = 0; i < filters; ++i) {//filters must = Output_Fmap_Channel
 800455a:	f340 80bf 	ble.w	80046dc <OpenNNA_Operator_Conv2d+0x1b4>
        for (int j = 0; j < Output_Fmap_Row; ++j) {
            for (int k = 0; k < Output_Fmap_Col; ++k) {
                //顺道填入偏置
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 800455e:	4603      	mov	r3, r0
 8004560:	2c00      	cmp	r4, #0
 8004562:	fb00 f004 	mul.w	r0, r0, r4
 8004566:	901b      	str	r0, [sp, #108]	; 0x6c
 8004568:	f340 80b8 	ble.w	80046dc <OpenNNA_Operator_Conv2d+0x1b4>
 800456c:	2b00      	cmp	r3, #0
 800456e:	f340 80b5 	ble.w	80046dc <OpenNNA_Operator_Conv2d+0x1b4>
 8004572:	fb0a f00b 	mul.w	r0, sl, fp
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	fb09 f202 	mul.w	r2, r9, r2
                =\
                ((data_t *)Layers->Bias)[i];
 800457c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800457e:	931f      	str	r3, [sp, #124]	; 0x7c
 8004580:	fb00 f306 	mul.w	r3, r0, r6
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 8004584:	69c9      	ldr	r1, [r1, #28]
 8004586:	9208      	str	r2, [sp, #32]
 8004588:	2200      	movs	r2, #0
 800458a:	931d      	str	r3, [sp, #116]	; 0x74
 800458c:	4653      	mov	r3, sl
 800458e:	46ca      	mov	sl, r9
 8004590:	9205      	str	r2, [sp, #20]
 8004592:	4699      	mov	r9, r3
 8004594:	900b      	str	r0, [sp, #44]	; 0x2c
                ((data_t *)Layers->Bias)[i];
 8004596:	9416      	str	r4, [sp, #88]	; 0x58
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 8004598:	9112      	str	r1, [sp, #72]	; 0x48
 800459a:	9211      	str	r2, [sp, #68]	; 0x44
    for (int i = 0; i < filters; ++i) {//filters must = Output_Fmap_Channel
 800459c:	920c      	str	r2, [sp, #48]	; 0x30
        for (int j = 0; j < Output_Fmap_Row; ++j) {
 800459e:	9911      	ldr	r1, [sp, #68]	; 0x44
                ((data_t *)Layers->Bias)[i];
 80045a0:	2200      	movs	r2, #0
 80045a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80045a4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80045a6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80045aa:	920e      	str	r2, [sp, #56]	; 0x38
 80045ac:	920d      	str	r2, [sp, #52]	; 0x34
 80045ae:	18c3      	adds	r3, r0, r3
 80045b0:	980c      	ldr	r0, [sp, #48]	; 0x30
        for (int j = 0; j < Output_Fmap_Row; ++j) {
 80045b2:	9213      	str	r2, [sp, #76]	; 0x4c
 80045b4:	9321      	str	r3, [sp, #132]	; 0x84
                ((data_t *)Layers->Bias)[i];
 80045b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80045b8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80045bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80045be:	008b      	lsls	r3, r1, #2
 80045c0:	931e      	str	r3, [sp, #120]	; 0x78
            for (int k = 0; k < Output_Fmap_Col; ++k) {
 80045c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80045c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80045c6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80045c8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    reg_t kernel_col = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_col;
 80045cc:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 80045d0:	eb01 0803 	add.w	r8, r1, r3
 80045d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80045d6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80045da:	931c      	str	r3, [sp, #112]	; 0x70
 80045dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045de:	fb0a f303 	mul.w	r3, sl, r3
 80045e2:	9307      	str	r3, [sp, #28]
 80045e4:	2300      	movs	r3, #0
 80045e6:	9310      	str	r3, [sp, #64]	; 0x40
                ((data_t *)Layers->Bias)[i];
 80045e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80045ea:	681b      	ldr	r3, [r3, #0]
                =\
 80045ec:	f848 3b04 	str.w	r3, [r8], #4
                //一个卷积核去卷一下输入特征图
                for (int l = 0; l < kernel_channel; ++l) {
 80045f0:	9b06      	ldr	r3, [sp, #24]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	dd4b      	ble.n	800468e <OpenNNA_Operator_Conv2d+0x166>
 80045f6:	f1b9 0f00 	cmp.w	r9, #0
 80045fa:	dd48      	ble.n	800468e <OpenNNA_Operator_Conv2d+0x166>
 80045fc:	f1bb 0f00 	cmp.w	fp, #0
 8004600:	dd45      	ble.n	800468e <OpenNNA_Operator_Conv2d+0x166>
                    for (int m = 0; m < kernel_row; ++m) {
                        for (int n = 0; n < kernel_col; ++n) {
                          //输出特征图=输入特征图*卷积核权重
                            ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
                            +=\
                            ((data_t *)Layers->Input_Feature_Map)[(n+k*strides_col)+(m+j*strides_row)*Input_Fmap_Col+l*Input_Fmap_Col*Input_Fmap_Row]\
 8004602:	9a20      	ldr	r2, [sp, #128]	; 0x80
                            *\
                            ((data_t *)Layers->Weights)[n+m*kernel_col+l*kernel_col*kernel_row+i*kernel_col*kernel_row*kernel_channel];
 8004604:	2300      	movs	r3, #0
                            ((data_t *)Layers->Input_Feature_Map)[(n+k*strides_col)+(m+j*strides_row)*Input_Fmap_Col+l*Input_Fmap_Col*Input_Fmap_Row]\
 8004606:	6997      	ldr	r7, [r2, #24]
                            ((data_t *)Layers->Weights)[n+m*kernel_col+l*kernel_col*kernel_row+i*kernel_col*kernel_row*kernel_channel];
 8004608:	6a12      	ldr	r2, [r2, #32]
 800460a:	9302      	str	r3, [sp, #8]
 800460c:	9201      	str	r2, [sp, #4]
 800460e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004610:	0092      	lsls	r2, r2, #2
 8004612:	920a      	str	r2, [sp, #40]	; 0x28
 8004614:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004616:	0092      	lsls	r2, r2, #2
                for (int l = 0; l < kernel_channel; ++l) {
 8004618:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800461c:	9209      	str	r2, [sp, #36]	; 0x24
                    for (int m = 0; m < kernel_row; ++m) {
 800461e:	9b03      	ldr	r3, [sp, #12]
    reg_t kernel_col = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_col;
 8004620:	2400      	movs	r4, #0
 8004622:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004624:	9807      	ldr	r0, [sp, #28]
                    for (int m = 0; m < kernel_row; ++m) {
 8004626:	4625      	mov	r5, r4
 8004628:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800462c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800462e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8004632:	9b02      	ldr	r3, [sp, #8]
 8004634:	9a05      	ldr	r2, [sp, #20]
 8004636:	443e      	add	r6, r7
 8004638:	eb03 0c02 	add.w	ip, r3, r2
                        for (int n = 0; n < kernel_col; ++n) {
 800463c:	9901      	ldr	r1, [sp, #4]
 800463e:	eb0e 0380 	add.w	r3, lr, r0, lsl #2
 8004642:	eb04 020c 	add.w	r2, r4, ip
                            +=\
 8004646:	ed58 7a01 	vldr	s15, [r8, #-4]
 800464a:	443b      	add	r3, r7
 800464c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8004650:	eb06 0180 	add.w	r1, r6, r0, lsl #2
                            ((data_t *)Layers->Input_Feature_Map)[(n+k*strides_col)+(m+j*strides_row)*Input_Fmap_Col+l*Input_Fmap_Col*Input_Fmap_Row]\
 8004654:	ecf3 6a01 	vldmia	r3!, {s13}
                            ((data_t *)Layers->Weights)[n+m*kernel_col+l*kernel_col*kernel_row+i*kernel_col*kernel_row*kernel_channel];
 8004658:	ecb2 7a01 	vldmia	r2!, {s14}
                        for (int n = 0; n < kernel_col; ++n) {
 800465c:	4299      	cmp	r1, r3
                            +=\
 800465e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004662:	ed48 7a01 	vstr	s15, [r8, #-4]
                        for (int n = 0; n < kernel_col; ++n) {
 8004666:	d1f5      	bne.n	8004654 <OpenNNA_Operator_Conv2d+0x12c>
                    for (int m = 0; m < kernel_row; ++m) {
 8004668:	3501      	adds	r5, #1
 800466a:	4450      	add	r0, sl
 800466c:	445c      	add	r4, fp
 800466e:	45a9      	cmp	r9, r5
 8004670:	d1e4      	bne.n	800463c <OpenNNA_Operator_Conv2d+0x114>
                for (int l = 0; l < kernel_channel; ++l) {
 8004672:	9a03      	ldr	r2, [sp, #12]
 8004674:	9908      	ldr	r1, [sp, #32]
 8004676:	9b04      	ldr	r3, [sp, #16]
 8004678:	440a      	add	r2, r1
 800467a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800467c:	3301      	adds	r3, #1
 800467e:	9203      	str	r2, [sp, #12]
 8004680:	9a02      	ldr	r2, [sp, #8]
 8004682:	9304      	str	r3, [sp, #16]
 8004684:	440a      	add	r2, r1
 8004686:	9202      	str	r2, [sp, #8]
 8004688:	9a06      	ldr	r2, [sp, #24]
 800468a:	429a      	cmp	r2, r3
 800468c:	d1c7      	bne.n	800461e <OpenNNA_Operator_Conv2d+0xf6>
            for (int k = 0; k < Output_Fmap_Col; ++k) {
 800468e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004690:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004692:	4413      	add	r3, r2
 8004694:	9310      	str	r3, [sp, #64]	; 0x40
 8004696:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004698:	4413      	add	r3, r2
 800469a:	930f      	str	r3, [sp, #60]	; 0x3c
 800469c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800469e:	4598      	cmp	r8, r3
 80046a0:	d1a2      	bne.n	80045e8 <OpenNNA_Operator_Conv2d+0xc0>
        for (int j = 0; j < Output_Fmap_Row; ++j) {
 80046a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80046a4:	9919      	ldr	r1, [sp, #100]	; 0x64
 80046a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80046a8:	440a      	add	r2, r1
 80046aa:	9915      	ldr	r1, [sp, #84]	; 0x54
 80046ac:	3301      	adds	r3, #1
 80046ae:	920d      	str	r2, [sp, #52]	; 0x34
 80046b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046b2:	9313      	str	r3, [sp, #76]	; 0x4c
 80046b4:	440a      	add	r2, r1
 80046b6:	920e      	str	r2, [sp, #56]	; 0x38
 80046b8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d181      	bne.n	80045c2 <OpenNNA_Operator_Conv2d+0x9a>
    for (int i = 0; i < filters; ++i) {//filters must = Output_Fmap_Channel
 80046be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80046c0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80046c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80046c4:	440a      	add	r2, r1
 80046c6:	991d      	ldr	r1, [sp, #116]	; 0x74
 80046c8:	3301      	adds	r3, #1
 80046ca:	9211      	str	r2, [sp, #68]	; 0x44
 80046cc:	9a05      	ldr	r2, [sp, #20]
 80046ce:	930c      	str	r3, [sp, #48]	; 0x30
 80046d0:	440a      	add	r2, r1
 80046d2:	9205      	str	r2, [sp, #20]
 80046d4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80046d6:	429a      	cmp	r2, r3
 80046d8:	f47f af61 	bne.w	800459e <OpenNNA_Operator_Conv2d+0x76>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 80046dc:	b023      	add	sp, #140	; 0x8c
 80046de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046e2:	bf00      	nop

080046e4 <OpenNNA_Operator_Dense>:
#include "opennna_operator_dense.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_Dense(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Input_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Channel;
 80046e4:	6902      	ldr	r2, [r0, #16]
{
 80046e6:	b5f0      	push	{r4, r5, r6, r7, lr}
    reg_t Input_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Row;
 80046e8:	e9d2 3100 	ldrd	r3, r1, [r2]
    reg_t Input_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Col;
 80046ec:	6895      	ldr	r5, [r2, #8]
    //dense算子独有
    reg_t units = ((Layer_Para_Dense *)Layers->Layer_Para_Extra)->units;//神经元数量
 80046ee:	6942      	ldr	r2, [r0, #20]
 80046f0:	6816      	ldr	r6, [r2, #0]
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    for (reg_t i = 0; i < units; ++i)//依次计算每个神经元
 80046f2:	2e00      	cmp	r6, #0
 80046f4:	dd23      	ble.n	800473e <OpenNNA_Operator_Dense+0x5a>
    {
        /*bias*/
        ((data_t *)Layers->Output_Feature_Map)[i] = ((data_t *)Layers->Bias)[i];
        for (reg_t j= 0; j < (Input_Fmap_Channel*Input_Fmap_Row*Input_Fmap_Col); ++j)
 80046f6:	fb01 f303 	mul.w	r3, r1, r3
 80046fa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80046fc:	69c1      	ldr	r1, [r0, #28]
 80046fe:	f04f 0e00 	mov.w	lr, #0
 8004702:	fb03 f505 	mul.w	r5, r3, r5
 8004706:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800470a:	00af      	lsls	r7, r5, #2
        ((data_t *)Layers->Output_Feature_Map)[i] = ((data_t *)Layers->Bias)[i];
 800470c:	ecf4 7a01 	vldmia	r4!, {s15}
        for (reg_t j= 0; j < (Input_Fmap_Channel*Input_Fmap_Row*Input_Fmap_Col); ++j)
 8004710:	2d00      	cmp	r5, #0
        ((data_t *)Layers->Output_Feature_Map)[i] = ((data_t *)Layers->Bias)[i];
 8004712:	ece1 7a01 	vstmia	r1!, {s15}
        for (reg_t j= 0; j < (Input_Fmap_Channel*Input_Fmap_Row*Input_Fmap_Col); ++j)
 8004716:	dd0f      	ble.n	8004738 <OpenNNA_Operator_Dense+0x54>
 8004718:	6983      	ldr	r3, [r0, #24]
 800471a:	6a02      	ldr	r2, [r0, #32]
 800471c:	eb07 0c03 	add.w	ip, r7, r3
 8004720:	eb02 028e 	add.w	r2, r2, lr, lsl #2
        {
            /*weights*/
            ((data_t *)Layers->Output_Feature_Map)[i] += ((data_t *)Layers->Input_Feature_Map)[j] * ((data_t *)Layers->Weights)[i*(Input_Fmap_Channel*Input_Fmap_Row*Input_Fmap_Col)+j];
 8004724:	ecf3 6a01 	vldmia	r3!, {s13}
 8004728:	ecb2 7a01 	vldmia	r2!, {s14}
        for (reg_t j= 0; j < (Input_Fmap_Channel*Input_Fmap_Row*Input_Fmap_Col); ++j)
 800472c:	459c      	cmp	ip, r3
            ((data_t *)Layers->Output_Feature_Map)[i] += ((data_t *)Layers->Input_Feature_Map)[j] * ((data_t *)Layers->Weights)[i*(Input_Fmap_Channel*Input_Fmap_Row*Input_Fmap_Col)+j];
 800472e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004732:	ed41 7a01 	vstr	s15, [r1, #-4]
        for (reg_t j= 0; j < (Input_Fmap_Channel*Input_Fmap_Row*Input_Fmap_Col); ++j)
 8004736:	d1f5      	bne.n	8004724 <OpenNNA_Operator_Dense+0x40>
    for (reg_t i = 0; i < units; ++i)//依次计算每个神经元
 8004738:	42b4      	cmp	r4, r6
 800473a:	44ae      	add	lr, r5
 800473c:	d1e6      	bne.n	800470c <OpenNNA_Operator_Dense+0x28>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 800473e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004740 <OpenNNA_Operator_DWConv2d>:
// Note: 深度可分离卷积= 一个逐通道卷积(提取特征)+一个逐点卷积(融合，四舍五入就是普通卷积)构成，
// 本算子实现逐通道卷积，后面再接一层普通的conv2d卷积层就可以实现dwconv2d
void OpenNNA_Operator_DWConv2d(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Input_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Channel;
 8004740:	6903      	ldr	r3, [r0, #16]
{
 8004742:	4601      	mov	r1, r0
 8004744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    reg_t Input_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Row;
    reg_t Input_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Col;
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 8004748:	691c      	ldr	r4, [r3, #16]
{
 800474a:	b0a3      	sub	sp, #140	; 0x8c
    reg_t Input_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Col;
 800474c:	e9d3 2901 	ldrd	r2, r9, [r3, #4]
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8004750:	695b      	ldr	r3, [r3, #20]
{
 8004752:	9020      	str	r0, [sp, #128]	; 0x80
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8004754:	9315      	str	r3, [sp, #84]	; 0x54
 8004756:	4618      	mov	r0, r3
    //卷积运算相关的参数
    reg_t kernel_col = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_col;
 8004758:	694b      	ldr	r3, [r1, #20]
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 800475a:	9414      	str	r4, [sp, #80]	; 0x50
    reg_t kernel_row = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_row;
    reg_t kernel_channel = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_channel;

    reg_t filters = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->filters;
 800475c:	68dd      	ldr	r5, [r3, #12]
    reg_t kernel_channel = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_channel;
 800475e:	689e      	ldr	r6, [r3, #8]

    reg_t strides_col = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->strides_col;
 8004760:	691f      	ldr	r7, [r3, #16]
    reg_t strides_row = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->strides_row;
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    //以下这个卷积实现思路以输出特征图为导向，当输入特征图为图像数据时，乘加次数最优
    for (int i = 0; i < filters; ++i) {//filters must = Output_Fmap_Channel
 8004762:	2d00      	cmp	r5, #0
    reg_t filters = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->filters;
 8004764:	9516      	str	r5, [sp, #88]	; 0x58
    reg_t kernel_channel = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_channel;
 8004766:	9605      	str	r6, [sp, #20]
    reg_t strides_col = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->strides_col;
 8004768:	9710      	str	r7, [sp, #64]	; 0x40
    reg_t kernel_row = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_row;
 800476a:	e9d3 ba00 	ldrd	fp, sl, [r3]
    reg_t strides_row = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->strides_row;
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	9311      	str	r3, [sp, #68]	; 0x44
    for (int i = 0; i < filters; ++i) {//filters must = Output_Fmap_Channel
 8004772:	f340 80bc 	ble.w	80048ee <OpenNNA_Operator_DWConv2d+0x1ae>
        for (int j = 0; j < Output_Fmap_Row; ++j) {
            for (int k = 0; k < Output_Fmap_Col; ++k) {
                //顺道填入偏置
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 8004776:	4603      	mov	r3, r0
 8004778:	2c00      	cmp	r4, #0
 800477a:	fb00 f004 	mul.w	r0, r0, r4
 800477e:	9018      	str	r0, [sp, #96]	; 0x60
 8004780:	f340 80b5 	ble.w	80048ee <OpenNNA_Operator_DWConv2d+0x1ae>
 8004784:	2b00      	cmp	r3, #0
 8004786:	f340 80b2 	ble.w	80048ee <OpenNNA_Operator_DWConv2d+0x1ae>
 800478a:	fb0a f00b 	mul.w	r0, sl, fp
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	fb09 f202 	mul.w	r2, r9, r2
                =\
                ((data_t *)Layers->Bias)[i];
 8004794:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8004796:	931f      	str	r3, [sp, #124]	; 0x7c
 8004798:	fb00 f306 	mul.w	r3, r0, r6
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 800479c:	69c9      	ldr	r1, [r1, #28]
 800479e:	9217      	str	r2, [sp, #92]	; 0x5c
 80047a0:	2200      	movs	r2, #0
 80047a2:	931b      	str	r3, [sp, #108]	; 0x6c
 80047a4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80047a8:	9204      	str	r2, [sp, #16]
 80047aa:	931d      	str	r3, [sp, #116]	; 0x74
 80047ac:	4653      	mov	r3, sl
 80047ae:	46ca      	mov	sl, r9
 80047b0:	9007      	str	r0, [sp, #28]
 80047b2:	4699      	mov	r9, r3
                ((data_t *)Layers->Bias)[i];
 80047b4:	9412      	str	r4, [sp, #72]	; 0x48
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 80047b6:	910e      	str	r1, [sp, #56]	; 0x38
 80047b8:	9208      	str	r2, [sp, #32]
    for (int i = 0; i < filters; ++i) {//filters must = Output_Fmap_Channel
 80047ba:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
        for (int j = 0; j < Output_Fmap_Row; ++j) {
 80047be:	990a      	ldr	r1, [sp, #40]	; 0x28
                ((data_t *)Layers->Bias)[i];
 80047c0:	2200      	movs	r2, #0
 80047c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80047c4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80047c6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80047ca:	920c      	str	r2, [sp, #48]	; 0x30
 80047cc:	920d      	str	r2, [sp, #52]	; 0x34
 80047ce:	18c3      	adds	r3, r0, r3
 80047d0:	9809      	ldr	r0, [sp, #36]	; 0x24
        for (int j = 0; j < Output_Fmap_Row; ++j) {
 80047d2:	920f      	str	r2, [sp, #60]	; 0x3c
 80047d4:	9321      	str	r3, [sp, #132]	; 0x84
                ((data_t *)Layers->Bias)[i];
 80047d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80047d8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80047dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80047de:	008b      	lsls	r3, r1, #2
 80047e0:	931e      	str	r3, [sp, #120]	; 0x78
 80047e2:	9b08      	ldr	r3, [sp, #32]
 80047e4:	0099      	lsls	r1, r3, #2
 80047e6:	911c      	str	r1, [sp, #112]	; 0x70
 80047e8:	991d      	ldr	r1, [sp, #116]	; 0x74
 80047ea:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80047ee:	9319      	str	r3, [sp, #100]	; 0x64
            for (int k = 0; k < Output_Fmap_Col; ++k) {
 80047f0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80047f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047f4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80047f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047fa:	4411      	add	r1, r2
 80047fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80047fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004802:	931a      	str	r3, [sp, #104]	; 0x68
 8004804:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004806:	fb03 f30a 	mul.w	r3, r3, sl
 800480a:	9306      	str	r3, [sp, #24]
{
 800480c:	2300      	movs	r3, #0
 800480e:	930b      	str	r3, [sp, #44]	; 0x2c
                ((data_t *)Layers->Bias)[i];
 8004810:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004812:	681b      	ldr	r3, [r3, #0]
                =\
 8004814:	f841 3b04 	str.w	r3, [r1], #4
                //一个卷积核去卷一下输入特征图
                for (int l = 0; l < kernel_channel; ++l) {
 8004818:	9b05      	ldr	r3, [sp, #20]
 800481a:	2b00      	cmp	r3, #0
 800481c:	dd3f      	ble.n	800489e <OpenNNA_Operator_DWConv2d+0x15e>
 800481e:	f1b9 0f00 	cmp.w	r9, #0
 8004822:	dd3c      	ble.n	800489e <OpenNNA_Operator_DWConv2d+0x15e>
 8004824:	f1bb 0f00 	cmp.w	fp, #0
 8004828:	dd39      	ble.n	800489e <OpenNNA_Operator_DWConv2d+0x15e>
                            //输出特征图=输入特征图*卷积核权重
                            ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
                            +=\
                            //dw的实现主要修改下面这一行代码中输入特征图的load逻辑(以kernel channel参数进行内存偏移访问 改为 以filter参数进行内存偏移访问)
                            // (l*Input_Fmap_Col*Input_Fmap_Row->i*Input_Fmap_Col*Input_Fmap_Row)
                            ((data_t *)Layers->Input_Feature_Map)[(n+k*strides_col)+(m+j*strides_row)*Input_Fmap_Col+i*Input_Fmap_Col*Input_Fmap_Row]\
 800482a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800482c:	9819      	ldr	r0, [sp, #100]	; 0x64
 800482e:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8004832:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                            *\
                            ((data_t *)Layers->Weights)[n+m*kernel_col+l*kernel_col*kernel_row+i*kernel_col*kernel_row*kernel_channel];
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 800483a:	2000      	movs	r0, #0
 800483c:	9301      	str	r3, [sp, #4]
 800483e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004840:	44f4      	add	ip, lr
 8004842:	9002      	str	r0, [sp, #8]
 8004844:	eb03 0882 	add.w	r8, r3, r2, lsl #2
                for (int l = 0; l < kernel_channel; ++l) {
 8004848:	9003      	str	r0, [sp, #12]
{
 800484a:	2500      	movs	r5, #0
 800484c:	9b04      	ldr	r3, [sp, #16]
 800484e:	9a02      	ldr	r2, [sp, #8]
 8004850:	9c06      	ldr	r4, [sp, #24]
                    for (int m = 0; m < kernel_row; ++m) {
 8004852:	462e      	mov	r6, r5
 8004854:	189f      	adds	r7, r3, r2
                        for (int n = 0; n < kernel_col; ++n) {
 8004856:	9801      	ldr	r0, [sp, #4]
 8004858:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800485c:	197a      	adds	r2, r7, r5
                            +=\
 800485e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8004862:	4473      	add	r3, lr
 8004864:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004868:	eb0c 0084 	add.w	r0, ip, r4, lsl #2
                            ((data_t *)Layers->Input_Feature_Map)[(n+k*strides_col)+(m+j*strides_row)*Input_Fmap_Col+i*Input_Fmap_Col*Input_Fmap_Row]\
 800486c:	ecf3 6a01 	vldmia	r3!, {s13}
                            ((data_t *)Layers->Weights)[n+m*kernel_col+l*kernel_col*kernel_row+i*kernel_col*kernel_row*kernel_channel];
 8004870:	ecb2 7a01 	vldmia	r2!, {s14}
                        for (int n = 0; n < kernel_col; ++n) {
 8004874:	4298      	cmp	r0, r3
                            +=\
 8004876:	eee6 7a87 	vfma.f32	s15, s13, s14
 800487a:	ed41 7a01 	vstr	s15, [r1, #-4]
                        for (int n = 0; n < kernel_col; ++n) {
 800487e:	d1f5      	bne.n	800486c <OpenNNA_Operator_DWConv2d+0x12c>
                    for (int m = 0; m < kernel_row; ++m) {
 8004880:	3601      	adds	r6, #1
 8004882:	4454      	add	r4, sl
 8004884:	445d      	add	r5, fp
 8004886:	45b1      	cmp	r9, r6
 8004888:	d1e5      	bne.n	8004856 <OpenNNA_Operator_DWConv2d+0x116>
                for (int l = 0; l < kernel_channel; ++l) {
 800488a:	9a02      	ldr	r2, [sp, #8]
 800488c:	9807      	ldr	r0, [sp, #28]
 800488e:	9b03      	ldr	r3, [sp, #12]
 8004890:	4402      	add	r2, r0
 8004892:	3301      	adds	r3, #1
 8004894:	9202      	str	r2, [sp, #8]
 8004896:	9a05      	ldr	r2, [sp, #20]
 8004898:	9303      	str	r3, [sp, #12]
 800489a:	429a      	cmp	r2, r3
 800489c:	d1d5      	bne.n	800484a <OpenNNA_Operator_DWConv2d+0x10a>
            for (int k = 0; k < Output_Fmap_Col; ++k) {
 800489e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80048a2:	4413      	add	r3, r2
 80048a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80048a6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80048a8:	428b      	cmp	r3, r1
 80048aa:	d1b1      	bne.n	8004810 <OpenNNA_Operator_DWConv2d+0xd0>
        for (int j = 0; j < Output_Fmap_Row; ++j) {
 80048ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80048ae:	9915      	ldr	r1, [sp, #84]	; 0x54
 80048b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048b2:	440a      	add	r2, r1
 80048b4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80048b6:	3301      	adds	r3, #1
 80048b8:	920d      	str	r2, [sp, #52]	; 0x34
 80048ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80048be:	440a      	add	r2, r1
 80048c0:	920c      	str	r2, [sp, #48]	; 0x30
 80048c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d193      	bne.n	80047f0 <OpenNNA_Operator_DWConv2d+0xb0>
    for (int i = 0; i < filters; ++i) {//filters must = Output_Fmap_Channel
 80048c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 80048cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048ce:	440a      	add	r2, r1
 80048d0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80048d2:	3301      	adds	r3, #1
 80048d4:	920a      	str	r2, [sp, #40]	; 0x28
 80048d6:	9a08      	ldr	r2, [sp, #32]
 80048d8:	9309      	str	r3, [sp, #36]	; 0x24
 80048da:	440a      	add	r2, r1
 80048dc:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80048de:	9208      	str	r2, [sp, #32]
 80048e0:	9a04      	ldr	r2, [sp, #16]
 80048e2:	440a      	add	r2, r1
 80048e4:	9204      	str	r2, [sp, #16]
 80048e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80048e8:	429a      	cmp	r2, r3
 80048ea:	f47f af68 	bne.w	80047be <OpenNNA_Operator_DWConv2d+0x7e>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 80048ee:	b023      	add	sp, #140	; 0x8c
 80048f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080048f4 <OpenNNA_Operator_Example>:
#include "opennna_operator_example.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_Example(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Input_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Channel;
 80048f4:	6903      	ldr	r3, [r0, #16]
    reg_t Input_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Row;
    reg_t Input_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Col;
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 80048f6:	68d9      	ldr	r1, [r3, #12]
{
 80048f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
    //printf("Example算子已被调用\n");
    //下方示例会实现 输出特征图 = 输入特征图 * Weights + Bias
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    for (int i = 0; i < Output_Fmap_Channel; ++i) {
 80048fc:	2900      	cmp	r1, #0
{
 80048fe:	b08b      	sub	sp, #44	; 0x2c
    reg_t Input_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Col;
 8004900:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8004904:	e9d3 ba04 	ldrd	fp, sl, [r3, #16]
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8004908:	9108      	str	r1, [sp, #32]
    reg_t Input_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Col;
 800490a:	9404      	str	r4, [sp, #16]
    for (int i = 0; i < Output_Fmap_Channel; ++i) {
 800490c:	dd50      	ble.n	80049b0 <OpenNNA_Operator_Example+0xbc>
        for (int j = 0; j < Output_Fmap_Row; ++j) {
            for (int k = 0; k < Output_Fmap_Col; ++k) {
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
                =\
                ((data_t *)Layers->Input_Feature_Map)[k+Input_Fmap_Col*j+Input_Fmap_Col*Input_Fmap_Row*i]*\
 800490e:	fb04 f302 	mul.w	r3, r4, r2
 8004912:	f1bb 0f00 	cmp.w	fp, #0
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 8004916:	fb0a f20b 	mul.w	r2, sl, fp
 800491a:	9207      	str	r2, [sp, #28]
 800491c:	dd48      	ble.n	80049b0 <OpenNNA_Operator_Example+0xbc>
 800491e:	f1ba 0f00 	cmp.w	sl, #0
 8004922:	dd45      	ble.n	80049b0 <OpenNNA_Operator_Example+0xbc>
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	2600      	movs	r6, #0
                ((data_t *)Layers->Input_Feature_Map)[k+Input_Fmap_Col*j+Input_Fmap_Col*Input_Fmap_Row*i]*\
 8004928:	f8d0 8018 	ldr.w	r8, [r0, #24]
 800492c:	9309      	str	r3, [sp, #36]	; 0x24
 800492e:	ea4f 038a 	mov.w	r3, sl, lsl #2
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 8004932:	4637      	mov	r7, r6
    for (int i = 0; i < Output_Fmap_Channel; ++i) {
 8004934:	9606      	str	r6, [sp, #24]
 8004936:	9305      	str	r3, [sp, #20]
                ((data_t *)Layers->Weights)[k+Input_Fmap_Col*j+Input_Fmap_Col*Input_Fmap_Row*i]+\
 8004938:	6a03      	ldr	r3, [r0, #32]
 800493a:	9301      	str	r3, [sp, #4]
                ((data_t *)Layers->Bias)[k+Input_Fmap_Col*j+Input_Fmap_Col*Input_Fmap_Row*i];
 800493c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800493e:	9302      	str	r3, [sp, #8]
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 8004940:	69c3      	ldr	r3, [r0, #28]
 8004942:	9303      	str	r3, [sp, #12]
{
 8004944:	f04f 0c00 	mov.w	ip, #0
 8004948:	9b05      	ldr	r3, [sp, #20]
 800494a:	4665      	mov	r5, ip
 800494c:	eb08 0903 	add.w	r9, r8, r3
        for (int j = 0; j < Output_Fmap_Row; ++j) {
 8004950:	46e6      	mov	lr, ip
            for (int k = 0; k < Output_Fmap_Col; ++k) {
 8004952:	eb06 0285 	add.w	r2, r6, r5, lsl #2
 8004956:	9b03      	ldr	r3, [sp, #12]
 8004958:	9c02      	ldr	r4, [sp, #8]
 800495a:	eb07 010c 	add.w	r1, r7, ip
 800495e:	9801      	ldr	r0, [sp, #4]
 8004960:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8004964:	eb08 0302 	add.w	r3, r8, r2
 8004968:	4410      	add	r0, r2
 800496a:	4422      	add	r2, r4
 800496c:	eb09 0485 	add.w	r4, r9, r5, lsl #2
                ((data_t *)Layers->Input_Feature_Map)[k+Input_Fmap_Col*j+Input_Fmap_Col*Input_Fmap_Row*i]*\
 8004970:	ecf3 6a01 	vldmia	r3!, {s13}
                ((data_t *)Layers->Weights)[k+Input_Fmap_Col*j+Input_Fmap_Col*Input_Fmap_Row*i]+\
 8004974:	ecb0 7a01 	vldmia	r0!, {s14}
                ((data_t *)Layers->Bias)[k+Input_Fmap_Col*j+Input_Fmap_Col*Input_Fmap_Row*i];
 8004978:	ecf2 7a01 	vldmia	r2!, {s15}
            for (int k = 0; k < Output_Fmap_Col; ++k) {
 800497c:	42a3      	cmp	r3, r4
                ((data_t *)Layers->Weights)[k+Input_Fmap_Col*j+Input_Fmap_Col*Input_Fmap_Row*i]+\
 800497e:	eee6 7a87 	vfma.f32	s15, s13, s14
                =\
 8004982:	ece1 7a01 	vstmia	r1!, {s15}
            for (int k = 0; k < Output_Fmap_Col; ++k) {
 8004986:	d1f3      	bne.n	8004970 <OpenNNA_Operator_Example+0x7c>
        for (int j = 0; j < Output_Fmap_Row; ++j) {
 8004988:	f10e 0e01 	add.w	lr, lr, #1
 800498c:	9b04      	ldr	r3, [sp, #16]
 800498e:	44d4      	add	ip, sl
 8004990:	45f3      	cmp	fp, lr
 8004992:	441d      	add	r5, r3
 8004994:	d1dd      	bne.n	8004952 <OpenNNA_Operator_Example+0x5e>
    for (int i = 0; i < Output_Fmap_Channel; ++i) {
 8004996:	9a07      	ldr	r2, [sp, #28]
 8004998:	9b06      	ldr	r3, [sp, #24]
 800499a:	9905      	ldr	r1, [sp, #20]
 800499c:	4417      	add	r7, r2
 800499e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049a0:	3301      	adds	r3, #1
 80049a2:	4411      	add	r1, r2
 80049a4:	4416      	add	r6, r2
 80049a6:	9a08      	ldr	r2, [sp, #32]
 80049a8:	9306      	str	r3, [sp, #24]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	9105      	str	r1, [sp, #20]
 80049ae:	d1c9      	bne.n	8004944 <OpenNNA_Operator_Example+0x50>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 80049b0:	b00b      	add	sp, #44	; 0x2c
 80049b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049b6:	bf00      	nop

080049b8 <OpenNNA_Operator_LeakyReLU>:
#include "opennna_operator_leakyrelu.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_LeakyReLU(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 80049b8:	6903      	ldr	r3, [r0, #16]
{
 80049ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 80049be:	e9d3 9503 	ldrd	r9, r5, [r3, #12]
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 80049c2:	695c      	ldr	r4, [r3, #20]
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    for (int i = 0; i < Output_Fmap_Channel; i++)
 80049c4:	f1b9 0f00 	cmp.w	r9, #0
 80049c8:	dd2e      	ble.n	8004a28 <OpenNNA_Operator_LeakyReLU+0x70>
 80049ca:	2d00      	cmp	r5, #0
 80049cc:	dd2c      	ble.n	8004a28 <OpenNNA_Operator_LeakyReLU+0x70>
 80049ce:	2c00      	cmp	r4, #0
 80049d0:	dd2a      	ble.n	8004a28 <OpenNNA_Operator_LeakyReLU+0x70>
    {
        for (int j = 0; j < Output_Fmap_Row; j++)
        {
            for (int k = 0; k < Output_Fmap_Col; k++)
            {
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 80049d2:	2700      	movs	r7, #0
 80049d4:	fb04 fa05 	mul.w	sl, r4, r5
 80049d8:	00a4      	lsls	r4, r4, #2
    for (int i = 0; i < Output_Fmap_Channel; i++)
 80049da:	46b8      	mov	r8, r7
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] > 0 ? \
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] \
                : \
                0.01*((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k];
 80049dc:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 8004a48 <OpenNNA_Operator_LeakyReLU+0x90>
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 80049e0:	e9d0 e606 	ldrd	lr, r6, [r0, #24]
        for (int j = 0; j < Output_Fmap_Row; j++)
 80049e4:	00b8      	lsls	r0, r7, #2
 80049e6:	f04f 0c00 	mov.w	ip, #0
 80049ea:	eb0e 0187 	add.w	r1, lr, r7, lsl #2
            for (int k = 0; k < Output_Fmap_Col; k++)
 80049ee:	1832      	adds	r2, r6, r0
 80049f0:	4420      	add	r0, r4
 80049f2:	460b      	mov	r3, r1
 80049f4:	eb0e 0100 	add.w	r1, lr, r0
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] > 0 ? \
 80049f8:	ecf3 6a01 	vldmia	r3!, {s13}
                : \
 80049fc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
                0.01*((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k];
 8004a00:	eeb7 7ae6 	vcvt.f64.f32	d7, s13
                : \
 8004a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                0.01*((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k];
 8004a08:	ee27 7b05 	vmul.f64	d7, d7, d5
                : \
 8004a0c:	dd0e      	ble.n	8004a2c <OpenNNA_Operator_LeakyReLU+0x74>
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004a0e:	4299      	cmp	r1, r3
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8004a10:	ece2 6a01 	vstmia	r2!, {s13}
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004a14:	d1f0      	bne.n	80049f8 <OpenNNA_Operator_LeakyReLU+0x40>
        for (int j = 0; j < Output_Fmap_Row; j++)
 8004a16:	f10c 0c01 	add.w	ip, ip, #1
 8004a1a:	45ac      	cmp	ip, r5
 8004a1c:	d1e7      	bne.n	80049ee <OpenNNA_Operator_LeakyReLU+0x36>
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004a1e:	f108 0801 	add.w	r8, r8, #1
 8004a22:	4457      	add	r7, sl
 8004a24:	45c1      	cmp	r9, r8
 8004a26:	d1dd      	bne.n	80049e4 <OpenNNA_Operator_LeakyReLU+0x2c>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 8004a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                : \
 8004a2c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004a30:	4299      	cmp	r1, r3
                : \
 8004a32:	eca2 7a01 	vstmia	r2!, {s14}
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004a36:	d1df      	bne.n	80049f8 <OpenNNA_Operator_LeakyReLU+0x40>
        for (int j = 0; j < Output_Fmap_Row; j++)
 8004a38:	f10c 0c01 	add.w	ip, ip, #1
 8004a3c:	45ac      	cmp	ip, r5
 8004a3e:	d1d6      	bne.n	80049ee <OpenNNA_Operator_LeakyReLU+0x36>
 8004a40:	e7ed      	b.n	8004a1e <OpenNNA_Operator_LeakyReLU+0x66>
 8004a42:	bf00      	nop
 8004a44:	f3af 8000 	nop.w
 8004a48:	47ae147b 	.word	0x47ae147b
 8004a4c:	3f847ae1 	.word	0x3f847ae1

08004a50 <OpenNNA_Operator_MaxPool>:
#include "opennna_operator_maxpool.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_MaxPool(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Input_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Channel;
 8004a50:	6903      	ldr	r3, [r0, #16]
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;

    //池化算子特有参数
    reg_t kernel_col = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->kernel_col;
 8004a52:	6942      	ldr	r2, [r0, #20]
{
 8004a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8004a58:	68dd      	ldr	r5, [r3, #12]
{
 8004a5a:	b093      	sub	sp, #76	; 0x4c
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8004a5c:	695c      	ldr	r4, [r3, #20]
{
 8004a5e:	4680      	mov	r8, r0
    reg_t strides_col = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->strides_col;
    reg_t strides_row = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->strides_row;
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    data_t max_value=0;//在MaxPool时存储最大值,在AveragePool存储均值
    for (int i = 0; i < Output_Fmap_Channel; ++i)//output_fmap_channel
 8004a60:	2d00      	cmp	r5, #0
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 8004a62:	6918      	ldr	r0, [r3, #16]
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8004a64:	950e      	str	r5, [sp, #56]	; 0x38
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 8004a66:	900f      	str	r0, [sp, #60]	; 0x3c
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8004a68:	9409      	str	r4, [sp, #36]	; 0x24
    reg_t Input_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Col;
 8004a6a:	e9d3 1b01 	ldrd	r1, fp, [r3, #4]
    reg_t strides_col = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->strides_col;
 8004a6e:	6893      	ldr	r3, [r2, #8]
    reg_t kernel_row = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->kernel_row;
 8004a70:	e9d2 9a00 	ldrd	r9, sl, [r2]
    reg_t strides_col = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->strides_col;
 8004a74:	9303      	str	r3, [sp, #12]
    reg_t strides_row = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->strides_row;
 8004a76:	68d3      	ldr	r3, [r2, #12]
    for (int i = 0; i < Output_Fmap_Channel; ++i)//output_fmap_channel
 8004a78:	dd7e      	ble.n	8004b78 <OpenNNA_Operator_MaxPool+0x128>
 8004a7a:	2800      	cmp	r0, #0
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	dd7b      	ble.n	8004b78 <OpenNNA_Operator_MaxPool+0x128>
 8004a80:	fb0b f303 	mul.w	r3, fp, r3
    data_t max_value=0;//在MaxPool时存储最大值,在AveragePool存储均值
 8004a84:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8004b80 <OpenNNA_Operator_MaxPool+0x130>
 8004a88:	fb04 f202 	mul.w	r2, r4, r2
 8004a8c:	fb0b f101 	mul.w	r1, fp, r1
 8004a90:	9310      	str	r3, [sp, #64]	; 0x40
    for (int i = 0; i < Output_Fmap_Channel; ++i)//output_fmap_channel
 8004a92:	2300      	movs	r3, #0
 8004a94:	920d      	str	r2, [sp, #52]	; 0x34
 8004a96:	00a2      	lsls	r2, r4, #2
 8004a98:	910c      	str	r1, [sp, #48]	; 0x30
 8004a9a:	9306      	str	r3, [sp, #24]
 8004a9c:	9211      	str	r2, [sp, #68]	; 0x44
 8004a9e:	9307      	str	r3, [sp, #28]
 8004aa0:	930a      	str	r3, [sp, #40]	; 0x28
                        :\
                        (((data_t *)Layers->Input_Feature_Map)[(i*Input_Fmap_Col*Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)] > max_value) ? \
                       ((data_t *)Layers->Input_Feature_Map)[(i*Input_Fmap_Col*Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)] : max_value;
                    }
                }
                ((data_t *)Layers->Output_Feature_Map)[(i*Output_Fmap_Col*Output_Fmap_Row) + (j*Output_Fmap_Col) + k] = max_value;
 8004aa2:	9b06      	ldr	r3, [sp, #24]
 8004aa4:	9302      	str	r3, [sp, #8]
 8004aa6:	9b07      	ldr	r3, [sp, #28]
 8004aa8:	9308      	str	r3, [sp, #32]
        for (int j = 0; j < Output_Fmap_Row; ++j)//Output_Fmap_Row = (((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 8004aaa:	2300      	movs	r3, #0
 8004aac:	930b      	str	r3, [sp, #44]	; 0x2c
            for (int k = 0; k < Output_Fmap_Col; ++k)//(((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 8004aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	dd45      	ble.n	8004b40 <OpenNNA_Operator_MaxPool+0xf0>
 8004ab4:	9a02      	ldr	r2, [sp, #8]
                ((data_t *)Layers->Output_Feature_Map)[(i*Output_Fmap_Col*Output_Fmap_Row) + (j*Output_Fmap_Col) + k] = max_value;
 8004ab6:	f04f 0e00 	mov.w	lr, #0
 8004aba:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8004abe:	0092      	lsls	r2, r2, #2
 8004ac0:	9908      	ldr	r1, [sp, #32]
 8004ac2:	9205      	str	r2, [sp, #20]
 8004ac4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004ac6:	189a      	adds	r2, r3, r2
 8004ac8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004acc:	9301      	str	r3, [sp, #4]
 8004ace:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 8004ad2:	9304      	str	r3, [sp, #16]
                for (int l = 0; l < kernel_row; ++l)//pool_Kernel_size_row
 8004ad4:	f1ba 0f00 	cmp.w	sl, #0
 8004ad8:	dd29      	ble.n	8004b2e <OpenNNA_Operator_MaxPool+0xde>
                        ((data_t *)Layers->Input_Feature_Map)[(i*Input_Fmap_Col*Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)] \
 8004ada:	9b05      	ldr	r3, [sp, #20]
 8004adc:	ea4f 0c8e 	mov.w	ip, lr, lsl #2
 8004ae0:	9e02      	ldr	r6, [sp, #8]
                for (int l = 0; l < kernel_row; ++l)//pool_Kernel_size_row
 8004ae2:	2000      	movs	r0, #0
                        ((data_t *)Layers->Input_Feature_Map)[(i*Input_Fmap_Col*Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)] \
 8004ae4:	eb03 078e 	add.w	r7, r3, lr, lsl #2
                    for (int m = 0; m < kernel_col; ++m)//pool_Kernel_size_col
 8004ae8:	f1b9 0f00 	cmp.w	r9, #0
 8004aec:	dd1b      	ble.n	8004b26 <OpenNNA_Operator_MaxPool+0xd6>
 8004aee:	f8d8 4018 	ldr.w	r4, [r8, #24]
 8004af2:	eb0c 0286 	add.w	r2, ip, r6, lsl #2
 8004af6:	2300      	movs	r3, #0
                        :\
 8004af8:	9600      	str	r6, [sp, #0]
 8004afa:	19e5      	adds	r5, r4, r7
 8004afc:	e005      	b.n	8004b0a <OpenNNA_Operator_MaxPool+0xba>
                    for (int m = 0; m < kernel_col; ++m)//pool_Kernel_size_col
 8004afe:	3301      	adds	r3, #1
                        :\
 8004b00:	edd5 7a00 	vldr	s15, [r5]
                    for (int m = 0; m < kernel_col; ++m)//pool_Kernel_size_col
 8004b04:	3204      	adds	r2, #4
 8004b06:	4599      	cmp	r9, r3
 8004b08:	d00c      	beq.n	8004b24 <OpenNNA_Operator_MaxPool+0xd4>
                        :\
 8004b0a:	ea50 0603 	orrs.w	r6, r0, r3
                        (((data_t *)Layers->Input_Feature_Map)[(i*Input_Fmap_Col*Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)] > max_value) ? \
 8004b0e:	eb04 0102 	add.w	r1, r4, r2
                        :\
 8004b12:	d0f4      	beq.n	8004afe <OpenNNA_Operator_MaxPool+0xae>
                    for (int m = 0; m < kernel_col; ++m)//pool_Kernel_size_col
 8004b14:	3301      	adds	r3, #1
                        :\
 8004b16:	ed91 7a00 	vldr	s14, [r1]
                    for (int m = 0; m < kernel_col; ++m)//pool_Kernel_size_col
 8004b1a:	3204      	adds	r2, #4
 8004b1c:	4599      	cmp	r9, r3
                        :\
 8004b1e:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
                    for (int m = 0; m < kernel_col; ++m)//pool_Kernel_size_col
 8004b22:	d1f2      	bne.n	8004b0a <OpenNNA_Operator_MaxPool+0xba>
 8004b24:	9e00      	ldr	r6, [sp, #0]
                for (int l = 0; l < kernel_row; ++l)//pool_Kernel_size_row
 8004b26:	3001      	adds	r0, #1
 8004b28:	445e      	add	r6, fp
 8004b2a:	4582      	cmp	sl, r0
 8004b2c:	d1dc      	bne.n	8004ae8 <OpenNNA_Operator_MaxPool+0x98>
            for (int k = 0; k < Output_Fmap_Col; ++k)//(((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 8004b2e:	9a03      	ldr	r2, [sp, #12]
                ((data_t *)Layers->Output_Feature_Map)[(i*Output_Fmap_Col*Output_Fmap_Row) + (j*Output_Fmap_Col) + k] = max_value;
 8004b30:	9b01      	ldr	r3, [sp, #4]
            for (int k = 0; k < Output_Fmap_Col; ++k)//(((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 8004b32:	4496      	add	lr, r2
 8004b34:	9a04      	ldr	r2, [sp, #16]
                ((data_t *)Layers->Output_Feature_Map)[(i*Output_Fmap_Col*Output_Fmap_Row) + (j*Output_Fmap_Col) + k] = max_value;
 8004b36:	ece3 7a01 	vstmia	r3!, {s15}
            for (int k = 0; k < Output_Fmap_Col; ++k)//(((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 8004b3a:	429a      	cmp	r2, r3
                ((data_t *)Layers->Output_Feature_Map)[(i*Output_Fmap_Col*Output_Fmap_Row) + (j*Output_Fmap_Col) + k] = max_value;
 8004b3c:	9301      	str	r3, [sp, #4]
            for (int k = 0; k < Output_Fmap_Col; ++k)//(((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 8004b3e:	d1c9      	bne.n	8004ad4 <OpenNNA_Operator_MaxPool+0x84>
        for (int j = 0; j < Output_Fmap_Row; ++j)//Output_Fmap_Row = (((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 8004b40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b42:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8004b46:	3301      	adds	r3, #1
 8004b48:	440a      	add	r2, r1
 8004b4a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004b4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b4e:	9208      	str	r2, [sp, #32]
 8004b50:	9a02      	ldr	r2, [sp, #8]
 8004b52:	440a      	add	r2, r1
 8004b54:	9202      	str	r2, [sp, #8]
 8004b56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d1a8      	bne.n	8004aae <OpenNNA_Operator_MaxPool+0x5e>
    for (int i = 0; i < Output_Fmap_Channel; ++i)//output_fmap_channel
 8004b5c:	9a07      	ldr	r2, [sp, #28]
 8004b5e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b62:	440a      	add	r2, r1
 8004b64:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b66:	3301      	adds	r3, #1
 8004b68:	9207      	str	r2, [sp, #28]
 8004b6a:	9a06      	ldr	r2, [sp, #24]
 8004b6c:	930a      	str	r3, [sp, #40]	; 0x28
 8004b6e:	440a      	add	r2, r1
 8004b70:	9206      	str	r2, [sp, #24]
 8004b72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d194      	bne.n	8004aa2 <OpenNNA_Operator_MaxPool+0x52>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 8004b78:	b013      	add	sp, #76	; 0x4c
 8004b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b7e:	bf00      	nop
 8004b80:	00000000 	.word	0x00000000

08004b84 <OpenNNA_Operator_Padding>:
#include "opennna_operator_padding.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_Padding(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Input_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Channel;
 8004b84:	6903      	ldr	r3, [r0, #16]
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;

    //Padding特有参数
    reg_t Padding = ((Layer_Para_Padding *)Layers->Layer_Para_Extra)->padding;//填充几圈0
 8004b86:	6942      	ldr	r2, [r0, #20]
{
 8004b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8004b8c:	68dd      	ldr	r5, [r3, #12]
{
 8004b8e:	b089      	sub	sp, #36	; 0x24
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 8004b90:	691c      	ldr	r4, [r3, #16]
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    for (int i = 0; i < Output_Fmap_Channel; i++)//Output_Fmap_Channel
 8004b92:	2d00      	cmp	r5, #0
    reg_t Padding = ((Layer_Para_Padding *)Layers->Layer_Para_Extra)->padding;//填充几圈0
 8004b94:	6812      	ldr	r2, [r2, #0]
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8004b96:	695f      	ldr	r7, [r3, #20]
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8004b98:	9505      	str	r5, [sp, #20]
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 8004b9a:	9402      	str	r4, [sp, #8]
    reg_t Input_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Col;
 8004b9c:	e9d3 6101 	ldrd	r6, r1, [r3, #4]
    for (int i = 0; i < Output_Fmap_Channel; i++)//Output_Fmap_Channel
 8004ba0:	dd5d      	ble.n	8004c5e <OpenNNA_Operator_Padding+0xda>
                {
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)] = 0;
                }
                else if (j >= (Padding + Input_Fmap_Row))//底部padding
                {
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)] = 0;
 8004ba2:	4623      	mov	r3, r4
 8004ba4:	fb07 f404 	mul.w	r4, r7, r4
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	9406      	str	r4, [sp, #24]
 8004bac:	dd57      	ble.n	8004c5e <OpenNNA_Operator_Padding+0xda>
 8004bae:	2f00      	cmp	r7, #0
 8004bb0:	dd55      	ble.n	8004c5e <OpenNNA_Operator_Padding+0xda>
 8004bb2:	fb01 f302 	mul.w	r3, r1, r2
 8004bb6:	eb02 0801 	add.w	r8, r2, r1
 8004bba:	f04f 0a00 	mov.w	sl, #0
 8004bbe:	46b9      	mov	r9, r7
 8004bc0:	425b      	negs	r3, r3
 8004bc2:	4547      	cmp	r7, r8
 8004bc4:	eddf 7a41 	vldr	s15, [pc, #260]	; 8004ccc <OpenNNA_Operator_Padding+0x148>
 8004bc8:	eba3 0302 	sub.w	r3, r3, r2
 8004bcc:	bfa8      	it	ge
 8004bce:	46c1      	movge	r9, r8
    for (int i = 0; i < Output_Fmap_Channel; i++)//Output_Fmap_Channel
 8004bd0:	f8cd a010 	str.w	sl, [sp, #16]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	9303      	str	r3, [sp, #12]
 8004bd8:	fb01 f306 	mul.w	r3, r1, r6
 8004bdc:	4416      	add	r6, r2
 8004bde:	1b1b      	subs	r3, r3, r4
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	9307      	str	r3, [sp, #28]
 8004be4:	1bcb      	subs	r3, r1, r7
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	9301      	str	r3, [sp, #4]
                else if (j >= (Padding + Input_Fmap_Row))//底部padding
 8004bea:	f04f 0c00 	mov.w	ip, #0
 8004bee:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8004bf2:	46d3      	mov	fp, sl
        for (int j = 0; j < Output_Fmap_Row; j++)//Output_Fmap_Row 行
 8004bf4:	4664      	mov	r4, ip
 8004bf6:	46f2      	mov	sl, lr
 8004bf8:	46e6      	mov	lr, ip
            for (int k = 0; k < Output_Fmap_Col; k++)//Output_Fmap_Col 列
 8004bfa:	f1b8 0f00 	cmp.w	r8, #0
 8004bfe:	dc31      	bgt.n	8004c64 <OpenNNA_Operator_Padding+0xe0>
                else if (j >= (Padding + Input_Fmap_Row))//底部padding
 8004c00:	2300      	movs	r3, #0
 8004c02:	eb0b 0c0e 	add.w	ip, fp, lr
 8004c06:	449c      	add	ip, r3
 8004c08:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
                if ( j < Padding)//顶部padding
 8004c0c:	42a2      	cmp	r2, r4
 8004c0e:	dc01      	bgt.n	8004c14 <OpenNNA_Operator_Padding+0x90>
                else if (j >= (Padding + Input_Fmap_Row))//底部padding
 8004c10:	42a6      	cmp	r6, r4
 8004c12:	dc03      	bgt.n	8004c1c <OpenNNA_Operator_Padding+0x98>
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)] = 0;
 8004c14:	69c1      	ldr	r1, [r0, #28]
 8004c16:	4461      	add	r1, ip
 8004c18:	edc1 7a00 	vstr	s15, [r1]
                }
                /*k遍历列,左边和右边填充*/
                if (k < Padding)//左边padding
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	dc01      	bgt.n	8004c24 <OpenNNA_Operator_Padding+0xa0>
                {
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)] = 0;
                }
                else if (k >= (Padding + Input_Fmap_Col))//右边padding
 8004c20:	4598      	cmp	r8, r3
 8004c22:	dc03      	bgt.n	8004c2c <OpenNNA_Operator_Padding+0xa8>
                {
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)] = 0;
 8004c24:	69c1      	ldr	r1, [r0, #28]
 8004c26:	4461      	add	r1, ip
 8004c28:	edc1 7a00 	vstr	s15, [r1]
            for (int k = 0; k < Output_Fmap_Col; k++)//Output_Fmap_Col 列
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	f10c 0c04 	add.w	ip, ip, #4
 8004c32:	429f      	cmp	r7, r3
 8004c34:	dcea      	bgt.n	8004c0c <OpenNNA_Operator_Padding+0x88>
        for (int j = 0; j < Output_Fmap_Row; j++)//Output_Fmap_Row 行
 8004c36:	9b01      	ldr	r3, [sp, #4]
 8004c38:	3401      	adds	r4, #1
 8004c3a:	44be      	add	lr, r7
 8004c3c:	449a      	add	sl, r3
 8004c3e:	9b02      	ldr	r3, [sp, #8]
 8004c40:	42a3      	cmp	r3, r4
 8004c42:	d1da      	bne.n	8004bfa <OpenNNA_Operator_Padding+0x76>
    for (int i = 0; i < Output_Fmap_Channel; i++)//Output_Fmap_Channel
 8004c44:	9906      	ldr	r1, [sp, #24]
 8004c46:	46da      	mov	sl, fp
 8004c48:	9c07      	ldr	r4, [sp, #28]
 8004c4a:	448a      	add	sl, r1
 8004c4c:	9903      	ldr	r1, [sp, #12]
 8004c4e:	9b04      	ldr	r3, [sp, #16]
 8004c50:	4421      	add	r1, r4
 8004c52:	3301      	adds	r3, #1
 8004c54:	9103      	str	r1, [sp, #12]
 8004c56:	9905      	ldr	r1, [sp, #20]
 8004c58:	9304      	str	r3, [sp, #16]
 8004c5a:	4299      	cmp	r1, r3
 8004c5c:	d1c5      	bne.n	8004bea <OpenNNA_Operator_Padding+0x66>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 8004c5e:	b009      	add	sp, #36	; 0x24
 8004c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c64:	eb0b 0c0e 	add.w	ip, fp, lr
            for (int k = 0; k < Output_Fmap_Col; k++)//Output_Fmap_Col 列
 8004c68:	2300      	movs	r3, #0
 8004c6a:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8004c6e:	e007      	b.n	8004c80 <OpenNNA_Operator_Padding+0xfc>
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)] = 0;
 8004c70:	69c5      	ldr	r5, [r0, #28]
 8004c72:	440d      	add	r5, r1
 8004c74:	edc5 7a00 	vstr	s15, [r5]
            for (int k = 0; k < Output_Fmap_Col; k++)//Output_Fmap_Col 列
 8004c78:	3301      	adds	r3, #1
 8004c7a:	3104      	adds	r1, #4
 8004c7c:	4599      	cmp	r9, r3
 8004c7e:	dd21      	ble.n	8004cc4 <OpenNNA_Operator_Padding+0x140>
                if ( j < Padding)//顶部padding
 8004c80:	42a2      	cmp	r2, r4
 8004c82:	dc01      	bgt.n	8004c88 <OpenNNA_Operator_Padding+0x104>
                else if (j >= (Padding + Input_Fmap_Row))//底部padding
 8004c84:	42a6      	cmp	r6, r4
 8004c86:	dc03      	bgt.n	8004c90 <OpenNNA_Operator_Padding+0x10c>
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)] = 0;
 8004c88:	69c5      	ldr	r5, [r0, #28]
 8004c8a:	440d      	add	r5, r1
 8004c8c:	edc5 7a00 	vstr	s15, [r5]
                if (k < Padding)//左边padding
 8004c90:	429a      	cmp	r2, r3
 8004c92:	dced      	bgt.n	8004c70 <OpenNNA_Operator_Padding+0xec>
                else if (k >= (Padding + Input_Fmap_Col))//右边padding
 8004c94:	4598      	cmp	r8, r3
 8004c96:	dc03      	bgt.n	8004ca0 <OpenNNA_Operator_Padding+0x11c>
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)] = 0;
 8004c98:	69c5      	ldr	r5, [r0, #28]
 8004c9a:	440d      	add	r5, r1
 8004c9c:	edc5 7a00 	vstr	s15, [r5]
                if(j >= Padding && j < (Padding + Input_Fmap_Row) && k >= Padding && k < (Padding + Input_Fmap_Col))
 8004ca0:	42a2      	cmp	r2, r4
 8004ca2:	dce9      	bgt.n	8004c78 <OpenNNA_Operator_Padding+0xf4>
 8004ca4:	42a6      	cmp	r6, r4
 8004ca6:	dde7      	ble.n	8004c78 <OpenNNA_Operator_Padding+0xf4>
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)]  = ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Row * Input_Fmap_Col) + ((j-Padding) * Input_Fmap_Col) + (k-Padding)];
 8004ca8:	6985      	ldr	r5, [r0, #24]
            for (int k = 0; k < Output_Fmap_Col; k++)//Output_Fmap_Col 列
 8004caa:	3301      	adds	r3, #1
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)]  = ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Row * Input_Fmap_Col) + ((j-Padding) * Input_Fmap_Col) + (k-Padding)];
 8004cac:	4455      	add	r5, sl
            for (int k = 0; k < Output_Fmap_Col; k++)//Output_Fmap_Col 列
 8004cae:	4599      	cmp	r9, r3
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)]  = ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Row * Input_Fmap_Col) + ((j-Padding) * Input_Fmap_Col) + (k-Padding)];
 8004cb0:	440d      	add	r5, r1
 8004cb2:	ed95 7a00 	vldr	s14, [r5]
 8004cb6:	69c5      	ldr	r5, [r0, #28]
 8004cb8:	440d      	add	r5, r1
            for (int k = 0; k < Output_Fmap_Col; k++)//Output_Fmap_Col 列
 8004cba:	f101 0104 	add.w	r1, r1, #4
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)]  = ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Row * Input_Fmap_Col) + ((j-Padding) * Input_Fmap_Col) + (k-Padding)];
 8004cbe:	ed85 7a00 	vstr	s14, [r5]
            for (int k = 0; k < Output_Fmap_Col; k++)//Output_Fmap_Col 列
 8004cc2:	dcdd      	bgt.n	8004c80 <OpenNNA_Operator_Padding+0xfc>
 8004cc4:	429f      	cmp	r7, r3
 8004cc6:	dc9e      	bgt.n	8004c06 <OpenNNA_Operator_Padding+0x82>
 8004cc8:	e7b5      	b.n	8004c36 <OpenNNA_Operator_Padding+0xb2>
 8004cca:	bf00      	nop
 8004ccc:	00000000 	.word	0x00000000

08004cd0 <OpenNNA_Operator_ReLU>:
#include "opennna_operator_relu.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_ReLU(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8004cd0:	6903      	ldr	r3, [r0, #16]
{
 8004cd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 8004cd6:	e9d3 9503 	ldrd	r9, r5, [r3, #12]
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8004cda:	695c      	ldr	r4, [r3, #20]
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004cdc:	f1b9 0f00 	cmp.w	r9, #0
 8004ce0:	dd27      	ble.n	8004d32 <OpenNNA_Operator_ReLU+0x62>
 8004ce2:	2d00      	cmp	r5, #0
 8004ce4:	dd25      	ble.n	8004d32 <OpenNNA_Operator_ReLU+0x62>
 8004ce6:	2c00      	cmp	r4, #0
 8004ce8:	dd23      	ble.n	8004d32 <OpenNNA_Operator_ReLU+0x62>
    {
        for (int j = 0; j < Output_Fmap_Row; j++)
        {
            for (int k = 0; k < Output_Fmap_Col; k++)
            {
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8004cea:	2700      	movs	r7, #0
 8004cec:	fb04 fa05 	mul.w	sl, r4, r5
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] > 0 ? \
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] \
                : \
 8004cf0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004d38 <OpenNNA_Operator_ReLU+0x68>
 8004cf4:	00a4      	lsls	r4, r4, #2
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004cf6:	46b8      	mov	r8, r7
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8004cf8:	e9d0 e606 	ldrd	lr, r6, [r0, #24]
        for (int j = 0; j < Output_Fmap_Row; j++)
 8004cfc:	00b8      	lsls	r0, r7, #2
 8004cfe:	f04f 0c00 	mov.w	ip, #0
 8004d02:	eb0e 0187 	add.w	r1, lr, r7, lsl #2
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004d06:	1832      	adds	r2, r6, r0
 8004d08:	4420      	add	r0, r4
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	eb0e 0100 	add.w	r1, lr, r0
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] > 0 ? \
 8004d10:	ecf3 7a01 	vldmia	r3!, {s15}
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004d14:	4299      	cmp	r1, r3
                : \
 8004d16:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8004d1a:	ece2 7a01 	vstmia	r2!, {s15}
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004d1e:	d1f7      	bne.n	8004d10 <OpenNNA_Operator_ReLU+0x40>
        for (int j = 0; j < Output_Fmap_Row; j++)
 8004d20:	f10c 0c01 	add.w	ip, ip, #1
 8004d24:	4565      	cmp	r5, ip
 8004d26:	d1ee      	bne.n	8004d06 <OpenNNA_Operator_ReLU+0x36>
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004d28:	f108 0801 	add.w	r8, r8, #1
 8004d2c:	4457      	add	r7, sl
 8004d2e:	45c1      	cmp	r9, r8
 8004d30:	d1e4      	bne.n	8004cfc <OpenNNA_Operator_ReLU+0x2c>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 8004d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d36:	bf00      	nop
 8004d38:	00000000 	.word	0x00000000

08004d3c <OpenNNA_Operator_ReLU6>:
#include "opennna_operator_relu6.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_ReLU6(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8004d3c:	6903      	ldr	r3, [r0, #16]
{
 8004d3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 8004d42:	e9d3 a603 	ldrd	sl, r6, [r3, #12]
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8004d46:	695d      	ldr	r5, [r3, #20]
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004d48:	f1ba 0f00 	cmp.w	sl, #0
 8004d4c:	dd2e      	ble.n	8004dac <OpenNNA_Operator_ReLU6+0x70>
 8004d4e:	2e00      	cmp	r6, #0
 8004d50:	dd2c      	ble.n	8004dac <OpenNNA_Operator_ReLU6+0x70>
 8004d52:	2d00      	cmp	r5, #0
 8004d54:	dd2a      	ble.n	8004dac <OpenNNA_Operator_ReLU6+0x70>
    {
        for (int j = 0; j < Output_Fmap_Row; j++)
        {
            for (int k = 0; k < Output_Fmap_Col; k++)
            {
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8004d56:	f04f 0800 	mov.w	r8, #0
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] > 6 ? \
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] \
                : \
 8004d5a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004d5e:	fb05 fb06 	mul.w	fp, r5, r6
 8004d62:	00ad      	lsls	r5, r5, #2
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004d64:	46c1      	mov	r9, r8
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8004d66:	e9d0 4706 	ldrd	r4, r7, [r0, #24]
 8004d6a:	2000      	movs	r0, #0
        for (int j = 0; j < Output_Fmap_Row; j++)
 8004d6c:	ea4f 0c88 	mov.w	ip, r8, lsl #2
 8004d70:	f04f 0e00 	mov.w	lr, #0
 8004d74:	eb04 0188 	add.w	r1, r4, r8, lsl #2
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004d78:	eb07 020c 	add.w	r2, r7, ip
 8004d7c:	44ac      	add	ip, r5
 8004d7e:	460b      	mov	r3, r1
 8004d80:	eb04 010c 	add.w	r1, r4, ip
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] > 6 ? \
 8004d84:	ecf3 7a01 	vldmia	r3!, {s15}
                : \
 8004d88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d90:	dc0e      	bgt.n	8004db0 <OpenNNA_Operator_ReLU6+0x74>
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004d92:	4299      	cmp	r1, r3
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8004d94:	f842 0b04 	str.w	r0, [r2], #4
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004d98:	d1f4      	bne.n	8004d84 <OpenNNA_Operator_ReLU6+0x48>
        for (int j = 0; j < Output_Fmap_Row; j++)
 8004d9a:	f10e 0e01 	add.w	lr, lr, #1
 8004d9e:	45b6      	cmp	lr, r6
 8004da0:	d1ea      	bne.n	8004d78 <OpenNNA_Operator_ReLU6+0x3c>
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004da2:	f109 0901 	add.w	r9, r9, #1
 8004da6:	44d8      	add	r8, fp
 8004da8:	45ca      	cmp	sl, r9
 8004daa:	d1df      	bne.n	8004d6c <OpenNNA_Operator_ReLU6+0x30>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 8004dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004db0:	4299      	cmp	r1, r3
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8004db2:	ece2 7a01 	vstmia	r2!, {s15}
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004db6:	d1e5      	bne.n	8004d84 <OpenNNA_Operator_ReLU6+0x48>
        for (int j = 0; j < Output_Fmap_Row; j++)
 8004db8:	f10e 0e01 	add.w	lr, lr, #1
 8004dbc:	45b6      	cmp	lr, r6
 8004dbe:	d1db      	bne.n	8004d78 <OpenNNA_Operator_ReLU6+0x3c>
 8004dc0:	e7ef      	b.n	8004da2 <OpenNNA_Operator_ReLU6+0x66>
 8004dc2:	bf00      	nop

08004dc4 <OpenNNA_Operator_Softmax>:
#include "math.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_Softmax(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8004dc4:	6903      	ldr	r3, [r0, #16]
 8004dc6:	68da      	ldr	r2, [r3, #12]
{
 8004dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    //Softmax独有
    data_t exp_sum = 0;//exp求sum
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    //得到exp 和exp sum
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004dcc:	2a00      	cmp	r2, #0
{
 8004dce:	ed2d 8b02 	vpush	{d8}
 8004dd2:	b087      	sub	sp, #28
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8004dd4:	e9d3 9804 	ldrd	r9, r8, [r3, #16]
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8004dd8:	9204      	str	r2, [sp, #16]
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004dda:	dd70      	ble.n	8004ebe <OpenNNA_Operator_Softmax+0xfa>
 8004ddc:	fb08 f309 	mul.w	r3, r8, r9
 8004de0:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8004de4:	4682      	mov	sl, r0
    data_t exp_sum = 0;//exp求sum
 8004de6:	ed9f 8a38 	vldr	s16, [pc, #224]	; 8004ec8 <OpenNNA_Operator_Softmax+0x104>
 8004dea:	9305      	str	r3, [sp, #20]
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004dec:	2300      	movs	r3, #0
 8004dee:	9201      	str	r2, [sp, #4]
 8004df0:	9302      	str	r3, [sp, #8]
 8004df2:	9303      	str	r3, [sp, #12]
    {
        for (int j = 0; j < Output_Fmap_Row; j++)
 8004df4:	f1b9 0f00 	cmp.w	r9, #0
 8004df8:	dd2a      	ble.n	8004e50 <OpenNNA_Operator_Softmax+0x8c>
 8004dfa:	9e02      	ldr	r6, [sp, #8]
 8004dfc:	2700      	movs	r7, #0
        {
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004dfe:	f1b8 0f00 	cmp.w	r8, #0
 8004e02:	dd21      	ble.n	8004e48 <OpenNNA_Operator_Softmax+0x84>
 8004e04:	9a01      	ldr	r2, [sp, #4]
 8004e06:	e9da 3406 	ldrd	r3, r4, [sl, #24]
 8004e0a:	189d      	adds	r5, r3, r2
 8004e0c:	eb03 0b86 	add.w	fp, r3, r6, lsl #2
 8004e10:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8004e14:	eb05 0586 	add.w	r5, r5, r6, lsl #2
            {
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
                exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]);
 8004e18:	ed9b 0a00 	vldr	s0, [fp]
                exp_sum += exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]);
 8004e1c:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
                exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]);
 8004e20:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8004e24:	f005 f9cc 	bl	800a1c0 <exp>
 8004e28:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8004e2c:	eca4 0a01 	vstmia	r4!, {s0}
                exp_sum += exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]);
 8004e30:	ecbb 0a01 	vldmia	fp!, {s0}
 8004e34:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8004e38:	f005 f9c2 	bl	800a1c0 <exp>
 8004e3c:	ee38 0b00 	vadd.f64	d0, d8, d0
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004e40:	45ab      	cmp	fp, r5
                exp_sum += exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]);
 8004e42:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004e46:	d1e7      	bne.n	8004e18 <OpenNNA_Operator_Softmax+0x54>
        for (int j = 0; j < Output_Fmap_Row; j++)
 8004e48:	3701      	adds	r7, #1
 8004e4a:	4446      	add	r6, r8
 8004e4c:	45b9      	cmp	r9, r7
 8004e4e:	d1d6      	bne.n	8004dfe <OpenNNA_Operator_Softmax+0x3a>
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004e50:	9a02      	ldr	r2, [sp, #8]
 8004e52:	9905      	ldr	r1, [sp, #20]
 8004e54:	9b03      	ldr	r3, [sp, #12]
 8004e56:	440a      	add	r2, r1
 8004e58:	3301      	adds	r3, #1
 8004e5a:	9202      	str	r2, [sp, #8]
 8004e5c:	9a04      	ldr	r2, [sp, #16]
 8004e5e:	9303      	str	r3, [sp, #12]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d1c7      	bne.n	8004df4 <OpenNNA_Operator_Softmax+0x30>
 8004e64:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004e68:	f1b9 0f00 	cmp.w	r9, #0
 8004e6c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8004e70:	dd25      	ble.n	8004ebe <OpenNNA_Operator_Softmax+0xfa>
 8004e72:	f1b8 0f00 	cmp.w	r8, #0
 8004e76:	dd22      	ble.n	8004ebe <OpenNNA_Operator_Softmax+0xfa>
        for (int j = 0; j < Output_Fmap_Row; j++)
        {
            for (int k = 0; k < Output_Fmap_Col; k++)
            {
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] / exp_sum;
 8004e78:	f8da 501c 	ldr.w	r5, [sl, #28]
 8004e7c:	2600      	movs	r6, #0
 8004e7e:	f8dd a004 	ldr.w	sl, [sp, #4]
 8004e82:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 8004e86:	4637      	mov	r7, r6
 8004e88:	468b      	mov	fp, r1
 8004e8a:	46d4      	mov	ip, sl
    data_t exp_sum = 0;//exp求sum
 8004e8c:	4634      	mov	r4, r6
 8004e8e:	4660      	mov	r0, ip
        for (int j = 0; j < Output_Fmap_Row; j++)
 8004e90:	2100      	movs	r1, #0
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004e92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e96:	182a      	adds	r2, r5, r0
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] / exp_sum;
 8004e98:	edd3 7a00 	vldr	s15, [r3]
 8004e9c:	ee67 7a87 	vmul.f32	s15, s15, s14
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8004ea0:	ece3 7a01 	vstmia	r3!, {s15}
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d1f7      	bne.n	8004e98 <OpenNNA_Operator_Softmax+0xd4>
        for (int j = 0; j < Output_Fmap_Row; j++)
 8004ea8:	3101      	adds	r1, #1
 8004eaa:	4450      	add	r0, sl
 8004eac:	4444      	add	r4, r8
 8004eae:	4589      	cmp	r9, r1
 8004eb0:	d1ef      	bne.n	8004e92 <OpenNNA_Operator_Softmax+0xce>
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004eb2:	3701      	adds	r7, #1
 8004eb4:	9b04      	ldr	r3, [sp, #16]
 8004eb6:	44f4      	add	ip, lr
 8004eb8:	445e      	add	r6, fp
 8004eba:	42bb      	cmp	r3, r7
 8004ebc:	d1e6      	bne.n	8004e8c <OpenNNA_Operator_Softmax+0xc8>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 8004ebe:	b007      	add	sp, #28
 8004ec0:	ecbd 8b02 	vpop	{d8}
 8004ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec8:	00000000 	.word	0x00000000

08004ecc <OpenNNA_Operator_tanh>:
#include "math.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_tanh(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8004ecc:	6903      	ldr	r3, [r0, #16]
 8004ece:	68da      	ldr	r2, [r3, #12]
{
 8004ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004ed4:	2a00      	cmp	r2, #0
{
 8004ed6:	ed2d 8b04 	vpush	{d8-d9}
 8004eda:	b087      	sub	sp, #28
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8004edc:	e9d3 8704 	ldrd	r8, r7, [r3, #16]
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8004ee0:	9204      	str	r2, [sp, #16]
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004ee2:	dd42      	ble.n	8004f6a <OpenNNA_Operator_tanh+0x9e>
 8004ee4:	f1b8 0f00 	cmp.w	r8, #0
 8004ee8:	dd3f      	ble.n	8004f6a <OpenNNA_Operator_tanh+0x9e>
 8004eea:	2f00      	cmp	r7, #0
 8004eec:	dd3d      	ble.n	8004f6a <OpenNNA_Operator_tanh+0x9e>
 8004eee:	fb07 f308 	mul.w	r3, r7, r8
 8004ef2:	9305      	str	r3, [sp, #20]
        for (int j = 0; j < Output_Fmap_Row; j++)
        {
            for (int k = 0; k < Output_Fmap_Col; k++)
            {
                //output = (np.exp(z)-np.exp(-z))/(np.exp(z)+np.exp(-z))
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8004ef4:	e9d0 9306 	ldrd	r9, r3, [r0, #24]
 8004ef8:	eb09 0287 	add.w	r2, r9, r7, lsl #2
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	2300      	movs	r3, #0
 8004f00:	9201      	str	r2, [sp, #4]
 8004f02:	9302      	str	r3, [sp, #8]
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004f04:	9303      	str	r3, [sp, #12]
{
 8004f06:	9d02      	ldr	r5, [sp, #8]
        for (int j = 0; j < Output_Fmap_Row; j++)
 8004f08:	2600      	movs	r6, #0
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004f0a:	9b00      	ldr	r3, [sp, #0]
 8004f0c:	eb09 0b85 	add.w	fp, r9, r5, lsl #2
 8004f10:	eb03 0a85 	add.w	sl, r3, r5, lsl #2
 8004f14:	9b01      	ldr	r3, [sp, #4]
 8004f16:	eb03 0485 	add.w	r4, r3, r5, lsl #2
                (exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]) -\
 8004f1a:	ecbb 9a01 	vldmia	fp!, {s18}
 8004f1e:	eeb7 0ac9 	vcvt.f64.f32	d0, s18
 8004f22:	f005 f94d 	bl	800a1c0 <exp>
 8004f26:	eeb0 8b40 	vmov.f64	d8, d0
                exp(-((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k])) / \
 8004f2a:	eeb1 0a49 	vneg.f32	s0, s18
 8004f2e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8004f32:	f005 f945 	bl	800a1c0 <exp>
                (exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]) -\
 8004f36:	ee38 6b40 	vsub.f64	d6, d8, d0
                (exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]) +\
 8004f3a:	ee38 8b00 	vadd.f64	d8, d8, d0
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004f3e:	455c      	cmp	r4, fp
                exp(-((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k])) / \
 8004f40:	ee86 7b08 	vdiv.f64	d7, d6, d8
 8004f44:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8004f48:	ecaa 7a01 	vstmia	sl!, {s14}
            for (int k = 0; k < Output_Fmap_Col; k++)
 8004f4c:	d1e5      	bne.n	8004f1a <OpenNNA_Operator_tanh+0x4e>
        for (int j = 0; j < Output_Fmap_Row; j++)
 8004f4e:	3601      	adds	r6, #1
 8004f50:	443d      	add	r5, r7
 8004f52:	45b0      	cmp	r8, r6
 8004f54:	d1d9      	bne.n	8004f0a <OpenNNA_Operator_tanh+0x3e>
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8004f56:	9a02      	ldr	r2, [sp, #8]
 8004f58:	9905      	ldr	r1, [sp, #20]
 8004f5a:	9b03      	ldr	r3, [sp, #12]
 8004f5c:	440a      	add	r2, r1
 8004f5e:	3301      	adds	r3, #1
 8004f60:	9202      	str	r2, [sp, #8]
 8004f62:	9a04      	ldr	r2, [sp, #16]
 8004f64:	9303      	str	r3, [sp, #12]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d1cd      	bne.n	8004f06 <OpenNNA_Operator_tanh+0x3a>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 8004f6a:	b007      	add	sp, #28
 8004f6c:	ecbd 8b04 	vpop	{d8-d9}
 8004f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004f74 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f74:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f78:	b92b      	cbnz	r3, 8004f86 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8004f7a:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <osKernelInitialize+0x20>)
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	b928      	cbnz	r0, 8004f8c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004f80:	2201      	movs	r2, #1
 8004f82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004f84:	4770      	bx	lr
    stat = osErrorISR;
 8004f86:	f06f 0005 	mvn.w	r0, #5
 8004f8a:	4770      	bx	lr
    } else {
      stat = osError;
 8004f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  }

  return (stat);
}
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	2404e9e8 	.word	0x2404e9e8

08004f98 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f98:	b510      	push	{r4, lr}
 8004f9a:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f9e:	b974      	cbnz	r4, 8004fbe <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8004fa0:	4b08      	ldr	r3, [pc, #32]	; (8004fc4 <osKernelStart+0x2c>)
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	2a01      	cmp	r2, #1
 8004fa6:	d107      	bne.n	8004fb8 <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fa8:	4907      	ldr	r1, [pc, #28]	; (8004fc8 <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004faa:	2202      	movs	r2, #2
 8004fac:	77cc      	strb	r4, [r1, #31]
 8004fae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004fb0:	f001 f910 	bl	80061d4 <vTaskStartScheduler>
      stat = osOK;
 8004fb4:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8004fb6:	bd10      	pop	{r4, pc}
      stat = osError;
 8004fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004fbc:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8004fbe:	f06f 0005 	mvn.w	r0, #5
}
 8004fc2:	bd10      	pop	{r4, pc}
 8004fc4:	2404e9e8 	.word	0x2404e9e8
 8004fc8:	e000ed00 	.word	0xe000ed00

08004fcc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004fce:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004fd0:	b087      	sub	sp, #28
 8004fd2:	4614      	mov	r4, r2
  hTask = NULL;
 8004fd4:	9505      	str	r5, [sp, #20]
 8004fd6:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8004fda:	bb4a      	cbnz	r2, 8005030 <osThreadNew+0x64>
 8004fdc:	b340      	cbz	r0, 8005030 <osThreadNew+0x64>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8004fde:	b1e4      	cbz	r4, 800501a <osThreadNew+0x4e>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8004fe0:	69a6      	ldr	r6, [r4, #24]
 8004fe2:	bb4e      	cbnz	r6, 8005038 <osThreadNew+0x6c>
 8004fe4:	2618      	movs	r6, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004fe6:	6863      	ldr	r3, [r4, #4]
 8004fe8:	07db      	lsls	r3, r3, #31
 8004fea:	d421      	bmi.n	8005030 <osThreadNew+0x64>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8004fec:	6963      	ldr	r3, [r4, #20]
 8004fee:	b33b      	cbz	r3, 8005040 <osThreadNew+0x74>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004ff0:	ea4f 0c93 	mov.w	ip, r3, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ff4:	68a5      	ldr	r5, [r4, #8]
      if (attr->name != NULL) {
 8004ff6:	6827      	ldr	r7, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ff8:	b33d      	cbz	r5, 800504a <osThreadNew+0x7e>
 8004ffa:	68e2      	ldr	r2, [r4, #12]
 8004ffc:	2a5f      	cmp	r2, #95	; 0x5f
 8004ffe:	d917      	bls.n	8005030 <osThreadNew+0x64>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005000:	6924      	ldr	r4, [r4, #16]
 8005002:	b1ab      	cbz	r3, 8005030 <osThreadNew+0x64>
 8005004:	b1a4      	cbz	r4, 8005030 <osThreadNew+0x64>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005006:	460b      	mov	r3, r1
 8005008:	4662      	mov	r2, ip
 800500a:	4639      	mov	r1, r7
 800500c:	9600      	str	r6, [sp, #0]
 800500e:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8005012:	f001 f81d 	bl	8006050 <xTaskCreateStatic>
 8005016:	4605      	mov	r5, r0
 8005018:	e00b      	b.n	8005032 <osThreadNew+0x66>
 800501a:	2280      	movs	r2, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;
 800501c:	2618      	movs	r6, #24
      #endif
    }
    else {
      if (mem == 0) {
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800501e:	460b      	mov	r3, r1
 8005020:	4621      	mov	r1, r4
 8005022:	ac05      	add	r4, sp, #20
 8005024:	9600      	str	r6, [sp, #0]
 8005026:	9401      	str	r4, [sp, #4]
 8005028:	f001 f84c 	bl	80060c4 <xTaskCreate>
 800502c:	2801      	cmp	r0, #1
 800502e:	d00a      	beq.n	8005046 <osThreadNew+0x7a>
        return (NULL);
 8005030:	2500      	movs	r5, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 8005032:	4628      	mov	r0, r5
 8005034:	b007      	add	sp, #28
 8005036:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005038:	1e72      	subs	r2, r6, #1
 800503a:	2a37      	cmp	r2, #55	; 0x37
 800503c:	d9d3      	bls.n	8004fe6 <osThreadNew+0x1a>
 800503e:	e7f8      	b.n	8005032 <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 8005040:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8005044:	e7d6      	b.n	8004ff4 <osThreadNew+0x28>
  return ((osThreadId_t)hTask);
 8005046:	9d05      	ldr	r5, [sp, #20]
 8005048:	e7f3      	b.n	8005032 <osThreadNew+0x66>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800504a:	68e3      	ldr	r3, [r4, #12]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1f0      	bne.n	8005032 <osThreadNew+0x66>
 8005050:	6923      	ldr	r3, [r4, #16]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1ed      	bne.n	8005032 <osThreadNew+0x66>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005056:	fa1f f28c 	uxth.w	r2, ip
 800505a:	463c      	mov	r4, r7
 800505c:	e7df      	b.n	800501e <osThreadNew+0x52>
 800505e:	bf00      	nop

08005060 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005060:	b510      	push	{r4, lr}
 8005062:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8005066:	b92c      	cbnz	r4, 8005074 <osDelay+0x14>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8005068:	b900      	cbnz	r0, 800506c <osDelay+0xc>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800506a:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
 800506c:	f001 f85c 	bl	8006128 <vTaskDelay>
    stat = osOK;
 8005070:	4620      	mov	r0, r4
}
 8005072:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8005074:	f06f 0005 	mvn.w	r0, #5
}
 8005078:	bd10      	pop	{r4, pc}
 800507a:	bf00      	nop

0800507c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800507c:	4b04      	ldr	r3, [pc, #16]	; (8005090 <vApplicationGetIdleTaskMemory+0x14>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800507e:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005080:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005082:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005084:	4c03      	ldr	r4, [pc, #12]	; (8005094 <vApplicationGetIdleTaskMemory+0x18>)
 8005086:	600c      	str	r4, [r1, #0]
}
 8005088:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800508c:	6013      	str	r3, [r2, #0]
}
 800508e:	4770      	bx	lr
 8005090:	2404e988 	.word	0x2404e988
 8005094:	2404e788 	.word	0x2404e788

08005098 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005098:	4b05      	ldr	r3, [pc, #20]	; (80050b0 <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800509a:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800509c:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800509e:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80050a2:	4c04      	ldr	r4, [pc, #16]	; (80050b4 <vApplicationGetTimerTaskMemory+0x1c>)
 80050a4:	600c      	str	r4, [r1, #0]
}
 80050a6:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80050aa:	6013      	str	r3, [r2, #0]
}
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	2404edec 	.word	0x2404edec
 80050b4:	2404e9ec 	.word	0x2404e9ec

080050b8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050b8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050c0:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050c2:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050c4:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050c6:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050c8:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop

080050d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80050d0:	2300      	movs	r3, #0
 80050d2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop

080050d8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80050d8:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80050da:	6802      	ldr	r2, [r0, #0]
{
 80050dc:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050de:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 80050e0:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 80050e2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050e4:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050e6:	689c      	ldr	r4, [r3, #8]
 80050e8:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050ea:	6099      	str	r1, [r3, #8]
}
 80050ec:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 80050f0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80050f2:	6002      	str	r2, [r0, #0]
}
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop

080050f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050f8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050fa:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050fc:	1c6b      	adds	r3, r5, #1
 80050fe:	d010      	beq.n	8005122 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005100:	f100 0308 	add.w	r3, r0, #8
 8005104:	461c      	mov	r4, r3
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	42aa      	cmp	r2, r5
 800510c:	d9fa      	bls.n	8005104 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800510e:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8005110:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8005112:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005114:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005116:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005118:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 800511a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800511c:	6002      	str	r2, [r0, #0]
}
 800511e:	bc30      	pop	{r4, r5}
 8005120:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8005122:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8005124:	6863      	ldr	r3, [r4, #4]
 8005126:	e7f2      	b.n	800510e <vListInsert+0x16>

08005128 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005128:	6903      	ldr	r3, [r0, #16]
{
 800512a:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800512c:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800512e:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 8005132:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8005134:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005138:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800513a:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 800513c:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005140:	bf08      	it	eq
 8005142:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8005144:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 8005146:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005148:	3a01      	subs	r2, #1
 800514a:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 800514c:	6818      	ldr	r0, [r3, #0]
}
 800514e:	4770      	bx	lr

08005150 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005150:	b570      	push	{r4, r5, r6, lr}
 8005152:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005154:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8005156:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005158:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800515a:	b92a      	cbnz	r2, 8005168 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800515c:	6805      	ldr	r5, [r0, #0]
 800515e:	b365      	cbz	r5, 80051ba <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005160:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8005162:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005164:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8005166:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8005168:	b97d      	cbnz	r5, 800518a <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800516a:	6840      	ldr	r0, [r0, #4]
 800516c:	f002 f8ec 	bl	8007348 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005170:	6863      	ldr	r3, [r4, #4]
 8005172:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005174:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005176:	68a2      	ldr	r2, [r4, #8]
 8005178:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800517a:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800517c:	d319      	bcc.n	80051b2 <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800517e:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005180:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8005182:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005184:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005186:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8005188:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800518a:	68c0      	ldr	r0, [r0, #12]
 800518c:	f002 f8dc 	bl	8007348 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005190:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005192:	68e3      	ldr	r3, [r4, #12]
 8005194:	4251      	negs	r1, r2
 8005196:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005198:	6822      	ldr	r2, [r4, #0]
 800519a:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800519c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800519e:	d202      	bcs.n	80051a6 <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80051a0:	68a3      	ldr	r3, [r4, #8]
 80051a2:	440b      	add	r3, r1
 80051a4:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80051a6:	2d02      	cmp	r5, #2
 80051a8:	d00d      	beq.n	80051c6 <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051aa:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80051ac:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051ae:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80051b0:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051b2:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80051b4:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051b6:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80051b8:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80051ba:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051bc:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80051be:	f001 fb33 	bl	8006828 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80051c2:	60a5      	str	r5, [r4, #8]
 80051c4:	e7ce      	b.n	8005164 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051c6:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
 80051c8:	f04f 0000 	mov.w	r0, #0
 80051cc:	bf38      	it	cc
 80051ce:	2601      	movcc	r6, #1
 80051d0:	e7c8      	b.n	8005164 <prvCopyDataToQueue+0x14>
 80051d2:	bf00      	nop

080051d4 <xQueueGenericCreateStatic>:
	{
 80051d4:	b530      	push	{r4, r5, lr}
 80051d6:	b083      	sub	sp, #12
 80051d8:	f89d 4018 	ldrb.w	r4, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051dc:	b940      	cbnz	r0, 80051f0 <xQueueGenericCreateStatic+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	e7fe      	b.n	80051ee <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 80051f0:	461d      	mov	r5, r3
 80051f2:	b153      	cbz	r3, 800520a <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80051f4:	b30a      	cbz	r2, 800523a <xQueueGenericCreateStatic+0x66>
 80051f6:	b989      	cbnz	r1, 800521c <xQueueGenericCreateStatic+0x48>
 80051f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	e7fe      	b.n	8005208 <xQueueGenericCreateStatic+0x34>
 800520a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520e:	f383 8811 	msr	BASEPRI, r3
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800521a:	e7fe      	b.n	800521a <xQueueGenericCreateStatic+0x46>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800521c:	b16a      	cbz	r2, 800523a <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800521e:	2350      	movs	r3, #80	; 0x50
 8005220:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005222:	9b01      	ldr	r3, [sp, #4]
 8005224:	2b50      	cmp	r3, #80	; 0x50
 8005226:	d013      	beq.n	8005250 <xQueueGenericCreateStatic+0x7c>
 8005228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522c:	f383 8811 	msr	BASEPRI, r3
 8005230:	f3bf 8f6f 	isb	sy
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	e7fe      	b.n	8005238 <xQueueGenericCreateStatic+0x64>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800523a:	2900      	cmp	r1, #0
 800523c:	d0ef      	beq.n	800521e <xQueueGenericCreateStatic+0x4a>
 800523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	e7fe      	b.n	800524e <xQueueGenericCreateStatic+0x7a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005250:	2900      	cmp	r1, #0
 8005252:	bf08      	it	eq
 8005254:	462a      	moveq	r2, r5
	pxNewQueue->uxLength = uxQueueLength;
 8005256:	63e8      	str	r0, [r5, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005258:	6429      	str	r1, [r5, #64]	; 0x40
 800525a:	602a      	str	r2, [r5, #0]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800525c:	9a01      	ldr	r2, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800525e:	2201      	movs	r2, #1
 8005260:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
	taskENTER_CRITICAL();
 8005264:	f001 fdf6 	bl	8006e54 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005268:	6829      	ldr	r1, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800526a:	2300      	movs	r3, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800526c:	6069      	str	r1, [r5, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800526e:	63ab      	str	r3, [r5, #56]	; 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005270:	e9d5 200f 	ldrd	r2, r0, [r5, #60]	; 0x3c
 8005274:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005278:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800527a:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800527c:	4401      	add	r1, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800527e:	60aa      	str	r2, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8005280:	22ff      	movs	r2, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005282:	f105 0010 	add.w	r0, r5, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005286:	60e9      	str	r1, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005288:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800528c:	f885 2045 	strb.w	r2, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005290:	f7ff ff12 	bl	80050b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005294:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8005298:	f7ff ff0e 	bl	80050b8 <vListInitialise>
	taskEXIT_CRITICAL();
 800529c:	f001 fdfc 	bl	8006e98 <vPortExitCritical>
	}
 80052a0:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
 80052a2:	f885 404c 	strb.w	r4, [r5, #76]	; 0x4c
	}
 80052a6:	b003      	add	sp, #12
 80052a8:	bd30      	pop	{r4, r5, pc}
 80052aa:	bf00      	nop

080052ac <xQueueGenericSend>:
{
 80052ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052b0:	b084      	sub	sp, #16
 80052b2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80052b4:	2800      	cmp	r0, #0
 80052b6:	f000 8103 	beq.w	80054c0 <xQueueGenericSend+0x214>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052ba:	4688      	mov	r8, r1
 80052bc:	4604      	mov	r4, r0
 80052be:	461f      	mov	r7, r3
 80052c0:	2900      	cmp	r1, #0
 80052c2:	f000 8097 	beq.w	80053f4 <xQueueGenericSend+0x148>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052c6:	2f02      	cmp	r7, #2
 80052c8:	d10b      	bne.n	80052e2 <xQueueGenericSend+0x36>
 80052ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d008      	beq.n	80052e2 <xQueueGenericSend+0x36>
 80052d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	e7fe      	b.n	80052e0 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052e2:	f001 fa91 	bl	8006808 <xTaskGetSchedulerState>
 80052e6:	2800      	cmp	r0, #0
 80052e8:	f000 80f3 	beq.w	80054d2 <xQueueGenericSend+0x226>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052ec:	f1a7 0902 	sub.w	r9, r7, #2
 80052f0:	2500      	movs	r5, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052f2:	f104 0624 	add.w	r6, r4, #36	; 0x24
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052f6:	fab9 f989 	clz	r9, r9
 80052fa:	ea4f 1959 	mov.w	r9, r9, lsr #5
		taskENTER_CRITICAL();
 80052fe:	f001 fda9 	bl	8006e54 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005302:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005304:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005306:	429a      	cmp	r2, r3
 8005308:	f0c0 80f0 	bcc.w	80054ec <xQueueGenericSend+0x240>
 800530c:	f1b9 0f00 	cmp.w	r9, #0
 8005310:	f040 80ec 	bne.w	80054ec <xQueueGenericSend+0x240>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005314:	9b01      	ldr	r3, [sp, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	f000 8101 	beq.w	800551e <xQueueGenericSend+0x272>
				else if( xEntryTimeSet == pdFALSE )
 800531c:	2d00      	cmp	r5, #0
 800531e:	f000 80cb 	beq.w	80054b8 <xQueueGenericSend+0x20c>
		taskEXIT_CRITICAL();
 8005322:	f001 fdb9 	bl	8006e98 <vPortExitCritical>
		vTaskSuspendAll();
 8005326:	f000 ffe7 	bl	80062f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800532a:	f001 fd93 	bl	8006e54 <vPortEnterCritical>
 800532e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005332:	2bff      	cmp	r3, #255	; 0xff
 8005334:	d102      	bne.n	800533c <xQueueGenericSend+0x90>
 8005336:	2300      	movs	r3, #0
 8005338:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800533c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005340:	2bff      	cmp	r3, #255	; 0xff
 8005342:	d102      	bne.n	800534a <xQueueGenericSend+0x9e>
 8005344:	2300      	movs	r3, #0
 8005346:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800534a:	f001 fda5 	bl	8006e98 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800534e:	a901      	add	r1, sp, #4
 8005350:	a802      	add	r0, sp, #8
 8005352:	f001 fa0b 	bl	800676c <xTaskCheckForTimeOut>
 8005356:	2800      	cmp	r0, #0
 8005358:	f040 80e5 	bne.w	8005526 <xQueueGenericSend+0x27a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800535c:	f001 fd7a 	bl	8006e54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005360:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005362:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005364:	429a      	cmp	r2, r3
 8005366:	d052      	beq.n	800540e <xQueueGenericSend+0x162>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005368:	f001 fd96 	bl	8006e98 <vPortExitCritical>
	taskENTER_CRITICAL();
 800536c:	f001 fd72 	bl	8006e54 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005370:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8005374:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005376:	2d00      	cmp	r5, #0
 8005378:	dc04      	bgt.n	8005384 <xQueueGenericSend+0xd8>
 800537a:	e011      	b.n	80053a0 <xQueueGenericSend+0xf4>
			--cTxLock;
 800537c:	1e6a      	subs	r2, r5, #1
 800537e:	b2d3      	uxtb	r3, r2
 8005380:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005382:	b16b      	cbz	r3, 80053a0 <xQueueGenericSend+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005384:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005386:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005388:	b153      	cbz	r3, 80053a0 <xQueueGenericSend+0xf4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800538a:	f001 f999 	bl	80066c0 <xTaskRemoveFromEventList>
 800538e:	2800      	cmp	r0, #0
 8005390:	d0f4      	beq.n	800537c <xQueueGenericSend+0xd0>
						vTaskMissedYield();
 8005392:	f001 fa33 	bl	80067fc <vTaskMissedYield>
			--cTxLock;
 8005396:	1e6a      	subs	r2, r5, #1
 8005398:	b2d3      	uxtb	r3, r2
 800539a:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1f1      	bne.n	8005384 <xQueueGenericSend+0xd8>
		pxQueue->cTxLock = queueUNLOCKED;
 80053a0:	23ff      	movs	r3, #255	; 0xff
 80053a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80053a6:	f001 fd77 	bl	8006e98 <vPortExitCritical>
	taskENTER_CRITICAL();
 80053aa:	f001 fd53 	bl	8006e54 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80053ae:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80053b2:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053b4:	2d00      	cmp	r5, #0
 80053b6:	dd14      	ble.n	80053e2 <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053b8:	f104 0a10 	add.w	sl, r4, #16
 80053bc:	e003      	b.n	80053c6 <xQueueGenericSend+0x11a>
				--cRxLock;
 80053be:	1e6a      	subs	r2, r5, #1
 80053c0:	b2d3      	uxtb	r3, r2
 80053c2:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053c4:	b16b      	cbz	r3, 80053e2 <xQueueGenericSend+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053c6:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053c8:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053ca:	b153      	cbz	r3, 80053e2 <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053cc:	f001 f978 	bl	80066c0 <xTaskRemoveFromEventList>
 80053d0:	2800      	cmp	r0, #0
 80053d2:	d0f4      	beq.n	80053be <xQueueGenericSend+0x112>
					vTaskMissedYield();
 80053d4:	f001 fa12 	bl	80067fc <vTaskMissedYield>
				--cRxLock;
 80053d8:	1e6a      	subs	r2, r5, #1
 80053da:	b2d3      	uxtb	r3, r2
 80053dc:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f1      	bne.n	80053c6 <xQueueGenericSend+0x11a>
		pxQueue->cRxLock = queueUNLOCKED;
 80053e2:	23ff      	movs	r3, #255	; 0xff
 80053e4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80053e8:	f001 fd56 	bl	8006e98 <vPortExitCritical>
				( void ) xTaskResumeAll();
 80053ec:	f000 ff8c 	bl	8006308 <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053f0:	2501      	movs	r5, #1
 80053f2:	e784      	b.n	80052fe <xQueueGenericSend+0x52>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053f4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f43f af65 	beq.w	80052c6 <xQueueGenericSend+0x1a>
 80053fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	e7fe      	b.n	800540c <xQueueGenericSend+0x160>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800540e:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
 8005412:	f001 fd41 	bl	8006e98 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005416:	9901      	ldr	r1, [sp, #4]
 8005418:	4650      	mov	r0, sl
 800541a:	f001 f8c3 	bl	80065a4 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800541e:	f001 fd19 	bl	8006e54 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005422:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005426:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005428:	2d00      	cmp	r5, #0
 800542a:	dc04      	bgt.n	8005436 <xQueueGenericSend+0x18a>
 800542c:	e011      	b.n	8005452 <xQueueGenericSend+0x1a6>
			--cTxLock;
 800542e:	1e6b      	subs	r3, r5, #1
 8005430:	b2da      	uxtb	r2, r3
 8005432:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005434:	b16a      	cbz	r2, 8005452 <xQueueGenericSend+0x1a6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005436:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005438:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800543a:	b153      	cbz	r3, 8005452 <xQueueGenericSend+0x1a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800543c:	f001 f940 	bl	80066c0 <xTaskRemoveFromEventList>
 8005440:	2800      	cmp	r0, #0
 8005442:	d0f4      	beq.n	800542e <xQueueGenericSend+0x182>
						vTaskMissedYield();
 8005444:	f001 f9da 	bl	80067fc <vTaskMissedYield>
			--cTxLock;
 8005448:	1e6b      	subs	r3, r5, #1
 800544a:	b2da      	uxtb	r2, r3
 800544c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800544e:	2a00      	cmp	r2, #0
 8005450:	d1f1      	bne.n	8005436 <xQueueGenericSend+0x18a>
		pxQueue->cTxLock = queueUNLOCKED;
 8005452:	23ff      	movs	r3, #255	; 0xff
 8005454:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005458:	f001 fd1e 	bl	8006e98 <vPortExitCritical>
	taskENTER_CRITICAL();
 800545c:	f001 fcfa 	bl	8006e54 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005460:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005464:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005466:	2d00      	cmp	r5, #0
 8005468:	dc04      	bgt.n	8005474 <xQueueGenericSend+0x1c8>
 800546a:	e011      	b.n	8005490 <xQueueGenericSend+0x1e4>
				--cRxLock;
 800546c:	1e6b      	subs	r3, r5, #1
 800546e:	b2da      	uxtb	r2, r3
 8005470:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005472:	b16a      	cbz	r2, 8005490 <xQueueGenericSend+0x1e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005474:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005476:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005478:	b153      	cbz	r3, 8005490 <xQueueGenericSend+0x1e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800547a:	f001 f921 	bl	80066c0 <xTaskRemoveFromEventList>
 800547e:	2800      	cmp	r0, #0
 8005480:	d0f4      	beq.n	800546c <xQueueGenericSend+0x1c0>
					vTaskMissedYield();
 8005482:	f001 f9bb 	bl	80067fc <vTaskMissedYield>
				--cRxLock;
 8005486:	1e6b      	subs	r3, r5, #1
 8005488:	b2da      	uxtb	r2, r3
 800548a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800548c:	2a00      	cmp	r2, #0
 800548e:	d1f1      	bne.n	8005474 <xQueueGenericSend+0x1c8>
		pxQueue->cRxLock = queueUNLOCKED;
 8005490:	23ff      	movs	r3, #255	; 0xff
 8005492:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005496:	f001 fcff 	bl	8006e98 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800549a:	f000 ff35 	bl	8006308 <xTaskResumeAll>
 800549e:	2800      	cmp	r0, #0
 80054a0:	d1a6      	bne.n	80053f0 <xQueueGenericSend+0x144>
					portYIELD_WITHIN_API();
 80054a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80054a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	e79b      	b.n	80053f0 <xQueueGenericSend+0x144>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054b8:	a802      	add	r0, sp, #8
 80054ba:	f001 f94b 	bl	8006754 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054be:	e730      	b.n	8005322 <xQueueGenericSend+0x76>
 80054c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80054d0:	e7fe      	b.n	80054d0 <xQueueGenericSend+0x224>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054d2:	9b01      	ldr	r3, [sp, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f43f af09 	beq.w	80052ec <xQueueGenericSend+0x40>
 80054da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	e7fe      	b.n	80054ea <xQueueGenericSend+0x23e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054ec:	463a      	mov	r2, r7
 80054ee:	4641      	mov	r1, r8
 80054f0:	4620      	mov	r0, r4
 80054f2:	f7ff fe2d 	bl	8005150 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d152      	bne.n	80055a2 <xQueueGenericSend+0x2f6>
					else if( xYieldRequired != pdFALSE )
 80054fc:	b148      	cbz	r0, 8005512 <xQueueGenericSend+0x266>
						queueYIELD_IF_USING_PREEMPTION();
 80054fe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005506:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005512:	f001 fcc1 	bl	8006e98 <vPortExitCritical>
				return pdPASS;
 8005516:	2001      	movs	r0, #1
}
 8005518:	b004      	add	sp, #16
 800551a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
 800551e:	f001 fcbb 	bl	8006e98 <vPortExitCritical>
					return errQUEUE_FULL;
 8005522:	4648      	mov	r0, r9
 8005524:	e7f8      	b.n	8005518 <xQueueGenericSend+0x26c>
	taskENTER_CRITICAL();
 8005526:	f001 fc95 	bl	8006e54 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800552a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800552e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005530:	2d00      	cmp	r5, #0
 8005532:	dd10      	ble.n	8005556 <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005534:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8005538:	e003      	b.n	8005542 <xQueueGenericSend+0x296>
			--cTxLock;
 800553a:	1e6b      	subs	r3, r5, #1
 800553c:	b2da      	uxtb	r2, r3
 800553e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005540:	b14a      	cbz	r2, 8005556 <xQueueGenericSend+0x2aa>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005542:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005544:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005546:	b133      	cbz	r3, 8005556 <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005548:	f001 f8ba 	bl	80066c0 <xTaskRemoveFromEventList>
 800554c:	2800      	cmp	r0, #0
 800554e:	d0f4      	beq.n	800553a <xQueueGenericSend+0x28e>
						vTaskMissedYield();
 8005550:	f001 f954 	bl	80067fc <vTaskMissedYield>
 8005554:	e7f1      	b.n	800553a <xQueueGenericSend+0x28e>
		pxQueue->cTxLock = queueUNLOCKED;
 8005556:	23ff      	movs	r3, #255	; 0xff
 8005558:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800555c:	f001 fc9c 	bl	8006e98 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005560:	f001 fc78 	bl	8006e54 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005564:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005568:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800556a:	2d00      	cmp	r5, #0
 800556c:	dd10      	ble.n	8005590 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800556e:	f104 0610 	add.w	r6, r4, #16
 8005572:	e003      	b.n	800557c <xQueueGenericSend+0x2d0>
				--cRxLock;
 8005574:	1e6b      	subs	r3, r5, #1
 8005576:	b2da      	uxtb	r2, r3
 8005578:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800557a:	b14a      	cbz	r2, 8005590 <xQueueGenericSend+0x2e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800557c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800557e:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005580:	b133      	cbz	r3, 8005590 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005582:	f001 f89d 	bl	80066c0 <xTaskRemoveFromEventList>
 8005586:	2800      	cmp	r0, #0
 8005588:	d0f4      	beq.n	8005574 <xQueueGenericSend+0x2c8>
					vTaskMissedYield();
 800558a:	f001 f937 	bl	80067fc <vTaskMissedYield>
 800558e:	e7f1      	b.n	8005574 <xQueueGenericSend+0x2c8>
		pxQueue->cRxLock = queueUNLOCKED;
 8005590:	23ff      	movs	r3, #255	; 0xff
 8005592:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005596:	f001 fc7f 	bl	8006e98 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800559a:	f000 feb5 	bl	8006308 <xTaskResumeAll>
			return errQUEUE_FULL;
 800559e:	2000      	movs	r0, #0
 80055a0:	e7ba      	b.n	8005518 <xQueueGenericSend+0x26c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80055a6:	f001 f88b 	bl	80066c0 <xTaskRemoveFromEventList>
 80055aa:	2800      	cmp	r0, #0
 80055ac:	d0b1      	beq.n	8005512 <xQueueGenericSend+0x266>
 80055ae:	e7a6      	b.n	80054fe <xQueueGenericSend+0x252>

080055b0 <xQueueReceive>:
{
 80055b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80055b4:	b085      	sub	sp, #20
 80055b6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80055b8:	2800      	cmp	r0, #0
 80055ba:	f000 815f 	beq.w	800587c <xQueueReceive+0x2cc>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055be:	460f      	mov	r7, r1
 80055c0:	4604      	mov	r4, r0
 80055c2:	2900      	cmp	r1, #0
 80055c4:	f000 8094 	beq.w	80056f0 <xQueueReceive+0x140>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055c8:	f001 f91e 	bl	8006808 <xTaskGetSchedulerState>
 80055cc:	2800      	cmp	r0, #0
 80055ce:	f000 809c 	beq.w	800570a <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 80055d2:	f001 fc3f 	bl	8006e54 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055d6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055d8:	2d00      	cmp	r5, #0
 80055da:	d172      	bne.n	80056c2 <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
 80055dc:	9b01      	ldr	r3, [sp, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 80f1 	beq.w	80057c6 <xQueueReceive+0x216>
		prvLockQueue( pxQueue );
 80055e4:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055e6:	f104 0624 	add.w	r6, r4, #36	; 0x24
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055ea:	a802      	add	r0, sp, #8
 80055ec:	f001 f8b2 	bl	8006754 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80055f0:	f001 fc52 	bl	8006e98 <vPortExitCritical>
		vTaskSuspendAll();
 80055f4:	f000 fe80 	bl	80062f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055f8:	f001 fc2c 	bl	8006e54 <vPortEnterCritical>
 80055fc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005600:	2bff      	cmp	r3, #255	; 0xff
 8005602:	d101      	bne.n	8005608 <xQueueReceive+0x58>
 8005604:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8005608:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800560c:	2bff      	cmp	r3, #255	; 0xff
 800560e:	d101      	bne.n	8005614 <xQueueReceive+0x64>
 8005610:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8005614:	f001 fc40 	bl	8006e98 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005618:	a901      	add	r1, sp, #4
 800561a:	a802      	add	r0, sp, #8
 800561c:	f001 f8a6 	bl	800676c <xTaskCheckForTimeOut>
 8005620:	2800      	cmp	r0, #0
 8005622:	d17f      	bne.n	8005724 <xQueueReceive+0x174>
	taskENTER_CRITICAL();
 8005624:	f001 fc16 	bl	8006e54 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005628:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 80d1 	beq.w	80057d2 <xQueueReceive+0x222>
	taskEXIT_CRITICAL();
 8005630:	f001 fc32 	bl	8006e98 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005634:	f001 fc0e 	bl	8006e54 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005638:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800563c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800563e:	2d00      	cmp	r5, #0
 8005640:	dc04      	bgt.n	800564c <xQueueReceive+0x9c>
 8005642:	e011      	b.n	8005668 <xQueueReceive+0xb8>
			--cTxLock;
 8005644:	1e6b      	subs	r3, r5, #1
 8005646:	b2da      	uxtb	r2, r3
 8005648:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800564a:	b16a      	cbz	r2, 8005668 <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800564c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800564e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005650:	b153      	cbz	r3, 8005668 <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005652:	f001 f835 	bl	80066c0 <xTaskRemoveFromEventList>
 8005656:	2800      	cmp	r0, #0
 8005658:	d0f4      	beq.n	8005644 <xQueueReceive+0x94>
						vTaskMissedYield();
 800565a:	f001 f8cf 	bl	80067fc <vTaskMissedYield>
			--cTxLock;
 800565e:	1e6b      	subs	r3, r5, #1
 8005660:	b2da      	uxtb	r2, r3
 8005662:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005664:	2a00      	cmp	r2, #0
 8005666:	d1f1      	bne.n	800564c <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
 8005668:	23ff      	movs	r3, #255	; 0xff
 800566a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800566e:	f001 fc13 	bl	8006e98 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005672:	f001 fbef 	bl	8006e54 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005676:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800567a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800567c:	2d00      	cmp	r5, #0
 800567e:	dd14      	ble.n	80056aa <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005680:	f104 0910 	add.w	r9, r4, #16
 8005684:	e003      	b.n	800568e <xQueueReceive+0xde>
				--cRxLock;
 8005686:	1e6b      	subs	r3, r5, #1
 8005688:	b2da      	uxtb	r2, r3
 800568a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800568c:	b16a      	cbz	r2, 80056aa <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800568e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005690:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005692:	b153      	cbz	r3, 80056aa <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005694:	f001 f814 	bl	80066c0 <xTaskRemoveFromEventList>
 8005698:	2800      	cmp	r0, #0
 800569a:	d0f4      	beq.n	8005686 <xQueueReceive+0xd6>
					vTaskMissedYield();
 800569c:	f001 f8ae 	bl	80067fc <vTaskMissedYield>
				--cRxLock;
 80056a0:	1e6b      	subs	r3, r5, #1
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056a6:	2a00      	cmp	r2, #0
 80056a8:	d1f1      	bne.n	800568e <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
 80056aa:	23ff      	movs	r3, #255	; 0xff
 80056ac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80056b0:	f001 fbf2 	bl	8006e98 <vPortExitCritical>
				( void ) xTaskResumeAll();
 80056b4:	f000 fe28 	bl	8006308 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80056b8:	f001 fbcc 	bl	8006e54 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056bc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056be:	2d00      	cmp	r5, #0
 80056c0:	d07d      	beq.n	80057be <xQueueReceive+0x20e>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80056c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80056c4:	b152      	cbz	r2, 80056dc <xQueueReceive+0x12c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056c6:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80056c8:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056ca:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80056cc:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056ce:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80056d0:	d301      	bcc.n	80056d6 <xQueueReceive+0x126>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80056d2:	6821      	ldr	r1, [r4, #0]
 80056d4:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056d6:	4638      	mov	r0, r7
 80056d8:	f001 fe36 	bl	8007348 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80056dc:	3d01      	subs	r5, #1
 80056de:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056e0:	6923      	ldr	r3, [r4, #16]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f040 80d3 	bne.w	800588e <xQueueReceive+0x2de>
				taskEXIT_CRITICAL();
 80056e8:	f001 fbd6 	bl	8006e98 <vPortExitCritical>
				return pdPASS;
 80056ec:	2001      	movs	r0, #1
 80056ee:	e06d      	b.n	80057cc <xQueueReceive+0x21c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056f0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f43f af68 	beq.w	80055c8 <xQueueReceive+0x18>
 80056f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	e7fe      	b.n	8005708 <xQueueReceive+0x158>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800570a:	9b01      	ldr	r3, [sp, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	f43f af60 	beq.w	80055d2 <xQueueReceive+0x22>
 8005712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005716:	f383 8811 	msr	BASEPRI, r3
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	e7fe      	b.n	8005722 <xQueueReceive+0x172>
	taskENTER_CRITICAL();
 8005724:	f001 fb96 	bl	8006e54 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005728:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800572c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800572e:	2d00      	cmp	r5, #0
 8005730:	dc04      	bgt.n	800573c <xQueueReceive+0x18c>
 8005732:	e011      	b.n	8005758 <xQueueReceive+0x1a8>
			--cTxLock;
 8005734:	1e6b      	subs	r3, r5, #1
 8005736:	b2da      	uxtb	r2, r3
 8005738:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800573a:	b16a      	cbz	r2, 8005758 <xQueueReceive+0x1a8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800573c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800573e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005740:	b153      	cbz	r3, 8005758 <xQueueReceive+0x1a8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005742:	f000 ffbd 	bl	80066c0 <xTaskRemoveFromEventList>
 8005746:	2800      	cmp	r0, #0
 8005748:	d0f4      	beq.n	8005734 <xQueueReceive+0x184>
						vTaskMissedYield();
 800574a:	f001 f857 	bl	80067fc <vTaskMissedYield>
			--cTxLock;
 800574e:	1e6b      	subs	r3, r5, #1
 8005750:	b2da      	uxtb	r2, r3
 8005752:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005754:	2a00      	cmp	r2, #0
 8005756:	d1f1      	bne.n	800573c <xQueueReceive+0x18c>
		pxQueue->cTxLock = queueUNLOCKED;
 8005758:	23ff      	movs	r3, #255	; 0xff
 800575a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800575e:	f001 fb9b 	bl	8006e98 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005762:	f001 fb77 	bl	8006e54 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005766:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800576a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800576c:	2d00      	cmp	r5, #0
 800576e:	dd14      	ble.n	800579a <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005770:	f104 0910 	add.w	r9, r4, #16
 8005774:	e003      	b.n	800577e <xQueueReceive+0x1ce>
				--cRxLock;
 8005776:	1e6b      	subs	r3, r5, #1
 8005778:	b2da      	uxtb	r2, r3
 800577a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800577c:	b16a      	cbz	r2, 800579a <xQueueReceive+0x1ea>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800577e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005780:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005782:	b153      	cbz	r3, 800579a <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005784:	f000 ff9c 	bl	80066c0 <xTaskRemoveFromEventList>
 8005788:	2800      	cmp	r0, #0
 800578a:	d0f4      	beq.n	8005776 <xQueueReceive+0x1c6>
					vTaskMissedYield();
 800578c:	f001 f836 	bl	80067fc <vTaskMissedYield>
				--cRxLock;
 8005790:	1e6b      	subs	r3, r5, #1
 8005792:	b2da      	uxtb	r2, r3
 8005794:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005796:	2a00      	cmp	r2, #0
 8005798:	d1f1      	bne.n	800577e <xQueueReceive+0x1ce>
		pxQueue->cRxLock = queueUNLOCKED;
 800579a:	23ff      	movs	r3, #255	; 0xff
 800579c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80057a0:	f001 fb7a 	bl	8006e98 <vPortExitCritical>
			( void ) xTaskResumeAll();
 80057a4:	f000 fdb0 	bl	8006308 <xTaskResumeAll>
	taskENTER_CRITICAL();
 80057a8:	f001 fb54 	bl	8006e54 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80057ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80057ae:	b153      	cbz	r3, 80057c6 <xQueueReceive+0x216>
	taskEXIT_CRITICAL();
 80057b0:	f001 fb72 	bl	8006e98 <vPortExitCritical>
		taskENTER_CRITICAL();
 80057b4:	f001 fb4e 	bl	8006e54 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057b8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057ba:	2d00      	cmp	r5, #0
 80057bc:	d181      	bne.n	80056c2 <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
 80057be:	9b01      	ldr	r3, [sp, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f47f af15 	bne.w	80055f0 <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
 80057c6:	f001 fb67 	bl	8006e98 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80057ca:	2000      	movs	r0, #0
}
 80057cc:	b005      	add	sp, #20
 80057ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 80057d2:	f001 fb61 	bl	8006e98 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057d6:	9901      	ldr	r1, [sp, #4]
 80057d8:	4630      	mov	r0, r6
 80057da:	f000 fee3 	bl	80065a4 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 80057de:	f001 fb39 	bl	8006e54 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80057e2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80057e6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057e8:	2d00      	cmp	r5, #0
 80057ea:	dc04      	bgt.n	80057f6 <xQueueReceive+0x246>
 80057ec:	e011      	b.n	8005812 <xQueueReceive+0x262>
			--cTxLock;
 80057ee:	1e6b      	subs	r3, r5, #1
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057f4:	b16a      	cbz	r2, 8005812 <xQueueReceive+0x262>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057f8:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057fa:	b153      	cbz	r3, 8005812 <xQueueReceive+0x262>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057fc:	f000 ff60 	bl	80066c0 <xTaskRemoveFromEventList>
 8005800:	2800      	cmp	r0, #0
 8005802:	d0f4      	beq.n	80057ee <xQueueReceive+0x23e>
						vTaskMissedYield();
 8005804:	f000 fffa 	bl	80067fc <vTaskMissedYield>
			--cTxLock;
 8005808:	1e6b      	subs	r3, r5, #1
 800580a:	b2da      	uxtb	r2, r3
 800580c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800580e:	2a00      	cmp	r2, #0
 8005810:	d1f1      	bne.n	80057f6 <xQueueReceive+0x246>
		pxQueue->cTxLock = queueUNLOCKED;
 8005812:	23ff      	movs	r3, #255	; 0xff
 8005814:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005818:	f001 fb3e 	bl	8006e98 <vPortExitCritical>
	taskENTER_CRITICAL();
 800581c:	f001 fb1a 	bl	8006e54 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005820:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005824:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005826:	2d00      	cmp	r5, #0
 8005828:	dd14      	ble.n	8005854 <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800582a:	f104 0910 	add.w	r9, r4, #16
 800582e:	e003      	b.n	8005838 <xQueueReceive+0x288>
				--cRxLock;
 8005830:	1e6b      	subs	r3, r5, #1
 8005832:	b2da      	uxtb	r2, r3
 8005834:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005836:	b16a      	cbz	r2, 8005854 <xQueueReceive+0x2a4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005838:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800583a:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800583c:	b153      	cbz	r3, 8005854 <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800583e:	f000 ff3f 	bl	80066c0 <xTaskRemoveFromEventList>
 8005842:	2800      	cmp	r0, #0
 8005844:	d0f4      	beq.n	8005830 <xQueueReceive+0x280>
					vTaskMissedYield();
 8005846:	f000 ffd9 	bl	80067fc <vTaskMissedYield>
				--cRxLock;
 800584a:	1e6b      	subs	r3, r5, #1
 800584c:	b2da      	uxtb	r2, r3
 800584e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005850:	2a00      	cmp	r2, #0
 8005852:	d1f1      	bne.n	8005838 <xQueueReceive+0x288>
		pxQueue->cRxLock = queueUNLOCKED;
 8005854:	23ff      	movs	r3, #255	; 0xff
 8005856:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800585a:	f001 fb1d 	bl	8006e98 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800585e:	f000 fd53 	bl	8006308 <xTaskResumeAll>
 8005862:	2800      	cmp	r0, #0
 8005864:	d1a6      	bne.n	80057b4 <xQueueReceive+0x204>
					portYIELD_WITHIN_API();
 8005866:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800586a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800586e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 800587a:	e79b      	b.n	80057b4 <xQueueReceive+0x204>
 800587c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800588c:	e7fe      	b.n	800588c <xQueueReceive+0x2dc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800588e:	f104 0010 	add.w	r0, r4, #16
 8005892:	f000 ff15 	bl	80066c0 <xTaskRemoveFromEventList>
 8005896:	2800      	cmp	r0, #0
 8005898:	f43f af26 	beq.w	80056e8 <xQueueReceive+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800589c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80058a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	e71a      	b.n	80056e8 <xQueueReceive+0x138>
 80058b2:	bf00      	nop

080058b4 <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80058b4:	4b12      	ldr	r3, [pc, #72]	; (8005900 <vQueueAddToRegistry+0x4c>)
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	b17a      	cbz	r2, 80058da <vQueueAddToRegistry+0x26>
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	b162      	cbz	r2, 80058d8 <vQueueAddToRegistry+0x24>
 80058be:	691a      	ldr	r2, [r3, #16]
 80058c0:	b192      	cbz	r2, 80058e8 <vQueueAddToRegistry+0x34>
 80058c2:	699a      	ldr	r2, [r3, #24]
 80058c4:	b192      	cbz	r2, 80058ec <vQueueAddToRegistry+0x38>
 80058c6:	6a1a      	ldr	r2, [r3, #32]
 80058c8:	b192      	cbz	r2, 80058f0 <vQueueAddToRegistry+0x3c>
 80058ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058cc:	b192      	cbz	r2, 80058f4 <vQueueAddToRegistry+0x40>
 80058ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058d0:	b192      	cbz	r2, 80058f8 <vQueueAddToRegistry+0x44>
 80058d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058d4:	b192      	cbz	r2, 80058fc <vQueueAddToRegistry+0x48>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80058d6:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058d8:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
 80058da:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80058de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80058e2:	f8cc 0004 	str.w	r0, [ip, #4]
	}
 80058e6:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058e8:	2202      	movs	r2, #2
 80058ea:	e7f6      	b.n	80058da <vQueueAddToRegistry+0x26>
 80058ec:	2203      	movs	r2, #3
 80058ee:	e7f4      	b.n	80058da <vQueueAddToRegistry+0x26>
 80058f0:	2204      	movs	r2, #4
 80058f2:	e7f2      	b.n	80058da <vQueueAddToRegistry+0x26>
 80058f4:	2205      	movs	r2, #5
 80058f6:	e7f0      	b.n	80058da <vQueueAddToRegistry+0x26>
 80058f8:	2206      	movs	r2, #6
 80058fa:	e7ee      	b.n	80058da <vQueueAddToRegistry+0x26>
 80058fc:	2207      	movs	r2, #7
 80058fe:	e7ec      	b.n	80058da <vQueueAddToRegistry+0x26>
 8005900:	2404ee50 	.word	0x2404ee50

08005904 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005904:	b570      	push	{r4, r5, r6, lr}
 8005906:	4605      	mov	r5, r0
 8005908:	460e      	mov	r6, r1
 800590a:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800590c:	f001 faa2 	bl	8006e54 <vPortEnterCritical>
 8005910:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8005914:	2bff      	cmp	r3, #255	; 0xff
 8005916:	d102      	bne.n	800591e <vQueueWaitForMessageRestricted+0x1a>
 8005918:	2300      	movs	r3, #0
 800591a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 800591e:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8005922:	2bff      	cmp	r3, #255	; 0xff
 8005924:	d102      	bne.n	800592c <vQueueWaitForMessageRestricted+0x28>
 8005926:	2300      	movs	r3, #0
 8005928:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 800592c:	f001 fab4 	bl	8006e98 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005930:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005932:	2b00      	cmp	r3, #0
 8005934:	d043      	beq.n	80059be <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
 8005936:	f001 fa8d 	bl	8006e54 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800593a:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800593e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005940:	2c00      	cmp	r4, #0
 8005942:	dd14      	ble.n	800596e <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005944:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8005948:	e003      	b.n	8005952 <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
 800594a:	1e63      	subs	r3, r4, #1
 800594c:	b2da      	uxtb	r2, r3
 800594e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005950:	b16a      	cbz	r2, 800596e <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005952:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005954:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005956:	b153      	cbz	r3, 800596e <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005958:	f000 feb2 	bl	80066c0 <xTaskRemoveFromEventList>
 800595c:	2800      	cmp	r0, #0
 800595e:	d0f4      	beq.n	800594a <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 8005960:	f000 ff4c 	bl	80067fc <vTaskMissedYield>
			--cTxLock;
 8005964:	1e63      	subs	r3, r4, #1
 8005966:	b2da      	uxtb	r2, r3
 8005968:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800596a:	2a00      	cmp	r2, #0
 800596c:	d1f1      	bne.n	8005952 <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 800596e:	23ff      	movs	r3, #255	; 0xff
 8005970:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005974:	f001 fa90 	bl	8006e98 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005978:	f001 fa6c 	bl	8006e54 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800597c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8005980:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005982:	2c00      	cmp	r4, #0
 8005984:	dd14      	ble.n	80059b0 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005986:	f105 0610 	add.w	r6, r5, #16
 800598a:	e003      	b.n	8005994 <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
 800598c:	1e63      	subs	r3, r4, #1
 800598e:	b2da      	uxtb	r2, r3
 8005990:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005992:	b16a      	cbz	r2, 80059b0 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005994:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005996:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005998:	b153      	cbz	r3, 80059b0 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800599a:	f000 fe91 	bl	80066c0 <xTaskRemoveFromEventList>
 800599e:	2800      	cmp	r0, #0
 80059a0:	d0f4      	beq.n	800598c <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
 80059a2:	f000 ff2b 	bl	80067fc <vTaskMissedYield>
				--cRxLock;
 80059a6:	1e63      	subs	r3, r4, #1
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059ac:	2a00      	cmp	r2, #0
 80059ae:	d1f1      	bne.n	8005994 <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
 80059b0:	23ff      	movs	r3, #255	; 0xff
 80059b2:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 80059b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80059ba:	f001 ba6d 	b.w	8006e98 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80059be:	4622      	mov	r2, r4
 80059c0:	4631      	mov	r1, r6
 80059c2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80059c6:	f000 fe31 	bl	800662c <vTaskPlaceOnEventListRestricted>
 80059ca:	e7b4      	b.n	8005936 <vQueueWaitForMessageRestricted+0x32>

080059cc <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059d0:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059d2:	f001 fa3f 	bl	8006e54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059d6:	4a34      	ldr	r2, [pc, #208]	; (8005aa8 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 80059d8:	4e34      	ldr	r6, [pc, #208]	; (8005aac <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 80059da:	6813      	ldr	r3, [r2, #0]
 80059dc:	3301      	adds	r3, #1
 80059de:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059e0:	6833      	ldr	r3, [r6, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d032      	beq.n	8005a4c <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80059e6:	4c32      	ldr	r4, [pc, #200]	; (8005ab0 <prvAddNewTaskToReadyList+0xe4>)
 80059e8:	6823      	ldr	r3, [r4, #0]
 80059ea:	b33b      	cbz	r3, 8005a3c <prvAddNewTaskToReadyList+0x70>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80059ec:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80059ee:	4f31      	ldr	r7, [pc, #196]	; (8005ab4 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 80059f0:	4a31      	ldr	r2, [pc, #196]	; (8005ab8 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 80059f2:	4932      	ldr	r1, [pc, #200]	; (8005abc <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 80059f4:	6813      	ldr	r3, [r2, #0]
 80059f6:	3301      	adds	r3, #1
 80059f8:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80059fa:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80059fc:	680b      	ldr	r3, [r1, #0]
 80059fe:	4283      	cmp	r3, r0
 8005a00:	d200      	bcs.n	8005a04 <prvAddNewTaskToReadyList+0x38>
 8005a02:	6008      	str	r0, [r1, #0]
 8005a04:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a08:	1d29      	adds	r1, r5, #4
 8005a0a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8005a0e:	f7ff fb63 	bl	80050d8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a12:	f001 fa41 	bl	8006e98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	b173      	cbz	r3, 8005a38 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a1a:	6832      	ldr	r2, [r6, #0]
 8005a1c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005a1e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d209      	bcs.n	8005a38 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a24:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005a28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a2c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a3c:	6833      	ldr	r3, [r6, #0]
 8005a3e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8005a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a42:	4f1c      	ldr	r7, [pc, #112]	; (8005ab4 <prvAddNewTaskToReadyList+0xe8>)
 8005a44:	4283      	cmp	r3, r0
 8005a46:	d8d3      	bhi.n	80059f0 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
 8005a48:	6035      	str	r5, [r6, #0]
 8005a4a:	e7d1      	b.n	80059f0 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 8005a4c:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a4e:	6813      	ldr	r3, [r2, #0]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d003      	beq.n	8005a5c <prvAddNewTaskToReadyList+0x90>
		prvAddTaskToReadyList( pxNewTCB );
 8005a54:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8005a56:	4f17      	ldr	r7, [pc, #92]	; (8005ab4 <prvAddNewTaskToReadyList+0xe8>)
 8005a58:	4c15      	ldr	r4, [pc, #84]	; (8005ab0 <prvAddNewTaskToReadyList+0xe4>)
 8005a5a:	e7c9      	b.n	80059f0 <prvAddNewTaskToReadyList+0x24>
 8005a5c:	4f15      	ldr	r7, [pc, #84]	; (8005ab4 <prvAddNewTaskToReadyList+0xe8>)
 8005a5e:	463c      	mov	r4, r7
 8005a60:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a64:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a66:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a68:	f7ff fb26 	bl	80050b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a6c:	45a0      	cmp	r8, r4
 8005a6e:	d1f9      	bne.n	8005a64 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a70:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8005ad4 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 8005a74:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8005ad8 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
 8005a78:	4648      	mov	r0, r9
 8005a7a:	4c0d      	ldr	r4, [pc, #52]	; (8005ab0 <prvAddNewTaskToReadyList+0xe4>)
 8005a7c:	f7ff fb1c 	bl	80050b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a80:	4640      	mov	r0, r8
 8005a82:	f7ff fb19 	bl	80050b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a86:	480e      	ldr	r0, [pc, #56]	; (8005ac0 <prvAddNewTaskToReadyList+0xf4>)
 8005a88:	f7ff fb16 	bl	80050b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a8c:	480d      	ldr	r0, [pc, #52]	; (8005ac4 <prvAddNewTaskToReadyList+0xf8>)
 8005a8e:	f7ff fb13 	bl	80050b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a92:	480d      	ldr	r0, [pc, #52]	; (8005ac8 <prvAddNewTaskToReadyList+0xfc>)
 8005a94:	f7ff fb10 	bl	80050b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a98:	4b0c      	ldr	r3, [pc, #48]	; (8005acc <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
 8005a9a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a9c:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005aa0:	4b0b      	ldr	r3, [pc, #44]	; (8005ad0 <prvAddNewTaskToReadyList+0x104>)
 8005aa2:	f8c3 8000 	str.w	r8, [r3]
}
 8005aa6:	e7a3      	b.n	80059f0 <prvAddNewTaskToReadyList+0x24>
 8005aa8:	2404f300 	.word	0x2404f300
 8005aac:	2404ee90 	.word	0x2404ee90
 8005ab0:	2404f35c 	.word	0x2404f35c
 8005ab4:	2404ee9c 	.word	0x2404ee9c
 8005ab8:	2404f30c 	.word	0x2404f30c
 8005abc:	2404f310 	.word	0x2404f310
 8005ac0:	2404f348 	.word	0x2404f348
 8005ac4:	2404f374 	.word	0x2404f374
 8005ac8:	2404f360 	.word	0x2404f360
 8005acc:	2404ee94 	.word	0x2404ee94
 8005ad0:	2404ee98 	.word	0x2404ee98
 8005ad4:	2404f314 	.word	0x2404f314
 8005ad8:	2404f328 	.word	0x2404f328

08005adc <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ae2:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005ae6:	4606      	mov	r6, r0
 8005ae8:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005aea:	464a      	mov	r2, r9
 8005aec:	21a5      	movs	r1, #165	; 0xa5
 8005aee:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005af0:	461f      	mov	r7, r3
 8005af2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005af6:	f1a9 0904 	sub.w	r9, r9, #4
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005afa:	f001 fc33 	bl	8007364 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005afe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005b00:	4499      	add	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b02:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 8005b06:	2d00      	cmp	r5, #0
 8005b08:	d07f      	beq.n	8005c0a <prvInitialiseNewTask.constprop.0+0x12e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b0a:	782b      	ldrb	r3, [r5, #0]
 8005b0c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8005b10:	782b      	ldrb	r3, [r5, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d04d      	beq.n	8005bb2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b16:	786b      	ldrb	r3, [r5, #1]
 8005b18:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 8005b1c:	786b      	ldrb	r3, [r5, #1]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d047      	beq.n	8005bb2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b22:	78ab      	ldrb	r3, [r5, #2]
 8005b24:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 8005b28:	78ab      	ldrb	r3, [r5, #2]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d041      	beq.n	8005bb2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b2e:	78eb      	ldrb	r3, [r5, #3]
 8005b30:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 8005b34:	78eb      	ldrb	r3, [r5, #3]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d03b      	beq.n	8005bb2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b3a:	792b      	ldrb	r3, [r5, #4]
 8005b3c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 8005b40:	792b      	ldrb	r3, [r5, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d035      	beq.n	8005bb2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b46:	796b      	ldrb	r3, [r5, #5]
 8005b48:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 8005b4c:	796b      	ldrb	r3, [r5, #5]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d02f      	beq.n	8005bb2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b52:	79ab      	ldrb	r3, [r5, #6]
 8005b54:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 8005b58:	79ab      	ldrb	r3, [r5, #6]
 8005b5a:	b353      	cbz	r3, 8005bb2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b5c:	79eb      	ldrb	r3, [r5, #7]
 8005b5e:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 8005b62:	79eb      	ldrb	r3, [r5, #7]
 8005b64:	b32b      	cbz	r3, 8005bb2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b66:	7a2b      	ldrb	r3, [r5, #8]
 8005b68:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 8005b6c:	7a2b      	ldrb	r3, [r5, #8]
 8005b6e:	b303      	cbz	r3, 8005bb2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b70:	7a6b      	ldrb	r3, [r5, #9]
 8005b72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 8005b76:	7a6b      	ldrb	r3, [r5, #9]
 8005b78:	b1db      	cbz	r3, 8005bb2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b7a:	7aab      	ldrb	r3, [r5, #10]
 8005b7c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 8005b80:	7aab      	ldrb	r3, [r5, #10]
 8005b82:	b1b3      	cbz	r3, 8005bb2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b84:	7aeb      	ldrb	r3, [r5, #11]
 8005b86:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 8005b8a:	7aeb      	ldrb	r3, [r5, #11]
 8005b8c:	b18b      	cbz	r3, 8005bb2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b8e:	7b2b      	ldrb	r3, [r5, #12]
 8005b90:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 8005b94:	7b2b      	ldrb	r3, [r5, #12]
 8005b96:	b163      	cbz	r3, 8005bb2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b98:	7b6b      	ldrb	r3, [r5, #13]
 8005b9a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 8005b9e:	7b6b      	ldrb	r3, [r5, #13]
 8005ba0:	b13b      	cbz	r3, 8005bb2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ba2:	7bab      	ldrb	r3, [r5, #14]
 8005ba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
 8005ba8:	7bab      	ldrb	r3, [r5, #14]
 8005baa:	b113      	cbz	r3, 8005bb2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005bac:	7beb      	ldrb	r3, [r5, #15]
 8005bae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005bb8:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8005bba:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005bbe:	1d20      	adds	r0, r4, #4
 8005bc0:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8005bc2:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 8005bc6:	bf28      	it	cs
 8005bc8:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8005bca:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005bcc:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bce:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005bd2:	f7ff fa7d 	bl	80050d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005bd6:	f104 0018 	add.w	r0, r4, #24
 8005bda:	f7ff fa79 	bl	80050d0 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8005bde:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005be2:	463a      	mov	r2, r7
 8005be4:	4631      	mov	r1, r6
 8005be6:	4648      	mov	r0, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005be8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005bea:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005bec:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 8005bee:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bf2:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005bf6:	f001 f8fd 	bl	8006df4 <pxPortInitialiseStack>
 8005bfa:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8005bfc:	f1b8 0f00 	cmp.w	r8, #0
 8005c00:	d001      	beq.n	8005c06 <prvInitialiseNewTask.constprop.0+0x12a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c02:	f8c8 4000 	str.w	r4, [r8]
}
 8005c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c0a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8005c0e:	e7d3      	b.n	8005bb8 <prvInitialiseNewTask.constprop.0+0xdc>

08005c10 <prvIdleTask>:
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	4c21      	ldr	r4, [pc, #132]	; (8005c98 <prvIdleTask+0x88>)
				taskYIELD();
 8005c14:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8005c18:	4e20      	ldr	r6, [pc, #128]	; (8005c9c <prvIdleTask+0x8c>)
 8005c1a:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
 8005c1e:	4d20      	ldr	r5, [pc, #128]	; (8005ca0 <prvIdleTask+0x90>)
 8005c20:	4f20      	ldr	r7, [pc, #128]	; (8005ca4 <prvIdleTask+0x94>)
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	b353      	cbz	r3, 8005c7c <prvIdleTask+0x6c>
		{
			taskENTER_CRITICAL();
 8005c26:	f001 f915 	bl	8006e54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c2a:	68f3      	ldr	r3, [r6, #12]
 8005c2c:	f8d3 a00c 	ldr.w	sl, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c30:	f10a 0004 	add.w	r0, sl, #4
 8005c34:	f7ff fa78 	bl	8005128 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c38:	682b      	ldr	r3, [r5, #0]
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	3b01      	subs	r3, #1
 8005c42:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
 8005c44:	f001 f928 	bl	8006e98 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c48:	f89a 305d 	ldrb.w	r3, [sl, #93]	; 0x5d
 8005c4c:	b163      	cbz	r3, 8005c68 <prvIdleTask+0x58>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d01e      	beq.n	8005c90 <prvIdleTask+0x80>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d0e5      	beq.n	8005c22 <prvIdleTask+0x12>
 8005c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	e7fe      	b.n	8005c66 <prvIdleTask+0x56>
				vPortFree( pxTCB->pxStack );
 8005c68:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
 8005c6c:	f001 fae0 	bl	8007230 <vPortFree>
				vPortFree( pxTCB );
 8005c70:	4650      	mov	r0, sl
 8005c72:	f001 fadd 	bl	8007230 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1d4      	bne.n	8005c26 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d9cf      	bls.n	8005c22 <prvIdleTask+0x12>
				taskYIELD();
 8005c82:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	e7c8      	b.n	8005c22 <prvIdleTask+0x12>
				vPortFree( pxTCB );
 8005c90:	4650      	mov	r0, sl
 8005c92:	f001 facd 	bl	8007230 <vPortFree>
 8005c96:	e7c4      	b.n	8005c22 <prvIdleTask+0x12>
 8005c98:	2404f304 	.word	0x2404f304
 8005c9c:	2404f374 	.word	0x2404f374
 8005ca0:	2404f300 	.word	0x2404f300
 8005ca4:	2404ee9c 	.word	0x2404ee9c

08005ca8 <xTaskIncrementTick.part.0>:
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ca8:	4b4a      	ldr	r3, [pc, #296]	; (8005dd4 <xTaskIncrementTick.part.0+0x12c>)
BaseType_t xTaskIncrementTick( void )
 8005caa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005cae:	681e      	ldr	r6, [r3, #0]
BaseType_t xTaskIncrementTick( void )
 8005cb0:	b083      	sub	sp, #12
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005cb2:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8005cb4:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cb6:	2e00      	cmp	r6, #0
 8005cb8:	d040      	beq.n	8005d3c <xTaskIncrementTick.part.0+0x94>
 8005cba:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8005de8 <xTaskIncrementTick.part.0+0x140>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005cbe:	f8db 3000 	ldr.w	r3, [fp]
 8005cc2:	429e      	cmp	r6, r3
 8005cc4:	d347      	bcc.n	8005d56 <xTaskIncrementTick.part.0+0xae>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cc6:	4f44      	ldr	r7, [pc, #272]	; (8005dd8 <xTaskIncrementTick.part.0+0x130>)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681d      	ldr	r5, [r3, #0]
 8005ccc:	2d00      	cmp	r5, #0
 8005cce:	d077      	beq.n	8005dc0 <xTaskIncrementTick.part.0+0x118>
BaseType_t xSwitchRequired = pdFALSE;
 8005cd0:	2500      	movs	r5, #0
 8005cd2:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8005dec <xTaskIncrementTick.part.0+0x144>
 8005cd6:	f8df a118 	ldr.w	sl, [pc, #280]	; 8005df0 <xTaskIncrementTick.part.0+0x148>
					prvAddTaskToReadyList( pxTCB );
 8005cda:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8005df4 <xTaskIncrementTick.part.0+0x14c>
 8005cde:	e022      	b.n	8005d26 <xTaskIncrementTick.part.0+0x7e>
 8005ce0:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ce2:	f7ff fa21 	bl	8005128 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ce6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ce8:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005cec:	9901      	ldr	r1, [sp, #4]
 8005cee:	b113      	cbz	r3, 8005cf6 <xTaskIncrementTick.part.0+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cf0:	f7ff fa1a 	bl	8005128 <uxListRemove>
 8005cf4:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8005cf6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005cf8:	f8d8 2000 	ldr.w	r2, [r8]
 8005cfc:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8005d00:	4293      	cmp	r3, r2
 8005d02:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8005d06:	d901      	bls.n	8005d0c <xTaskIncrementTick.part.0+0x64>
 8005d08:	f8c8 3000 	str.w	r3, [r8]
 8005d0c:	f7ff f9e4 	bl	80050d8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d10:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d14:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d16:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005d18:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d1a:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
 8005d1c:	4291      	cmp	r1, r2
 8005d1e:	bf28      	it	cs
 8005d20:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d050      	beq.n	8005dc8 <xTaskIncrementTick.part.0+0x120>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d2c:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d2e:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
 8005d30:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d32:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 8005d34:	d2d4      	bcs.n	8005ce0 <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
 8005d36:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d3a:	e011      	b.n	8005d60 <xTaskIncrementTick.part.0+0xb8>
			taskSWITCH_DELAYED_LISTS();
 8005d3c:	4b26      	ldr	r3, [pc, #152]	; (8005dd8 <xTaskIncrementTick.part.0+0x130>)
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	6812      	ldr	r2, [r2, #0]
 8005d42:	b30a      	cbz	r2, 8005d88 <xTaskIncrementTick.part.0+0xe0>
 8005d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	e7fe      	b.n	8005d54 <xTaskIncrementTick.part.0+0xac>
BaseType_t xSwitchRequired = pdFALSE;
 8005d56:	2500      	movs	r5, #0
 8005d58:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8005dec <xTaskIncrementTick.part.0+0x144>
 8005d5c:	f8df a090 	ldr.w	sl, [pc, #144]	; 8005df0 <xTaskIncrementTick.part.0+0x148>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d60:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
 8005d64:	491d      	ldr	r1, [pc, #116]	; (8005ddc <xTaskIncrementTick.part.0+0x134>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d68:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
 8005d72:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8005d74:	2a02      	cmp	r2, #2
 8005d76:	bf28      	it	cs
 8005d78:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 8005d7a:	2b00      	cmp	r3, #0
}
 8005d7c:	bf0c      	ite	eq
 8005d7e:	4628      	moveq	r0, r5
 8005d80:	2001      	movne	r0, #1
 8005d82:	b003      	add	sp, #12
 8005d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8005d88:	4a15      	ldr	r2, [pc, #84]	; (8005de0 <xTaskIncrementTick.part.0+0x138>)
 8005d8a:	6818      	ldr	r0, [r3, #0]
 8005d8c:	6811      	ldr	r1, [r2, #0]
 8005d8e:	6019      	str	r1, [r3, #0]
 8005d90:	4914      	ldr	r1, [pc, #80]	; (8005de4 <xTaskIncrementTick.part.0+0x13c>)
 8005d92:	6010      	str	r0, [r2, #0]
 8005d94:	680a      	ldr	r2, [r1, #0]
 8005d96:	3201      	adds	r2, #1
 8005d98:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	6812      	ldr	r2, [r2, #0]
 8005d9e:	b932      	cbnz	r2, 8005dae <xTaskIncrementTick.part.0+0x106>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005da0:	f8df b044 	ldr.w	fp, [pc, #68]	; 8005de8 <xTaskIncrementTick.part.0+0x140>
 8005da4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005da8:	f8cb 3000 	str.w	r3, [fp]
 8005dac:	e787      	b.n	8005cbe <xTaskIncrementTick.part.0+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dae:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005db0:	f8df b034 	ldr.w	fp, [pc, #52]	; 8005de8 <xTaskIncrementTick.part.0+0x140>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005db4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f8cb 3000 	str.w	r3, [fp]
	}
}
 8005dbe:	e77e      	b.n	8005cbe <xTaskIncrementTick.part.0+0x16>
 8005dc0:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8005dec <xTaskIncrementTick.part.0+0x144>
 8005dc4:	f8df a028 	ldr.w	sl, [pc, #40]	; 8005df0 <xTaskIncrementTick.part.0+0x148>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dcc:	f8cb 3000 	str.w	r3, [fp]
					break;
 8005dd0:	e7c6      	b.n	8005d60 <xTaskIncrementTick.part.0+0xb8>
 8005dd2:	bf00      	nop
 8005dd4:	2404f388 	.word	0x2404f388
 8005dd8:	2404ee94 	.word	0x2404ee94
 8005ddc:	2404f38c 	.word	0x2404f38c
 8005de0:	2404ee98 	.word	0x2404ee98
 8005de4:	2404f340 	.word	0x2404f340
 8005de8:	2404f33c 	.word	0x2404f33c
 8005dec:	2404ee9c 	.word	0x2404ee9c
 8005df0:	2404ee90 	.word	0x2404ee90
 8005df4:	2404f310 	.word	0x2404f310

08005df8 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8005df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
 8005dfc:	4d41      	ldr	r5, [pc, #260]	; (8005f04 <xTaskResumeAll.part.0+0x10c>)
BaseType_t xTaskResumeAll( void )
 8005dfe:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8005e00:	f001 f828 	bl	8006e54 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005e04:	682b      	ldr	r3, [r5, #0]
 8005e06:	3b01      	subs	r3, #1
 8005e08:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e0a:	682b      	ldr	r3, [r5, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d161      	bne.n	8005ed4 <xTaskResumeAll.part.0+0xdc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e10:	4b3d      	ldr	r3, [pc, #244]	; (8005f08 <xTaskResumeAll.part.0+0x110>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d05d      	beq.n	8005ed4 <xTaskResumeAll.part.0+0xdc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e18:	4e3c      	ldr	r6, [pc, #240]	; (8005f0c <xTaskResumeAll.part.0+0x114>)
 8005e1a:	6833      	ldr	r3, [r6, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d06e      	beq.n	8005efe <xTaskResumeAll.part.0+0x106>
 8005e20:	4f3b      	ldr	r7, [pc, #236]	; (8005f10 <xTaskResumeAll.part.0+0x118>)
 8005e22:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8005f20 <xTaskResumeAll.part.0+0x128>
 8005e26:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8005f24 <xTaskResumeAll.part.0+0x12c>
 8005e2a:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8005f28 <xTaskResumeAll.part.0+0x130>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e2e:	68f3      	ldr	r3, [r6, #12]
 8005e30:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e32:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e36:	f104 0018 	add.w	r0, r4, #24
 8005e3a:	f7ff f975 	bl	8005128 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e3e:	4658      	mov	r0, fp
 8005e40:	f7ff f972 	bl	8005128 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	4659      	mov	r1, fp
 8005e4a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8005e54:	d900      	bls.n	8005e58 <xTaskResumeAll.part.0+0x60>
 8005e56:	603b      	str	r3, [r7, #0]
 8005e58:	f7ff f93e 	bl	80050d8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8005e60:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d33d      	bcc.n	8005ee4 <xTaskResumeAll.part.0+0xec>
						xYieldPending = pdTRUE;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e6e:	6833      	ldr	r3, [r6, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1dc      	bne.n	8005e2e <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e74:	4b27      	ldr	r3, [pc, #156]	; (8005f14 <xTaskResumeAll.part.0+0x11c>)
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	6812      	ldr	r2, [r2, #0]
 8005e7a:	2a00      	cmp	r2, #0
 8005e7c:	d03a      	beq.n	8005ef4 <xTaskResumeAll.part.0+0xfc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e7e:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e80:	4b25      	ldr	r3, [pc, #148]	; (8005f18 <xTaskResumeAll.part.0+0x120>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e82:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e84:	68d2      	ldr	r2, [r2, #12]
 8005e86:	6852      	ldr	r2, [r2, #4]
 8005e88:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005e8a:	4e24      	ldr	r6, [pc, #144]	; (8005f1c <xTaskResumeAll.part.0+0x124>)
 8005e8c:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8005e8e:	b194      	cbz	r4, 8005eb6 <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
 8005e90:	2701      	movs	r7, #1
 8005e92:	e006      	b.n	8005ea2 <xTaskResumeAll.part.0+0xaa>
 8005e94:	f7ff ff08 	bl	8005ca8 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 8005e98:	b108      	cbz	r0, 8005e9e <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
 8005e9a:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005e9e:	3c01      	subs	r4, #1
 8005ea0:	d008      	beq.n	8005eb4 <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ea2:	682b      	ldr	r3, [r5, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d0f5      	beq.n	8005e94 <xTaskResumeAll.part.0+0x9c>
		++xPendedTicks;
 8005ea8:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005eaa:	3c01      	subs	r4, #1
		++xPendedTicks;
 8005eac:	f103 0301 	add.w	r3, r3, #1
 8005eb0:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005eb2:	d1f6      	bne.n	8005ea2 <xTaskResumeAll.part.0+0xaa>
						xPendedTicks = 0;
 8005eb4:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8005eb6:	f8da 3000 	ldr.w	r3, [sl]
 8005eba:	b15b      	cbz	r3, 8005ed4 <xTaskResumeAll.part.0+0xdc>
					taskYIELD_IF_USING_PREEMPTION();
 8005ebc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ec4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005ed0:	2001      	movs	r0, #1
 8005ed2:	e000      	b.n	8005ed6 <xTaskResumeAll.part.0+0xde>
BaseType_t xAlreadyYielded = pdFALSE;
 8005ed4:	2000      	movs	r0, #0
 8005ed6:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8005ed8:	f000 ffde 	bl	8006e98 <vPortExitCritical>
}
 8005edc:	9801      	ldr	r0, [sp, #4]
 8005ede:	b003      	add	sp, #12
 8005ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ee4:	6833      	ldr	r3, [r6, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1a1      	bne.n	8005e2e <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eea:	4b0a      	ldr	r3, [pc, #40]	; (8005f14 <xTaskResumeAll.part.0+0x11c>)
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	6812      	ldr	r2, [r2, #0]
 8005ef0:	2a00      	cmp	r2, #0
 8005ef2:	d1c4      	bne.n	8005e7e <xTaskResumeAll.part.0+0x86>
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ef4:	4b08      	ldr	r3, [pc, #32]	; (8005f18 <xTaskResumeAll.part.0+0x120>)
 8005ef6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	e7c5      	b.n	8005e8a <xTaskResumeAll.part.0+0x92>
 8005efe:	f8df a028 	ldr.w	sl, [pc, #40]	; 8005f28 <xTaskResumeAll.part.0+0x130>
 8005f02:	e7c2      	b.n	8005e8a <xTaskResumeAll.part.0+0x92>
 8005f04:	2404f308 	.word	0x2404f308
 8005f08:	2404f300 	.word	0x2404f300
 8005f0c:	2404f348 	.word	0x2404f348
 8005f10:	2404f310 	.word	0x2404f310
 8005f14:	2404ee94 	.word	0x2404ee94
 8005f18:	2404f33c 	.word	0x2404f33c
 8005f1c:	2404f344 	.word	0x2404f344
 8005f20:	2404ee9c 	.word	0x2404ee9c
 8005f24:	2404ee90 	.word	0x2404ee90
 8005f28:	2404f38c 	.word	0x2404f38c

08005f2c <prvListTasksWithinSingleList.part.0>:
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f2c:	684b      	ldr	r3, [r1, #4]
	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 8005f2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f101 0708 	add.w	r7, r1, #8
 8005f38:	4604      	mov	r4, r0
	UBaseType_t uxTask = 0;
 8005f3a:	2600      	movs	r6, #0
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f3c:	42bb      	cmp	r3, r7
	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 8005f3e:	b085      	sub	sp, #20
 8005f40:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8006048 <prvListTasksWithinSingleList.part.0+0x11c>
				pxTaskStatus->eCurrentState = eRunning;
 8005f44:	46b3      	mov	fp, r6
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f46:	bf08      	it	eq
 8005f48:	68cb      	ldreq	r3, [r1, #12]
	++uxSchedulerSuspended;
 8005f4a:	f8df a100 	ldr.w	sl, [pc, #256]	; 800604c <prvListTasksWithinSingleList.part.0+0x120>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f4e:	f8d3 900c 	ldr.w	r9, [r3, #12]
				pxTaskStatus->eCurrentState = eRunning;
 8005f52:	4618      	mov	r0, r3
 8005f54:	464b      	mov	r3, r9
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f56:	6840      	ldr	r0, [r0, #4]
				pxTaskStatus->eCurrentState = eRunning;
 8005f58:	46b9      	mov	r9, r7
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f5a:	6048      	str	r0, [r1, #4]
 8005f5c:	4581      	cmp	r9, r0
 8005f5e:	d035      	beq.n	8005fcc <prvListTasksWithinSingleList.part.0+0xa0>
 8005f60:	68c7      	ldr	r7, [r0, #12]
		pxTCB = prvGetTCBFromHandle( xTask );
 8005f62:	2f00      	cmp	r7, #0
 8005f64:	d038      	beq.n	8005fd8 <prvListTasksWithinSingleList.part.0+0xac>
 8005f66:	463d      	mov	r5, r7
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8005f68:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8005f6a:	f8d5 c030 	ldr.w	ip, [r5, #48]	; 0x30
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8005f6e:	6120      	str	r0, [r4, #16]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8005f70:	6c68      	ldr	r0, [r5, #68]	; 0x44
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8005f72:	6025      	str	r5, [r4, #0]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8005f74:	60a0      	str	r0, [r4, #8]
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8005f76:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8005f78:	f8c4 c01c 	str.w	ip, [r4, #28]
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8005f7c:	6160      	str	r0, [r4, #20]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8005f7e:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8005f82:	6060      	str	r0, [r4, #4]
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8005f84:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8005f86:	61a0      	str	r0, [r4, #24]
			if( pxTCB == pxCurrentTCB )
 8005f88:	f8d8 0000 	ldr.w	r0, [r8]
 8005f8c:	42a8      	cmp	r0, r5
 8005f8e:	d026      	beq.n	8005fde <prvListTasksWithinSingleList.part.0+0xb2>
					if( eState == eSuspended )
 8005f90:	2a03      	cmp	r2, #3
				pxTaskStatus->eCurrentState = eState;
 8005f92:	7322      	strb	r2, [r4, #12]
					if( eState == eSuspended )
 8005f94:	d036      	beq.n	8006004 <prvListTasksWithinSingleList.part.0+0xd8>
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005f96:	f89c 0000 	ldrb.w	r0, [ip]
 8005f9a:	28a5      	cmp	r0, #165	; 0xa5
 8005f9c:	d125      	bne.n	8005fea <prvListTasksWithinSingleList.part.0+0xbe>
 8005f9e:	f1cc 0e01 	rsb	lr, ip, #1
			ulCount++;
 8005fa2:	eb0e 050c 	add.w	r5, lr, ip
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005fa6:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 8005faa:	28a5      	cmp	r0, #165	; 0xa5
 8005fac:	d0f9      	beq.n	8005fa2 <prvListTasksWithinSingleList.part.0+0x76>
		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8005fae:	f3c5 058f 	ubfx	r5, r5, #2, #16
			} while( pxNextTCB != pxFirstTCB );
 8005fb2:	42bb      	cmp	r3, r7
				uxTask++;
 8005fb4:	f106 0601 	add.w	r6, r6, #1
			} while( pxNextTCB != pxFirstTCB );
 8005fb8:	f104 0424 	add.w	r4, r4, #36	; 0x24
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8005fbc:	f824 5c04 	strh.w	r5, [r4, #-4]
			} while( pxNextTCB != pxFirstTCB );
 8005fc0:	d01c      	beq.n	8005ffc <prvListTasksWithinSingleList.part.0+0xd0>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fc2:	6848      	ldr	r0, [r1, #4]
 8005fc4:	6840      	ldr	r0, [r0, #4]
 8005fc6:	4581      	cmp	r9, r0
 8005fc8:	6048      	str	r0, [r1, #4]
 8005fca:	d1c9      	bne.n	8005f60 <prvListTasksWithinSingleList.part.0+0x34>
 8005fcc:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8005fd0:	68c7      	ldr	r7, [r0, #12]
 8005fd2:	6048      	str	r0, [r1, #4]
		pxTCB = prvGetTCBFromHandle( xTask );
 8005fd4:	2f00      	cmp	r7, #0
 8005fd6:	d1c6      	bne.n	8005f66 <prvListTasksWithinSingleList.part.0+0x3a>
 8005fd8:	f8d8 5000 	ldr.w	r5, [r8]
 8005fdc:	e7c4      	b.n	8005f68 <prvListTasksWithinSingleList.part.0+0x3c>
				pxTaskStatus->eCurrentState = eRunning;
 8005fde:	f884 b00c 	strb.w	fp, [r4, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005fe2:	f89c 0000 	ldrb.w	r0, [ip]
 8005fe6:	28a5      	cmp	r0, #165	; 0xa5
 8005fe8:	d0d9      	beq.n	8005f9e <prvListTasksWithinSingleList.part.0+0x72>
 8005fea:	2500      	movs	r5, #0
			} while( pxNextTCB != pxFirstTCB );
 8005fec:	42bb      	cmp	r3, r7
				uxTask++;
 8005fee:	f106 0601 	add.w	r6, r6, #1
			} while( pxNextTCB != pxFirstTCB );
 8005ff2:	f104 0424 	add.w	r4, r4, #36	; 0x24
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8005ff6:	f824 5c04 	strh.w	r5, [r4, #-4]
			} while( pxNextTCB != pxFirstTCB );
 8005ffa:	d1e2      	bne.n	8005fc2 <prvListTasksWithinSingleList.part.0+0x96>
	}
 8005ffc:	4630      	mov	r0, r6
 8005ffe:	b005      	add	sp, #20
 8006000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	++uxSchedulerSuspended;
 8006004:	f8da 0000 	ldr.w	r0, [sl]
 8006008:	3001      	adds	r0, #1
 800600a:	f8ca 0000 	str.w	r0, [sl]
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800600e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8006010:	b110      	cbz	r0, 8006018 <prvListTasksWithinSingleList.part.0+0xec>
								pxTaskStatus->eCurrentState = eBlocked;
 8006012:	f04f 0002 	mov.w	r0, #2
 8006016:	7320      	strb	r0, [r4, #12]
	configASSERT( uxSchedulerSuspended );
 8006018:	f8da 0000 	ldr.w	r0, [sl]
 800601c:	b940      	cbnz	r0, 8006030 <prvListTasksWithinSingleList.part.0+0x104>
 800601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	e7fe      	b.n	800602e <prvListTasksWithinSingleList.part.0+0x102>
 8006030:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006034:	9301      	str	r3, [sp, #4]
 8006036:	f7ff fedf 	bl	8005df8 <xTaskResumeAll.part.0>
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800603a:	f8d5 c030 	ldr.w	ip, [r5, #48]	; 0x30
 800603e:	9b01      	ldr	r3, [sp, #4]
 8006040:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006044:	e7a7      	b.n	8005f96 <prvListTasksWithinSingleList.part.0+0x6a>
 8006046:	bf00      	nop
 8006048:	2404ee90 	.word	0x2404ee90
 800604c:	2404f308 	.word	0x2404f308

08006050 <xTaskCreateStatic>:
	{
 8006050:	b530      	push	{r4, r5, lr}
 8006052:	b087      	sub	sp, #28
 8006054:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8006056:	b1c4      	cbz	r4, 800608a <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 8006058:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800605a:	b16d      	cbz	r5, 8006078 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 800605c:	2560      	movs	r5, #96	; 0x60
 800605e:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006060:	9d05      	ldr	r5, [sp, #20]
 8006062:	2d60      	cmp	r5, #96	; 0x60
 8006064:	d01a      	beq.n	800609c <xTaskCreateStatic+0x4c>
 8006066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	e7fe      	b.n	8006076 <xTaskCreateStatic+0x26>
 8006078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8006088:	e7fe      	b.n	8006088 <xTaskCreateStatic+0x38>
 800608a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800609a:	e7fe      	b.n	800609a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800609c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800609e:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060a0:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060a2:	9502      	str	r5, [sp, #8]
 80060a4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80060a6:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060aa:	f885 405d 	strb.w	r4, [r5, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060ae:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060b0:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060b2:	9401      	str	r4, [sp, #4]
 80060b4:	f7ff fd12 	bl	8005adc <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060b8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80060ba:	f7ff fc87 	bl	80059cc <prvAddNewTaskToReadyList>
	}
 80060be:	9804      	ldr	r0, [sp, #16]
 80060c0:	b007      	add	sp, #28
 80060c2:	bd30      	pop	{r4, r5, pc}

080060c4 <xTaskCreate>:
	{
 80060c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060c8:	4607      	mov	r7, r0
 80060ca:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80060cc:	0090      	lsls	r0, r2, #2
	{
 80060ce:	4615      	mov	r5, r2
 80060d0:	4688      	mov	r8, r1
 80060d2:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80060d4:	f000 fff0 	bl	80070b8 <pvPortMalloc>
			if( pxStack != NULL )
 80060d8:	b1d8      	cbz	r0, 8006112 <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80060da:	4604      	mov	r4, r0
 80060dc:	2060      	movs	r0, #96	; 0x60
 80060de:	f000 ffeb 	bl	80070b8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80060e2:	4606      	mov	r6, r0
 80060e4:	b1d0      	cbz	r0, 800611c <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 80060e6:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80060e8:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060ea:	464b      	mov	r3, r9
 80060ec:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80060ee:	f886 405d 	strb.w	r4, [r6, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060f2:	4641      	mov	r1, r8
 80060f4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80060f6:	4638      	mov	r0, r7
 80060f8:	9602      	str	r6, [sp, #8]
 80060fa:	9401      	str	r4, [sp, #4]
 80060fc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80060fe:	9400      	str	r4, [sp, #0]
 8006100:	f7ff fcec 	bl	8005adc <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006104:	4630      	mov	r0, r6
 8006106:	f7ff fc61 	bl	80059cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800610a:	2001      	movs	r0, #1
	}
 800610c:	b005      	add	sp, #20
 800610e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006112:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 8006116:	b005      	add	sp, #20
 8006118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800611c:	4620      	mov	r0, r4
 800611e:	f001 f887 	bl	8007230 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006122:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006126:	e7f1      	b.n	800610c <xTaskCreate+0x48>

08006128 <vTaskDelay>:
	{
 8006128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800612a:	b950      	cbnz	r0, 8006142 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800612c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006134:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	f3bf 8f6f 	isb	sy
	}
 8006140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8006142:	4d1e      	ldr	r5, [pc, #120]	; (80061bc <vTaskDelay+0x94>)
 8006144:	682b      	ldr	r3, [r5, #0]
 8006146:	b143      	cbz	r3, 800615a <vTaskDelay+0x32>
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	e7fe      	b.n	8006158 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 800615a:	682b      	ldr	r3, [r5, #0]
 800615c:	4604      	mov	r4, r0
 800615e:	3301      	adds	r3, #1
 8006160:	602b      	str	r3, [r5, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006162:	4b17      	ldr	r3, [pc, #92]	; (80061c0 <vTaskDelay+0x98>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006164:	4e17      	ldr	r6, [pc, #92]	; (80061c4 <vTaskDelay+0x9c>)
const TickType_t xConstTickCount = xTickCount;
 8006166:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006168:	6830      	ldr	r0, [r6, #0]
 800616a:	3004      	adds	r0, #4
 800616c:	f7fe ffdc 	bl	8005128 <uxListRemove>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006170:	19e4      	adds	r4, r4, r7

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006172:	6833      	ldr	r3, [r6, #0]
 8006174:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8006176:	d315      	bcc.n	80061a4 <vTaskDelay+0x7c>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006178:	4b13      	ldr	r3, [pc, #76]	; (80061c8 <vTaskDelay+0xa0>)
 800617a:	6818      	ldr	r0, [r3, #0]
 800617c:	6831      	ldr	r1, [r6, #0]
 800617e:	3104      	adds	r1, #4
 8006180:	f7fe ffba 	bl	80050f8 <vListInsert>
	configASSERT( uxSchedulerSuspended );
 8006184:	682b      	ldr	r3, [r5, #0]
 8006186:	b943      	cbnz	r3, 800619a <vTaskDelay+0x72>
 8006188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618c:	f383 8811 	msr	BASEPRI, r3
 8006190:	f3bf 8f6f 	isb	sy
 8006194:	f3bf 8f4f 	dsb	sy
 8006198:	e7fe      	b.n	8006198 <vTaskDelay+0x70>
 800619a:	f7ff fe2d 	bl	8005df8 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 800619e:	2800      	cmp	r0, #0
 80061a0:	d0c4      	beq.n	800612c <vTaskDelay+0x4>
	}
 80061a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061a4:	4b09      	ldr	r3, [pc, #36]	; (80061cc <vTaskDelay+0xa4>)
 80061a6:	6818      	ldr	r0, [r3, #0]
 80061a8:	6831      	ldr	r1, [r6, #0]
 80061aa:	3104      	adds	r1, #4
 80061ac:	f7fe ffa4 	bl	80050f8 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80061b0:	4b07      	ldr	r3, [pc, #28]	; (80061d0 <vTaskDelay+0xa8>)
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	4294      	cmp	r4, r2
 80061b6:	d2e5      	bcs.n	8006184 <vTaskDelay+0x5c>
				{
					xNextTaskUnblockTime = xTimeToWake;
 80061b8:	601c      	str	r4, [r3, #0]
 80061ba:	e7e3      	b.n	8006184 <vTaskDelay+0x5c>
 80061bc:	2404f308 	.word	0x2404f308
 80061c0:	2404f388 	.word	0x2404f388
 80061c4:	2404ee90 	.word	0x2404ee90
 80061c8:	2404ee98 	.word	0x2404ee98
 80061cc:	2404ee94 	.word	0x2404ee94
 80061d0:	2404f33c 	.word	0x2404f33c

080061d4 <vTaskStartScheduler>:
{
 80061d4:	b570      	push	{r4, r5, r6, lr}
 80061d6:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80061d8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80061da:	4668      	mov	r0, sp
 80061dc:	aa02      	add	r2, sp, #8
 80061de:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80061e0:	e9cd 4400 	strd	r4, r4, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80061e4:	f7fe ff4a 	bl	800507c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80061e8:	9801      	ldr	r0, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
 80061ea:	b1c8      	cbz	r0, 8006220 <vTaskStartScheduler+0x4c>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80061ec:	9d00      	ldr	r5, [sp, #0]
		configASSERT( pxTaskBuffer != NULL );
 80061ee:	b175      	cbz	r5, 800620e <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80061f0:	2260      	movs	r2, #96	; 0x60
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80061f2:	9e02      	ldr	r6, [sp, #8]
			volatile size_t xSize = sizeof( StaticTask_t );
 80061f4:	9203      	str	r2, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 80061f6:	9a03      	ldr	r2, [sp, #12]
 80061f8:	2a60      	cmp	r2, #96	; 0x60
 80061fa:	d01a      	beq.n	8006232 <vTaskStartScheduler+0x5e>
 80061fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	e7fe      	b.n	800620c <vTaskStartScheduler+0x38>
 800620e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800621e:	e7fe      	b.n	800621e <vTaskStartScheduler+0x4a>
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8006230:	e7fe      	b.n	8006230 <vTaskStartScheduler+0x5c>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006232:	00b6      	lsls	r6, r6, #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006234:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006236:	21a5      	movs	r1, #165	; 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006238:	6328      	str	r0, [r5, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800623a:	4632      	mov	r2, r6
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800623c:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006240:	9b03      	ldr	r3, [sp, #12]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006242:	f001 f88f 	bl	8007364 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006246:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006248:	1f33      	subs	r3, r6, #4
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800624a:	4926      	ldr	r1, [pc, #152]	; (80062e4 <vTaskStartScheduler+0x110>)
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800624c:	1d28      	adds	r0, r5, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800624e:	18d6      	adds	r6, r2, r3
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006250:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
 8006254:	6369      	str	r1, [r5, #52]	; 0x34
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006256:	f885 4043 	strb.w	r4, [r5, #67]	; 0x43
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800625a:	f026 0607 	bic.w	r6, r6, #7
	pxNewTCB->uxPriority = uxPriority;
 800625e:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 8006260:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006264:	f7fe ff34 	bl	80050d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006268:	f105 0018 	add.w	r0, r5, #24
 800626c:	f7fe ff30 	bl	80050d0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006270:	2338      	movs	r3, #56	; 0x38
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006272:	4622      	mov	r2, r4
 8006274:	491c      	ldr	r1, [pc, #112]	; (80062e8 <vTaskStartScheduler+0x114>)
		pxNewTCB->ulNotifiedValue = 0;
 8006276:	65ac      	str	r4, [r5, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006278:	4630      	mov	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800627a:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800627c:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800627e:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 8006280:	656c      	str	r4, [r5, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006282:	f885 405c 	strb.w	r4, [r5, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006286:	f000 fdb5 	bl	8006df4 <pxPortInitialiseStack>
 800628a:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
 800628c:	4628      	mov	r0, r5
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800628e:	602b      	str	r3, [r5, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 8006290:	f7ff fb9c 	bl	80059cc <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
 8006294:	f000 fd12 	bl	8006cbc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8006298:	2801      	cmp	r0, #1
 800629a:	d00c      	beq.n	80062b6 <vTaskStartScheduler+0xe2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800629c:	3001      	adds	r0, #1
 800629e:	d001      	beq.n	80062a4 <vTaskStartScheduler+0xd0>
}
 80062a0:	b004      	add	sp, #16
 80062a2:	bd70      	pop	{r4, r5, r6, pc}
 80062a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a8:	f383 8811 	msr	BASEPRI, r3
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80062b4:	e7fe      	b.n	80062b4 <vTaskStartScheduler+0xe0>
 80062b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ba:	f383 8811 	msr	BASEPRI, r3
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80062c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80062ca:	4b08      	ldr	r3, [pc, #32]	; (80062ec <vTaskStartScheduler+0x118>)
		xSchedulerRunning = pdTRUE;
 80062cc:	4a08      	ldr	r2, [pc, #32]	; (80062f0 <vTaskStartScheduler+0x11c>)
		xNextTaskUnblockTime = portMAX_DELAY;
 80062ce:	6019      	str	r1, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80062d0:	4b08      	ldr	r3, [pc, #32]	; (80062f4 <vTaskStartScheduler+0x120>)
		xSchedulerRunning = pdTRUE;
 80062d2:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80062d4:	601c      	str	r4, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80062d6:	f7fa fbe3 	bl	8000aa0 <configureTimerForRunTimeStats>
}
 80062da:	b004      	add	sp, #16
 80062dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
 80062e0:	f000 be4a 	b.w	8006f78 <xPortStartScheduler>
 80062e4:	454c4449 	.word	0x454c4449
 80062e8:	08005c11 	.word	0x08005c11
 80062ec:	2404f33c 	.word	0x2404f33c
 80062f0:	2404f35c 	.word	0x2404f35c
 80062f4:	2404f388 	.word	0x2404f388

080062f8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80062f8:	4a02      	ldr	r2, [pc, #8]	; (8006304 <vTaskSuspendAll+0xc>)
 80062fa:	6813      	ldr	r3, [r2, #0]
 80062fc:	3301      	adds	r3, #1
 80062fe:	6013      	str	r3, [r2, #0]
}
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	2404f308 	.word	0x2404f308

08006308 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8006308:	4b06      	ldr	r3, [pc, #24]	; (8006324 <xTaskResumeAll+0x1c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	b943      	cbnz	r3, 8006320 <xTaskResumeAll+0x18>
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	e7fe      	b.n	800631e <xTaskResumeAll+0x16>
 8006320:	f7ff bd6a 	b.w	8005df8 <xTaskResumeAll.part.0>
 8006324:	2404f308 	.word	0x2404f308

08006328 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8006328:	4b01      	ldr	r3, [pc, #4]	; (8006330 <xTaskGetTickCount+0x8>)
 800632a:	6818      	ldr	r0, [r3, #0]
}
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	2404f388 	.word	0x2404f388

08006334 <uxTaskGetSystemState>:
	{
 8006334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	++uxSchedulerSuspended;
 8006338:	4c62      	ldr	r4, [pc, #392]	; (80064c4 <uxTaskGetSystemState+0x190>)
	{
 800633a:	b083      	sub	sp, #12
	++uxSchedulerSuspended;
 800633c:	6823      	ldr	r3, [r4, #0]
 800633e:	3301      	adds	r3, #1
	{
 8006340:	e9cd 0200 	strd	r0, r2, [sp]
	++uxSchedulerSuspended;
 8006344:	6023      	str	r3, [r4, #0]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8006346:	4b60      	ldr	r3, [pc, #384]	; (80064c8 <uxTaskGetSystemState+0x194>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	428b      	cmp	r3, r1
 800634c:	f200 80ab 	bhi.w	80064a6 <uxTaskGetSystemState+0x172>
 8006350:	f8df e188 	ldr.w	lr, [pc, #392]	; 80064dc <uxTaskGetSystemState+0x1a8>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8006354:	2600      	movs	r6, #0
 8006356:	f04f 0a38 	mov.w	sl, #56	; 0x38
 800635a:	f8df 8184 	ldr.w	r8, [pc, #388]	; 80064e0 <uxTaskGetSystemState+0x1ac>
 800635e:	f2ae 4b54 	subw	fp, lr, #1108	; 0x454
 8006362:	46b1      	mov	r9, r6
					uxQueue--;
 8006364:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8006368:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
 800636c:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d040      	beq.n	80063f6 <uxTaskGetSystemState+0xc2>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006374:	f85e 3c04 	ldr.w	r3, [lr, #-4]
 8006378:	685d      	ldr	r5, [r3, #4]
 800637a:	45ae      	cmp	lr, r5
 800637c:	f84e 5c04 	str.w	r5, [lr, #-4]
 8006380:	f000 808b 	beq.w	800649a <uxTaskGetSystemState+0x166>
 8006384:	eb09 01c9 	add.w	r1, r9, r9, lsl #3
 8006388:	9b00      	ldr	r3, [sp, #0]
 800638a:	68ee      	ldr	r6, [r5, #12]
	UBaseType_t uxTask = 0;
 800638c:	f04f 0c00 	mov.w	ip, #0
 8006390:	eb03 0181 	add.w	r1, r3, r1, lsl #2
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006394:	686d      	ldr	r5, [r5, #4]
 8006396:	45ae      	cmp	lr, r5
 8006398:	f84e 5c04 	str.w	r5, [lr, #-4]
 800639c:	d070      	beq.n	8006480 <uxTaskGetSystemState+0x14c>
 800639e:	68ea      	ldr	r2, [r5, #12]
		pxTCB = prvGetTCBFromHandle( xTask );
 80063a0:	2a00      	cmp	r2, #0
 80063a2:	d075      	beq.n	8006490 <uxTaskGetSystemState+0x15c>
 80063a4:	4613      	mov	r3, r2
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80063a6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 80063a8:	600b      	str	r3, [r1, #0]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80063aa:	6108      	str	r0, [r1, #16]
			if( pxTCB == pxCurrentTCB )
 80063ac:	f8d8 7000 	ldr.w	r7, [r8]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80063b0:	6c58      	ldr	r0, [r3, #68]	; 0x44
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80063b2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
			if( pxTCB == pxCurrentTCB )
 80063b4:	1bdf      	subs	r7, r3, r7
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80063b6:	6088      	str	r0, [r1, #8]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80063b8:	f103 0334 	add.w	r3, r3, #52	; 0x34
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80063bc:	6998      	ldr	r0, [r3, #24]
			if( pxTCB == pxCurrentTCB )
 80063be:	bf18      	it	ne
 80063c0:	2701      	movne	r7, #1
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80063c2:	61cc      	str	r4, [r1, #28]
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80063c4:	6148      	str	r0, [r1, #20]
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 80063c6:	6a18      	ldr	r0, [r3, #32]
			if( pxTCB == pxCurrentTCB )
 80063c8:	730f      	strb	r7, [r1, #12]
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 80063ca:	6188      	str	r0, [r1, #24]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80063cc:	604b      	str	r3, [r1, #4]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80063ce:	7823      	ldrb	r3, [r4, #0]
 80063d0:	2ba5      	cmp	r3, #165	; 0xa5
 80063d2:	d160      	bne.n	8006496 <uxTaskGetSystemState+0x162>
 80063d4:	f1c4 0701 	rsb	r7, r4, #1
			ulCount++;
 80063d8:	1938      	adds	r0, r7, r4
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80063da:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80063de:	2ba5      	cmp	r3, #165	; 0xa5
 80063e0:	d0fa      	beq.n	80063d8 <uxTaskGetSystemState+0xa4>
		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80063e2:	f3c0 008f 	ubfx	r0, r0, #2, #16
			} while( pxNextTCB != pxFirstTCB );
 80063e6:	4296      	cmp	r6, r2
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 80063e8:	8408      	strh	r0, [r1, #32]
				uxTask++;
 80063ea:	f10c 0c01 	add.w	ip, ip, #1
			} while( pxNextTCB != pxFirstTCB );
 80063ee:	f101 0124 	add.w	r1, r1, #36	; 0x24
 80063f2:	d1cf      	bne.n	8006394 <uxTaskGetSystemState+0x60>
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80063f4:	44e1      	add	r9, ip
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063f6:	f1ae 0e14 	sub.w	lr, lr, #20
 80063fa:	f1ba 0f00 	cmp.w	sl, #0
 80063fe:	d1b1      	bne.n	8006364 <uxTaskGetSystemState+0x30>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8006400:	4b32      	ldr	r3, [pc, #200]	; (80064cc <uxTaskGetSystemState+0x198>)
 8006402:	eb09 00c9 	add.w	r0, r9, r9, lsl #3
 8006406:	9c00      	ldr	r4, [sp, #0]
 8006408:	464e      	mov	r6, r9
 800640a:	6819      	ldr	r1, [r3, #0]
 800640c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8006410:	680b      	ldr	r3, [r1, #0]
 8006412:	b13b      	cbz	r3, 8006424 <uxTaskGetSystemState+0xf0>
 8006414:	2202      	movs	r2, #2
 8006416:	f7ff fd89 	bl	8005f2c <prvListTasksWithinSingleList.part.0>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800641a:	4406      	add	r6, r0
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800641c:	eb06 00c6 	add.w	r0, r6, r6, lsl #3
 8006420:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8006424:	4b2a      	ldr	r3, [pc, #168]	; (80064d0 <uxTaskGetSystemState+0x19c>)
 8006426:	6819      	ldr	r1, [r3, #0]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8006428:	680b      	ldr	r3, [r1, #0]
 800642a:	b143      	cbz	r3, 800643e <uxTaskGetSystemState+0x10a>
 800642c:	2202      	movs	r2, #2
 800642e:	f7ff fd7d 	bl	8005f2c <prvListTasksWithinSingleList.part.0>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8006432:	4406      	add	r6, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8006434:	9b00      	ldr	r3, [sp, #0]
 8006436:	eb06 00c6 	add.w	r0, r6, r6, lsl #3
 800643a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800643e:	4925      	ldr	r1, [pc, #148]	; (80064d4 <uxTaskGetSystemState+0x1a0>)
 8006440:	680b      	ldr	r3, [r1, #0]
 8006442:	b143      	cbz	r3, 8006456 <uxTaskGetSystemState+0x122>
 8006444:	2204      	movs	r2, #4
 8006446:	f7ff fd71 	bl	8005f2c <prvListTasksWithinSingleList.part.0>
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800644a:	4406      	add	r6, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800644c:	9b00      	ldr	r3, [sp, #0]
 800644e:	eb06 00c6 	add.w	r0, r6, r6, lsl #3
 8006452:	eb03 0080 	add.w	r0, r3, r0, lsl #2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8006456:	4920      	ldr	r1, [pc, #128]	; (80064d8 <uxTaskGetSystemState+0x1a4>)
 8006458:	680b      	ldr	r3, [r1, #0]
 800645a:	b11b      	cbz	r3, 8006464 <uxTaskGetSystemState+0x130>
 800645c:	2203      	movs	r2, #3
 800645e:	f7ff fd65 	bl	8005f2c <prvListTasksWithinSingleList.part.0>
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8006462:	4406      	add	r6, r0
					if( pulTotalRunTime != NULL )
 8006464:	9c01      	ldr	r4, [sp, #4]
 8006466:	b1fc      	cbz	r4, 80064a8 <uxTaskGetSystemState+0x174>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006468:	f7fa fb28 	bl	8000abc <getRunTimeCounterValue>
	configASSERT( uxSchedulerSuspended );
 800646c:	4b15      	ldr	r3, [pc, #84]	; (80064c4 <uxTaskGetSystemState+0x190>)
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800646e:	6020      	str	r0, [r4, #0]
	configASSERT( uxSchedulerSuspended );
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	b1eb      	cbz	r3, 80064b0 <uxTaskGetSystemState+0x17c>
 8006474:	f7ff fcc0 	bl	8005df8 <xTaskResumeAll.part.0>
	}
 8006478:	4630      	mov	r0, r6
 800647a:	b003      	add	sp, #12
 800647c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006480:	f8de 3004 	ldr.w	r3, [lr, #4]
 8006484:	461d      	mov	r5, r3
 8006486:	f84e 3c04 	str.w	r3, [lr, #-4]
 800648a:	68ea      	ldr	r2, [r5, #12]
		pxTCB = prvGetTCBFromHandle( xTask );
 800648c:	2a00      	cmp	r2, #0
 800648e:	d189      	bne.n	80063a4 <uxTaskGetSystemState+0x70>
 8006490:	f8d8 3000 	ldr.w	r3, [r8]
 8006494:	e787      	b.n	80063a6 <uxTaskGetSystemState+0x72>
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006496:	2000      	movs	r0, #0
 8006498:	e7a5      	b.n	80063e6 <uxTaskGetSystemState+0xb2>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800649a:	f8de 3004 	ldr.w	r3, [lr, #4]
 800649e:	461d      	mov	r5, r3
 80064a0:	f84e 3c04 	str.w	r3, [lr, #-4]
 80064a4:	e76e      	b.n	8006384 <uxTaskGetSystemState+0x50>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80064a6:	2600      	movs	r6, #0
	configASSERT( uxSchedulerSuspended );
 80064a8:	4b06      	ldr	r3, [pc, #24]	; (80064c4 <uxTaskGetSystemState+0x190>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1e1      	bne.n	8006474 <uxTaskGetSystemState+0x140>
 80064b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	e7fe      	b.n	80064c0 <uxTaskGetSystemState+0x18c>
 80064c2:	bf00      	nop
 80064c4:	2404f308 	.word	0x2404f308
 80064c8:	2404f300 	.word	0x2404f300
 80064cc:	2404ee94 	.word	0x2404ee94
 80064d0:	2404ee98 	.word	0x2404ee98
 80064d4:	2404f374 	.word	0x2404f374
 80064d8:	2404f360 	.word	0x2404f360
 80064dc:	2404f2f0 	.word	0x2404f2f0
 80064e0:	2404ee90 	.word	0x2404ee90

080064e4 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064e4:	4b05      	ldr	r3, [pc, #20]	; (80064fc <xTaskIncrementTick+0x18>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	b90b      	cbnz	r3, 80064ee <xTaskIncrementTick+0xa>
 80064ea:	f7ff bbdd 	b.w	8005ca8 <xTaskIncrementTick.part.0>
		++xPendedTicks;
 80064ee:	4a04      	ldr	r2, [pc, #16]	; (8006500 <xTaskIncrementTick+0x1c>)
}
 80064f0:	2000      	movs	r0, #0
		++xPendedTicks;
 80064f2:	6813      	ldr	r3, [r2, #0]
 80064f4:	3301      	adds	r3, #1
 80064f6:	6013      	str	r3, [r2, #0]
}
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	2404f308 	.word	0x2404f308
 8006500:	2404f344 	.word	0x2404f344

08006504 <vTaskSwitchContext>:
{
 8006504:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006506:	4b21      	ldr	r3, [pc, #132]	; (800658c <vTaskSwitchContext+0x88>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	b11b      	cbz	r3, 8006514 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800650c:	4b20      	ldr	r3, [pc, #128]	; (8006590 <vTaskSwitchContext+0x8c>)
 800650e:	2201      	movs	r2, #1
 8006510:	601a      	str	r2, [r3, #0]
}
 8006512:	bd38      	pop	{r3, r4, r5, pc}
		xYieldPending = pdFALSE;
 8006514:	4a1e      	ldr	r2, [pc, #120]	; (8006590 <vTaskSwitchContext+0x8c>)
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8006516:	4c1f      	ldr	r4, [pc, #124]	; (8006594 <vTaskSwitchContext+0x90>)
		xYieldPending = pdFALSE;
 8006518:	6013      	str	r3, [r2, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800651a:	f7fa facf 	bl	8000abc <getRunTimeCounterValue>
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800651e:	4b1e      	ldr	r3, [pc, #120]	; (8006598 <vTaskSwitchContext+0x94>)
 8006520:	6819      	ldr	r1, [r3, #0]
 8006522:	4288      	cmp	r0, r1
 8006524:	d904      	bls.n	8006530 <vTaskSwitchContext+0x2c>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8006526:	6825      	ldr	r5, [r4, #0]
 8006528:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800652a:	1a52      	subs	r2, r2, r1
 800652c:	4402      	add	r2, r0
 800652e:	656a      	str	r2, [r5, #84]	; 0x54
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006530:	4d1a      	ldr	r5, [pc, #104]	; (800659c <vTaskSwitchContext+0x98>)
			ulTaskSwitchedInTime = ulTotalRunTime;
 8006532:	6018      	str	r0, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006534:	682b      	ldr	r3, [r5, #0]
 8006536:	491a      	ldr	r1, [pc, #104]	; (80065a0 <vTaskSwitchContext+0x9c>)
 8006538:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800653c:	0098      	lsls	r0, r3, #2
 800653e:	0092      	lsls	r2, r2, #2
 8006540:	588a      	ldr	r2, [r1, r2]
 8006542:	b942      	cbnz	r2, 8006556 <vTaskSwitchContext+0x52>
 8006544:	b1ab      	cbz	r3, 8006572 <vTaskSwitchContext+0x6e>
 8006546:	3b01      	subs	r3, #1
 8006548:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800654c:	0098      	lsls	r0, r3, #2
 800654e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006552:	2a00      	cmp	r2, #0
 8006554:	d0f6      	beq.n	8006544 <vTaskSwitchContext+0x40>
 8006556:	18c2      	adds	r2, r0, r3
 8006558:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 800655c:	6841      	ldr	r1, [r0, #4]
 800655e:	4602      	mov	r2, r0
 8006560:	6849      	ldr	r1, [r1, #4]
 8006562:	3208      	adds	r2, #8
 8006564:	4291      	cmp	r1, r2
 8006566:	6041      	str	r1, [r0, #4]
 8006568:	d00c      	beq.n	8006584 <vTaskSwitchContext+0x80>
 800656a:	68ca      	ldr	r2, [r1, #12]
 800656c:	6022      	str	r2, [r4, #0]
 800656e:	602b      	str	r3, [r5, #0]
}
 8006570:	bd38      	pop	{r3, r4, r5, pc}
 8006572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006576:	f383 8811 	msr	BASEPRI, r3
 800657a:	f3bf 8f6f 	isb	sy
 800657e:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006582:	e7fe      	b.n	8006582 <vTaskSwitchContext+0x7e>
 8006584:	6849      	ldr	r1, [r1, #4]
 8006586:	6041      	str	r1, [r0, #4]
 8006588:	e7ef      	b.n	800656a <vTaskSwitchContext+0x66>
 800658a:	bf00      	nop
 800658c:	2404f308 	.word	0x2404f308
 8006590:	2404f38c 	.word	0x2404f38c
 8006594:	2404ee90 	.word	0x2404ee90
 8006598:	2404f2fc 	.word	0x2404f2fc
 800659c:	2404f310 	.word	0x2404f310
 80065a0:	2404ee9c 	.word	0x2404ee9c

080065a4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80065a4:	b1f0      	cbz	r0, 80065e4 <vTaskPlaceOnEventList+0x40>
{
 80065a6:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065a8:	4d1a      	ldr	r5, [pc, #104]	; (8006614 <vTaskPlaceOnEventList+0x70>)
 80065aa:	460c      	mov	r4, r1
 80065ac:	6829      	ldr	r1, [r5, #0]
 80065ae:	3118      	adds	r1, #24
 80065b0:	f7fe fda2 	bl	80050f8 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 80065b4:	4b18      	ldr	r3, [pc, #96]	; (8006618 <vTaskPlaceOnEventList+0x74>)
 80065b6:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065b8:	6828      	ldr	r0, [r5, #0]
 80065ba:	3004      	adds	r0, #4
 80065bc:	f7fe fdb4 	bl	8005128 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80065c0:	1c63      	adds	r3, r4, #1
 80065c2:	d020      	beq.n	8006606 <vTaskPlaceOnEventList+0x62>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80065c4:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80065c6:	682b      	ldr	r3, [r5, #0]
 80065c8:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80065ca:	d214      	bcs.n	80065f6 <vTaskPlaceOnEventList+0x52>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065cc:	4b13      	ldr	r3, [pc, #76]	; (800661c <vTaskPlaceOnEventList+0x78>)
 80065ce:	6818      	ldr	r0, [r3, #0]
 80065d0:	6829      	ldr	r1, [r5, #0]
 80065d2:	3104      	adds	r1, #4
 80065d4:	f7fe fd90 	bl	80050f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065d8:	4b11      	ldr	r3, [pc, #68]	; (8006620 <vTaskPlaceOnEventList+0x7c>)
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	4294      	cmp	r4, r2
 80065de:	d200      	bcs.n	80065e2 <vTaskPlaceOnEventList+0x3e>
					xNextTaskUnblockTime = xTimeToWake;
 80065e0:	601c      	str	r4, [r3, #0]
}
 80065e2:	bd70      	pop	{r4, r5, r6, pc}
 80065e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e8:	f383 8811 	msr	BASEPRI, r3
 80065ec:	f3bf 8f6f 	isb	sy
 80065f0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80065f4:	e7fe      	b.n	80065f4 <vTaskPlaceOnEventList+0x50>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065f6:	4b0b      	ldr	r3, [pc, #44]	; (8006624 <vTaskPlaceOnEventList+0x80>)
 80065f8:	6818      	ldr	r0, [r3, #0]
 80065fa:	6829      	ldr	r1, [r5, #0]
}
 80065fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006600:	3104      	adds	r1, #4
 8006602:	f7fe bd79 	b.w	80050f8 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006606:	6829      	ldr	r1, [r5, #0]
 8006608:	4807      	ldr	r0, [pc, #28]	; (8006628 <vTaskPlaceOnEventList+0x84>)
 800660a:	3104      	adds	r1, #4
}
 800660c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006610:	f7fe bd62 	b.w	80050d8 <vListInsertEnd>
 8006614:	2404ee90 	.word	0x2404ee90
 8006618:	2404f388 	.word	0x2404f388
 800661c:	2404ee94 	.word	0x2404ee94
 8006620:	2404f33c 	.word	0x2404f33c
 8006624:	2404ee98 	.word	0x2404ee98
 8006628:	2404f360 	.word	0x2404f360

0800662c <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
 800662c:	b358      	cbz	r0, 8006686 <vTaskPlaceOnEventListRestricted+0x5a>
	{
 800662e:	b570      	push	{r4, r5, r6, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006630:	4e1d      	ldr	r6, [pc, #116]	; (80066a8 <vTaskPlaceOnEventListRestricted+0x7c>)
 8006632:	460c      	mov	r4, r1
 8006634:	4615      	mov	r5, r2
 8006636:	6831      	ldr	r1, [r6, #0]
 8006638:	3118      	adds	r1, #24
 800663a:	f7fe fd4d 	bl	80050d8 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800663e:	b165      	cbz	r5, 800665a <vTaskPlaceOnEventListRestricted+0x2e>
const TickType_t xConstTickCount = xTickCount;
 8006640:	4b1a      	ldr	r3, [pc, #104]	; (80066ac <vTaskPlaceOnEventListRestricted+0x80>)
 8006642:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006644:	6830      	ldr	r0, [r6, #0]
 8006646:	3004      	adds	r0, #4
 8006648:	f7fe fd6e 	bl	8005128 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800664c:	6831      	ldr	r1, [r6, #0]
 800664e:	4818      	ldr	r0, [pc, #96]	; (80066b0 <vTaskPlaceOnEventListRestricted+0x84>)
 8006650:	3104      	adds	r1, #4
	}
 8006652:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006656:	f7fe bd3f 	b.w	80050d8 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 800665a:	4b14      	ldr	r3, [pc, #80]	; (80066ac <vTaskPlaceOnEventListRestricted+0x80>)
 800665c:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800665e:	6830      	ldr	r0, [r6, #0]
 8006660:	3004      	adds	r0, #4
 8006662:	f7fe fd61 	bl	8005128 <uxListRemove>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006666:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006668:	6833      	ldr	r3, [r6, #0]
 800666a:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800666c:	d214      	bcs.n	8006698 <vTaskPlaceOnEventListRestricted+0x6c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800666e:	4b11      	ldr	r3, [pc, #68]	; (80066b4 <vTaskPlaceOnEventListRestricted+0x88>)
 8006670:	6818      	ldr	r0, [r3, #0]
 8006672:	6831      	ldr	r1, [r6, #0]
 8006674:	3104      	adds	r1, #4
 8006676:	f7fe fd3f 	bl	80050f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800667a:	4b0f      	ldr	r3, [pc, #60]	; (80066b8 <vTaskPlaceOnEventListRestricted+0x8c>)
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	4294      	cmp	r4, r2
 8006680:	d200      	bcs.n	8006684 <vTaskPlaceOnEventListRestricted+0x58>
					xNextTaskUnblockTime = xTimeToWake;
 8006682:	601c      	str	r4, [r3, #0]
	}
 8006684:	bd70      	pop	{r4, r5, r6, pc}
 8006686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668a:	f383 8811 	msr	BASEPRI, r3
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8006696:	e7fe      	b.n	8006696 <vTaskPlaceOnEventListRestricted+0x6a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006698:	4b08      	ldr	r3, [pc, #32]	; (80066bc <vTaskPlaceOnEventListRestricted+0x90>)
 800669a:	6818      	ldr	r0, [r3, #0]
 800669c:	6831      	ldr	r1, [r6, #0]
	}
 800669e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066a2:	3104      	adds	r1, #4
 80066a4:	f7fe bd28 	b.w	80050f8 <vListInsert>
 80066a8:	2404ee90 	.word	0x2404ee90
 80066ac:	2404f388 	.word	0x2404f388
 80066b0:	2404f360 	.word	0x2404f360
 80066b4:	2404ee94 	.word	0x2404ee94
 80066b8:	2404f33c 	.word	0x2404f33c
 80066bc:	2404ee98 	.word	0x2404ee98

080066c0 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066c0:	68c3      	ldr	r3, [r0, #12]
{
 80066c2:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066c4:	68dc      	ldr	r4, [r3, #12]
{
 80066c6:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 80066c8:	b35c      	cbz	r4, 8006722 <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80066ca:	f104 0518 	add.w	r5, r4, #24
 80066ce:	4628      	mov	r0, r5
 80066d0:	f7fe fd2a 	bl	8005128 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066d4:	4b19      	ldr	r3, [pc, #100]	; (800673c <xTaskRemoveFromEventList+0x7c>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	b17b      	cbz	r3, 80066fa <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066da:	4629      	mov	r1, r5
 80066dc:	4818      	ldr	r0, [pc, #96]	; (8006740 <xTaskRemoveFromEventList+0x80>)
 80066de:	f7fe fcfb 	bl	80050d8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066e2:	4b18      	ldr	r3, [pc, #96]	; (8006744 <xTaskRemoveFromEventList+0x84>)
 80066e4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d922      	bls.n	8006734 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
 80066ee:	2301      	movs	r3, #1
 80066f0:	4a15      	ldr	r2, [pc, #84]	; (8006748 <xTaskRemoveFromEventList+0x88>)
		xReturn = pdTRUE;
 80066f2:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 80066f4:	6013      	str	r3, [r2, #0]
}
 80066f6:	b003      	add	sp, #12
 80066f8:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80066fa:	1d21      	adds	r1, r4, #4
 80066fc:	4608      	mov	r0, r1
 80066fe:	9101      	str	r1, [sp, #4]
 8006700:	f7fe fd12 	bl	8005128 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006704:	4a11      	ldr	r2, [pc, #68]	; (800674c <xTaskRemoveFromEventList+0x8c>)
 8006706:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006708:	6810      	ldr	r0, [r2, #0]
 800670a:	9901      	ldr	r1, [sp, #4]
 800670c:	4283      	cmp	r3, r0
 800670e:	d900      	bls.n	8006712 <xTaskRemoveFromEventList+0x52>
 8006710:	6013      	str	r3, [r2, #0]
 8006712:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006716:	480e      	ldr	r0, [pc, #56]	; (8006750 <xTaskRemoveFromEventList+0x90>)
 8006718:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800671c:	f7fe fcdc 	bl	80050d8 <vListInsertEnd>
 8006720:	e7df      	b.n	80066e2 <xTaskRemoveFromEventList+0x22>
 8006722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8006732:	e7fe      	b.n	8006732 <xTaskRemoveFromEventList+0x72>
		xReturn = pdFALSE;
 8006734:	2000      	movs	r0, #0
}
 8006736:	b003      	add	sp, #12
 8006738:	bd30      	pop	{r4, r5, pc}
 800673a:	bf00      	nop
 800673c:	2404f308 	.word	0x2404f308
 8006740:	2404f348 	.word	0x2404f348
 8006744:	2404ee90 	.word	0x2404ee90
 8006748:	2404f38c 	.word	0x2404f38c
 800674c:	2404f310 	.word	0x2404f310
 8006750:	2404ee9c 	.word	0x2404ee9c

08006754 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006754:	4a03      	ldr	r2, [pc, #12]	; (8006764 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006756:	4b04      	ldr	r3, [pc, #16]	; (8006768 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006758:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	e9c0 2300 	strd	r2, r3, [r0]
}
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	2404f340 	.word	0x2404f340
 8006768:	2404f388 	.word	0x2404f388

0800676c <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 800676c:	b328      	cbz	r0, 80067ba <xTaskCheckForTimeOut+0x4e>
{
 800676e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006770:	460d      	mov	r5, r1
 8006772:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 8006774:	b1c1      	cbz	r1, 80067a8 <xTaskCheckForTimeOut+0x3c>
 8006776:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006778:	f000 fb6c 	bl	8006e54 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 800677c:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 800677e:	4a1d      	ldr	r2, [pc, #116]	; (80067f4 <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
 8006780:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8006782:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8006784:	d030      	beq.n	80067e8 <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006786:	f8df c070 	ldr.w	ip, [pc, #112]	; 80067f8 <xTaskCheckForTimeOut+0x8c>
 800678a:	6826      	ldr	r6, [r4, #0]
 800678c:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006790:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006792:	42be      	cmp	r6, r7
 8006794:	d01a      	beq.n	80067cc <xTaskCheckForTimeOut+0x60>
 8006796:	4288      	cmp	r0, r1
 8006798:	d818      	bhi.n	80067cc <xTaskCheckForTimeOut+0x60>
			xReturn = pdTRUE;
 800679a:	2001      	movs	r0, #1
 800679c:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 800679e:	f000 fb7b 	bl	8006e98 <vPortExitCritical>
}
 80067a2:	9801      	ldr	r0, [sp, #4]
 80067a4:	b003      	add	sp, #12
 80067a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ac:	f383 8811 	msr	BASEPRI, r3
 80067b0:	f3bf 8f6f 	isb	sy
 80067b4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80067b8:	e7fe      	b.n	80067b8 <xTaskCheckForTimeOut+0x4c>
 80067ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80067ca:	e7fe      	b.n	80067ca <xTaskCheckForTimeOut+0x5e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80067cc:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80067d0:	4573      	cmp	r3, lr
 80067d2:	d90b      	bls.n	80067ec <xTaskCheckForTimeOut+0x80>
			*pxTicksToWait -= xElapsedTime;
 80067d4:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067d6:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067da:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 80067dc:	4403      	add	r3, r0
			xReturn = pdFALSE;
 80067de:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
 80067e0:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067e2:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 80067e6:	e7d9      	b.n	800679c <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 80067e8:	2000      	movs	r0, #0
 80067ea:	e7d7      	b.n	800679c <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
 80067ec:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 80067ee:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
 80067f0:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 80067f2:	e7d3      	b.n	800679c <xTaskCheckForTimeOut+0x30>
 80067f4:	2404f388 	.word	0x2404f388
 80067f8:	2404f340 	.word	0x2404f340

080067fc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80067fc:	4b01      	ldr	r3, [pc, #4]	; (8006804 <vTaskMissedYield+0x8>)
 80067fe:	2201      	movs	r2, #1
 8006800:	601a      	str	r2, [r3, #0]
}
 8006802:	4770      	bx	lr
 8006804:	2404f38c 	.word	0x2404f38c

08006808 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006808:	4b05      	ldr	r3, [pc, #20]	; (8006820 <xTaskGetSchedulerState+0x18>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	b133      	cbz	r3, 800681c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800680e:	4b05      	ldr	r3, [pc, #20]	; (8006824 <xTaskGetSchedulerState+0x1c>)
 8006810:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8006812:	2b00      	cmp	r3, #0
 8006814:	bf0c      	ite	eq
 8006816:	2002      	moveq	r0, #2
 8006818:	2000      	movne	r0, #0
 800681a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800681c:	2001      	movs	r0, #1
	}
 800681e:	4770      	bx	lr
 8006820:	2404f35c 	.word	0x2404f35c
 8006824:	2404f308 	.word	0x2404f308

08006828 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8006828:	b318      	cbz	r0, 8006872 <xTaskPriorityDisinherit+0x4a>
			configASSERT( pxTCB == pxCurrentTCB );
 800682a:	4b1f      	ldr	r3, [pc, #124]	; (80068a8 <xTaskPriorityDisinherit+0x80>)
	{
 800682c:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 800682e:	681c      	ldr	r4, [r3, #0]
	{
 8006830:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
 8006832:	4284      	cmp	r4, r0
 8006834:	d008      	beq.n	8006848 <xTaskPriorityDisinherit+0x20>
 8006836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	e7fe      	b.n	8006846 <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
 8006848:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800684a:	b14b      	cbz	r3, 8006860 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800684c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800684e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006850:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8006852:	6523      	str	r3, [r4, #80]	; 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006854:	4291      	cmp	r1, r2
 8006856:	d000      	beq.n	800685a <xTaskPriorityDisinherit+0x32>
 8006858:	b16b      	cbz	r3, 8006876 <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
 800685a:	2000      	movs	r0, #0
	}
 800685c:	b002      	add	sp, #8
 800685e:	bd10      	pop	{r4, pc}
 8006860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8006870:	e7fe      	b.n	8006870 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8006872:	2000      	movs	r0, #0
	}
 8006874:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006876:	1d21      	adds	r1, r4, #4
 8006878:	4608      	mov	r0, r1
 800687a:	9101      	str	r1, [sp, #4]
 800687c:	f7fe fc54 	bl	8005128 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006880:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8006882:	4b0a      	ldr	r3, [pc, #40]	; (80068ac <xTaskPriorityDisinherit+0x84>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006884:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
 8006888:	9901      	ldr	r1, [sp, #4]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800688a:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800688c:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	4290      	cmp	r0, r2
 8006892:	d900      	bls.n	8006896 <xTaskPriorityDisinherit+0x6e>
 8006894:	6018      	str	r0, [r3, #0]
 8006896:	4b06      	ldr	r3, [pc, #24]	; (80068b0 <xTaskPriorityDisinherit+0x88>)
 8006898:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800689c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80068a0:	f7fe fc1a 	bl	80050d8 <vListInsertEnd>
					xReturn = pdTRUE;
 80068a4:	2001      	movs	r0, #1
		return xReturn;
 80068a6:	e7d9      	b.n	800685c <xTaskPriorityDisinherit+0x34>
 80068a8:	2404ee90 	.word	0x2404ee90
 80068ac:	2404f310 	.word	0x2404f310
 80068b0:	2404ee9c 	.word	0x2404ee9c

080068b4 <vTaskGetRunTimeStats>:
		uxArraySize = uxCurrentNumberOfTasks;
 80068b4:	4a31      	ldr	r2, [pc, #196]	; (800697c <vTaskGetRunTimeStats+0xc8>)
	{
 80068b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		uxArraySize = uxCurrentNumberOfTasks;
 80068ba:	6815      	ldr	r5, [r2, #0]
		*pcWriteBuffer = ( char ) 0x00;
 80068bc:	2400      	movs	r4, #0
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 80068be:	6812      	ldr	r2, [r2, #0]
	{
 80068c0:	b083      	sub	sp, #12
 80068c2:	4683      	mov	fp, r0
		*pcWriteBuffer = ( char ) 0x00;
 80068c4:	7004      	strb	r4, [r0, #0]
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 80068c6:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80068ca:	0090      	lsls	r0, r2, #2
 80068cc:	f000 fbf4 	bl	80070b8 <pvPortMalloc>
		if( pxTaskStatusArray != NULL )
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d050      	beq.n	8006976 <vTaskGetRunTimeStats+0xc2>
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 80068d4:	aa01      	add	r2, sp, #4
 80068d6:	4629      	mov	r1, r5
 80068d8:	4681      	mov	r9, r0
			ulTotalTime /= 100UL;
 80068da:	4e29      	ldr	r6, [pc, #164]	; (8006980 <vTaskGetRunTimeStats+0xcc>)
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 80068dc:	f7ff fd2a 	bl	8006334 <uxTaskGetSystemState>
			ulTotalTime /= 100UL;
 80068e0:	9a01      	ldr	r2, [sp, #4]
 80068e2:	fba6 3602 	umull	r3, r6, r6, r2
			if( ulTotalTime > 0UL )
 80068e6:	2a63      	cmp	r2, #99	; 0x63
			ulTotalTime /= 100UL;
 80068e8:	ea4f 1656 	mov.w	r6, r6, lsr #5
 80068ec:	9601      	str	r6, [sp, #4]
			if( ulTotalTime > 0UL )
 80068ee:	d93f      	bls.n	8006970 <vTaskGetRunTimeStats+0xbc>
				for( x = 0; x < uxArraySize; x++ )
 80068f0:	2800      	cmp	r0, #0
 80068f2:	d03d      	beq.n	8006970 <vTaskGetRunTimeStats+0xbc>
 80068f4:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 80068f8:	464c      	mov	r4, r9
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80068fa:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8006988 <vTaskGetRunTimeStats+0xd4>
 80068fe:	eb09 0880 	add.w	r8, r9, r0, lsl #2
 8006902:	e00d      	b.n	8006920 <vTaskGetRunTimeStats+0x6c>
 8006904:	69a2      	ldr	r2, [r4, #24]
				for( x = 0; x < uxArraySize; x++ )
 8006906:	3424      	adds	r4, #36	; 0x24
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8006908:	fbb7 f3f6 	udiv	r3, r7, r6
 800690c:	f001 fa1a 	bl	8007d44 <siprintf>
					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8006910:	4628      	mov	r0, r5
 8006912:	f7f9 fcf7 	bl	8000304 <strlen>
				for( x = 0; x < uxArraySize; x++ )
 8006916:	4544      	cmp	r4, r8
					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8006918:	eb05 0b00 	add.w	fp, r5, r0
				for( x = 0; x < uxArraySize; x++ )
 800691c:	d028      	beq.n	8006970 <vTaskGetRunTimeStats+0xbc>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800691e:	9e01      	ldr	r6, [sp, #4]
		strcpy( pcBuffer, pcTaskName );
 8006920:	6861      	ldr	r1, [r4, #4]
 8006922:	4658      	mov	r0, fp
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8006924:	69a7      	ldr	r7, [r4, #24]
		strcpy( pcBuffer, pcTaskName );
 8006926:	f001 fa2d 	bl	8007d84 <stpcpy>
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800692a:	eba0 0c0b 	sub.w	ip, r0, fp
			pcBuffer[ x ] = ' ';
 800692e:	ebab 0200 	sub.w	r2, fp, r0
 8006932:	2120      	movs	r1, #32
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8006934:	f1bc 0f0e 	cmp.w	ip, #14
			pcBuffer[ x ] = ' ';
 8006938:	f102 020f 	add.w	r2, r2, #15
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800693c:	d803      	bhi.n	8006946 <vTaskGetRunTimeStats+0x92>
			pcBuffer[ x ] = ' ';
 800693e:	f000 fd11 	bl	8007364 <memset>
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8006942:	f04f 0c0f 	mov.w	ip, #15
		pcBuffer[ x ] = ( char ) 0x00;
 8006946:	2200      	movs	r2, #0
 8006948:	eb0b 050c 	add.w	r5, fp, ip
					if( ulStatsAsPercentage > 0UL )
 800694c:	42b7      	cmp	r7, r6
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800694e:	4651      	mov	r1, sl
 8006950:	4628      	mov	r0, r5
		pcBuffer[ x ] = ( char ) 0x00;
 8006952:	f80b 200c 	strb.w	r2, [fp, ip]
					if( ulStatsAsPercentage > 0UL )
 8006956:	d2d5      	bcs.n	8006904 <vTaskGetRunTimeStats+0x50>
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8006958:	69a2      	ldr	r2, [r4, #24]
				for( x = 0; x < uxArraySize; x++ )
 800695a:	3424      	adds	r4, #36	; 0x24
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800695c:	4909      	ldr	r1, [pc, #36]	; (8006984 <vTaskGetRunTimeStats+0xd0>)
 800695e:	f001 f9f1 	bl	8007d44 <siprintf>
					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8006962:	4628      	mov	r0, r5
 8006964:	f7f9 fcce 	bl	8000304 <strlen>
				for( x = 0; x < uxArraySize; x++ )
 8006968:	4544      	cmp	r4, r8
					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800696a:	eb05 0b00 	add.w	fp, r5, r0
				for( x = 0; x < uxArraySize; x++ )
 800696e:	d1d6      	bne.n	800691e <vTaskGetRunTimeStats+0x6a>
			vPortFree( pxTaskStatusArray );
 8006970:	4648      	mov	r0, r9
 8006972:	f000 fc5d 	bl	8007230 <vPortFree>
	}
 8006976:	b003      	add	sp, #12
 8006978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800697c:	2404f300 	.word	0x2404f300
 8006980:	51eb851f 	.word	0x51eb851f
 8006984:	0800a60c 	.word	0x0800a60c
 8006988:	0800a600 	.word	0x0800a600

0800698c <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800698c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006990:	4e22      	ldr	r6, [pc, #136]	; (8006a1c <prvSwitchTimerLists+0x90>)
 8006992:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 8006994:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8006a24 <prvSwitchTimerLists+0x98>
		xMessage.xMessageID = xCommandID;
 8006998:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800699c:	e00d      	b.n	80069ba <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800699e:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069a0:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069a2:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069a4:	1d25      	adds	r5, r4, #4
 80069a6:	4628      	mov	r0, r5
 80069a8:	f7fe fbbe 	bl	8005128 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069ac:	6a23      	ldr	r3, [r4, #32]
 80069ae:	4620      	mov	r0, r4
 80069b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069b2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80069b6:	075b      	lsls	r3, r3, #29
 80069b8:	d40a      	bmi.n	80069d0 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069ba:	6833      	ldr	r3, [r6, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	2a00      	cmp	r2, #0
 80069c0:	d1ed      	bne.n	800699e <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 80069c2:	4a17      	ldr	r2, [pc, #92]	; (8006a20 <prvSwitchTimerLists+0x94>)
 80069c4:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80069c6:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 80069c8:	6031      	str	r1, [r6, #0]
}
 80069ca:	b005      	add	sp, #20
 80069cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80069d0:	69a3      	ldr	r3, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069d2:	4629      	mov	r1, r5
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80069d4:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 80069d6:	429f      	cmp	r7, r3
 80069d8:	d205      	bcs.n	80069e6 <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069da:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80069dc:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80069de:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069e0:	f7fe fb8a 	bl	80050f8 <vListInsert>
 80069e4:	e7e9      	b.n	80069ba <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
 80069e6:	f8d9 3000 	ldr.w	r3, [r9]
 80069ea:	b16b      	cbz	r3, 8006a08 <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80069ec:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80069ee:	e9cd 8700 	strd	r8, r7, [sp]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80069f2:	f7ff ff09 	bl	8006808 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80069f6:	2300      	movs	r3, #0
 80069f8:	4669      	mov	r1, sp
 80069fa:	f8d9 0000 	ldr.w	r0, [r9]
 80069fe:	461a      	mov	r2, r3
 8006a00:	f7fe fc54 	bl	80052ac <xQueueGenericSend>
				configASSERT( xResult );
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d1d8      	bne.n	80069ba <prvSwitchTimerLists+0x2e>
 8006a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0c:	f383 8811 	msr	BASEPRI, r3
 8006a10:	f3bf 8f6f 	isb	sy
 8006a14:	f3bf 8f4f 	dsb	sy
 8006a18:	e7fe      	b.n	8006a18 <prvSwitchTimerLists+0x8c>
 8006a1a:	bf00      	nop
 8006a1c:	2404f390 	.word	0x2404f390
 8006a20:	2404f394 	.word	0x2404f394
 8006a24:	2404f4b4 	.word	0x2404f4b4

08006a28 <prvTimerTask>:
{
 8006a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2c:	4e9f      	ldr	r6, [pc, #636]	; (8006cac <prvTimerTask+0x284>)
 8006a2e:	b089      	sub	sp, #36	; 0x24
 8006a30:	4d9f      	ldr	r5, [pc, #636]	; (8006cb0 <prvTimerTask+0x288>)
					portYIELD_WITHIN_API();
 8006a32:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8006a36:	4c9f      	ldr	r4, [pc, #636]	; (8006cb4 <prvTimerTask+0x28c>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a38:	6833      	ldr	r3, [r6, #0]
 8006a3a:	681f      	ldr	r7, [r3, #0]
 8006a3c:	2f00      	cmp	r7, #0
 8006a3e:	f000 80b2 	beq.w	8006ba6 <prvTimerTask+0x17e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 8006a46:	f7ff fc57 	bl	80062f8 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8006a4a:	f7ff fc6d 	bl	8006328 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8006a4e:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8006a50:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8006a52:	4290      	cmp	r0, r2
 8006a54:	f0c0 80af 	bcc.w	8006bb6 <prvTimerTask+0x18e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a58:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 8006a5a:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a5c:	f200 80d0 	bhi.w	8006c00 <prvTimerTask+0x1d8>
				( void ) xTaskResumeAll();
 8006a60:	f7ff fc52 	bl	8006308 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a64:	6832      	ldr	r2, [r6, #0]
 8006a66:	68d2      	ldr	r2, [r2, #12]
 8006a68:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a6c:	f10b 0804 	add.w	r8, fp, #4
 8006a70:	4640      	mov	r0, r8
 8006a72:	f7fe fb59 	bl	8005128 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a76:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
 8006a7a:	0741      	lsls	r1, r0, #29
 8006a7c:	f100 80d0 	bmi.w	8006c20 <prvTimerTask+0x1f8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a80:	f020 0001 	bic.w	r0, r0, #1
 8006a84:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a88:	f8db 3020 	ldr.w	r3, [fp, #32]
 8006a8c:	4658      	mov	r0, fp
 8006a8e:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a90:	2200      	movs	r2, #0
 8006a92:	4669      	mov	r1, sp
 8006a94:	6820      	ldr	r0, [r4, #0]
 8006a96:	f7fe fd8b 	bl	80055b0 <xQueueReceive>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	d0cc      	beq.n	8006a38 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006a9e:	9b00      	ldr	r3, [sp, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	db77      	blt.n	8006b94 <prvTimerTask+0x16c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006aa4:	9f02      	ldr	r7, [sp, #8]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	b113      	cbz	r3, 8006ab0 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006aaa:	1d38      	adds	r0, r7, #4
 8006aac:	f7fe fb3c 	bl	8005128 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8006ab0:	f7ff fc3a 	bl	8006328 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8006ab4:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8006ab6:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 8006ab8:	4298      	cmp	r0, r3
 8006aba:	f0c0 8083 	bcc.w	8006bc4 <prvTimerTask+0x19c>
			switch( xMessage.xMessageID )
 8006abe:	9b00      	ldr	r3, [sp, #0]
	xLastTime = xTimeNow;
 8006ac0:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
 8006ac4:	2b09      	cmp	r3, #9
 8006ac6:	d8e3      	bhi.n	8006a90 <prvTimerTask+0x68>
 8006ac8:	e8df f003 	tbb	[pc, r3]
 8006acc:	54050505 	.word	0x54050505
 8006ad0:	05055b3e 	.word	0x05055b3e
 8006ad4:	3e54      	.short	0x3e54
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ad6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006ada:	69ba      	ldr	r2, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006adc:	f043 0301 	orr.w	r3, r3, #1
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ae0:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ae2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006ae6:	9b01      	ldr	r3, [sp, #4]
 8006ae8:	1899      	adds	r1, r3, r2
 8006aea:	bf2c      	ite	cs
 8006aec:	2001      	movcs	r0, #1
 8006aee:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8006af0:	4541      	cmp	r1, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006af2:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8006af4:	f200 8086 	bhi.w	8006c04 <prvTimerTask+0x1dc>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006af8:	eba8 0303 	sub.w	r3, r8, r3
 8006afc:	429a      	cmp	r2, r3
 8006afe:	f200 80c0 	bhi.w	8006c82 <prvTimerTask+0x25a>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	4638      	mov	r0, r7
 8006b06:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b0c:	075b      	lsls	r3, r3, #29
 8006b0e:	d5bf      	bpl.n	8006a90 <prvTimerTask+0x68>
	if( xTimerQueue != NULL )
 8006b10:	6823      	ldr	r3, [r4, #0]
 8006b12:	b183      	cbz	r3, 8006b36 <prvTimerTask+0x10e>
		xMessage.xMessageID = xCommandID;
 8006b14:	2200      	movs	r2, #0
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b16:	69bb      	ldr	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006b18:	9706      	str	r7, [sp, #24]
		xMessage.xMessageID = xCommandID;
 8006b1a:	9204      	str	r2, [sp, #16]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b1c:	9a01      	ldr	r2, [sp, #4]
 8006b1e:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006b20:	9305      	str	r3, [sp, #20]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006b22:	f7ff fe71 	bl	8006808 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006b26:	2300      	movs	r3, #0
 8006b28:	a904      	add	r1, sp, #16
 8006b2a:	6820      	ldr	r0, [r4, #0]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	f7fe fbbd 	bl	80052ac <xQueueGenericSend>
							configASSERT( xResult );
 8006b32:	2800      	cmp	r0, #0
 8006b34:	d1ac      	bne.n	8006a90 <prvTimerTask+0x68>
 8006b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	e7fe      	b.n	8006b46 <prvTimerTask+0x11e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b4c:	f043 0301 	orr.w	r3, r3, #1
 8006b50:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006b54:	9b01      	ldr	r3, [sp, #4]
 8006b56:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 809e 	beq.w	8006c9a <prvTimerTask+0x272>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006b5e:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b60:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b62:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 8006b64:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b66:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8006b68:	d856      	bhi.n	8006c18 <prvTimerTask+0x1f0>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b6a:	4b53      	ldr	r3, [pc, #332]	; (8006cb8 <prvTimerTask+0x290>)
 8006b6c:	6818      	ldr	r0, [r3, #0]
 8006b6e:	f7fe fac3 	bl	80050f8 <vListInsert>
	return xProcessTimerNow;
 8006b72:	e78d      	b.n	8006a90 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b78:	f023 0301 	bic.w	r3, r3, #1
 8006b7c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
 8006b80:	e786      	b.n	8006a90 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006b82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b86:	079a      	lsls	r2, r3, #30
 8006b88:	d572      	bpl.n	8006c70 <prvTimerTask+0x248>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b8a:	f023 0301 	bic.w	r3, r3, #1
 8006b8e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8006b92:	e77d      	b.n	8006a90 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006b94:	9b01      	ldr	r3, [sp, #4]
 8006b96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b9a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006b9c:	9b00      	ldr	r3, [sp, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f6ff af76 	blt.w	8006a90 <prvTimerTask+0x68>
 8006ba4:	e77e      	b.n	8006aa4 <prvTimerTask+0x7c>
	vTaskSuspendAll();
 8006ba6:	f7ff fba7 	bl	80062f8 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8006baa:	f7ff fbbd 	bl	8006328 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8006bae:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8006bb0:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8006bb2:	4282      	cmp	r2, r0
 8006bb4:	d909      	bls.n	8006bca <prvTimerTask+0x1a2>
		prvSwitchTimerLists();
 8006bb6:	f7ff fee9 	bl	800698c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8006bba:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 8006bbe:	f7ff fba3 	bl	8006308 <xTaskResumeAll>
 8006bc2:	e765      	b.n	8006a90 <prvTimerTask+0x68>
		prvSwitchTimerLists();
 8006bc4:	f7ff fee2 	bl	800698c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006bc8:	e779      	b.n	8006abe <prvTimerTask+0x96>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006bca:	4b3b      	ldr	r3, [pc, #236]	; (8006cb8 <prvTimerTask+0x290>)
	xLastTime = xTimeNow;
 8006bcc:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	6812      	ldr	r2, [r2, #0]
 8006bd4:	fab2 f282 	clz	r2, r2
 8006bd8:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006bda:	eba7 010a 	sub.w	r1, r7, sl
 8006bde:	6820      	ldr	r0, [r4, #0]
 8006be0:	f7fe fe90 	bl	8005904 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006be4:	f7ff fb90 	bl	8006308 <xTaskResumeAll>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	f47f af51 	bne.w	8006a90 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
 8006bee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006bf2:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	e747      	b.n	8006a90 <prvTimerTask+0x68>
 8006c00:	2200      	movs	r2, #0
 8006c02:	e7ea      	b.n	8006bda <prvTimerTask+0x1b2>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006c04:	4543      	cmp	r3, r8
 8006c06:	d902      	bls.n	8006c0e <prvTimerTask+0x1e6>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	f43f af7a 	beq.w	8006b02 <prvTimerTask+0xda>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c0e:	1d39      	adds	r1, r7, #4
 8006c10:	6830      	ldr	r0, [r6, #0]
 8006c12:	f7fe fa71 	bl	80050f8 <vListInsert>
	return xProcessTimerNow;
 8006c16:	e73b      	b.n	8006a90 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c18:	6830      	ldr	r0, [r6, #0]
 8006c1a:	f7fe fa6d 	bl	80050f8 <vListInsert>
 8006c1e:	e737      	b.n	8006a90 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c20:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c24:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c28:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 8006c2a:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c2c:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8006c30:	d322      	bcc.n	8006c78 <prvTimerTask+0x250>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c32:	ebaa 0307 	sub.w	r3, sl, r7
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d829      	bhi.n	8006c8e <prvTimerTask+0x266>
	if( xTimerQueue != NULL )
 8006c3a:	6823      	ldr	r3, [r4, #0]
 8006c3c:	b17b      	cbz	r3, 8006c5e <prvTimerTask+0x236>
		xMessage.xMessageID = xCommandID;
 8006c3e:	2300      	movs	r3, #0
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c40:	9705      	str	r7, [sp, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006c42:	f8cd b018 	str.w	fp, [sp, #24]
		xMessage.xMessageID = xCommandID;
 8006c46:	9304      	str	r3, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c48:	f7ff fdde 	bl	8006808 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	a904      	add	r1, sp, #16
 8006c50:	6820      	ldr	r0, [r4, #0]
 8006c52:	461a      	mov	r2, r3
 8006c54:	f7fe fb2a 	bl	80052ac <xQueueGenericSend>
			configASSERT( xResult );
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	f47f af15 	bne.w	8006a88 <prvTimerTask+0x60>
 8006c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	e7fe      	b.n	8006c6e <prvTimerTask+0x246>
							vPortFree( pxTimer );
 8006c70:	4638      	mov	r0, r7
 8006c72:	f000 fadd 	bl	8007230 <vPortFree>
 8006c76:	e70b      	b.n	8006a90 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c78:	4641      	mov	r1, r8
 8006c7a:	6830      	ldr	r0, [r6, #0]
 8006c7c:	f7fe fa3c 	bl	80050f8 <vListInsert>
	return xProcessTimerNow;
 8006c80:	e702      	b.n	8006a88 <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006c82:	4b0d      	ldr	r3, [pc, #52]	; (8006cb8 <prvTimerTask+0x290>)
 8006c84:	1d39      	adds	r1, r7, #4
 8006c86:	6818      	ldr	r0, [r3, #0]
 8006c88:	f7fe fa36 	bl	80050f8 <vListInsert>
	return xProcessTimerNow;
 8006c8c:	e700      	b.n	8006a90 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006c8e:	4b0a      	ldr	r3, [pc, #40]	; (8006cb8 <prvTimerTask+0x290>)
 8006c90:	4641      	mov	r1, r8
 8006c92:	6818      	ldr	r0, [r3, #0]
 8006c94:	f7fe fa30 	bl	80050f8 <vListInsert>
	return xProcessTimerNow;
 8006c98:	e6f6      	b.n	8006a88 <prvTimerTask+0x60>
 8006c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9e:	f383 8811 	msr	BASEPRI, r3
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006caa:	e7fe      	b.n	8006caa <prvTimerTask+0x282>
 8006cac:	2404f390 	.word	0x2404f390
 8006cb0:	2404f460 	.word	0x2404f460
 8006cb4:	2404f4b4 	.word	0x2404f4b4
 8006cb8:	2404f394 	.word	0x2404f394

08006cbc <xTimerCreateTimerTask>:
{
 8006cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8006cbe:	4c23      	ldr	r4, [pc, #140]	; (8006d4c <xTimerCreateTimerTask+0x90>)
{
 8006cc0:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
 8006cc2:	f000 f8c7 	bl	8006e54 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8006cc6:	6825      	ldr	r5, [r4, #0]
 8006cc8:	b335      	cbz	r5, 8006d18 <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cca:	f000 f8e5 	bl	8006e98 <vPortExitCritical>
	if( xTimerQueue != NULL )
 8006cce:	6823      	ldr	r3, [r4, #0]
 8006cd0:	b1cb      	cbz	r3, 8006d06 <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006cd2:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006cd4:	aa07      	add	r2, sp, #28
 8006cd6:	a906      	add	r1, sp, #24
 8006cd8:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006cda:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006cdc:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006ce0:	f7fe f9da 	bl	8005098 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006ce4:	4623      	mov	r3, r4
 8006ce6:	9a07      	ldr	r2, [sp, #28]
 8006ce8:	9500      	str	r5, [sp, #0]
 8006cea:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8006cee:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8006cf2:	4917      	ldr	r1, [pc, #92]	; (8006d50 <xTimerCreateTimerTask+0x94>)
 8006cf4:	4817      	ldr	r0, [pc, #92]	; (8006d54 <xTimerCreateTimerTask+0x98>)
 8006cf6:	f7ff f9ab 	bl	8006050 <xTaskCreateStatic>
 8006cfa:	4b17      	ldr	r3, [pc, #92]	; (8006d58 <xTimerCreateTimerTask+0x9c>)
 8006cfc:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8006cfe:	b110      	cbz	r0, 8006d06 <xTimerCreateTimerTask+0x4a>
}
 8006d00:	2001      	movs	r0, #1
 8006d02:	b009      	add	sp, #36	; 0x24
 8006d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8006d16:	e7fe      	b.n	8006d16 <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
 8006d18:	4f10      	ldr	r7, [pc, #64]	; (8006d5c <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
 8006d1a:	4e11      	ldr	r6, [pc, #68]	; (8006d60 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
 8006d1c:	4638      	mov	r0, r7
 8006d1e:	f7fe f9cb 	bl	80050b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006d22:	4630      	mov	r0, r6
 8006d24:	f7fe f9c8 	bl	80050b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006d28:	4a0e      	ldr	r2, [pc, #56]	; (8006d64 <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d2a:	9500      	str	r5, [sp, #0]
 8006d2c:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8006d2e:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d30:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8006d32:	4a0d      	ldr	r2, [pc, #52]	; (8006d68 <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d34:	4b0d      	ldr	r3, [pc, #52]	; (8006d6c <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
 8006d36:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d38:	4a0d      	ldr	r2, [pc, #52]	; (8006d70 <xTimerCreateTimerTask+0xb4>)
 8006d3a:	f7fe fa4b 	bl	80051d4 <xQueueGenericCreateStatic>
 8006d3e:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8006d40:	2800      	cmp	r0, #0
 8006d42:	d0c2      	beq.n	8006cca <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d44:	490b      	ldr	r1, [pc, #44]	; (8006d74 <xTimerCreateTimerTask+0xb8>)
 8006d46:	f7fe fdb5 	bl	80058b4 <vQueueAddToRegistry>
 8006d4a:	e7be      	b.n	8006cca <xTimerCreateTimerTask+0xe>
 8006d4c:	2404f4b4 	.word	0x2404f4b4
 8006d50:	0800a620 	.word	0x0800a620
 8006d54:	08006a29 	.word	0x08006a29
 8006d58:	2404f4b8 	.word	0x2404f4b8
 8006d5c:	2404f438 	.word	0x2404f438
 8006d60:	2404f44c 	.word	0x2404f44c
 8006d64:	2404f390 	.word	0x2404f390
 8006d68:	2404f394 	.word	0x2404f394
 8006d6c:	2404f464 	.word	0x2404f464
 8006d70:	2404f398 	.word	0x2404f398
 8006d74:	0800a618 	.word	0x0800a618

08006d78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d78:	4808      	ldr	r0, [pc, #32]	; (8006d9c <prvPortStartFirstTask+0x24>)
 8006d7a:	6800      	ldr	r0, [r0, #0]
 8006d7c:	6800      	ldr	r0, [r0, #0]
 8006d7e:	f380 8808 	msr	MSP, r0
 8006d82:	f04f 0000 	mov.w	r0, #0
 8006d86:	f380 8814 	msr	CONTROL, r0
 8006d8a:	b662      	cpsie	i
 8006d8c:	b661      	cpsie	f
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	f3bf 8f6f 	isb	sy
 8006d96:	df00      	svc	0
 8006d98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d9a:	0000      	.short	0x0000
 8006d9c:	e000ed08 	.word	0xe000ed08

08006da0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006da0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006db0 <vPortEnableVFP+0x10>
 8006da4:	6801      	ldr	r1, [r0, #0]
 8006da6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006daa:	6001      	str	r1, [r0, #0]
 8006dac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006dae:	0000      	.short	0x0000
 8006db0:	e000ed88 	.word	0xe000ed88

08006db4 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8006db4:	4b0e      	ldr	r3, [pc, #56]	; (8006df0 <prvTaskExitError+0x3c>)
{
 8006db6:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8006db8:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8006dba:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 8006dbc:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	d008      	beq.n	8006dd4 <prvTaskExitError+0x20>
 8006dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	e7fe      	b.n	8006dd2 <prvTaskExitError+0x1e>
 8006dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd8:	f383 8811 	msr	BASEPRI, r3
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8006de4:	9b01      	ldr	r3, [sp, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d0fc      	beq.n	8006de4 <prvTaskExitError+0x30>
}
 8006dea:	b002      	add	sp, #8
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	2404e2d8 	.word	0x2404e2d8

08006df4 <pxPortInitialiseStack>:
{
 8006df4:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006df6:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006dfa:	4809      	ldr	r0, [pc, #36]	; (8006e20 <pxPortInitialiseStack+0x2c>)
{
 8006dfc:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006dfe:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006e02:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006e06:	f843 2c20 	str.w	r2, [r3, #-32]
}
 8006e0a:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e0e:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e12:	f06f 0102 	mvn.w	r1, #2
}
 8006e16:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e1a:	f843 1c24 	str.w	r1, [r3, #-36]
}
 8006e1e:	4770      	bx	lr
 8006e20:	08006db5 	.word	0x08006db5
	...

08006e30 <SVC_Handler>:
	__asm volatile (
 8006e30:	4b07      	ldr	r3, [pc, #28]	; (8006e50 <pxCurrentTCBConst2>)
 8006e32:	6819      	ldr	r1, [r3, #0]
 8006e34:	6808      	ldr	r0, [r1, #0]
 8006e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e3a:	f380 8809 	msr	PSP, r0
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f04f 0000 	mov.w	r0, #0
 8006e46:	f380 8811 	msr	BASEPRI, r0
 8006e4a:	4770      	bx	lr
 8006e4c:	f3af 8000 	nop.w

08006e50 <pxCurrentTCBConst2>:
 8006e50:	2404ee90 	.word	0x2404ee90

08006e54 <vPortEnterCritical>:
 8006e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e58:	f383 8811 	msr	BASEPRI, r3
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8006e64:	4a0b      	ldr	r2, [pc, #44]	; (8006e94 <vPortEnterCritical+0x40>)
 8006e66:	6813      	ldr	r3, [r2, #0]
 8006e68:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8006e6a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8006e6c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8006e6e:	d000      	beq.n	8006e72 <vPortEnterCritical+0x1e>
}
 8006e70:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e72:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006e76:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d0f7      	beq.n	8006e70 <vPortEnterCritical+0x1c>
 8006e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e84:	f383 8811 	msr	BASEPRI, r3
 8006e88:	f3bf 8f6f 	isb	sy
 8006e8c:	f3bf 8f4f 	dsb	sy
 8006e90:	e7fe      	b.n	8006e90 <vPortEnterCritical+0x3c>
 8006e92:	bf00      	nop
 8006e94:	2404e2d8 	.word	0x2404e2d8

08006e98 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006e98:	4a08      	ldr	r2, [pc, #32]	; (8006ebc <vPortExitCritical+0x24>)
 8006e9a:	6813      	ldr	r3, [r2, #0]
 8006e9c:	b943      	cbnz	r3, 8006eb0 <vPortExitCritical+0x18>
 8006e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	e7fe      	b.n	8006eae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006eb4:	b90b      	cbnz	r3, 8006eba <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006eb6:	f383 8811 	msr	BASEPRI, r3
}
 8006eba:	4770      	bx	lr
 8006ebc:	2404e2d8 	.word	0x2404e2d8

08006ec0 <PendSV_Handler>:
	__asm volatile
 8006ec0:	f3ef 8009 	mrs	r0, PSP
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	4b15      	ldr	r3, [pc, #84]	; (8006f20 <pxCurrentTCBConst>)
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	f01e 0f10 	tst.w	lr, #16
 8006ed0:	bf08      	it	eq
 8006ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eda:	6010      	str	r0, [r2, #0]
 8006edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ee4:	f380 8811 	msr	BASEPRI, r0
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f7ff fb08 	bl	8006504 <vTaskSwitchContext>
 8006ef4:	f04f 0000 	mov.w	r0, #0
 8006ef8:	f380 8811 	msr	BASEPRI, r0
 8006efc:	bc09      	pop	{r0, r3}
 8006efe:	6819      	ldr	r1, [r3, #0]
 8006f00:	6808      	ldr	r0, [r1, #0]
 8006f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f06:	f01e 0f10 	tst.w	lr, #16
 8006f0a:	bf08      	it	eq
 8006f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f10:	f380 8809 	msr	PSP, r0
 8006f14:	f3bf 8f6f 	isb	sy
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	f3af 8000 	nop.w

08006f20 <pxCurrentTCBConst>:
 8006f20:	2404ee90 	.word	0x2404ee90

08006f24 <xPortSysTickHandler>:
{
 8006f24:	b508      	push	{r3, lr}
	__asm volatile
 8006f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2a:	f383 8811 	msr	BASEPRI, r3
 8006f2e:	f3bf 8f6f 	isb	sy
 8006f32:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8006f36:	f7ff fad5 	bl	80064e4 <xTaskIncrementTick>
 8006f3a:	b128      	cbz	r0, 8006f48 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f3c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f44:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f383 8811 	msr	BASEPRI, r3
}
 8006f4e:	bd08      	pop	{r3, pc}

08006f50 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f50:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8006f54:	2100      	movs	r1, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f56:	4b06      	ldr	r3, [pc, #24]	; (8006f70 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f58:	6111      	str	r1, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f5a:	4806      	ldr	r0, [pc, #24]	; (8006f74 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f5c:	6191      	str	r1, [r2, #24]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f5e:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	fba0 0303 	umull	r0, r3, r0, r3
 8006f66:	099b      	lsrs	r3, r3, #6
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f6c:	6111      	str	r1, [r2, #16]
}
 8006f6e:	4770      	bx	lr
 8006f70:	24000000 	.word	0x24000000
 8006f74:	10624dd3 	.word	0x10624dd3

08006f78 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006f78:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006f7c:	4a48      	ldr	r2, [pc, #288]	; (80070a0 <xPortStartScheduler+0x128>)
 8006f7e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8006f82:	4291      	cmp	r1, r2
 8006f84:	d041      	beq.n	800700a <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006f86:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8006f8a:	4b46      	ldr	r3, [pc, #280]	; (80070a4 <xPortStartScheduler+0x12c>)
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d033      	beq.n	8006ff8 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f90:	4b45      	ldr	r3, [pc, #276]	; (80070a8 <xPortStartScheduler+0x130>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f92:	f04f 0cff 	mov.w	ip, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f96:	4845      	ldr	r0, [pc, #276]	; (80070ac <xPortStartScheduler+0x134>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f98:	4945      	ldr	r1, [pc, #276]	; (80070b0 <xPortStartScheduler+0x138>)
{
 8006f9a:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f9c:	781a      	ldrb	r2, [r3, #0]
{
 8006f9e:	b084      	sub	sp, #16
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006fa0:	b2d2      	uxtb	r2, r2
 8006fa2:	9202      	str	r2, [sp, #8]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006fa4:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006fa6:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006faa:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006fac:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006fb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fb8:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006fbc:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fc0:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006fc2:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fc4:	d50f      	bpl.n	8006fe6 <xPortStartScheduler+0x6e>
 8006fc6:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006fc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006fcc:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fce:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006fd0:	005b      	lsls	r3, r3, #1
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006fdc:	061b      	lsls	r3, r3, #24
 8006fde:	d4f3      	bmi.n	8006fc8 <xPortStartScheduler+0x50>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006fe0:	2903      	cmp	r1, #3
 8006fe2:	d01b      	beq.n	800701c <xPortStartScheduler+0xa4>
 8006fe4:	6001      	str	r1, [r0, #0]
	__asm volatile
 8006fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fea:	f383 8811 	msr	BASEPRI, r3
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	f3bf 8f4f 	dsb	sy
 8006ff6:	e7fe      	b.n	8006ff6 <xPortStartScheduler+0x7e>
 8006ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007008:	e7fe      	b.n	8007008 <xPortStartScheduler+0x90>
 800700a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800701a:	e7fe      	b.n	800701a <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800701c:	9b02      	ldr	r3, [sp, #8]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800701e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007022:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007026:	4a20      	ldr	r2, [pc, #128]	; (80070a8 <xPortStartScheduler+0x130>)
 8007028:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
 800702a:	4e22      	ldr	r6, [pc, #136]	; (80070b4 <xPortStartScheduler+0x13c>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800702c:	6001      	str	r1, [r0, #0]
	uxCriticalNesting = 0;
 800702e:	2500      	movs	r5, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007030:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007032:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8007036:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800703a:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800703e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8007042:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007046:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800704a:	f7ff ff81 	bl	8006f50 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800704e:	6035      	str	r5, [r6, #0]
	vPortEnableVFP();
 8007050:	f7ff fea6 	bl	8006da0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007054:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8007058:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800705c:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8007060:	f7ff fe8a 	bl	8006d78 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007064:	f7ff fa4e 	bl	8006504 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 8007068:	6833      	ldr	r3, [r6, #0]
volatile uint32_t ulDummy = 0;
 800706a:	9503      	str	r5, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 800706c:	3301      	adds	r3, #1
 800706e:	d008      	beq.n	8007082 <xPortStartScheduler+0x10a>
 8007070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	e7fe      	b.n	8007080 <xPortStartScheduler+0x108>
 8007082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007086:	f383 8811 	msr	BASEPRI, r3
 800708a:	f3bf 8f6f 	isb	sy
 800708e:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8007092:	9b03      	ldr	r3, [sp, #12]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d0fc      	beq.n	8007092 <xPortStartScheduler+0x11a>
}
 8007098:	2000      	movs	r0, #0
 800709a:	b004      	add	sp, #16
 800709c:	bd70      	pop	{r4, r5, r6, pc}
 800709e:	bf00      	nop
 80070a0:	410fc271 	.word	0x410fc271
 80070a4:	410fc270 	.word	0x410fc270
 80070a8:	e000e400 	.word	0xe000e400
 80070ac:	2404f4c0 	.word	0x2404f4c0
 80070b0:	2404f4bc 	.word	0x2404f4bc
 80070b4:	2404e2d8 	.word	0x2404e2d8

080070b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80070b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070bc:	4606      	mov	r6, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 80070be:	f7ff f91b 	bl	80062f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80070c2:	4b54      	ldr	r3, [pc, #336]	; (8007214 <pvPortMalloc+0x15c>)
 80070c4:	681d      	ldr	r5, [r3, #0]
 80070c6:	2d00      	cmp	r5, #0
 80070c8:	d06f      	beq.n	80071aa <pvPortMalloc+0xf2>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80070ca:	4b53      	ldr	r3, [pc, #332]	; (8007218 <pvPortMalloc+0x160>)
 80070cc:	681f      	ldr	r7, [r3, #0]
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80070ce:	423e      	tst	r6, r7
 80070d0:	d12e      	bne.n	8007130 <pvPortMalloc+0x78>
 80070d2:	b36e      	cbz	r6, 8007130 <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
 80070d4:	f106 0408 	add.w	r4, r6, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80070d8:	0776      	lsls	r6, r6, #29
 80070da:	d002      	beq.n	80070e2 <pvPortMalloc+0x2a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80070dc:	f024 0407 	bic.w	r4, r4, #7
 80070e0:	3408      	adds	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80070e2:	b32c      	cbz	r4, 8007130 <pvPortMalloc+0x78>
 80070e4:	f8df c144 	ldr.w	ip, [pc, #324]	; 800722c <pvPortMalloc+0x174>
 80070e8:	f8dc 6000 	ldr.w	r6, [ip]
 80070ec:	42a6      	cmp	r6, r4
 80070ee:	d31f      	bcc.n	8007130 <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 80070f0:	484a      	ldr	r0, [pc, #296]	; (800721c <pvPortMalloc+0x164>)
 80070f2:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070f4:	e003      	b.n	80070fe <pvPortMalloc+0x46>
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	b122      	cbz	r2, 8007104 <pvPortMalloc+0x4c>
 80070fa:	4618      	mov	r0, r3
 80070fc:	4613      	mov	r3, r2
 80070fe:	6859      	ldr	r1, [r3, #4]
 8007100:	42a1      	cmp	r1, r4
 8007102:	d3f8      	bcc.n	80070f6 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007104:	42ab      	cmp	r3, r5
 8007106:	d013      	beq.n	8007130 <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007108:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800710a:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800710c:	f858 eb08 	ldr.w	lr, [r8], #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007110:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007112:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007116:	d929      	bls.n	800716c <pvPortMalloc+0xb4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007118:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800711a:	0748      	lsls	r0, r1, #29
 800711c:	d00f      	beq.n	800713e <pvPortMalloc+0x86>
 800711e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	e7fe      	b.n	800712e <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007130:	f04f 0800 	mov.w	r8, #0
 8007134:	f7ff f8e8 	bl	8006308 <xTaskResumeAll>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 8007138:	4640      	mov	r0, r8
 800713a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800713e:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007140:	4a36      	ldr	r2, [pc, #216]	; (800721c <pvPortMalloc+0x164>)
						pxBlock->xBlockSize = xWantedSize;
 8007142:	605c      	str	r4, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007144:	4614      	mov	r4, r2
 8007146:	6812      	ldr	r2, [r2, #0]
 8007148:	4291      	cmp	r1, r2
 800714a:	d8fb      	bhi.n	8007144 <pvPortMalloc+0x8c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800714c:	6860      	ldr	r0, [r4, #4]
 800714e:	eb04 0e00 	add.w	lr, r4, r0
 8007152:	4571      	cmp	r1, lr
 8007154:	d04e      	beq.n	80071f4 <pvPortMalloc+0x13c>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007156:	f8d1 e004 	ldr.w	lr, [r1, #4]
 800715a:	eb01 000e 	add.w	r0, r1, lr
 800715e:	4282      	cmp	r2, r0
 8007160:	d04f      	beq.n	8007202 <pvPortMalloc+0x14a>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007162:	600a      	str	r2, [r1, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007164:	428c      	cmp	r4, r1
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007166:	bf18      	it	ne
 8007168:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800716a:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800716c:	4a2c      	ldr	r2, [pc, #176]	; (8007220 <pvPortMalloc+0x168>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800716e:	1a76      	subs	r6, r6, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007170:	4339      	orrs	r1, r7
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007172:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007174:	f8cc 6000 	str.w	r6, [ip]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007178:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800717a:	f04f 0000 	mov.w	r0, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800717e:	bf38      	it	cc
 8007180:	6016      	strcc	r6, [r2, #0]
					xNumberOfSuccessfulAllocations++;
 8007182:	4a28      	ldr	r2, [pc, #160]	; (8007224 <pvPortMalloc+0x16c>)
					pxBlock->pxNextFreeBlock = NULL;
 8007184:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
 8007188:	6813      	ldr	r3, [r2, #0]
 800718a:	3301      	adds	r3, #1
 800718c:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800718e:	f7ff f8bb 	bl	8006308 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007192:	f018 0f07 	tst.w	r8, #7
 8007196:	d0cf      	beq.n	8007138 <pvPortMalloc+0x80>
 8007198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719c:	f383 8811 	msr	BASEPRI, r3
 80071a0:	f3bf 8f6f 	isb	sy
 80071a4:	f3bf 8f4f 	dsb	sy
 80071a8:	e7fe      	b.n	80071a8 <pvPortMalloc+0xf0>
	uxAddress = ( size_t ) ucHeap;
 80071aa:	491f      	ldr	r1, [pc, #124]	; (8007228 <pvPortMalloc+0x170>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80071ac:	074f      	lsls	r7, r1, #29
 80071ae:	d11a      	bne.n	80071e6 <pvPortMalloc+0x12e>
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80071b0:	460a      	mov	r2, r1
 80071b2:	f501 31c8 	add.w	r1, r1, #102400	; 0x19000
 80071b6:	4610      	mov	r0, r2
	uxAddress -= xHeapStructSize;
 80071b8:	f1a1 0508 	sub.w	r5, r1, #8
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80071bc:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80071c0:	4916      	ldr	r1, [pc, #88]	; (800721c <pvPortMalloc+0x164>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071c2:	f025 0507 	bic.w	r5, r5, #7
	pxEnd = ( void * ) uxAddress;
 80071c6:	601d      	str	r5, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80071c8:	1aab      	subs	r3, r5, r2
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071ca:	4a15      	ldr	r2, [pc, #84]	; (8007220 <pvPortMalloc+0x168>)
 80071cc:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071ce:	4a17      	ldr	r2, [pc, #92]	; (800722c <pvPortMalloc+0x174>)
 80071d0:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80071d2:	4a11      	ldr	r2, [pc, #68]	; (8007218 <pvPortMalloc+0x160>)
 80071d4:	6017      	str	r7, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80071d6:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80071d8:	e9c1 0200 	strd	r0, r2, [r1]
	pxEnd->pxNextFreeBlock = NULL;
 80071dc:	e9c5 2200 	strd	r2, r2, [r5]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80071e0:	e9c0 5300 	strd	r5, r3, [r0]
}
 80071e4:	e773      	b.n	80070ce <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80071e6:	1dca      	adds	r2, r1, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071e8:	f501 31c8 	add.w	r1, r1, #102400	; 0x19000
 80071ec:	f022 0207 	bic.w	r2, r2, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80071f0:	4610      	mov	r0, r2
 80071f2:	e7e1      	b.n	80071b8 <pvPortMalloc+0x100>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80071f4:	6849      	ldr	r1, [r1, #4]
 80071f6:	eb00 0e01 	add.w	lr, r0, r1
 80071fa:	4621      	mov	r1, r4
 80071fc:	f8c4 e004 	str.w	lr, [r4, #4]
		pxBlockToInsert = pxIterator;
 8007200:	e7ab      	b.n	800715a <pvPortMalloc+0xa2>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007202:	42aa      	cmp	r2, r5
 8007204:	d0ad      	beq.n	8007162 <pvPortMalloc+0xaa>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007206:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007208:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800720a:	4470      	add	r0, lr
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800720c:	600a      	str	r2, [r1, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800720e:	6048      	str	r0, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007210:	e7a8      	b.n	8007164 <pvPortMalloc+0xac>
 8007212:	bf00      	nop
 8007214:	2404f4c4 	.word	0x2404f4c4
 8007218:	240684c8 	.word	0x240684c8
 800721c:	240684dc 	.word	0x240684dc
 8007220:	240684d0 	.word	0x240684d0
 8007224:	240684d4 	.word	0x240684d4
 8007228:	2404f4c8 	.word	0x2404f4c8
 800722c:	240684cc 	.word	0x240684cc

08007230 <vPortFree>:
	if( pv != NULL )
 8007230:	b1d0      	cbz	r0, 8007268 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007232:	4a2b      	ldr	r2, [pc, #172]	; (80072e0 <vPortFree+0xb0>)
 8007234:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007238:	6812      	ldr	r2, [r2, #0]
 800723a:	4213      	tst	r3, r2
 800723c:	d00b      	beq.n	8007256 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800723e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007242:	b191      	cbz	r1, 800726a <vPortFree+0x3a>
 8007244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	e7fe      	b.n	8007254 <vPortFree+0x24>
 8007256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007266:	e7fe      	b.n	8007266 <vPortFree+0x36>
 8007268:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800726a:	ea23 0302 	bic.w	r3, r3, r2
{
 800726e:	b530      	push	{r4, r5, lr}
 8007270:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007272:	f840 3c04 	str.w	r3, [r0, #-4]
		puc -= xHeapStructSize;
 8007276:	f1a0 0408 	sub.w	r4, r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800727a:	4d1a      	ldr	r5, [pc, #104]	; (80072e4 <vPortFree+0xb4>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800727c:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 800727e:	f7ff f83b 	bl	80062f8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007282:	9801      	ldr	r0, [sp, #4]
 8007284:	682a      	ldr	r2, [r5, #0]
 8007286:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800728a:	4b17      	ldr	r3, [pc, #92]	; (80072e8 <vPortFree+0xb8>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 800728c:	440a      	add	r2, r1
 800728e:	602a      	str	r2, [r5, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007290:	461a      	mov	r2, r3
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	429c      	cmp	r4, r3
 8007296:	d8fb      	bhi.n	8007290 <vPortFree+0x60>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007298:	6850      	ldr	r0, [r2, #4]
 800729a:	eb02 0c00 	add.w	ip, r2, r0
 800729e:	4564      	cmp	r4, ip
 80072a0:	d019      	beq.n	80072d6 <vPortFree+0xa6>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80072a2:	1860      	adds	r0, r4, r1
 80072a4:	4283      	cmp	r3, r0
 80072a6:	d00c      	beq.n	80072c2 <vPortFree+0x92>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80072a8:	6023      	str	r3, [r4, #0]
	if( pxIterator != pxBlockToInsert )
 80072aa:	42a2      	cmp	r2, r4
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80072ac:	bf18      	it	ne
 80072ae:	6014      	strne	r4, [r2, #0]
					xNumberOfSuccessfulFrees++;
 80072b0:	4a0e      	ldr	r2, [pc, #56]	; (80072ec <vPortFree+0xbc>)
 80072b2:	6813      	ldr	r3, [r2, #0]
 80072b4:	3301      	adds	r3, #1
 80072b6:	6013      	str	r3, [r2, #0]
}
 80072b8:	b003      	add	sp, #12
 80072ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				( void ) xTaskResumeAll();
 80072be:	f7ff b823 	b.w	8006308 <xTaskResumeAll>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80072c2:	480b      	ldr	r0, [pc, #44]	; (80072f0 <vPortFree+0xc0>)
 80072c4:	6800      	ldr	r0, [r0, #0]
 80072c6:	4283      	cmp	r3, r0
 80072c8:	d0ee      	beq.n	80072a8 <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80072ca:	e9d3 3000 	ldrd	r3, r0, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80072ce:	4401      	add	r1, r0
 80072d0:	e9c4 3100 	strd	r3, r1, [r4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80072d4:	e7e9      	b.n	80072aa <vPortFree+0x7a>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072d6:	4401      	add	r1, r0
 80072d8:	4614      	mov	r4, r2
 80072da:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 80072dc:	e7e1      	b.n	80072a2 <vPortFree+0x72>
 80072de:	bf00      	nop
 80072e0:	240684c8 	.word	0x240684c8
 80072e4:	240684cc 	.word	0x240684cc
 80072e8:	240684dc 	.word	0x240684dc
 80072ec:	240684d8 	.word	0x240684d8
 80072f0:	2404f4c4 	.word	0x2404f4c4

080072f4 <__errno>:
 80072f4:	4b01      	ldr	r3, [pc, #4]	; (80072fc <__errno+0x8>)
 80072f6:	6818      	ldr	r0, [r3, #0]
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	2404e2dc 	.word	0x2404e2dc

08007300 <__libc_init_array>:
 8007300:	b570      	push	{r4, r5, r6, lr}
 8007302:	4d0d      	ldr	r5, [pc, #52]	; (8007338 <__libc_init_array+0x38>)
 8007304:	4c0d      	ldr	r4, [pc, #52]	; (800733c <__libc_init_array+0x3c>)
 8007306:	1b64      	subs	r4, r4, r5
 8007308:	10a4      	asrs	r4, r4, #2
 800730a:	2600      	movs	r6, #0
 800730c:	42a6      	cmp	r6, r4
 800730e:	d109      	bne.n	8007324 <__libc_init_array+0x24>
 8007310:	4d0b      	ldr	r5, [pc, #44]	; (8007340 <__libc_init_array+0x40>)
 8007312:	4c0c      	ldr	r4, [pc, #48]	; (8007344 <__libc_init_array+0x44>)
 8007314:	f003 f874 	bl	800a400 <_init>
 8007318:	1b64      	subs	r4, r4, r5
 800731a:	10a4      	asrs	r4, r4, #2
 800731c:	2600      	movs	r6, #0
 800731e:	42a6      	cmp	r6, r4
 8007320:	d105      	bne.n	800732e <__libc_init_array+0x2e>
 8007322:	bd70      	pop	{r4, r5, r6, pc}
 8007324:	f855 3b04 	ldr.w	r3, [r5], #4
 8007328:	4798      	blx	r3
 800732a:	3601      	adds	r6, #1
 800732c:	e7ee      	b.n	800730c <__libc_init_array+0xc>
 800732e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007332:	4798      	blx	r3
 8007334:	3601      	adds	r6, #1
 8007336:	e7f2      	b.n	800731e <__libc_init_array+0x1e>
 8007338:	0800b280 	.word	0x0800b280
 800733c:	0800b280 	.word	0x0800b280
 8007340:	0800b280 	.word	0x0800b280
 8007344:	0800b284 	.word	0x0800b284

08007348 <memcpy>:
 8007348:	440a      	add	r2, r1
 800734a:	4291      	cmp	r1, r2
 800734c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007350:	d100      	bne.n	8007354 <memcpy+0xc>
 8007352:	4770      	bx	lr
 8007354:	b510      	push	{r4, lr}
 8007356:	f811 4b01 	ldrb.w	r4, [r1], #1
 800735a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800735e:	4291      	cmp	r1, r2
 8007360:	d1f9      	bne.n	8007356 <memcpy+0xe>
 8007362:	bd10      	pop	{r4, pc}

08007364 <memset>:
 8007364:	4402      	add	r2, r0
 8007366:	4603      	mov	r3, r0
 8007368:	4293      	cmp	r3, r2
 800736a:	d100      	bne.n	800736e <memset+0xa>
 800736c:	4770      	bx	lr
 800736e:	f803 1b01 	strb.w	r1, [r3], #1
 8007372:	e7f9      	b.n	8007368 <memset+0x4>

08007374 <__cvt>:
 8007374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007376:	ed2d 8b02 	vpush	{d8}
 800737a:	eeb0 8b40 	vmov.f64	d8, d0
 800737e:	b085      	sub	sp, #20
 8007380:	4617      	mov	r7, r2
 8007382:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007384:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007386:	ee18 2a90 	vmov	r2, s17
 800738a:	f025 0520 	bic.w	r5, r5, #32
 800738e:	2a00      	cmp	r2, #0
 8007390:	bfb6      	itet	lt
 8007392:	222d      	movlt	r2, #45	; 0x2d
 8007394:	2200      	movge	r2, #0
 8007396:	eeb1 8b40 	vneglt.f64	d8, d0
 800739a:	2d46      	cmp	r5, #70	; 0x46
 800739c:	460c      	mov	r4, r1
 800739e:	701a      	strb	r2, [r3, #0]
 80073a0:	d004      	beq.n	80073ac <__cvt+0x38>
 80073a2:	2d45      	cmp	r5, #69	; 0x45
 80073a4:	d100      	bne.n	80073a8 <__cvt+0x34>
 80073a6:	3401      	adds	r4, #1
 80073a8:	2102      	movs	r1, #2
 80073aa:	e000      	b.n	80073ae <__cvt+0x3a>
 80073ac:	2103      	movs	r1, #3
 80073ae:	ab03      	add	r3, sp, #12
 80073b0:	9301      	str	r3, [sp, #4]
 80073b2:	ab02      	add	r3, sp, #8
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	4622      	mov	r2, r4
 80073b8:	4633      	mov	r3, r6
 80073ba:	eeb0 0b48 	vmov.f64	d0, d8
 80073be:	f000 fe37 	bl	8008030 <_dtoa_r>
 80073c2:	2d47      	cmp	r5, #71	; 0x47
 80073c4:	d101      	bne.n	80073ca <__cvt+0x56>
 80073c6:	07fb      	lsls	r3, r7, #31
 80073c8:	d51a      	bpl.n	8007400 <__cvt+0x8c>
 80073ca:	2d46      	cmp	r5, #70	; 0x46
 80073cc:	eb00 0204 	add.w	r2, r0, r4
 80073d0:	d10c      	bne.n	80073ec <__cvt+0x78>
 80073d2:	7803      	ldrb	r3, [r0, #0]
 80073d4:	2b30      	cmp	r3, #48	; 0x30
 80073d6:	d107      	bne.n	80073e8 <__cvt+0x74>
 80073d8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80073dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e0:	bf1c      	itt	ne
 80073e2:	f1c4 0401 	rsbne	r4, r4, #1
 80073e6:	6034      	strne	r4, [r6, #0]
 80073e8:	6833      	ldr	r3, [r6, #0]
 80073ea:	441a      	add	r2, r3
 80073ec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80073f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f4:	bf08      	it	eq
 80073f6:	9203      	streq	r2, [sp, #12]
 80073f8:	2130      	movs	r1, #48	; 0x30
 80073fa:	9b03      	ldr	r3, [sp, #12]
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d307      	bcc.n	8007410 <__cvt+0x9c>
 8007400:	9b03      	ldr	r3, [sp, #12]
 8007402:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007404:	1a1b      	subs	r3, r3, r0
 8007406:	6013      	str	r3, [r2, #0]
 8007408:	b005      	add	sp, #20
 800740a:	ecbd 8b02 	vpop	{d8}
 800740e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007410:	1c5c      	adds	r4, r3, #1
 8007412:	9403      	str	r4, [sp, #12]
 8007414:	7019      	strb	r1, [r3, #0]
 8007416:	e7f0      	b.n	80073fa <__cvt+0x86>

08007418 <__exponent>:
 8007418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800741a:	4603      	mov	r3, r0
 800741c:	2900      	cmp	r1, #0
 800741e:	bfb8      	it	lt
 8007420:	4249      	neglt	r1, r1
 8007422:	f803 2b02 	strb.w	r2, [r3], #2
 8007426:	bfb4      	ite	lt
 8007428:	222d      	movlt	r2, #45	; 0x2d
 800742a:	222b      	movge	r2, #43	; 0x2b
 800742c:	2909      	cmp	r1, #9
 800742e:	7042      	strb	r2, [r0, #1]
 8007430:	dd2a      	ble.n	8007488 <__exponent+0x70>
 8007432:	f10d 0407 	add.w	r4, sp, #7
 8007436:	46a4      	mov	ip, r4
 8007438:	270a      	movs	r7, #10
 800743a:	46a6      	mov	lr, r4
 800743c:	460a      	mov	r2, r1
 800743e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007442:	fb07 1516 	mls	r5, r7, r6, r1
 8007446:	3530      	adds	r5, #48	; 0x30
 8007448:	2a63      	cmp	r2, #99	; 0x63
 800744a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800744e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007452:	4631      	mov	r1, r6
 8007454:	dcf1      	bgt.n	800743a <__exponent+0x22>
 8007456:	3130      	adds	r1, #48	; 0x30
 8007458:	f1ae 0502 	sub.w	r5, lr, #2
 800745c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007460:	1c44      	adds	r4, r0, #1
 8007462:	4629      	mov	r1, r5
 8007464:	4561      	cmp	r1, ip
 8007466:	d30a      	bcc.n	800747e <__exponent+0x66>
 8007468:	f10d 0209 	add.w	r2, sp, #9
 800746c:	eba2 020e 	sub.w	r2, r2, lr
 8007470:	4565      	cmp	r5, ip
 8007472:	bf88      	it	hi
 8007474:	2200      	movhi	r2, #0
 8007476:	4413      	add	r3, r2
 8007478:	1a18      	subs	r0, r3, r0
 800747a:	b003      	add	sp, #12
 800747c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800747e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007482:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007486:	e7ed      	b.n	8007464 <__exponent+0x4c>
 8007488:	2330      	movs	r3, #48	; 0x30
 800748a:	3130      	adds	r1, #48	; 0x30
 800748c:	7083      	strb	r3, [r0, #2]
 800748e:	70c1      	strb	r1, [r0, #3]
 8007490:	1d03      	adds	r3, r0, #4
 8007492:	e7f1      	b.n	8007478 <__exponent+0x60>
 8007494:	0000      	movs	r0, r0
	...

08007498 <_printf_float>:
 8007498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800749c:	b08b      	sub	sp, #44	; 0x2c
 800749e:	460c      	mov	r4, r1
 80074a0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80074a4:	4616      	mov	r6, r2
 80074a6:	461f      	mov	r7, r3
 80074a8:	4605      	mov	r5, r0
 80074aa:	f001 fce7 	bl	8008e7c <_localeconv_r>
 80074ae:	f8d0 b000 	ldr.w	fp, [r0]
 80074b2:	4658      	mov	r0, fp
 80074b4:	f7f8 ff26 	bl	8000304 <strlen>
 80074b8:	2300      	movs	r3, #0
 80074ba:	9308      	str	r3, [sp, #32]
 80074bc:	f8d8 3000 	ldr.w	r3, [r8]
 80074c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80074c4:	6822      	ldr	r2, [r4, #0]
 80074c6:	3307      	adds	r3, #7
 80074c8:	f023 0307 	bic.w	r3, r3, #7
 80074cc:	f103 0108 	add.w	r1, r3, #8
 80074d0:	f8c8 1000 	str.w	r1, [r8]
 80074d4:	4682      	mov	sl, r0
 80074d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80074da:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80074de:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007740 <_printf_float+0x2a8>
 80074e2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80074e6:	eeb0 6bc0 	vabs.f64	d6, d0
 80074ea:	eeb4 6b47 	vcmp.f64	d6, d7
 80074ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074f2:	dd24      	ble.n	800753e <_printf_float+0xa6>
 80074f4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80074f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074fc:	d502      	bpl.n	8007504 <_printf_float+0x6c>
 80074fe:	232d      	movs	r3, #45	; 0x2d
 8007500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007504:	4b90      	ldr	r3, [pc, #576]	; (8007748 <_printf_float+0x2b0>)
 8007506:	4891      	ldr	r0, [pc, #580]	; (800774c <_printf_float+0x2b4>)
 8007508:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800750c:	bf94      	ite	ls
 800750e:	4698      	movls	r8, r3
 8007510:	4680      	movhi	r8, r0
 8007512:	2303      	movs	r3, #3
 8007514:	6123      	str	r3, [r4, #16]
 8007516:	f022 0204 	bic.w	r2, r2, #4
 800751a:	2300      	movs	r3, #0
 800751c:	6022      	str	r2, [r4, #0]
 800751e:	9304      	str	r3, [sp, #16]
 8007520:	9700      	str	r7, [sp, #0]
 8007522:	4633      	mov	r3, r6
 8007524:	aa09      	add	r2, sp, #36	; 0x24
 8007526:	4621      	mov	r1, r4
 8007528:	4628      	mov	r0, r5
 800752a:	f000 f9d3 	bl	80078d4 <_printf_common>
 800752e:	3001      	adds	r0, #1
 8007530:	f040 808a 	bne.w	8007648 <_printf_float+0x1b0>
 8007534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007538:	b00b      	add	sp, #44	; 0x2c
 800753a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800753e:	eeb4 0b40 	vcmp.f64	d0, d0
 8007542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007546:	d709      	bvc.n	800755c <_printf_float+0xc4>
 8007548:	ee10 3a90 	vmov	r3, s1
 800754c:	2b00      	cmp	r3, #0
 800754e:	bfbc      	itt	lt
 8007550:	232d      	movlt	r3, #45	; 0x2d
 8007552:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007556:	487e      	ldr	r0, [pc, #504]	; (8007750 <_printf_float+0x2b8>)
 8007558:	4b7e      	ldr	r3, [pc, #504]	; (8007754 <_printf_float+0x2bc>)
 800755a:	e7d5      	b.n	8007508 <_printf_float+0x70>
 800755c:	6863      	ldr	r3, [r4, #4]
 800755e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007562:	9104      	str	r1, [sp, #16]
 8007564:	1c59      	adds	r1, r3, #1
 8007566:	d13c      	bne.n	80075e2 <_printf_float+0x14a>
 8007568:	2306      	movs	r3, #6
 800756a:	6063      	str	r3, [r4, #4]
 800756c:	2300      	movs	r3, #0
 800756e:	9303      	str	r3, [sp, #12]
 8007570:	ab08      	add	r3, sp, #32
 8007572:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007576:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800757a:	ab07      	add	r3, sp, #28
 800757c:	6861      	ldr	r1, [r4, #4]
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	6022      	str	r2, [r4, #0]
 8007582:	f10d 031b 	add.w	r3, sp, #27
 8007586:	4628      	mov	r0, r5
 8007588:	f7ff fef4 	bl	8007374 <__cvt>
 800758c:	9b04      	ldr	r3, [sp, #16]
 800758e:	9907      	ldr	r1, [sp, #28]
 8007590:	2b47      	cmp	r3, #71	; 0x47
 8007592:	4680      	mov	r8, r0
 8007594:	d108      	bne.n	80075a8 <_printf_float+0x110>
 8007596:	1cc8      	adds	r0, r1, #3
 8007598:	db02      	blt.n	80075a0 <_printf_float+0x108>
 800759a:	6863      	ldr	r3, [r4, #4]
 800759c:	4299      	cmp	r1, r3
 800759e:	dd41      	ble.n	8007624 <_printf_float+0x18c>
 80075a0:	f1a9 0902 	sub.w	r9, r9, #2
 80075a4:	fa5f f989 	uxtb.w	r9, r9
 80075a8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80075ac:	d820      	bhi.n	80075f0 <_printf_float+0x158>
 80075ae:	3901      	subs	r1, #1
 80075b0:	464a      	mov	r2, r9
 80075b2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80075b6:	9107      	str	r1, [sp, #28]
 80075b8:	f7ff ff2e 	bl	8007418 <__exponent>
 80075bc:	9a08      	ldr	r2, [sp, #32]
 80075be:	9004      	str	r0, [sp, #16]
 80075c0:	1813      	adds	r3, r2, r0
 80075c2:	2a01      	cmp	r2, #1
 80075c4:	6123      	str	r3, [r4, #16]
 80075c6:	dc02      	bgt.n	80075ce <_printf_float+0x136>
 80075c8:	6822      	ldr	r2, [r4, #0]
 80075ca:	07d2      	lsls	r2, r2, #31
 80075cc:	d501      	bpl.n	80075d2 <_printf_float+0x13a>
 80075ce:	3301      	adds	r3, #1
 80075d0:	6123      	str	r3, [r4, #16]
 80075d2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d0a2      	beq.n	8007520 <_printf_float+0x88>
 80075da:	232d      	movs	r3, #45	; 0x2d
 80075dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075e0:	e79e      	b.n	8007520 <_printf_float+0x88>
 80075e2:	9904      	ldr	r1, [sp, #16]
 80075e4:	2947      	cmp	r1, #71	; 0x47
 80075e6:	d1c1      	bne.n	800756c <_printf_float+0xd4>
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1bf      	bne.n	800756c <_printf_float+0xd4>
 80075ec:	2301      	movs	r3, #1
 80075ee:	e7bc      	b.n	800756a <_printf_float+0xd2>
 80075f0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80075f4:	d118      	bne.n	8007628 <_printf_float+0x190>
 80075f6:	2900      	cmp	r1, #0
 80075f8:	6863      	ldr	r3, [r4, #4]
 80075fa:	dd0b      	ble.n	8007614 <_printf_float+0x17c>
 80075fc:	6121      	str	r1, [r4, #16]
 80075fe:	b913      	cbnz	r3, 8007606 <_printf_float+0x16e>
 8007600:	6822      	ldr	r2, [r4, #0]
 8007602:	07d0      	lsls	r0, r2, #31
 8007604:	d502      	bpl.n	800760c <_printf_float+0x174>
 8007606:	3301      	adds	r3, #1
 8007608:	440b      	add	r3, r1
 800760a:	6123      	str	r3, [r4, #16]
 800760c:	2300      	movs	r3, #0
 800760e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007610:	9304      	str	r3, [sp, #16]
 8007612:	e7de      	b.n	80075d2 <_printf_float+0x13a>
 8007614:	b913      	cbnz	r3, 800761c <_printf_float+0x184>
 8007616:	6822      	ldr	r2, [r4, #0]
 8007618:	07d2      	lsls	r2, r2, #31
 800761a:	d501      	bpl.n	8007620 <_printf_float+0x188>
 800761c:	3302      	adds	r3, #2
 800761e:	e7f4      	b.n	800760a <_printf_float+0x172>
 8007620:	2301      	movs	r3, #1
 8007622:	e7f2      	b.n	800760a <_printf_float+0x172>
 8007624:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007628:	9b08      	ldr	r3, [sp, #32]
 800762a:	4299      	cmp	r1, r3
 800762c:	db05      	blt.n	800763a <_printf_float+0x1a2>
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	6121      	str	r1, [r4, #16]
 8007632:	07d8      	lsls	r0, r3, #31
 8007634:	d5ea      	bpl.n	800760c <_printf_float+0x174>
 8007636:	1c4b      	adds	r3, r1, #1
 8007638:	e7e7      	b.n	800760a <_printf_float+0x172>
 800763a:	2900      	cmp	r1, #0
 800763c:	bfd4      	ite	le
 800763e:	f1c1 0202 	rsble	r2, r1, #2
 8007642:	2201      	movgt	r2, #1
 8007644:	4413      	add	r3, r2
 8007646:	e7e0      	b.n	800760a <_printf_float+0x172>
 8007648:	6823      	ldr	r3, [r4, #0]
 800764a:	055a      	lsls	r2, r3, #21
 800764c:	d407      	bmi.n	800765e <_printf_float+0x1c6>
 800764e:	6923      	ldr	r3, [r4, #16]
 8007650:	4642      	mov	r2, r8
 8007652:	4631      	mov	r1, r6
 8007654:	4628      	mov	r0, r5
 8007656:	47b8      	blx	r7
 8007658:	3001      	adds	r0, #1
 800765a:	d12a      	bne.n	80076b2 <_printf_float+0x21a>
 800765c:	e76a      	b.n	8007534 <_printf_float+0x9c>
 800765e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007662:	f240 80e2 	bls.w	800782a <_printf_float+0x392>
 8007666:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800766a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800766e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007672:	d133      	bne.n	80076dc <_printf_float+0x244>
 8007674:	4a38      	ldr	r2, [pc, #224]	; (8007758 <_printf_float+0x2c0>)
 8007676:	2301      	movs	r3, #1
 8007678:	4631      	mov	r1, r6
 800767a:	4628      	mov	r0, r5
 800767c:	47b8      	blx	r7
 800767e:	3001      	adds	r0, #1
 8007680:	f43f af58 	beq.w	8007534 <_printf_float+0x9c>
 8007684:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007688:	429a      	cmp	r2, r3
 800768a:	db02      	blt.n	8007692 <_printf_float+0x1fa>
 800768c:	6823      	ldr	r3, [r4, #0]
 800768e:	07d8      	lsls	r0, r3, #31
 8007690:	d50f      	bpl.n	80076b2 <_printf_float+0x21a>
 8007692:	4653      	mov	r3, sl
 8007694:	465a      	mov	r2, fp
 8007696:	4631      	mov	r1, r6
 8007698:	4628      	mov	r0, r5
 800769a:	47b8      	blx	r7
 800769c:	3001      	adds	r0, #1
 800769e:	f43f af49 	beq.w	8007534 <_printf_float+0x9c>
 80076a2:	f04f 0800 	mov.w	r8, #0
 80076a6:	f104 091a 	add.w	r9, r4, #26
 80076aa:	9b08      	ldr	r3, [sp, #32]
 80076ac:	3b01      	subs	r3, #1
 80076ae:	4543      	cmp	r3, r8
 80076b0:	dc09      	bgt.n	80076c6 <_printf_float+0x22e>
 80076b2:	6823      	ldr	r3, [r4, #0]
 80076b4:	079b      	lsls	r3, r3, #30
 80076b6:	f100 8108 	bmi.w	80078ca <_printf_float+0x432>
 80076ba:	68e0      	ldr	r0, [r4, #12]
 80076bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076be:	4298      	cmp	r0, r3
 80076c0:	bfb8      	it	lt
 80076c2:	4618      	movlt	r0, r3
 80076c4:	e738      	b.n	8007538 <_printf_float+0xa0>
 80076c6:	2301      	movs	r3, #1
 80076c8:	464a      	mov	r2, r9
 80076ca:	4631      	mov	r1, r6
 80076cc:	4628      	mov	r0, r5
 80076ce:	47b8      	blx	r7
 80076d0:	3001      	adds	r0, #1
 80076d2:	f43f af2f 	beq.w	8007534 <_printf_float+0x9c>
 80076d6:	f108 0801 	add.w	r8, r8, #1
 80076da:	e7e6      	b.n	80076aa <_printf_float+0x212>
 80076dc:	9b07      	ldr	r3, [sp, #28]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	dc3c      	bgt.n	800775c <_printf_float+0x2c4>
 80076e2:	4a1d      	ldr	r2, [pc, #116]	; (8007758 <_printf_float+0x2c0>)
 80076e4:	2301      	movs	r3, #1
 80076e6:	4631      	mov	r1, r6
 80076e8:	4628      	mov	r0, r5
 80076ea:	47b8      	blx	r7
 80076ec:	3001      	adds	r0, #1
 80076ee:	f43f af21 	beq.w	8007534 <_printf_float+0x9c>
 80076f2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	d102      	bne.n	8007700 <_printf_float+0x268>
 80076fa:	6823      	ldr	r3, [r4, #0]
 80076fc:	07d9      	lsls	r1, r3, #31
 80076fe:	d5d8      	bpl.n	80076b2 <_printf_float+0x21a>
 8007700:	4653      	mov	r3, sl
 8007702:	465a      	mov	r2, fp
 8007704:	4631      	mov	r1, r6
 8007706:	4628      	mov	r0, r5
 8007708:	47b8      	blx	r7
 800770a:	3001      	adds	r0, #1
 800770c:	f43f af12 	beq.w	8007534 <_printf_float+0x9c>
 8007710:	f04f 0900 	mov.w	r9, #0
 8007714:	f104 0a1a 	add.w	sl, r4, #26
 8007718:	9b07      	ldr	r3, [sp, #28]
 800771a:	425b      	negs	r3, r3
 800771c:	454b      	cmp	r3, r9
 800771e:	dc01      	bgt.n	8007724 <_printf_float+0x28c>
 8007720:	9b08      	ldr	r3, [sp, #32]
 8007722:	e795      	b.n	8007650 <_printf_float+0x1b8>
 8007724:	2301      	movs	r3, #1
 8007726:	4652      	mov	r2, sl
 8007728:	4631      	mov	r1, r6
 800772a:	4628      	mov	r0, r5
 800772c:	47b8      	blx	r7
 800772e:	3001      	adds	r0, #1
 8007730:	f43f af00 	beq.w	8007534 <_printf_float+0x9c>
 8007734:	f109 0901 	add.w	r9, r9, #1
 8007738:	e7ee      	b.n	8007718 <_printf_float+0x280>
 800773a:	bf00      	nop
 800773c:	f3af 8000 	nop.w
 8007740:	ffffffff 	.word	0xffffffff
 8007744:	7fefffff 	.word	0x7fefffff
 8007748:	0800a62c 	.word	0x0800a62c
 800774c:	0800a630 	.word	0x0800a630
 8007750:	0800a638 	.word	0x0800a638
 8007754:	0800a634 	.word	0x0800a634
 8007758:	0800a63c 	.word	0x0800a63c
 800775c:	9a08      	ldr	r2, [sp, #32]
 800775e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007760:	429a      	cmp	r2, r3
 8007762:	bfa8      	it	ge
 8007764:	461a      	movge	r2, r3
 8007766:	2a00      	cmp	r2, #0
 8007768:	4691      	mov	r9, r2
 800776a:	dc38      	bgt.n	80077de <_printf_float+0x346>
 800776c:	2300      	movs	r3, #0
 800776e:	9305      	str	r3, [sp, #20]
 8007770:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007774:	f104 021a 	add.w	r2, r4, #26
 8007778:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800777a:	9905      	ldr	r1, [sp, #20]
 800777c:	9304      	str	r3, [sp, #16]
 800777e:	eba3 0309 	sub.w	r3, r3, r9
 8007782:	428b      	cmp	r3, r1
 8007784:	dc33      	bgt.n	80077ee <_printf_float+0x356>
 8007786:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800778a:	429a      	cmp	r2, r3
 800778c:	db3c      	blt.n	8007808 <_printf_float+0x370>
 800778e:	6823      	ldr	r3, [r4, #0]
 8007790:	07da      	lsls	r2, r3, #31
 8007792:	d439      	bmi.n	8007808 <_printf_float+0x370>
 8007794:	9b08      	ldr	r3, [sp, #32]
 8007796:	9a04      	ldr	r2, [sp, #16]
 8007798:	9907      	ldr	r1, [sp, #28]
 800779a:	1a9a      	subs	r2, r3, r2
 800779c:	eba3 0901 	sub.w	r9, r3, r1
 80077a0:	4591      	cmp	r9, r2
 80077a2:	bfa8      	it	ge
 80077a4:	4691      	movge	r9, r2
 80077a6:	f1b9 0f00 	cmp.w	r9, #0
 80077aa:	dc35      	bgt.n	8007818 <_printf_float+0x380>
 80077ac:	f04f 0800 	mov.w	r8, #0
 80077b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077b4:	f104 0a1a 	add.w	sl, r4, #26
 80077b8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80077bc:	1a9b      	subs	r3, r3, r2
 80077be:	eba3 0309 	sub.w	r3, r3, r9
 80077c2:	4543      	cmp	r3, r8
 80077c4:	f77f af75 	ble.w	80076b2 <_printf_float+0x21a>
 80077c8:	2301      	movs	r3, #1
 80077ca:	4652      	mov	r2, sl
 80077cc:	4631      	mov	r1, r6
 80077ce:	4628      	mov	r0, r5
 80077d0:	47b8      	blx	r7
 80077d2:	3001      	adds	r0, #1
 80077d4:	f43f aeae 	beq.w	8007534 <_printf_float+0x9c>
 80077d8:	f108 0801 	add.w	r8, r8, #1
 80077dc:	e7ec      	b.n	80077b8 <_printf_float+0x320>
 80077de:	4613      	mov	r3, r2
 80077e0:	4631      	mov	r1, r6
 80077e2:	4642      	mov	r2, r8
 80077e4:	4628      	mov	r0, r5
 80077e6:	47b8      	blx	r7
 80077e8:	3001      	adds	r0, #1
 80077ea:	d1bf      	bne.n	800776c <_printf_float+0x2d4>
 80077ec:	e6a2      	b.n	8007534 <_printf_float+0x9c>
 80077ee:	2301      	movs	r3, #1
 80077f0:	4631      	mov	r1, r6
 80077f2:	4628      	mov	r0, r5
 80077f4:	9204      	str	r2, [sp, #16]
 80077f6:	47b8      	blx	r7
 80077f8:	3001      	adds	r0, #1
 80077fa:	f43f ae9b 	beq.w	8007534 <_printf_float+0x9c>
 80077fe:	9b05      	ldr	r3, [sp, #20]
 8007800:	9a04      	ldr	r2, [sp, #16]
 8007802:	3301      	adds	r3, #1
 8007804:	9305      	str	r3, [sp, #20]
 8007806:	e7b7      	b.n	8007778 <_printf_float+0x2e0>
 8007808:	4653      	mov	r3, sl
 800780a:	465a      	mov	r2, fp
 800780c:	4631      	mov	r1, r6
 800780e:	4628      	mov	r0, r5
 8007810:	47b8      	blx	r7
 8007812:	3001      	adds	r0, #1
 8007814:	d1be      	bne.n	8007794 <_printf_float+0x2fc>
 8007816:	e68d      	b.n	8007534 <_printf_float+0x9c>
 8007818:	9a04      	ldr	r2, [sp, #16]
 800781a:	464b      	mov	r3, r9
 800781c:	4442      	add	r2, r8
 800781e:	4631      	mov	r1, r6
 8007820:	4628      	mov	r0, r5
 8007822:	47b8      	blx	r7
 8007824:	3001      	adds	r0, #1
 8007826:	d1c1      	bne.n	80077ac <_printf_float+0x314>
 8007828:	e684      	b.n	8007534 <_printf_float+0x9c>
 800782a:	9a08      	ldr	r2, [sp, #32]
 800782c:	2a01      	cmp	r2, #1
 800782e:	dc01      	bgt.n	8007834 <_printf_float+0x39c>
 8007830:	07db      	lsls	r3, r3, #31
 8007832:	d537      	bpl.n	80078a4 <_printf_float+0x40c>
 8007834:	2301      	movs	r3, #1
 8007836:	4642      	mov	r2, r8
 8007838:	4631      	mov	r1, r6
 800783a:	4628      	mov	r0, r5
 800783c:	47b8      	blx	r7
 800783e:	3001      	adds	r0, #1
 8007840:	f43f ae78 	beq.w	8007534 <_printf_float+0x9c>
 8007844:	4653      	mov	r3, sl
 8007846:	465a      	mov	r2, fp
 8007848:	4631      	mov	r1, r6
 800784a:	4628      	mov	r0, r5
 800784c:	47b8      	blx	r7
 800784e:	3001      	adds	r0, #1
 8007850:	f43f ae70 	beq.w	8007534 <_printf_float+0x9c>
 8007854:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007858:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800785c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007860:	d01b      	beq.n	800789a <_printf_float+0x402>
 8007862:	9b08      	ldr	r3, [sp, #32]
 8007864:	f108 0201 	add.w	r2, r8, #1
 8007868:	3b01      	subs	r3, #1
 800786a:	4631      	mov	r1, r6
 800786c:	4628      	mov	r0, r5
 800786e:	47b8      	blx	r7
 8007870:	3001      	adds	r0, #1
 8007872:	d10e      	bne.n	8007892 <_printf_float+0x3fa>
 8007874:	e65e      	b.n	8007534 <_printf_float+0x9c>
 8007876:	2301      	movs	r3, #1
 8007878:	464a      	mov	r2, r9
 800787a:	4631      	mov	r1, r6
 800787c:	4628      	mov	r0, r5
 800787e:	47b8      	blx	r7
 8007880:	3001      	adds	r0, #1
 8007882:	f43f ae57 	beq.w	8007534 <_printf_float+0x9c>
 8007886:	f108 0801 	add.w	r8, r8, #1
 800788a:	9b08      	ldr	r3, [sp, #32]
 800788c:	3b01      	subs	r3, #1
 800788e:	4543      	cmp	r3, r8
 8007890:	dcf1      	bgt.n	8007876 <_printf_float+0x3de>
 8007892:	9b04      	ldr	r3, [sp, #16]
 8007894:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007898:	e6db      	b.n	8007652 <_printf_float+0x1ba>
 800789a:	f04f 0800 	mov.w	r8, #0
 800789e:	f104 091a 	add.w	r9, r4, #26
 80078a2:	e7f2      	b.n	800788a <_printf_float+0x3f2>
 80078a4:	2301      	movs	r3, #1
 80078a6:	4642      	mov	r2, r8
 80078a8:	e7df      	b.n	800786a <_printf_float+0x3d2>
 80078aa:	2301      	movs	r3, #1
 80078ac:	464a      	mov	r2, r9
 80078ae:	4631      	mov	r1, r6
 80078b0:	4628      	mov	r0, r5
 80078b2:	47b8      	blx	r7
 80078b4:	3001      	adds	r0, #1
 80078b6:	f43f ae3d 	beq.w	8007534 <_printf_float+0x9c>
 80078ba:	f108 0801 	add.w	r8, r8, #1
 80078be:	68e3      	ldr	r3, [r4, #12]
 80078c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078c2:	1a5b      	subs	r3, r3, r1
 80078c4:	4543      	cmp	r3, r8
 80078c6:	dcf0      	bgt.n	80078aa <_printf_float+0x412>
 80078c8:	e6f7      	b.n	80076ba <_printf_float+0x222>
 80078ca:	f04f 0800 	mov.w	r8, #0
 80078ce:	f104 0919 	add.w	r9, r4, #25
 80078d2:	e7f4      	b.n	80078be <_printf_float+0x426>

080078d4 <_printf_common>:
 80078d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078d8:	4616      	mov	r6, r2
 80078da:	4699      	mov	r9, r3
 80078dc:	688a      	ldr	r2, [r1, #8]
 80078de:	690b      	ldr	r3, [r1, #16]
 80078e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078e4:	4293      	cmp	r3, r2
 80078e6:	bfb8      	it	lt
 80078e8:	4613      	movlt	r3, r2
 80078ea:	6033      	str	r3, [r6, #0]
 80078ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078f0:	4607      	mov	r7, r0
 80078f2:	460c      	mov	r4, r1
 80078f4:	b10a      	cbz	r2, 80078fa <_printf_common+0x26>
 80078f6:	3301      	adds	r3, #1
 80078f8:	6033      	str	r3, [r6, #0]
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	0699      	lsls	r1, r3, #26
 80078fe:	bf42      	ittt	mi
 8007900:	6833      	ldrmi	r3, [r6, #0]
 8007902:	3302      	addmi	r3, #2
 8007904:	6033      	strmi	r3, [r6, #0]
 8007906:	6825      	ldr	r5, [r4, #0]
 8007908:	f015 0506 	ands.w	r5, r5, #6
 800790c:	d106      	bne.n	800791c <_printf_common+0x48>
 800790e:	f104 0a19 	add.w	sl, r4, #25
 8007912:	68e3      	ldr	r3, [r4, #12]
 8007914:	6832      	ldr	r2, [r6, #0]
 8007916:	1a9b      	subs	r3, r3, r2
 8007918:	42ab      	cmp	r3, r5
 800791a:	dc26      	bgt.n	800796a <_printf_common+0x96>
 800791c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007920:	1e13      	subs	r3, r2, #0
 8007922:	6822      	ldr	r2, [r4, #0]
 8007924:	bf18      	it	ne
 8007926:	2301      	movne	r3, #1
 8007928:	0692      	lsls	r2, r2, #26
 800792a:	d42b      	bmi.n	8007984 <_printf_common+0xb0>
 800792c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007930:	4649      	mov	r1, r9
 8007932:	4638      	mov	r0, r7
 8007934:	47c0      	blx	r8
 8007936:	3001      	adds	r0, #1
 8007938:	d01e      	beq.n	8007978 <_printf_common+0xa4>
 800793a:	6823      	ldr	r3, [r4, #0]
 800793c:	68e5      	ldr	r5, [r4, #12]
 800793e:	6832      	ldr	r2, [r6, #0]
 8007940:	f003 0306 	and.w	r3, r3, #6
 8007944:	2b04      	cmp	r3, #4
 8007946:	bf08      	it	eq
 8007948:	1aad      	subeq	r5, r5, r2
 800794a:	68a3      	ldr	r3, [r4, #8]
 800794c:	6922      	ldr	r2, [r4, #16]
 800794e:	bf0c      	ite	eq
 8007950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007954:	2500      	movne	r5, #0
 8007956:	4293      	cmp	r3, r2
 8007958:	bfc4      	itt	gt
 800795a:	1a9b      	subgt	r3, r3, r2
 800795c:	18ed      	addgt	r5, r5, r3
 800795e:	2600      	movs	r6, #0
 8007960:	341a      	adds	r4, #26
 8007962:	42b5      	cmp	r5, r6
 8007964:	d11a      	bne.n	800799c <_printf_common+0xc8>
 8007966:	2000      	movs	r0, #0
 8007968:	e008      	b.n	800797c <_printf_common+0xa8>
 800796a:	2301      	movs	r3, #1
 800796c:	4652      	mov	r2, sl
 800796e:	4649      	mov	r1, r9
 8007970:	4638      	mov	r0, r7
 8007972:	47c0      	blx	r8
 8007974:	3001      	adds	r0, #1
 8007976:	d103      	bne.n	8007980 <_printf_common+0xac>
 8007978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800797c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007980:	3501      	adds	r5, #1
 8007982:	e7c6      	b.n	8007912 <_printf_common+0x3e>
 8007984:	18e1      	adds	r1, r4, r3
 8007986:	1c5a      	adds	r2, r3, #1
 8007988:	2030      	movs	r0, #48	; 0x30
 800798a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800798e:	4422      	add	r2, r4
 8007990:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007994:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007998:	3302      	adds	r3, #2
 800799a:	e7c7      	b.n	800792c <_printf_common+0x58>
 800799c:	2301      	movs	r3, #1
 800799e:	4622      	mov	r2, r4
 80079a0:	4649      	mov	r1, r9
 80079a2:	4638      	mov	r0, r7
 80079a4:	47c0      	blx	r8
 80079a6:	3001      	adds	r0, #1
 80079a8:	d0e6      	beq.n	8007978 <_printf_common+0xa4>
 80079aa:	3601      	adds	r6, #1
 80079ac:	e7d9      	b.n	8007962 <_printf_common+0x8e>
	...

080079b0 <_printf_i>:
 80079b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079b4:	7e0f      	ldrb	r7, [r1, #24]
 80079b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079b8:	2f78      	cmp	r7, #120	; 0x78
 80079ba:	4691      	mov	r9, r2
 80079bc:	4680      	mov	r8, r0
 80079be:	460c      	mov	r4, r1
 80079c0:	469a      	mov	sl, r3
 80079c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079c6:	d807      	bhi.n	80079d8 <_printf_i+0x28>
 80079c8:	2f62      	cmp	r7, #98	; 0x62
 80079ca:	d80a      	bhi.n	80079e2 <_printf_i+0x32>
 80079cc:	2f00      	cmp	r7, #0
 80079ce:	f000 80d8 	beq.w	8007b82 <_printf_i+0x1d2>
 80079d2:	2f58      	cmp	r7, #88	; 0x58
 80079d4:	f000 80a3 	beq.w	8007b1e <_printf_i+0x16e>
 80079d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079e0:	e03a      	b.n	8007a58 <_printf_i+0xa8>
 80079e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079e6:	2b15      	cmp	r3, #21
 80079e8:	d8f6      	bhi.n	80079d8 <_printf_i+0x28>
 80079ea:	a101      	add	r1, pc, #4	; (adr r1, 80079f0 <_printf_i+0x40>)
 80079ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079f0:	08007a49 	.word	0x08007a49
 80079f4:	08007a5d 	.word	0x08007a5d
 80079f8:	080079d9 	.word	0x080079d9
 80079fc:	080079d9 	.word	0x080079d9
 8007a00:	080079d9 	.word	0x080079d9
 8007a04:	080079d9 	.word	0x080079d9
 8007a08:	08007a5d 	.word	0x08007a5d
 8007a0c:	080079d9 	.word	0x080079d9
 8007a10:	080079d9 	.word	0x080079d9
 8007a14:	080079d9 	.word	0x080079d9
 8007a18:	080079d9 	.word	0x080079d9
 8007a1c:	08007b69 	.word	0x08007b69
 8007a20:	08007a8d 	.word	0x08007a8d
 8007a24:	08007b4b 	.word	0x08007b4b
 8007a28:	080079d9 	.word	0x080079d9
 8007a2c:	080079d9 	.word	0x080079d9
 8007a30:	08007b8b 	.word	0x08007b8b
 8007a34:	080079d9 	.word	0x080079d9
 8007a38:	08007a8d 	.word	0x08007a8d
 8007a3c:	080079d9 	.word	0x080079d9
 8007a40:	080079d9 	.word	0x080079d9
 8007a44:	08007b53 	.word	0x08007b53
 8007a48:	682b      	ldr	r3, [r5, #0]
 8007a4a:	1d1a      	adds	r2, r3, #4
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	602a      	str	r2, [r5, #0]
 8007a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e0a3      	b.n	8007ba4 <_printf_i+0x1f4>
 8007a5c:	6820      	ldr	r0, [r4, #0]
 8007a5e:	6829      	ldr	r1, [r5, #0]
 8007a60:	0606      	lsls	r6, r0, #24
 8007a62:	f101 0304 	add.w	r3, r1, #4
 8007a66:	d50a      	bpl.n	8007a7e <_printf_i+0xce>
 8007a68:	680e      	ldr	r6, [r1, #0]
 8007a6a:	602b      	str	r3, [r5, #0]
 8007a6c:	2e00      	cmp	r6, #0
 8007a6e:	da03      	bge.n	8007a78 <_printf_i+0xc8>
 8007a70:	232d      	movs	r3, #45	; 0x2d
 8007a72:	4276      	negs	r6, r6
 8007a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a78:	485e      	ldr	r0, [pc, #376]	; (8007bf4 <_printf_i+0x244>)
 8007a7a:	230a      	movs	r3, #10
 8007a7c:	e019      	b.n	8007ab2 <_printf_i+0x102>
 8007a7e:	680e      	ldr	r6, [r1, #0]
 8007a80:	602b      	str	r3, [r5, #0]
 8007a82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a86:	bf18      	it	ne
 8007a88:	b236      	sxthne	r6, r6
 8007a8a:	e7ef      	b.n	8007a6c <_printf_i+0xbc>
 8007a8c:	682b      	ldr	r3, [r5, #0]
 8007a8e:	6820      	ldr	r0, [r4, #0]
 8007a90:	1d19      	adds	r1, r3, #4
 8007a92:	6029      	str	r1, [r5, #0]
 8007a94:	0601      	lsls	r1, r0, #24
 8007a96:	d501      	bpl.n	8007a9c <_printf_i+0xec>
 8007a98:	681e      	ldr	r6, [r3, #0]
 8007a9a:	e002      	b.n	8007aa2 <_printf_i+0xf2>
 8007a9c:	0646      	lsls	r6, r0, #25
 8007a9e:	d5fb      	bpl.n	8007a98 <_printf_i+0xe8>
 8007aa0:	881e      	ldrh	r6, [r3, #0]
 8007aa2:	4854      	ldr	r0, [pc, #336]	; (8007bf4 <_printf_i+0x244>)
 8007aa4:	2f6f      	cmp	r7, #111	; 0x6f
 8007aa6:	bf0c      	ite	eq
 8007aa8:	2308      	moveq	r3, #8
 8007aaa:	230a      	movne	r3, #10
 8007aac:	2100      	movs	r1, #0
 8007aae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ab2:	6865      	ldr	r5, [r4, #4]
 8007ab4:	60a5      	str	r5, [r4, #8]
 8007ab6:	2d00      	cmp	r5, #0
 8007ab8:	bfa2      	ittt	ge
 8007aba:	6821      	ldrge	r1, [r4, #0]
 8007abc:	f021 0104 	bicge.w	r1, r1, #4
 8007ac0:	6021      	strge	r1, [r4, #0]
 8007ac2:	b90e      	cbnz	r6, 8007ac8 <_printf_i+0x118>
 8007ac4:	2d00      	cmp	r5, #0
 8007ac6:	d04d      	beq.n	8007b64 <_printf_i+0x1b4>
 8007ac8:	4615      	mov	r5, r2
 8007aca:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ace:	fb03 6711 	mls	r7, r3, r1, r6
 8007ad2:	5dc7      	ldrb	r7, [r0, r7]
 8007ad4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ad8:	4637      	mov	r7, r6
 8007ada:	42bb      	cmp	r3, r7
 8007adc:	460e      	mov	r6, r1
 8007ade:	d9f4      	bls.n	8007aca <_printf_i+0x11a>
 8007ae0:	2b08      	cmp	r3, #8
 8007ae2:	d10b      	bne.n	8007afc <_printf_i+0x14c>
 8007ae4:	6823      	ldr	r3, [r4, #0]
 8007ae6:	07de      	lsls	r6, r3, #31
 8007ae8:	d508      	bpl.n	8007afc <_printf_i+0x14c>
 8007aea:	6923      	ldr	r3, [r4, #16]
 8007aec:	6861      	ldr	r1, [r4, #4]
 8007aee:	4299      	cmp	r1, r3
 8007af0:	bfde      	ittt	le
 8007af2:	2330      	movle	r3, #48	; 0x30
 8007af4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007af8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007afc:	1b52      	subs	r2, r2, r5
 8007afe:	6122      	str	r2, [r4, #16]
 8007b00:	f8cd a000 	str.w	sl, [sp]
 8007b04:	464b      	mov	r3, r9
 8007b06:	aa03      	add	r2, sp, #12
 8007b08:	4621      	mov	r1, r4
 8007b0a:	4640      	mov	r0, r8
 8007b0c:	f7ff fee2 	bl	80078d4 <_printf_common>
 8007b10:	3001      	adds	r0, #1
 8007b12:	d14c      	bne.n	8007bae <_printf_i+0x1fe>
 8007b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b18:	b004      	add	sp, #16
 8007b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b1e:	4835      	ldr	r0, [pc, #212]	; (8007bf4 <_printf_i+0x244>)
 8007b20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b24:	6829      	ldr	r1, [r5, #0]
 8007b26:	6823      	ldr	r3, [r4, #0]
 8007b28:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b2c:	6029      	str	r1, [r5, #0]
 8007b2e:	061d      	lsls	r5, r3, #24
 8007b30:	d514      	bpl.n	8007b5c <_printf_i+0x1ac>
 8007b32:	07df      	lsls	r7, r3, #31
 8007b34:	bf44      	itt	mi
 8007b36:	f043 0320 	orrmi.w	r3, r3, #32
 8007b3a:	6023      	strmi	r3, [r4, #0]
 8007b3c:	b91e      	cbnz	r6, 8007b46 <_printf_i+0x196>
 8007b3e:	6823      	ldr	r3, [r4, #0]
 8007b40:	f023 0320 	bic.w	r3, r3, #32
 8007b44:	6023      	str	r3, [r4, #0]
 8007b46:	2310      	movs	r3, #16
 8007b48:	e7b0      	b.n	8007aac <_printf_i+0xfc>
 8007b4a:	6823      	ldr	r3, [r4, #0]
 8007b4c:	f043 0320 	orr.w	r3, r3, #32
 8007b50:	6023      	str	r3, [r4, #0]
 8007b52:	2378      	movs	r3, #120	; 0x78
 8007b54:	4828      	ldr	r0, [pc, #160]	; (8007bf8 <_printf_i+0x248>)
 8007b56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b5a:	e7e3      	b.n	8007b24 <_printf_i+0x174>
 8007b5c:	0659      	lsls	r1, r3, #25
 8007b5e:	bf48      	it	mi
 8007b60:	b2b6      	uxthmi	r6, r6
 8007b62:	e7e6      	b.n	8007b32 <_printf_i+0x182>
 8007b64:	4615      	mov	r5, r2
 8007b66:	e7bb      	b.n	8007ae0 <_printf_i+0x130>
 8007b68:	682b      	ldr	r3, [r5, #0]
 8007b6a:	6826      	ldr	r6, [r4, #0]
 8007b6c:	6961      	ldr	r1, [r4, #20]
 8007b6e:	1d18      	adds	r0, r3, #4
 8007b70:	6028      	str	r0, [r5, #0]
 8007b72:	0635      	lsls	r5, r6, #24
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	d501      	bpl.n	8007b7c <_printf_i+0x1cc>
 8007b78:	6019      	str	r1, [r3, #0]
 8007b7a:	e002      	b.n	8007b82 <_printf_i+0x1d2>
 8007b7c:	0670      	lsls	r0, r6, #25
 8007b7e:	d5fb      	bpl.n	8007b78 <_printf_i+0x1c8>
 8007b80:	8019      	strh	r1, [r3, #0]
 8007b82:	2300      	movs	r3, #0
 8007b84:	6123      	str	r3, [r4, #16]
 8007b86:	4615      	mov	r5, r2
 8007b88:	e7ba      	b.n	8007b00 <_printf_i+0x150>
 8007b8a:	682b      	ldr	r3, [r5, #0]
 8007b8c:	1d1a      	adds	r2, r3, #4
 8007b8e:	602a      	str	r2, [r5, #0]
 8007b90:	681d      	ldr	r5, [r3, #0]
 8007b92:	6862      	ldr	r2, [r4, #4]
 8007b94:	2100      	movs	r1, #0
 8007b96:	4628      	mov	r0, r5
 8007b98:	f7f8 fbc2 	bl	8000320 <memchr>
 8007b9c:	b108      	cbz	r0, 8007ba2 <_printf_i+0x1f2>
 8007b9e:	1b40      	subs	r0, r0, r5
 8007ba0:	6060      	str	r0, [r4, #4]
 8007ba2:	6863      	ldr	r3, [r4, #4]
 8007ba4:	6123      	str	r3, [r4, #16]
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bac:	e7a8      	b.n	8007b00 <_printf_i+0x150>
 8007bae:	6923      	ldr	r3, [r4, #16]
 8007bb0:	462a      	mov	r2, r5
 8007bb2:	4649      	mov	r1, r9
 8007bb4:	4640      	mov	r0, r8
 8007bb6:	47d0      	blx	sl
 8007bb8:	3001      	adds	r0, #1
 8007bba:	d0ab      	beq.n	8007b14 <_printf_i+0x164>
 8007bbc:	6823      	ldr	r3, [r4, #0]
 8007bbe:	079b      	lsls	r3, r3, #30
 8007bc0:	d413      	bmi.n	8007bea <_printf_i+0x23a>
 8007bc2:	68e0      	ldr	r0, [r4, #12]
 8007bc4:	9b03      	ldr	r3, [sp, #12]
 8007bc6:	4298      	cmp	r0, r3
 8007bc8:	bfb8      	it	lt
 8007bca:	4618      	movlt	r0, r3
 8007bcc:	e7a4      	b.n	8007b18 <_printf_i+0x168>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	4632      	mov	r2, r6
 8007bd2:	4649      	mov	r1, r9
 8007bd4:	4640      	mov	r0, r8
 8007bd6:	47d0      	blx	sl
 8007bd8:	3001      	adds	r0, #1
 8007bda:	d09b      	beq.n	8007b14 <_printf_i+0x164>
 8007bdc:	3501      	adds	r5, #1
 8007bde:	68e3      	ldr	r3, [r4, #12]
 8007be0:	9903      	ldr	r1, [sp, #12]
 8007be2:	1a5b      	subs	r3, r3, r1
 8007be4:	42ab      	cmp	r3, r5
 8007be6:	dcf2      	bgt.n	8007bce <_printf_i+0x21e>
 8007be8:	e7eb      	b.n	8007bc2 <_printf_i+0x212>
 8007bea:	2500      	movs	r5, #0
 8007bec:	f104 0619 	add.w	r6, r4, #25
 8007bf0:	e7f5      	b.n	8007bde <_printf_i+0x22e>
 8007bf2:	bf00      	nop
 8007bf4:	0800a63e 	.word	0x0800a63e
 8007bf8:	0800a64f 	.word	0x0800a64f

08007bfc <iprintf>:
 8007bfc:	b40f      	push	{r0, r1, r2, r3}
 8007bfe:	4b0a      	ldr	r3, [pc, #40]	; (8007c28 <iprintf+0x2c>)
 8007c00:	b513      	push	{r0, r1, r4, lr}
 8007c02:	681c      	ldr	r4, [r3, #0]
 8007c04:	b124      	cbz	r4, 8007c10 <iprintf+0x14>
 8007c06:	69a3      	ldr	r3, [r4, #24]
 8007c08:	b913      	cbnz	r3, 8007c10 <iprintf+0x14>
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f001 f898 	bl	8008d40 <__sinit>
 8007c10:	ab05      	add	r3, sp, #20
 8007c12:	9a04      	ldr	r2, [sp, #16]
 8007c14:	68a1      	ldr	r1, [r4, #8]
 8007c16:	9301      	str	r3, [sp, #4]
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f001 ffa3 	bl	8009b64 <_vfiprintf_r>
 8007c1e:	b002      	add	sp, #8
 8007c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c24:	b004      	add	sp, #16
 8007c26:	4770      	bx	lr
 8007c28:	2404e2dc 	.word	0x2404e2dc

08007c2c <putchar>:
 8007c2c:	4b09      	ldr	r3, [pc, #36]	; (8007c54 <putchar+0x28>)
 8007c2e:	b513      	push	{r0, r1, r4, lr}
 8007c30:	681c      	ldr	r4, [r3, #0]
 8007c32:	4601      	mov	r1, r0
 8007c34:	b134      	cbz	r4, 8007c44 <putchar+0x18>
 8007c36:	69a3      	ldr	r3, [r4, #24]
 8007c38:	b923      	cbnz	r3, 8007c44 <putchar+0x18>
 8007c3a:	9001      	str	r0, [sp, #4]
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	f001 f87f 	bl	8008d40 <__sinit>
 8007c42:	9901      	ldr	r1, [sp, #4]
 8007c44:	68a2      	ldr	r2, [r4, #8]
 8007c46:	4620      	mov	r0, r4
 8007c48:	b002      	add	sp, #8
 8007c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c4e:	f002 b8b9 	b.w	8009dc4 <_putc_r>
 8007c52:	bf00      	nop
 8007c54:	2404e2dc 	.word	0x2404e2dc

08007c58 <_puts_r>:
 8007c58:	b570      	push	{r4, r5, r6, lr}
 8007c5a:	460e      	mov	r6, r1
 8007c5c:	4605      	mov	r5, r0
 8007c5e:	b118      	cbz	r0, 8007c68 <_puts_r+0x10>
 8007c60:	6983      	ldr	r3, [r0, #24]
 8007c62:	b90b      	cbnz	r3, 8007c68 <_puts_r+0x10>
 8007c64:	f001 f86c 	bl	8008d40 <__sinit>
 8007c68:	69ab      	ldr	r3, [r5, #24]
 8007c6a:	68ac      	ldr	r4, [r5, #8]
 8007c6c:	b913      	cbnz	r3, 8007c74 <_puts_r+0x1c>
 8007c6e:	4628      	mov	r0, r5
 8007c70:	f001 f866 	bl	8008d40 <__sinit>
 8007c74:	4b2c      	ldr	r3, [pc, #176]	; (8007d28 <_puts_r+0xd0>)
 8007c76:	429c      	cmp	r4, r3
 8007c78:	d120      	bne.n	8007cbc <_puts_r+0x64>
 8007c7a:	686c      	ldr	r4, [r5, #4]
 8007c7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c7e:	07db      	lsls	r3, r3, #31
 8007c80:	d405      	bmi.n	8007c8e <_puts_r+0x36>
 8007c82:	89a3      	ldrh	r3, [r4, #12]
 8007c84:	0598      	lsls	r0, r3, #22
 8007c86:	d402      	bmi.n	8007c8e <_puts_r+0x36>
 8007c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c8a:	f001 f8fc 	bl	8008e86 <__retarget_lock_acquire_recursive>
 8007c8e:	89a3      	ldrh	r3, [r4, #12]
 8007c90:	0719      	lsls	r1, r3, #28
 8007c92:	d51d      	bpl.n	8007cd0 <_puts_r+0x78>
 8007c94:	6923      	ldr	r3, [r4, #16]
 8007c96:	b1db      	cbz	r3, 8007cd0 <_puts_r+0x78>
 8007c98:	3e01      	subs	r6, #1
 8007c9a:	68a3      	ldr	r3, [r4, #8]
 8007c9c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	60a3      	str	r3, [r4, #8]
 8007ca4:	bb39      	cbnz	r1, 8007cf6 <_puts_r+0x9e>
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	da38      	bge.n	8007d1c <_puts_r+0xc4>
 8007caa:	4622      	mov	r2, r4
 8007cac:	210a      	movs	r1, #10
 8007cae:	4628      	mov	r0, r5
 8007cb0:	f000 f872 	bl	8007d98 <__swbuf_r>
 8007cb4:	3001      	adds	r0, #1
 8007cb6:	d011      	beq.n	8007cdc <_puts_r+0x84>
 8007cb8:	250a      	movs	r5, #10
 8007cba:	e011      	b.n	8007ce0 <_puts_r+0x88>
 8007cbc:	4b1b      	ldr	r3, [pc, #108]	; (8007d2c <_puts_r+0xd4>)
 8007cbe:	429c      	cmp	r4, r3
 8007cc0:	d101      	bne.n	8007cc6 <_puts_r+0x6e>
 8007cc2:	68ac      	ldr	r4, [r5, #8]
 8007cc4:	e7da      	b.n	8007c7c <_puts_r+0x24>
 8007cc6:	4b1a      	ldr	r3, [pc, #104]	; (8007d30 <_puts_r+0xd8>)
 8007cc8:	429c      	cmp	r4, r3
 8007cca:	bf08      	it	eq
 8007ccc:	68ec      	ldreq	r4, [r5, #12]
 8007cce:	e7d5      	b.n	8007c7c <_puts_r+0x24>
 8007cd0:	4621      	mov	r1, r4
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	f000 f8b2 	bl	8007e3c <__swsetup_r>
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	d0dd      	beq.n	8007c98 <_puts_r+0x40>
 8007cdc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007ce0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ce2:	07da      	lsls	r2, r3, #31
 8007ce4:	d405      	bmi.n	8007cf2 <_puts_r+0x9a>
 8007ce6:	89a3      	ldrh	r3, [r4, #12]
 8007ce8:	059b      	lsls	r3, r3, #22
 8007cea:	d402      	bmi.n	8007cf2 <_puts_r+0x9a>
 8007cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cee:	f001 f8cb 	bl	8008e88 <__retarget_lock_release_recursive>
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	bd70      	pop	{r4, r5, r6, pc}
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	da04      	bge.n	8007d04 <_puts_r+0xac>
 8007cfa:	69a2      	ldr	r2, [r4, #24]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	dc06      	bgt.n	8007d0e <_puts_r+0xb6>
 8007d00:	290a      	cmp	r1, #10
 8007d02:	d004      	beq.n	8007d0e <_puts_r+0xb6>
 8007d04:	6823      	ldr	r3, [r4, #0]
 8007d06:	1c5a      	adds	r2, r3, #1
 8007d08:	6022      	str	r2, [r4, #0]
 8007d0a:	7019      	strb	r1, [r3, #0]
 8007d0c:	e7c5      	b.n	8007c9a <_puts_r+0x42>
 8007d0e:	4622      	mov	r2, r4
 8007d10:	4628      	mov	r0, r5
 8007d12:	f000 f841 	bl	8007d98 <__swbuf_r>
 8007d16:	3001      	adds	r0, #1
 8007d18:	d1bf      	bne.n	8007c9a <_puts_r+0x42>
 8007d1a:	e7df      	b.n	8007cdc <_puts_r+0x84>
 8007d1c:	6823      	ldr	r3, [r4, #0]
 8007d1e:	250a      	movs	r5, #10
 8007d20:	1c5a      	adds	r2, r3, #1
 8007d22:	6022      	str	r2, [r4, #0]
 8007d24:	701d      	strb	r5, [r3, #0]
 8007d26:	e7db      	b.n	8007ce0 <_puts_r+0x88>
 8007d28:	0800a710 	.word	0x0800a710
 8007d2c:	0800a730 	.word	0x0800a730
 8007d30:	0800a6f0 	.word	0x0800a6f0

08007d34 <puts>:
 8007d34:	4b02      	ldr	r3, [pc, #8]	; (8007d40 <puts+0xc>)
 8007d36:	4601      	mov	r1, r0
 8007d38:	6818      	ldr	r0, [r3, #0]
 8007d3a:	f7ff bf8d 	b.w	8007c58 <_puts_r>
 8007d3e:	bf00      	nop
 8007d40:	2404e2dc 	.word	0x2404e2dc

08007d44 <siprintf>:
 8007d44:	b40e      	push	{r1, r2, r3}
 8007d46:	b500      	push	{lr}
 8007d48:	b09c      	sub	sp, #112	; 0x70
 8007d4a:	ab1d      	add	r3, sp, #116	; 0x74
 8007d4c:	9002      	str	r0, [sp, #8]
 8007d4e:	9006      	str	r0, [sp, #24]
 8007d50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d54:	4809      	ldr	r0, [pc, #36]	; (8007d7c <siprintf+0x38>)
 8007d56:	9107      	str	r1, [sp, #28]
 8007d58:	9104      	str	r1, [sp, #16]
 8007d5a:	4909      	ldr	r1, [pc, #36]	; (8007d80 <siprintf+0x3c>)
 8007d5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d60:	9105      	str	r1, [sp, #20]
 8007d62:	6800      	ldr	r0, [r0, #0]
 8007d64:	9301      	str	r3, [sp, #4]
 8007d66:	a902      	add	r1, sp, #8
 8007d68:	f001 fdd2 	bl	8009910 <_svfiprintf_r>
 8007d6c:	9b02      	ldr	r3, [sp, #8]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	701a      	strb	r2, [r3, #0]
 8007d72:	b01c      	add	sp, #112	; 0x70
 8007d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d78:	b003      	add	sp, #12
 8007d7a:	4770      	bx	lr
 8007d7c:	2404e2dc 	.word	0x2404e2dc
 8007d80:	ffff0208 	.word	0xffff0208

08007d84 <stpcpy>:
 8007d84:	4603      	mov	r3, r0
 8007d86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f803 2b01 	strb.w	r2, [r3], #1
 8007d90:	2a00      	cmp	r2, #0
 8007d92:	d1f8      	bne.n	8007d86 <stpcpy+0x2>
 8007d94:	4770      	bx	lr
	...

08007d98 <__swbuf_r>:
 8007d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9a:	460e      	mov	r6, r1
 8007d9c:	4614      	mov	r4, r2
 8007d9e:	4605      	mov	r5, r0
 8007da0:	b118      	cbz	r0, 8007daa <__swbuf_r+0x12>
 8007da2:	6983      	ldr	r3, [r0, #24]
 8007da4:	b90b      	cbnz	r3, 8007daa <__swbuf_r+0x12>
 8007da6:	f000 ffcb 	bl	8008d40 <__sinit>
 8007daa:	4b21      	ldr	r3, [pc, #132]	; (8007e30 <__swbuf_r+0x98>)
 8007dac:	429c      	cmp	r4, r3
 8007dae:	d12b      	bne.n	8007e08 <__swbuf_r+0x70>
 8007db0:	686c      	ldr	r4, [r5, #4]
 8007db2:	69a3      	ldr	r3, [r4, #24]
 8007db4:	60a3      	str	r3, [r4, #8]
 8007db6:	89a3      	ldrh	r3, [r4, #12]
 8007db8:	071a      	lsls	r2, r3, #28
 8007dba:	d52f      	bpl.n	8007e1c <__swbuf_r+0x84>
 8007dbc:	6923      	ldr	r3, [r4, #16]
 8007dbe:	b36b      	cbz	r3, 8007e1c <__swbuf_r+0x84>
 8007dc0:	6923      	ldr	r3, [r4, #16]
 8007dc2:	6820      	ldr	r0, [r4, #0]
 8007dc4:	1ac0      	subs	r0, r0, r3
 8007dc6:	6963      	ldr	r3, [r4, #20]
 8007dc8:	b2f6      	uxtb	r6, r6
 8007dca:	4283      	cmp	r3, r0
 8007dcc:	4637      	mov	r7, r6
 8007dce:	dc04      	bgt.n	8007dda <__swbuf_r+0x42>
 8007dd0:	4621      	mov	r1, r4
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	f000 ff20 	bl	8008c18 <_fflush_r>
 8007dd8:	bb30      	cbnz	r0, 8007e28 <__swbuf_r+0x90>
 8007dda:	68a3      	ldr	r3, [r4, #8]
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	60a3      	str	r3, [r4, #8]
 8007de0:	6823      	ldr	r3, [r4, #0]
 8007de2:	1c5a      	adds	r2, r3, #1
 8007de4:	6022      	str	r2, [r4, #0]
 8007de6:	701e      	strb	r6, [r3, #0]
 8007de8:	6963      	ldr	r3, [r4, #20]
 8007dea:	3001      	adds	r0, #1
 8007dec:	4283      	cmp	r3, r0
 8007dee:	d004      	beq.n	8007dfa <__swbuf_r+0x62>
 8007df0:	89a3      	ldrh	r3, [r4, #12]
 8007df2:	07db      	lsls	r3, r3, #31
 8007df4:	d506      	bpl.n	8007e04 <__swbuf_r+0x6c>
 8007df6:	2e0a      	cmp	r6, #10
 8007df8:	d104      	bne.n	8007e04 <__swbuf_r+0x6c>
 8007dfa:	4621      	mov	r1, r4
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	f000 ff0b 	bl	8008c18 <_fflush_r>
 8007e02:	b988      	cbnz	r0, 8007e28 <__swbuf_r+0x90>
 8007e04:	4638      	mov	r0, r7
 8007e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e08:	4b0a      	ldr	r3, [pc, #40]	; (8007e34 <__swbuf_r+0x9c>)
 8007e0a:	429c      	cmp	r4, r3
 8007e0c:	d101      	bne.n	8007e12 <__swbuf_r+0x7a>
 8007e0e:	68ac      	ldr	r4, [r5, #8]
 8007e10:	e7cf      	b.n	8007db2 <__swbuf_r+0x1a>
 8007e12:	4b09      	ldr	r3, [pc, #36]	; (8007e38 <__swbuf_r+0xa0>)
 8007e14:	429c      	cmp	r4, r3
 8007e16:	bf08      	it	eq
 8007e18:	68ec      	ldreq	r4, [r5, #12]
 8007e1a:	e7ca      	b.n	8007db2 <__swbuf_r+0x1a>
 8007e1c:	4621      	mov	r1, r4
 8007e1e:	4628      	mov	r0, r5
 8007e20:	f000 f80c 	bl	8007e3c <__swsetup_r>
 8007e24:	2800      	cmp	r0, #0
 8007e26:	d0cb      	beq.n	8007dc0 <__swbuf_r+0x28>
 8007e28:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007e2c:	e7ea      	b.n	8007e04 <__swbuf_r+0x6c>
 8007e2e:	bf00      	nop
 8007e30:	0800a710 	.word	0x0800a710
 8007e34:	0800a730 	.word	0x0800a730
 8007e38:	0800a6f0 	.word	0x0800a6f0

08007e3c <__swsetup_r>:
 8007e3c:	4b32      	ldr	r3, [pc, #200]	; (8007f08 <__swsetup_r+0xcc>)
 8007e3e:	b570      	push	{r4, r5, r6, lr}
 8007e40:	681d      	ldr	r5, [r3, #0]
 8007e42:	4606      	mov	r6, r0
 8007e44:	460c      	mov	r4, r1
 8007e46:	b125      	cbz	r5, 8007e52 <__swsetup_r+0x16>
 8007e48:	69ab      	ldr	r3, [r5, #24]
 8007e4a:	b913      	cbnz	r3, 8007e52 <__swsetup_r+0x16>
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	f000 ff77 	bl	8008d40 <__sinit>
 8007e52:	4b2e      	ldr	r3, [pc, #184]	; (8007f0c <__swsetup_r+0xd0>)
 8007e54:	429c      	cmp	r4, r3
 8007e56:	d10f      	bne.n	8007e78 <__swsetup_r+0x3c>
 8007e58:	686c      	ldr	r4, [r5, #4]
 8007e5a:	89a3      	ldrh	r3, [r4, #12]
 8007e5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e60:	0719      	lsls	r1, r3, #28
 8007e62:	d42c      	bmi.n	8007ebe <__swsetup_r+0x82>
 8007e64:	06dd      	lsls	r5, r3, #27
 8007e66:	d411      	bmi.n	8007e8c <__swsetup_r+0x50>
 8007e68:	2309      	movs	r3, #9
 8007e6a:	6033      	str	r3, [r6, #0]
 8007e6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e70:	81a3      	strh	r3, [r4, #12]
 8007e72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e76:	e03e      	b.n	8007ef6 <__swsetup_r+0xba>
 8007e78:	4b25      	ldr	r3, [pc, #148]	; (8007f10 <__swsetup_r+0xd4>)
 8007e7a:	429c      	cmp	r4, r3
 8007e7c:	d101      	bne.n	8007e82 <__swsetup_r+0x46>
 8007e7e:	68ac      	ldr	r4, [r5, #8]
 8007e80:	e7eb      	b.n	8007e5a <__swsetup_r+0x1e>
 8007e82:	4b24      	ldr	r3, [pc, #144]	; (8007f14 <__swsetup_r+0xd8>)
 8007e84:	429c      	cmp	r4, r3
 8007e86:	bf08      	it	eq
 8007e88:	68ec      	ldreq	r4, [r5, #12]
 8007e8a:	e7e6      	b.n	8007e5a <__swsetup_r+0x1e>
 8007e8c:	0758      	lsls	r0, r3, #29
 8007e8e:	d512      	bpl.n	8007eb6 <__swsetup_r+0x7a>
 8007e90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e92:	b141      	cbz	r1, 8007ea6 <__swsetup_r+0x6a>
 8007e94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e98:	4299      	cmp	r1, r3
 8007e9a:	d002      	beq.n	8007ea2 <__swsetup_r+0x66>
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	f001 fbfb 	bl	8009698 <_free_r>
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	6363      	str	r3, [r4, #52]	; 0x34
 8007ea6:	89a3      	ldrh	r3, [r4, #12]
 8007ea8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007eac:	81a3      	strh	r3, [r4, #12]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	6063      	str	r3, [r4, #4]
 8007eb2:	6923      	ldr	r3, [r4, #16]
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	89a3      	ldrh	r3, [r4, #12]
 8007eb8:	f043 0308 	orr.w	r3, r3, #8
 8007ebc:	81a3      	strh	r3, [r4, #12]
 8007ebe:	6923      	ldr	r3, [r4, #16]
 8007ec0:	b94b      	cbnz	r3, 8007ed6 <__swsetup_r+0x9a>
 8007ec2:	89a3      	ldrh	r3, [r4, #12]
 8007ec4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ecc:	d003      	beq.n	8007ed6 <__swsetup_r+0x9a>
 8007ece:	4621      	mov	r1, r4
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	f000 ffff 	bl	8008ed4 <__smakebuf_r>
 8007ed6:	89a0      	ldrh	r0, [r4, #12]
 8007ed8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007edc:	f010 0301 	ands.w	r3, r0, #1
 8007ee0:	d00a      	beq.n	8007ef8 <__swsetup_r+0xbc>
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	60a3      	str	r3, [r4, #8]
 8007ee6:	6963      	ldr	r3, [r4, #20]
 8007ee8:	425b      	negs	r3, r3
 8007eea:	61a3      	str	r3, [r4, #24]
 8007eec:	6923      	ldr	r3, [r4, #16]
 8007eee:	b943      	cbnz	r3, 8007f02 <__swsetup_r+0xc6>
 8007ef0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ef4:	d1ba      	bne.n	8007e6c <__swsetup_r+0x30>
 8007ef6:	bd70      	pop	{r4, r5, r6, pc}
 8007ef8:	0781      	lsls	r1, r0, #30
 8007efa:	bf58      	it	pl
 8007efc:	6963      	ldrpl	r3, [r4, #20]
 8007efe:	60a3      	str	r3, [r4, #8]
 8007f00:	e7f4      	b.n	8007eec <__swsetup_r+0xb0>
 8007f02:	2000      	movs	r0, #0
 8007f04:	e7f7      	b.n	8007ef6 <__swsetup_r+0xba>
 8007f06:	bf00      	nop
 8007f08:	2404e2dc 	.word	0x2404e2dc
 8007f0c:	0800a710 	.word	0x0800a710
 8007f10:	0800a730 	.word	0x0800a730
 8007f14:	0800a6f0 	.word	0x0800a6f0

08007f18 <quorem>:
 8007f18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f1c:	6903      	ldr	r3, [r0, #16]
 8007f1e:	690c      	ldr	r4, [r1, #16]
 8007f20:	42a3      	cmp	r3, r4
 8007f22:	4607      	mov	r7, r0
 8007f24:	f2c0 8081 	blt.w	800802a <quorem+0x112>
 8007f28:	3c01      	subs	r4, #1
 8007f2a:	f101 0814 	add.w	r8, r1, #20
 8007f2e:	f100 0514 	add.w	r5, r0, #20
 8007f32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f36:	9301      	str	r3, [sp, #4]
 8007f38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f40:	3301      	adds	r3, #1
 8007f42:	429a      	cmp	r2, r3
 8007f44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007f48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f50:	d331      	bcc.n	8007fb6 <quorem+0x9e>
 8007f52:	f04f 0e00 	mov.w	lr, #0
 8007f56:	4640      	mov	r0, r8
 8007f58:	46ac      	mov	ip, r5
 8007f5a:	46f2      	mov	sl, lr
 8007f5c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007f60:	b293      	uxth	r3, r2
 8007f62:	fb06 e303 	mla	r3, r6, r3, lr
 8007f66:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	ebaa 0303 	sub.w	r3, sl, r3
 8007f70:	f8dc a000 	ldr.w	sl, [ip]
 8007f74:	0c12      	lsrs	r2, r2, #16
 8007f76:	fa13 f38a 	uxtah	r3, r3, sl
 8007f7a:	fb06 e202 	mla	r2, r6, r2, lr
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	9b00      	ldr	r3, [sp, #0]
 8007f82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007f86:	b292      	uxth	r2, r2
 8007f88:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007f8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f90:	f8bd 3000 	ldrh.w	r3, [sp]
 8007f94:	4581      	cmp	r9, r0
 8007f96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f9a:	f84c 3b04 	str.w	r3, [ip], #4
 8007f9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007fa2:	d2db      	bcs.n	8007f5c <quorem+0x44>
 8007fa4:	f855 300b 	ldr.w	r3, [r5, fp]
 8007fa8:	b92b      	cbnz	r3, 8007fb6 <quorem+0x9e>
 8007faa:	9b01      	ldr	r3, [sp, #4]
 8007fac:	3b04      	subs	r3, #4
 8007fae:	429d      	cmp	r5, r3
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	d32e      	bcc.n	8008012 <quorem+0xfa>
 8007fb4:	613c      	str	r4, [r7, #16]
 8007fb6:	4638      	mov	r0, r7
 8007fb8:	f001 fa56 	bl	8009468 <__mcmp>
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	db24      	blt.n	800800a <quorem+0xf2>
 8007fc0:	3601      	adds	r6, #1
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	f04f 0c00 	mov.w	ip, #0
 8007fc8:	f858 2b04 	ldr.w	r2, [r8], #4
 8007fcc:	f8d0 e000 	ldr.w	lr, [r0]
 8007fd0:	b293      	uxth	r3, r2
 8007fd2:	ebac 0303 	sub.w	r3, ip, r3
 8007fd6:	0c12      	lsrs	r2, r2, #16
 8007fd8:	fa13 f38e 	uxtah	r3, r3, lr
 8007fdc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007fe0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fea:	45c1      	cmp	r9, r8
 8007fec:	f840 3b04 	str.w	r3, [r0], #4
 8007ff0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ff4:	d2e8      	bcs.n	8007fc8 <quorem+0xb0>
 8007ff6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ffa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ffe:	b922      	cbnz	r2, 800800a <quorem+0xf2>
 8008000:	3b04      	subs	r3, #4
 8008002:	429d      	cmp	r5, r3
 8008004:	461a      	mov	r2, r3
 8008006:	d30a      	bcc.n	800801e <quorem+0x106>
 8008008:	613c      	str	r4, [r7, #16]
 800800a:	4630      	mov	r0, r6
 800800c:	b003      	add	sp, #12
 800800e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008012:	6812      	ldr	r2, [r2, #0]
 8008014:	3b04      	subs	r3, #4
 8008016:	2a00      	cmp	r2, #0
 8008018:	d1cc      	bne.n	8007fb4 <quorem+0x9c>
 800801a:	3c01      	subs	r4, #1
 800801c:	e7c7      	b.n	8007fae <quorem+0x96>
 800801e:	6812      	ldr	r2, [r2, #0]
 8008020:	3b04      	subs	r3, #4
 8008022:	2a00      	cmp	r2, #0
 8008024:	d1f0      	bne.n	8008008 <quorem+0xf0>
 8008026:	3c01      	subs	r4, #1
 8008028:	e7eb      	b.n	8008002 <quorem+0xea>
 800802a:	2000      	movs	r0, #0
 800802c:	e7ee      	b.n	800800c <quorem+0xf4>
	...

08008030 <_dtoa_r>:
 8008030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008034:	ed2d 8b02 	vpush	{d8}
 8008038:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800803a:	b091      	sub	sp, #68	; 0x44
 800803c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008040:	ec59 8b10 	vmov	r8, r9, d0
 8008044:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8008046:	9106      	str	r1, [sp, #24]
 8008048:	4606      	mov	r6, r0
 800804a:	9208      	str	r2, [sp, #32]
 800804c:	930c      	str	r3, [sp, #48]	; 0x30
 800804e:	b975      	cbnz	r5, 800806e <_dtoa_r+0x3e>
 8008050:	2010      	movs	r0, #16
 8008052:	f000 ff7f 	bl	8008f54 <malloc>
 8008056:	4602      	mov	r2, r0
 8008058:	6270      	str	r0, [r6, #36]	; 0x24
 800805a:	b920      	cbnz	r0, 8008066 <_dtoa_r+0x36>
 800805c:	4baa      	ldr	r3, [pc, #680]	; (8008308 <_dtoa_r+0x2d8>)
 800805e:	21ea      	movs	r1, #234	; 0xea
 8008060:	48aa      	ldr	r0, [pc, #680]	; (800830c <_dtoa_r+0x2dc>)
 8008062:	f001 ff5d 	bl	8009f20 <__assert_func>
 8008066:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800806a:	6005      	str	r5, [r0, #0]
 800806c:	60c5      	str	r5, [r0, #12]
 800806e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008070:	6819      	ldr	r1, [r3, #0]
 8008072:	b151      	cbz	r1, 800808a <_dtoa_r+0x5a>
 8008074:	685a      	ldr	r2, [r3, #4]
 8008076:	604a      	str	r2, [r1, #4]
 8008078:	2301      	movs	r3, #1
 800807a:	4093      	lsls	r3, r2
 800807c:	608b      	str	r3, [r1, #8]
 800807e:	4630      	mov	r0, r6
 8008080:	f000 ffb0 	bl	8008fe4 <_Bfree>
 8008084:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008086:	2200      	movs	r2, #0
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	f1b9 0300 	subs.w	r3, r9, #0
 800808e:	bfbb      	ittet	lt
 8008090:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008094:	9303      	strlt	r3, [sp, #12]
 8008096:	2300      	movge	r3, #0
 8008098:	2201      	movlt	r2, #1
 800809a:	bfac      	ite	ge
 800809c:	6023      	strge	r3, [r4, #0]
 800809e:	6022      	strlt	r2, [r4, #0]
 80080a0:	4b9b      	ldr	r3, [pc, #620]	; (8008310 <_dtoa_r+0x2e0>)
 80080a2:	9c03      	ldr	r4, [sp, #12]
 80080a4:	43a3      	bics	r3, r4
 80080a6:	d11c      	bne.n	80080e2 <_dtoa_r+0xb2>
 80080a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80080ae:	6013      	str	r3, [r2, #0]
 80080b0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80080b4:	ea53 0308 	orrs.w	r3, r3, r8
 80080b8:	f000 84fd 	beq.w	8008ab6 <_dtoa_r+0xa86>
 80080bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80080be:	b963      	cbnz	r3, 80080da <_dtoa_r+0xaa>
 80080c0:	4b94      	ldr	r3, [pc, #592]	; (8008314 <_dtoa_r+0x2e4>)
 80080c2:	e01f      	b.n	8008104 <_dtoa_r+0xd4>
 80080c4:	4b94      	ldr	r3, [pc, #592]	; (8008318 <_dtoa_r+0x2e8>)
 80080c6:	9301      	str	r3, [sp, #4]
 80080c8:	3308      	adds	r3, #8
 80080ca:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80080cc:	6013      	str	r3, [r2, #0]
 80080ce:	9801      	ldr	r0, [sp, #4]
 80080d0:	b011      	add	sp, #68	; 0x44
 80080d2:	ecbd 8b02 	vpop	{d8}
 80080d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080da:	4b8e      	ldr	r3, [pc, #568]	; (8008314 <_dtoa_r+0x2e4>)
 80080dc:	9301      	str	r3, [sp, #4]
 80080de:	3303      	adds	r3, #3
 80080e0:	e7f3      	b.n	80080ca <_dtoa_r+0x9a>
 80080e2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80080e6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80080ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ee:	d10b      	bne.n	8008108 <_dtoa_r+0xd8>
 80080f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080f2:	2301      	movs	r3, #1
 80080f4:	6013      	str	r3, [r2, #0]
 80080f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f000 84d9 	beq.w	8008ab0 <_dtoa_r+0xa80>
 80080fe:	4887      	ldr	r0, [pc, #540]	; (800831c <_dtoa_r+0x2ec>)
 8008100:	6018      	str	r0, [r3, #0]
 8008102:	1e43      	subs	r3, r0, #1
 8008104:	9301      	str	r3, [sp, #4]
 8008106:	e7e2      	b.n	80080ce <_dtoa_r+0x9e>
 8008108:	a90f      	add	r1, sp, #60	; 0x3c
 800810a:	aa0e      	add	r2, sp, #56	; 0x38
 800810c:	4630      	mov	r0, r6
 800810e:	eeb0 0b48 	vmov.f64	d0, d8
 8008112:	f001 fa4f 	bl	80095b4 <__d2b>
 8008116:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800811a:	4605      	mov	r5, r0
 800811c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800811e:	2900      	cmp	r1, #0
 8008120:	d046      	beq.n	80081b0 <_dtoa_r+0x180>
 8008122:	ee18 4a90 	vmov	r4, s17
 8008126:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800812a:	ec53 2b18 	vmov	r2, r3, d8
 800812e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8008132:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008136:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800813a:	2400      	movs	r4, #0
 800813c:	ec43 2b16 	vmov	d6, r2, r3
 8008140:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8008144:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80082f0 <_dtoa_r+0x2c0>
 8008148:	ee36 7b47 	vsub.f64	d7, d6, d7
 800814c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80082f8 <_dtoa_r+0x2c8>
 8008150:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008154:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008300 <_dtoa_r+0x2d0>
 8008158:	ee07 1a90 	vmov	s15, r1
 800815c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008160:	eeb0 7b46 	vmov.f64	d7, d6
 8008164:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008168:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800816c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008174:	ee16 ba90 	vmov	fp, s13
 8008178:	940a      	str	r4, [sp, #40]	; 0x28
 800817a:	d508      	bpl.n	800818e <_dtoa_r+0x15e>
 800817c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008180:	eeb4 6b47 	vcmp.f64	d6, d7
 8008184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008188:	bf18      	it	ne
 800818a:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800818e:	f1bb 0f16 	cmp.w	fp, #22
 8008192:	d82f      	bhi.n	80081f4 <_dtoa_r+0x1c4>
 8008194:	4b62      	ldr	r3, [pc, #392]	; (8008320 <_dtoa_r+0x2f0>)
 8008196:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800819a:	ed93 7b00 	vldr	d7, [r3]
 800819e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80081a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081a6:	d501      	bpl.n	80081ac <_dtoa_r+0x17c>
 80081a8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80081ac:	2300      	movs	r3, #0
 80081ae:	e022      	b.n	80081f6 <_dtoa_r+0x1c6>
 80081b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80081b2:	4401      	add	r1, r0
 80081b4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80081b8:	2b20      	cmp	r3, #32
 80081ba:	bfc1      	itttt	gt
 80081bc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80081c0:	fa04 f303 	lslgt.w	r3, r4, r3
 80081c4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80081c8:	fa28 f804 	lsrgt.w	r8, r8, r4
 80081cc:	bfd6      	itet	le
 80081ce:	f1c3 0320 	rsble	r3, r3, #32
 80081d2:	ea43 0808 	orrgt.w	r8, r3, r8
 80081d6:	fa08 f803 	lslle.w	r8, r8, r3
 80081da:	ee07 8a90 	vmov	s15, r8
 80081de:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80081e2:	3901      	subs	r1, #1
 80081e4:	ee17 4a90 	vmov	r4, s15
 80081e8:	ec53 2b17 	vmov	r2, r3, d7
 80081ec:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80081f0:	2401      	movs	r4, #1
 80081f2:	e7a3      	b.n	800813c <_dtoa_r+0x10c>
 80081f4:	2301      	movs	r3, #1
 80081f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80081f8:	1a43      	subs	r3, r0, r1
 80081fa:	1e5a      	subs	r2, r3, #1
 80081fc:	bf45      	ittet	mi
 80081fe:	f1c3 0301 	rsbmi	r3, r3, #1
 8008202:	9304      	strmi	r3, [sp, #16]
 8008204:	2300      	movpl	r3, #0
 8008206:	2300      	movmi	r3, #0
 8008208:	9205      	str	r2, [sp, #20]
 800820a:	bf54      	ite	pl
 800820c:	9304      	strpl	r3, [sp, #16]
 800820e:	9305      	strmi	r3, [sp, #20]
 8008210:	f1bb 0f00 	cmp.w	fp, #0
 8008214:	db18      	blt.n	8008248 <_dtoa_r+0x218>
 8008216:	9b05      	ldr	r3, [sp, #20]
 8008218:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800821c:	445b      	add	r3, fp
 800821e:	9305      	str	r3, [sp, #20]
 8008220:	2300      	movs	r3, #0
 8008222:	9a06      	ldr	r2, [sp, #24]
 8008224:	2a09      	cmp	r2, #9
 8008226:	d849      	bhi.n	80082bc <_dtoa_r+0x28c>
 8008228:	2a05      	cmp	r2, #5
 800822a:	bfc4      	itt	gt
 800822c:	3a04      	subgt	r2, #4
 800822e:	9206      	strgt	r2, [sp, #24]
 8008230:	9a06      	ldr	r2, [sp, #24]
 8008232:	f1a2 0202 	sub.w	r2, r2, #2
 8008236:	bfcc      	ite	gt
 8008238:	2400      	movgt	r4, #0
 800823a:	2401      	movle	r4, #1
 800823c:	2a03      	cmp	r2, #3
 800823e:	d848      	bhi.n	80082d2 <_dtoa_r+0x2a2>
 8008240:	e8df f002 	tbb	[pc, r2]
 8008244:	3a2c2e0b 	.word	0x3a2c2e0b
 8008248:	9b04      	ldr	r3, [sp, #16]
 800824a:	2200      	movs	r2, #0
 800824c:	eba3 030b 	sub.w	r3, r3, fp
 8008250:	9304      	str	r3, [sp, #16]
 8008252:	9209      	str	r2, [sp, #36]	; 0x24
 8008254:	f1cb 0300 	rsb	r3, fp, #0
 8008258:	e7e3      	b.n	8008222 <_dtoa_r+0x1f2>
 800825a:	2200      	movs	r2, #0
 800825c:	9207      	str	r2, [sp, #28]
 800825e:	9a08      	ldr	r2, [sp, #32]
 8008260:	2a00      	cmp	r2, #0
 8008262:	dc39      	bgt.n	80082d8 <_dtoa_r+0x2a8>
 8008264:	f04f 0a01 	mov.w	sl, #1
 8008268:	46d1      	mov	r9, sl
 800826a:	4652      	mov	r2, sl
 800826c:	f8cd a020 	str.w	sl, [sp, #32]
 8008270:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8008272:	2100      	movs	r1, #0
 8008274:	6079      	str	r1, [r7, #4]
 8008276:	2004      	movs	r0, #4
 8008278:	f100 0c14 	add.w	ip, r0, #20
 800827c:	4594      	cmp	ip, r2
 800827e:	6879      	ldr	r1, [r7, #4]
 8008280:	d92f      	bls.n	80082e2 <_dtoa_r+0x2b2>
 8008282:	4630      	mov	r0, r6
 8008284:	930d      	str	r3, [sp, #52]	; 0x34
 8008286:	f000 fe6d 	bl	8008f64 <_Balloc>
 800828a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800828c:	9001      	str	r0, [sp, #4]
 800828e:	4602      	mov	r2, r0
 8008290:	2800      	cmp	r0, #0
 8008292:	d149      	bne.n	8008328 <_dtoa_r+0x2f8>
 8008294:	4b23      	ldr	r3, [pc, #140]	; (8008324 <_dtoa_r+0x2f4>)
 8008296:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800829a:	e6e1      	b.n	8008060 <_dtoa_r+0x30>
 800829c:	2201      	movs	r2, #1
 800829e:	e7dd      	b.n	800825c <_dtoa_r+0x22c>
 80082a0:	2200      	movs	r2, #0
 80082a2:	9207      	str	r2, [sp, #28]
 80082a4:	9a08      	ldr	r2, [sp, #32]
 80082a6:	eb0b 0a02 	add.w	sl, fp, r2
 80082aa:	f10a 0901 	add.w	r9, sl, #1
 80082ae:	464a      	mov	r2, r9
 80082b0:	2a01      	cmp	r2, #1
 80082b2:	bfb8      	it	lt
 80082b4:	2201      	movlt	r2, #1
 80082b6:	e7db      	b.n	8008270 <_dtoa_r+0x240>
 80082b8:	2201      	movs	r2, #1
 80082ba:	e7f2      	b.n	80082a2 <_dtoa_r+0x272>
 80082bc:	2401      	movs	r4, #1
 80082be:	2200      	movs	r2, #0
 80082c0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80082c4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80082c8:	2100      	movs	r1, #0
 80082ca:	46d1      	mov	r9, sl
 80082cc:	2212      	movs	r2, #18
 80082ce:	9108      	str	r1, [sp, #32]
 80082d0:	e7ce      	b.n	8008270 <_dtoa_r+0x240>
 80082d2:	2201      	movs	r2, #1
 80082d4:	9207      	str	r2, [sp, #28]
 80082d6:	e7f5      	b.n	80082c4 <_dtoa_r+0x294>
 80082d8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80082dc:	46d1      	mov	r9, sl
 80082de:	4652      	mov	r2, sl
 80082e0:	e7c6      	b.n	8008270 <_dtoa_r+0x240>
 80082e2:	3101      	adds	r1, #1
 80082e4:	6079      	str	r1, [r7, #4]
 80082e6:	0040      	lsls	r0, r0, #1
 80082e8:	e7c6      	b.n	8008278 <_dtoa_r+0x248>
 80082ea:	bf00      	nop
 80082ec:	f3af 8000 	nop.w
 80082f0:	636f4361 	.word	0x636f4361
 80082f4:	3fd287a7 	.word	0x3fd287a7
 80082f8:	8b60c8b3 	.word	0x8b60c8b3
 80082fc:	3fc68a28 	.word	0x3fc68a28
 8008300:	509f79fb 	.word	0x509f79fb
 8008304:	3fd34413 	.word	0x3fd34413
 8008308:	0800a66d 	.word	0x0800a66d
 800830c:	0800a684 	.word	0x0800a684
 8008310:	7ff00000 	.word	0x7ff00000
 8008314:	0800a669 	.word	0x0800a669
 8008318:	0800a660 	.word	0x0800a660
 800831c:	0800a63d 	.word	0x0800a63d
 8008320:	0800a7d8 	.word	0x0800a7d8
 8008324:	0800a6df 	.word	0x0800a6df
 8008328:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800832a:	9901      	ldr	r1, [sp, #4]
 800832c:	6011      	str	r1, [r2, #0]
 800832e:	f1b9 0f0e 	cmp.w	r9, #14
 8008332:	d86c      	bhi.n	800840e <_dtoa_r+0x3de>
 8008334:	2c00      	cmp	r4, #0
 8008336:	d06a      	beq.n	800840e <_dtoa_r+0x3de>
 8008338:	f1bb 0f00 	cmp.w	fp, #0
 800833c:	f340 80a0 	ble.w	8008480 <_dtoa_r+0x450>
 8008340:	49c1      	ldr	r1, [pc, #772]	; (8008648 <_dtoa_r+0x618>)
 8008342:	f00b 020f 	and.w	r2, fp, #15
 8008346:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800834a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800834e:	ed92 7b00 	vldr	d7, [r2]
 8008352:	ea4f 112b 	mov.w	r1, fp, asr #4
 8008356:	f000 8087 	beq.w	8008468 <_dtoa_r+0x438>
 800835a:	4abc      	ldr	r2, [pc, #752]	; (800864c <_dtoa_r+0x61c>)
 800835c:	ed92 6b08 	vldr	d6, [r2, #32]
 8008360:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8008364:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008368:	f001 010f 	and.w	r1, r1, #15
 800836c:	2203      	movs	r2, #3
 800836e:	48b7      	ldr	r0, [pc, #732]	; (800864c <_dtoa_r+0x61c>)
 8008370:	2900      	cmp	r1, #0
 8008372:	d17b      	bne.n	800846c <_dtoa_r+0x43c>
 8008374:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008378:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800837c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008380:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008382:	2900      	cmp	r1, #0
 8008384:	f000 80a2 	beq.w	80084cc <_dtoa_r+0x49c>
 8008388:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800838c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008390:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008398:	f140 8098 	bpl.w	80084cc <_dtoa_r+0x49c>
 800839c:	f1b9 0f00 	cmp.w	r9, #0
 80083a0:	f000 8094 	beq.w	80084cc <_dtoa_r+0x49c>
 80083a4:	f1ba 0f00 	cmp.w	sl, #0
 80083a8:	dd2f      	ble.n	800840a <_dtoa_r+0x3da>
 80083aa:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80083ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80083b2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80083b6:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80083ba:	3201      	adds	r2, #1
 80083bc:	4650      	mov	r0, sl
 80083be:	ed9d 6b02 	vldr	d6, [sp, #8]
 80083c2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80083c6:	ee07 2a90 	vmov	s15, r2
 80083ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80083ce:	eea7 5b06 	vfma.f64	d5, d7, d6
 80083d2:	ee15 4a90 	vmov	r4, s11
 80083d6:	ec52 1b15 	vmov	r1, r2, d5
 80083da:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80083de:	2800      	cmp	r0, #0
 80083e0:	d177      	bne.n	80084d2 <_dtoa_r+0x4a2>
 80083e2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80083e6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80083ea:	ec42 1b17 	vmov	d7, r1, r2
 80083ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80083f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083f6:	f300 8263 	bgt.w	80088c0 <_dtoa_r+0x890>
 80083fa:	eeb1 7b47 	vneg.f64	d7, d7
 80083fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008406:	f100 8258 	bmi.w	80088ba <_dtoa_r+0x88a>
 800840a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800840e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008410:	2a00      	cmp	r2, #0
 8008412:	f2c0 811d 	blt.w	8008650 <_dtoa_r+0x620>
 8008416:	f1bb 0f0e 	cmp.w	fp, #14
 800841a:	f300 8119 	bgt.w	8008650 <_dtoa_r+0x620>
 800841e:	4b8a      	ldr	r3, [pc, #552]	; (8008648 <_dtoa_r+0x618>)
 8008420:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008424:	ed93 6b00 	vldr	d6, [r3]
 8008428:	9b08      	ldr	r3, [sp, #32]
 800842a:	2b00      	cmp	r3, #0
 800842c:	f280 80b7 	bge.w	800859e <_dtoa_r+0x56e>
 8008430:	f1b9 0f00 	cmp.w	r9, #0
 8008434:	f300 80b3 	bgt.w	800859e <_dtoa_r+0x56e>
 8008438:	f040 823f 	bne.w	80088ba <_dtoa_r+0x88a>
 800843c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008440:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008444:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008448:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800844c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008450:	464c      	mov	r4, r9
 8008452:	464f      	mov	r7, r9
 8008454:	f280 8215 	bge.w	8008882 <_dtoa_r+0x852>
 8008458:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800845c:	2331      	movs	r3, #49	; 0x31
 800845e:	f808 3b01 	strb.w	r3, [r8], #1
 8008462:	f10b 0b01 	add.w	fp, fp, #1
 8008466:	e211      	b.n	800888c <_dtoa_r+0x85c>
 8008468:	2202      	movs	r2, #2
 800846a:	e780      	b.n	800836e <_dtoa_r+0x33e>
 800846c:	07cc      	lsls	r4, r1, #31
 800846e:	d504      	bpl.n	800847a <_dtoa_r+0x44a>
 8008470:	ed90 6b00 	vldr	d6, [r0]
 8008474:	3201      	adds	r2, #1
 8008476:	ee27 7b06 	vmul.f64	d7, d7, d6
 800847a:	1049      	asrs	r1, r1, #1
 800847c:	3008      	adds	r0, #8
 800847e:	e777      	b.n	8008370 <_dtoa_r+0x340>
 8008480:	d022      	beq.n	80084c8 <_dtoa_r+0x498>
 8008482:	f1cb 0100 	rsb	r1, fp, #0
 8008486:	4a70      	ldr	r2, [pc, #448]	; (8008648 <_dtoa_r+0x618>)
 8008488:	f001 000f 	and.w	r0, r1, #15
 800848c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008490:	ed92 7b00 	vldr	d7, [r2]
 8008494:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008498:	ed8d 7b02 	vstr	d7, [sp, #8]
 800849c:	486b      	ldr	r0, [pc, #428]	; (800864c <_dtoa_r+0x61c>)
 800849e:	1109      	asrs	r1, r1, #4
 80084a0:	2400      	movs	r4, #0
 80084a2:	2202      	movs	r2, #2
 80084a4:	b929      	cbnz	r1, 80084b2 <_dtoa_r+0x482>
 80084a6:	2c00      	cmp	r4, #0
 80084a8:	f43f af6a 	beq.w	8008380 <_dtoa_r+0x350>
 80084ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80084b0:	e766      	b.n	8008380 <_dtoa_r+0x350>
 80084b2:	07cf      	lsls	r7, r1, #31
 80084b4:	d505      	bpl.n	80084c2 <_dtoa_r+0x492>
 80084b6:	ed90 6b00 	vldr	d6, [r0]
 80084ba:	3201      	adds	r2, #1
 80084bc:	2401      	movs	r4, #1
 80084be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80084c2:	1049      	asrs	r1, r1, #1
 80084c4:	3008      	adds	r0, #8
 80084c6:	e7ed      	b.n	80084a4 <_dtoa_r+0x474>
 80084c8:	2202      	movs	r2, #2
 80084ca:	e759      	b.n	8008380 <_dtoa_r+0x350>
 80084cc:	465f      	mov	r7, fp
 80084ce:	4648      	mov	r0, r9
 80084d0:	e775      	b.n	80083be <_dtoa_r+0x38e>
 80084d2:	ec42 1b17 	vmov	d7, r1, r2
 80084d6:	4a5c      	ldr	r2, [pc, #368]	; (8008648 <_dtoa_r+0x618>)
 80084d8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80084dc:	ed12 4b02 	vldr	d4, [r2, #-8]
 80084e0:	9a01      	ldr	r2, [sp, #4]
 80084e2:	1814      	adds	r4, r2, r0
 80084e4:	9a07      	ldr	r2, [sp, #28]
 80084e6:	b352      	cbz	r2, 800853e <_dtoa_r+0x50e>
 80084e8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80084ec:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80084f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80084f4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80084f8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80084fc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008500:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008504:	ee14 2a90 	vmov	r2, s9
 8008508:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800850c:	3230      	adds	r2, #48	; 0x30
 800850e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008512:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800851a:	f808 2b01 	strb.w	r2, [r8], #1
 800851e:	d439      	bmi.n	8008594 <_dtoa_r+0x564>
 8008520:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008524:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800852c:	d472      	bmi.n	8008614 <_dtoa_r+0x5e4>
 800852e:	45a0      	cmp	r8, r4
 8008530:	f43f af6b 	beq.w	800840a <_dtoa_r+0x3da>
 8008534:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008538:	ee26 6b03 	vmul.f64	d6, d6, d3
 800853c:	e7e0      	b.n	8008500 <_dtoa_r+0x4d0>
 800853e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008542:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008546:	4621      	mov	r1, r4
 8008548:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800854c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008550:	ee14 2a90 	vmov	r2, s9
 8008554:	3230      	adds	r2, #48	; 0x30
 8008556:	f808 2b01 	strb.w	r2, [r8], #1
 800855a:	45a0      	cmp	r8, r4
 800855c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008560:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008564:	d118      	bne.n	8008598 <_dtoa_r+0x568>
 8008566:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800856a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800856e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008576:	dc4d      	bgt.n	8008614 <_dtoa_r+0x5e4>
 8008578:	ee35 7b47 	vsub.f64	d7, d5, d7
 800857c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008584:	f57f af41 	bpl.w	800840a <_dtoa_r+0x3da>
 8008588:	4688      	mov	r8, r1
 800858a:	3901      	subs	r1, #1
 800858c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008590:	2b30      	cmp	r3, #48	; 0x30
 8008592:	d0f9      	beq.n	8008588 <_dtoa_r+0x558>
 8008594:	46bb      	mov	fp, r7
 8008596:	e02a      	b.n	80085ee <_dtoa_r+0x5be>
 8008598:	ee26 6b03 	vmul.f64	d6, d6, d3
 800859c:	e7d6      	b.n	800854c <_dtoa_r+0x51c>
 800859e:	ed9d 7b02 	vldr	d7, [sp, #8]
 80085a2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80085a6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80085aa:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80085ae:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80085b2:	ee15 3a10 	vmov	r3, s10
 80085b6:	3330      	adds	r3, #48	; 0x30
 80085b8:	f808 3b01 	strb.w	r3, [r8], #1
 80085bc:	9b01      	ldr	r3, [sp, #4]
 80085be:	eba8 0303 	sub.w	r3, r8, r3
 80085c2:	4599      	cmp	r9, r3
 80085c4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80085c8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80085cc:	d133      	bne.n	8008636 <_dtoa_r+0x606>
 80085ce:	ee37 7b07 	vadd.f64	d7, d7, d7
 80085d2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80085d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085da:	dc1a      	bgt.n	8008612 <_dtoa_r+0x5e2>
 80085dc:	eeb4 7b46 	vcmp.f64	d7, d6
 80085e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085e4:	d103      	bne.n	80085ee <_dtoa_r+0x5be>
 80085e6:	ee15 3a10 	vmov	r3, s10
 80085ea:	07d9      	lsls	r1, r3, #31
 80085ec:	d411      	bmi.n	8008612 <_dtoa_r+0x5e2>
 80085ee:	4629      	mov	r1, r5
 80085f0:	4630      	mov	r0, r6
 80085f2:	f000 fcf7 	bl	8008fe4 <_Bfree>
 80085f6:	2300      	movs	r3, #0
 80085f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085fa:	f888 3000 	strb.w	r3, [r8]
 80085fe:	f10b 0301 	add.w	r3, fp, #1
 8008602:	6013      	str	r3, [r2, #0]
 8008604:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008606:	2b00      	cmp	r3, #0
 8008608:	f43f ad61 	beq.w	80080ce <_dtoa_r+0x9e>
 800860c:	f8c3 8000 	str.w	r8, [r3]
 8008610:	e55d      	b.n	80080ce <_dtoa_r+0x9e>
 8008612:	465f      	mov	r7, fp
 8008614:	4643      	mov	r3, r8
 8008616:	4698      	mov	r8, r3
 8008618:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800861c:	2a39      	cmp	r2, #57	; 0x39
 800861e:	d106      	bne.n	800862e <_dtoa_r+0x5fe>
 8008620:	9a01      	ldr	r2, [sp, #4]
 8008622:	429a      	cmp	r2, r3
 8008624:	d1f7      	bne.n	8008616 <_dtoa_r+0x5e6>
 8008626:	9901      	ldr	r1, [sp, #4]
 8008628:	2230      	movs	r2, #48	; 0x30
 800862a:	3701      	adds	r7, #1
 800862c:	700a      	strb	r2, [r1, #0]
 800862e:	781a      	ldrb	r2, [r3, #0]
 8008630:	3201      	adds	r2, #1
 8008632:	701a      	strb	r2, [r3, #0]
 8008634:	e7ae      	b.n	8008594 <_dtoa_r+0x564>
 8008636:	ee27 7b04 	vmul.f64	d7, d7, d4
 800863a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800863e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008642:	d1b2      	bne.n	80085aa <_dtoa_r+0x57a>
 8008644:	e7d3      	b.n	80085ee <_dtoa_r+0x5be>
 8008646:	bf00      	nop
 8008648:	0800a7d8 	.word	0x0800a7d8
 800864c:	0800a7b0 	.word	0x0800a7b0
 8008650:	9907      	ldr	r1, [sp, #28]
 8008652:	2900      	cmp	r1, #0
 8008654:	f000 80d0 	beq.w	80087f8 <_dtoa_r+0x7c8>
 8008658:	9906      	ldr	r1, [sp, #24]
 800865a:	2901      	cmp	r1, #1
 800865c:	f300 80b4 	bgt.w	80087c8 <_dtoa_r+0x798>
 8008660:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008662:	2900      	cmp	r1, #0
 8008664:	f000 80ac 	beq.w	80087c0 <_dtoa_r+0x790>
 8008668:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800866c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008670:	461c      	mov	r4, r3
 8008672:	930a      	str	r3, [sp, #40]	; 0x28
 8008674:	9b04      	ldr	r3, [sp, #16]
 8008676:	4413      	add	r3, r2
 8008678:	9304      	str	r3, [sp, #16]
 800867a:	9b05      	ldr	r3, [sp, #20]
 800867c:	2101      	movs	r1, #1
 800867e:	4413      	add	r3, r2
 8008680:	4630      	mov	r0, r6
 8008682:	9305      	str	r3, [sp, #20]
 8008684:	f000 fd66 	bl	8009154 <__i2b>
 8008688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800868a:	4607      	mov	r7, r0
 800868c:	f1b8 0f00 	cmp.w	r8, #0
 8008690:	dd0d      	ble.n	80086ae <_dtoa_r+0x67e>
 8008692:	9a05      	ldr	r2, [sp, #20]
 8008694:	2a00      	cmp	r2, #0
 8008696:	dd0a      	ble.n	80086ae <_dtoa_r+0x67e>
 8008698:	4542      	cmp	r2, r8
 800869a:	9904      	ldr	r1, [sp, #16]
 800869c:	bfa8      	it	ge
 800869e:	4642      	movge	r2, r8
 80086a0:	1a89      	subs	r1, r1, r2
 80086a2:	9104      	str	r1, [sp, #16]
 80086a4:	9905      	ldr	r1, [sp, #20]
 80086a6:	eba8 0802 	sub.w	r8, r8, r2
 80086aa:	1a8a      	subs	r2, r1, r2
 80086ac:	9205      	str	r2, [sp, #20]
 80086ae:	b303      	cbz	r3, 80086f2 <_dtoa_r+0x6c2>
 80086b0:	9a07      	ldr	r2, [sp, #28]
 80086b2:	2a00      	cmp	r2, #0
 80086b4:	f000 80a5 	beq.w	8008802 <_dtoa_r+0x7d2>
 80086b8:	2c00      	cmp	r4, #0
 80086ba:	dd13      	ble.n	80086e4 <_dtoa_r+0x6b4>
 80086bc:	4639      	mov	r1, r7
 80086be:	4622      	mov	r2, r4
 80086c0:	4630      	mov	r0, r6
 80086c2:	930d      	str	r3, [sp, #52]	; 0x34
 80086c4:	f000 fe06 	bl	80092d4 <__pow5mult>
 80086c8:	462a      	mov	r2, r5
 80086ca:	4601      	mov	r1, r0
 80086cc:	4607      	mov	r7, r0
 80086ce:	4630      	mov	r0, r6
 80086d0:	f000 fd56 	bl	8009180 <__multiply>
 80086d4:	4629      	mov	r1, r5
 80086d6:	900a      	str	r0, [sp, #40]	; 0x28
 80086d8:	4630      	mov	r0, r6
 80086da:	f000 fc83 	bl	8008fe4 <_Bfree>
 80086de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086e2:	4615      	mov	r5, r2
 80086e4:	1b1a      	subs	r2, r3, r4
 80086e6:	d004      	beq.n	80086f2 <_dtoa_r+0x6c2>
 80086e8:	4629      	mov	r1, r5
 80086ea:	4630      	mov	r0, r6
 80086ec:	f000 fdf2 	bl	80092d4 <__pow5mult>
 80086f0:	4605      	mov	r5, r0
 80086f2:	2101      	movs	r1, #1
 80086f4:	4630      	mov	r0, r6
 80086f6:	f000 fd2d 	bl	8009154 <__i2b>
 80086fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	4604      	mov	r4, r0
 8008700:	f340 8081 	ble.w	8008806 <_dtoa_r+0x7d6>
 8008704:	461a      	mov	r2, r3
 8008706:	4601      	mov	r1, r0
 8008708:	4630      	mov	r0, r6
 800870a:	f000 fde3 	bl	80092d4 <__pow5mult>
 800870e:	9b06      	ldr	r3, [sp, #24]
 8008710:	2b01      	cmp	r3, #1
 8008712:	4604      	mov	r4, r0
 8008714:	dd7a      	ble.n	800880c <_dtoa_r+0x7dc>
 8008716:	2300      	movs	r3, #0
 8008718:	930a      	str	r3, [sp, #40]	; 0x28
 800871a:	6922      	ldr	r2, [r4, #16]
 800871c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008720:	6910      	ldr	r0, [r2, #16]
 8008722:	f000 fcc7 	bl	80090b4 <__hi0bits>
 8008726:	f1c0 0020 	rsb	r0, r0, #32
 800872a:	9b05      	ldr	r3, [sp, #20]
 800872c:	4418      	add	r0, r3
 800872e:	f010 001f 	ands.w	r0, r0, #31
 8008732:	f000 808c 	beq.w	800884e <_dtoa_r+0x81e>
 8008736:	f1c0 0220 	rsb	r2, r0, #32
 800873a:	2a04      	cmp	r2, #4
 800873c:	f340 8085 	ble.w	800884a <_dtoa_r+0x81a>
 8008740:	f1c0 001c 	rsb	r0, r0, #28
 8008744:	9b04      	ldr	r3, [sp, #16]
 8008746:	4403      	add	r3, r0
 8008748:	9304      	str	r3, [sp, #16]
 800874a:	9b05      	ldr	r3, [sp, #20]
 800874c:	4403      	add	r3, r0
 800874e:	4480      	add	r8, r0
 8008750:	9305      	str	r3, [sp, #20]
 8008752:	9b04      	ldr	r3, [sp, #16]
 8008754:	2b00      	cmp	r3, #0
 8008756:	dd05      	ble.n	8008764 <_dtoa_r+0x734>
 8008758:	4629      	mov	r1, r5
 800875a:	461a      	mov	r2, r3
 800875c:	4630      	mov	r0, r6
 800875e:	f000 fe13 	bl	8009388 <__lshift>
 8008762:	4605      	mov	r5, r0
 8008764:	9b05      	ldr	r3, [sp, #20]
 8008766:	2b00      	cmp	r3, #0
 8008768:	dd05      	ble.n	8008776 <_dtoa_r+0x746>
 800876a:	4621      	mov	r1, r4
 800876c:	461a      	mov	r2, r3
 800876e:	4630      	mov	r0, r6
 8008770:	f000 fe0a 	bl	8009388 <__lshift>
 8008774:	4604      	mov	r4, r0
 8008776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008778:	2b00      	cmp	r3, #0
 800877a:	d06a      	beq.n	8008852 <_dtoa_r+0x822>
 800877c:	4621      	mov	r1, r4
 800877e:	4628      	mov	r0, r5
 8008780:	f000 fe72 	bl	8009468 <__mcmp>
 8008784:	2800      	cmp	r0, #0
 8008786:	da64      	bge.n	8008852 <_dtoa_r+0x822>
 8008788:	2300      	movs	r3, #0
 800878a:	4629      	mov	r1, r5
 800878c:	220a      	movs	r2, #10
 800878e:	4630      	mov	r0, r6
 8008790:	f000 fc4a 	bl	8009028 <__multadd>
 8008794:	9b07      	ldr	r3, [sp, #28]
 8008796:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800879a:	4605      	mov	r5, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	f000 8191 	beq.w	8008ac4 <_dtoa_r+0xa94>
 80087a2:	4639      	mov	r1, r7
 80087a4:	2300      	movs	r3, #0
 80087a6:	220a      	movs	r2, #10
 80087a8:	4630      	mov	r0, r6
 80087aa:	f000 fc3d 	bl	8009028 <__multadd>
 80087ae:	f1ba 0f00 	cmp.w	sl, #0
 80087b2:	4607      	mov	r7, r0
 80087b4:	f300 808d 	bgt.w	80088d2 <_dtoa_r+0x8a2>
 80087b8:	9b06      	ldr	r3, [sp, #24]
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	dc50      	bgt.n	8008860 <_dtoa_r+0x830>
 80087be:	e088      	b.n	80088d2 <_dtoa_r+0x8a2>
 80087c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087c2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80087c6:	e751      	b.n	800866c <_dtoa_r+0x63c>
 80087c8:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 80087cc:	42a3      	cmp	r3, r4
 80087ce:	bfbf      	itttt	lt
 80087d0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80087d2:	1ae3      	sublt	r3, r4, r3
 80087d4:	18d2      	addlt	r2, r2, r3
 80087d6:	9209      	strlt	r2, [sp, #36]	; 0x24
 80087d8:	bfb6      	itet	lt
 80087da:	4623      	movlt	r3, r4
 80087dc:	1b1c      	subge	r4, r3, r4
 80087de:	2400      	movlt	r4, #0
 80087e0:	f1b9 0f00 	cmp.w	r9, #0
 80087e4:	bfb5      	itete	lt
 80087e6:	9a04      	ldrlt	r2, [sp, #16]
 80087e8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80087ec:	eba2 0809 	sublt.w	r8, r2, r9
 80087f0:	464a      	movge	r2, r9
 80087f2:	bfb8      	it	lt
 80087f4:	2200      	movlt	r2, #0
 80087f6:	e73c      	b.n	8008672 <_dtoa_r+0x642>
 80087f8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80087fc:	9f07      	ldr	r7, [sp, #28]
 80087fe:	461c      	mov	r4, r3
 8008800:	e744      	b.n	800868c <_dtoa_r+0x65c>
 8008802:	461a      	mov	r2, r3
 8008804:	e770      	b.n	80086e8 <_dtoa_r+0x6b8>
 8008806:	9b06      	ldr	r3, [sp, #24]
 8008808:	2b01      	cmp	r3, #1
 800880a:	dc18      	bgt.n	800883e <_dtoa_r+0x80e>
 800880c:	9b02      	ldr	r3, [sp, #8]
 800880e:	b9b3      	cbnz	r3, 800883e <_dtoa_r+0x80e>
 8008810:	9b03      	ldr	r3, [sp, #12]
 8008812:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008816:	b9a2      	cbnz	r2, 8008842 <_dtoa_r+0x812>
 8008818:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800881c:	0d12      	lsrs	r2, r2, #20
 800881e:	0512      	lsls	r2, r2, #20
 8008820:	b18a      	cbz	r2, 8008846 <_dtoa_r+0x816>
 8008822:	9b04      	ldr	r3, [sp, #16]
 8008824:	3301      	adds	r3, #1
 8008826:	9304      	str	r3, [sp, #16]
 8008828:	9b05      	ldr	r3, [sp, #20]
 800882a:	3301      	adds	r3, #1
 800882c:	9305      	str	r3, [sp, #20]
 800882e:	2301      	movs	r3, #1
 8008830:	930a      	str	r3, [sp, #40]	; 0x28
 8008832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008834:	2b00      	cmp	r3, #0
 8008836:	f47f af70 	bne.w	800871a <_dtoa_r+0x6ea>
 800883a:	2001      	movs	r0, #1
 800883c:	e775      	b.n	800872a <_dtoa_r+0x6fa>
 800883e:	2300      	movs	r3, #0
 8008840:	e7f6      	b.n	8008830 <_dtoa_r+0x800>
 8008842:	9b02      	ldr	r3, [sp, #8]
 8008844:	e7f4      	b.n	8008830 <_dtoa_r+0x800>
 8008846:	920a      	str	r2, [sp, #40]	; 0x28
 8008848:	e7f3      	b.n	8008832 <_dtoa_r+0x802>
 800884a:	d082      	beq.n	8008752 <_dtoa_r+0x722>
 800884c:	4610      	mov	r0, r2
 800884e:	301c      	adds	r0, #28
 8008850:	e778      	b.n	8008744 <_dtoa_r+0x714>
 8008852:	f1b9 0f00 	cmp.w	r9, #0
 8008856:	dc37      	bgt.n	80088c8 <_dtoa_r+0x898>
 8008858:	9b06      	ldr	r3, [sp, #24]
 800885a:	2b02      	cmp	r3, #2
 800885c:	dd34      	ble.n	80088c8 <_dtoa_r+0x898>
 800885e:	46ca      	mov	sl, r9
 8008860:	f1ba 0f00 	cmp.w	sl, #0
 8008864:	d10d      	bne.n	8008882 <_dtoa_r+0x852>
 8008866:	4621      	mov	r1, r4
 8008868:	4653      	mov	r3, sl
 800886a:	2205      	movs	r2, #5
 800886c:	4630      	mov	r0, r6
 800886e:	f000 fbdb 	bl	8009028 <__multadd>
 8008872:	4601      	mov	r1, r0
 8008874:	4604      	mov	r4, r0
 8008876:	4628      	mov	r0, r5
 8008878:	f000 fdf6 	bl	8009468 <__mcmp>
 800887c:	2800      	cmp	r0, #0
 800887e:	f73f adeb 	bgt.w	8008458 <_dtoa_r+0x428>
 8008882:	9b08      	ldr	r3, [sp, #32]
 8008884:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008888:	ea6f 0b03 	mvn.w	fp, r3
 800888c:	f04f 0900 	mov.w	r9, #0
 8008890:	4621      	mov	r1, r4
 8008892:	4630      	mov	r0, r6
 8008894:	f000 fba6 	bl	8008fe4 <_Bfree>
 8008898:	2f00      	cmp	r7, #0
 800889a:	f43f aea8 	beq.w	80085ee <_dtoa_r+0x5be>
 800889e:	f1b9 0f00 	cmp.w	r9, #0
 80088a2:	d005      	beq.n	80088b0 <_dtoa_r+0x880>
 80088a4:	45b9      	cmp	r9, r7
 80088a6:	d003      	beq.n	80088b0 <_dtoa_r+0x880>
 80088a8:	4649      	mov	r1, r9
 80088aa:	4630      	mov	r0, r6
 80088ac:	f000 fb9a 	bl	8008fe4 <_Bfree>
 80088b0:	4639      	mov	r1, r7
 80088b2:	4630      	mov	r0, r6
 80088b4:	f000 fb96 	bl	8008fe4 <_Bfree>
 80088b8:	e699      	b.n	80085ee <_dtoa_r+0x5be>
 80088ba:	2400      	movs	r4, #0
 80088bc:	4627      	mov	r7, r4
 80088be:	e7e0      	b.n	8008882 <_dtoa_r+0x852>
 80088c0:	46bb      	mov	fp, r7
 80088c2:	4604      	mov	r4, r0
 80088c4:	4607      	mov	r7, r0
 80088c6:	e5c7      	b.n	8008458 <_dtoa_r+0x428>
 80088c8:	9b07      	ldr	r3, [sp, #28]
 80088ca:	46ca      	mov	sl, r9
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f000 8100 	beq.w	8008ad2 <_dtoa_r+0xaa2>
 80088d2:	f1b8 0f00 	cmp.w	r8, #0
 80088d6:	dd05      	ble.n	80088e4 <_dtoa_r+0x8b4>
 80088d8:	4639      	mov	r1, r7
 80088da:	4642      	mov	r2, r8
 80088dc:	4630      	mov	r0, r6
 80088de:	f000 fd53 	bl	8009388 <__lshift>
 80088e2:	4607      	mov	r7, r0
 80088e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d05d      	beq.n	80089a6 <_dtoa_r+0x976>
 80088ea:	6879      	ldr	r1, [r7, #4]
 80088ec:	4630      	mov	r0, r6
 80088ee:	f000 fb39 	bl	8008f64 <_Balloc>
 80088f2:	4680      	mov	r8, r0
 80088f4:	b928      	cbnz	r0, 8008902 <_dtoa_r+0x8d2>
 80088f6:	4b82      	ldr	r3, [pc, #520]	; (8008b00 <_dtoa_r+0xad0>)
 80088f8:	4602      	mov	r2, r0
 80088fa:	f240 21ea 	movw	r1, #746	; 0x2ea
 80088fe:	f7ff bbaf 	b.w	8008060 <_dtoa_r+0x30>
 8008902:	693a      	ldr	r2, [r7, #16]
 8008904:	3202      	adds	r2, #2
 8008906:	0092      	lsls	r2, r2, #2
 8008908:	f107 010c 	add.w	r1, r7, #12
 800890c:	300c      	adds	r0, #12
 800890e:	f7fe fd1b 	bl	8007348 <memcpy>
 8008912:	2201      	movs	r2, #1
 8008914:	4641      	mov	r1, r8
 8008916:	4630      	mov	r0, r6
 8008918:	f000 fd36 	bl	8009388 <__lshift>
 800891c:	9b01      	ldr	r3, [sp, #4]
 800891e:	3301      	adds	r3, #1
 8008920:	9304      	str	r3, [sp, #16]
 8008922:	9b01      	ldr	r3, [sp, #4]
 8008924:	4453      	add	r3, sl
 8008926:	9308      	str	r3, [sp, #32]
 8008928:	9b02      	ldr	r3, [sp, #8]
 800892a:	f003 0301 	and.w	r3, r3, #1
 800892e:	46b9      	mov	r9, r7
 8008930:	9307      	str	r3, [sp, #28]
 8008932:	4607      	mov	r7, r0
 8008934:	9b04      	ldr	r3, [sp, #16]
 8008936:	4621      	mov	r1, r4
 8008938:	3b01      	subs	r3, #1
 800893a:	4628      	mov	r0, r5
 800893c:	9302      	str	r3, [sp, #8]
 800893e:	f7ff faeb 	bl	8007f18 <quorem>
 8008942:	4603      	mov	r3, r0
 8008944:	3330      	adds	r3, #48	; 0x30
 8008946:	9005      	str	r0, [sp, #20]
 8008948:	4649      	mov	r1, r9
 800894a:	4628      	mov	r0, r5
 800894c:	9309      	str	r3, [sp, #36]	; 0x24
 800894e:	f000 fd8b 	bl	8009468 <__mcmp>
 8008952:	463a      	mov	r2, r7
 8008954:	4682      	mov	sl, r0
 8008956:	4621      	mov	r1, r4
 8008958:	4630      	mov	r0, r6
 800895a:	f000 fda1 	bl	80094a0 <__mdiff>
 800895e:	68c2      	ldr	r2, [r0, #12]
 8008960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008962:	4680      	mov	r8, r0
 8008964:	bb0a      	cbnz	r2, 80089aa <_dtoa_r+0x97a>
 8008966:	4601      	mov	r1, r0
 8008968:	4628      	mov	r0, r5
 800896a:	f000 fd7d 	bl	8009468 <__mcmp>
 800896e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008970:	4602      	mov	r2, r0
 8008972:	4641      	mov	r1, r8
 8008974:	4630      	mov	r0, r6
 8008976:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800897a:	f000 fb33 	bl	8008fe4 <_Bfree>
 800897e:	9b06      	ldr	r3, [sp, #24]
 8008980:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008982:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008986:	ea43 0102 	orr.w	r1, r3, r2
 800898a:	9b07      	ldr	r3, [sp, #28]
 800898c:	430b      	orrs	r3, r1
 800898e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008990:	d10d      	bne.n	80089ae <_dtoa_r+0x97e>
 8008992:	2b39      	cmp	r3, #57	; 0x39
 8008994:	d029      	beq.n	80089ea <_dtoa_r+0x9ba>
 8008996:	f1ba 0f00 	cmp.w	sl, #0
 800899a:	dd01      	ble.n	80089a0 <_dtoa_r+0x970>
 800899c:	9b05      	ldr	r3, [sp, #20]
 800899e:	3331      	adds	r3, #49	; 0x31
 80089a0:	9a02      	ldr	r2, [sp, #8]
 80089a2:	7013      	strb	r3, [r2, #0]
 80089a4:	e774      	b.n	8008890 <_dtoa_r+0x860>
 80089a6:	4638      	mov	r0, r7
 80089a8:	e7b8      	b.n	800891c <_dtoa_r+0x8ec>
 80089aa:	2201      	movs	r2, #1
 80089ac:	e7e1      	b.n	8008972 <_dtoa_r+0x942>
 80089ae:	f1ba 0f00 	cmp.w	sl, #0
 80089b2:	db06      	blt.n	80089c2 <_dtoa_r+0x992>
 80089b4:	9906      	ldr	r1, [sp, #24]
 80089b6:	ea41 0a0a 	orr.w	sl, r1, sl
 80089ba:	9907      	ldr	r1, [sp, #28]
 80089bc:	ea5a 0101 	orrs.w	r1, sl, r1
 80089c0:	d120      	bne.n	8008a04 <_dtoa_r+0x9d4>
 80089c2:	2a00      	cmp	r2, #0
 80089c4:	ddec      	ble.n	80089a0 <_dtoa_r+0x970>
 80089c6:	4629      	mov	r1, r5
 80089c8:	2201      	movs	r2, #1
 80089ca:	4630      	mov	r0, r6
 80089cc:	9304      	str	r3, [sp, #16]
 80089ce:	f000 fcdb 	bl	8009388 <__lshift>
 80089d2:	4621      	mov	r1, r4
 80089d4:	4605      	mov	r5, r0
 80089d6:	f000 fd47 	bl	8009468 <__mcmp>
 80089da:	2800      	cmp	r0, #0
 80089dc:	9b04      	ldr	r3, [sp, #16]
 80089de:	dc02      	bgt.n	80089e6 <_dtoa_r+0x9b6>
 80089e0:	d1de      	bne.n	80089a0 <_dtoa_r+0x970>
 80089e2:	07da      	lsls	r2, r3, #31
 80089e4:	d5dc      	bpl.n	80089a0 <_dtoa_r+0x970>
 80089e6:	2b39      	cmp	r3, #57	; 0x39
 80089e8:	d1d8      	bne.n	800899c <_dtoa_r+0x96c>
 80089ea:	9a02      	ldr	r2, [sp, #8]
 80089ec:	2339      	movs	r3, #57	; 0x39
 80089ee:	7013      	strb	r3, [r2, #0]
 80089f0:	4643      	mov	r3, r8
 80089f2:	4698      	mov	r8, r3
 80089f4:	3b01      	subs	r3, #1
 80089f6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80089fa:	2a39      	cmp	r2, #57	; 0x39
 80089fc:	d051      	beq.n	8008aa2 <_dtoa_r+0xa72>
 80089fe:	3201      	adds	r2, #1
 8008a00:	701a      	strb	r2, [r3, #0]
 8008a02:	e745      	b.n	8008890 <_dtoa_r+0x860>
 8008a04:	2a00      	cmp	r2, #0
 8008a06:	dd03      	ble.n	8008a10 <_dtoa_r+0x9e0>
 8008a08:	2b39      	cmp	r3, #57	; 0x39
 8008a0a:	d0ee      	beq.n	80089ea <_dtoa_r+0x9ba>
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	e7c7      	b.n	80089a0 <_dtoa_r+0x970>
 8008a10:	9a04      	ldr	r2, [sp, #16]
 8008a12:	9908      	ldr	r1, [sp, #32]
 8008a14:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008a18:	428a      	cmp	r2, r1
 8008a1a:	d02b      	beq.n	8008a74 <_dtoa_r+0xa44>
 8008a1c:	4629      	mov	r1, r5
 8008a1e:	2300      	movs	r3, #0
 8008a20:	220a      	movs	r2, #10
 8008a22:	4630      	mov	r0, r6
 8008a24:	f000 fb00 	bl	8009028 <__multadd>
 8008a28:	45b9      	cmp	r9, r7
 8008a2a:	4605      	mov	r5, r0
 8008a2c:	f04f 0300 	mov.w	r3, #0
 8008a30:	f04f 020a 	mov.w	r2, #10
 8008a34:	4649      	mov	r1, r9
 8008a36:	4630      	mov	r0, r6
 8008a38:	d107      	bne.n	8008a4a <_dtoa_r+0xa1a>
 8008a3a:	f000 faf5 	bl	8009028 <__multadd>
 8008a3e:	4681      	mov	r9, r0
 8008a40:	4607      	mov	r7, r0
 8008a42:	9b04      	ldr	r3, [sp, #16]
 8008a44:	3301      	adds	r3, #1
 8008a46:	9304      	str	r3, [sp, #16]
 8008a48:	e774      	b.n	8008934 <_dtoa_r+0x904>
 8008a4a:	f000 faed 	bl	8009028 <__multadd>
 8008a4e:	4639      	mov	r1, r7
 8008a50:	4681      	mov	r9, r0
 8008a52:	2300      	movs	r3, #0
 8008a54:	220a      	movs	r2, #10
 8008a56:	4630      	mov	r0, r6
 8008a58:	f000 fae6 	bl	8009028 <__multadd>
 8008a5c:	4607      	mov	r7, r0
 8008a5e:	e7f0      	b.n	8008a42 <_dtoa_r+0xa12>
 8008a60:	f1ba 0f00 	cmp.w	sl, #0
 8008a64:	9a01      	ldr	r2, [sp, #4]
 8008a66:	bfcc      	ite	gt
 8008a68:	46d0      	movgt	r8, sl
 8008a6a:	f04f 0801 	movle.w	r8, #1
 8008a6e:	4490      	add	r8, r2
 8008a70:	f04f 0900 	mov.w	r9, #0
 8008a74:	4629      	mov	r1, r5
 8008a76:	2201      	movs	r2, #1
 8008a78:	4630      	mov	r0, r6
 8008a7a:	9302      	str	r3, [sp, #8]
 8008a7c:	f000 fc84 	bl	8009388 <__lshift>
 8008a80:	4621      	mov	r1, r4
 8008a82:	4605      	mov	r5, r0
 8008a84:	f000 fcf0 	bl	8009468 <__mcmp>
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	dcb1      	bgt.n	80089f0 <_dtoa_r+0x9c0>
 8008a8c:	d102      	bne.n	8008a94 <_dtoa_r+0xa64>
 8008a8e:	9b02      	ldr	r3, [sp, #8]
 8008a90:	07db      	lsls	r3, r3, #31
 8008a92:	d4ad      	bmi.n	80089f0 <_dtoa_r+0x9c0>
 8008a94:	4643      	mov	r3, r8
 8008a96:	4698      	mov	r8, r3
 8008a98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a9c:	2a30      	cmp	r2, #48	; 0x30
 8008a9e:	d0fa      	beq.n	8008a96 <_dtoa_r+0xa66>
 8008aa0:	e6f6      	b.n	8008890 <_dtoa_r+0x860>
 8008aa2:	9a01      	ldr	r2, [sp, #4]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d1a4      	bne.n	80089f2 <_dtoa_r+0x9c2>
 8008aa8:	f10b 0b01 	add.w	fp, fp, #1
 8008aac:	2331      	movs	r3, #49	; 0x31
 8008aae:	e778      	b.n	80089a2 <_dtoa_r+0x972>
 8008ab0:	4b14      	ldr	r3, [pc, #80]	; (8008b04 <_dtoa_r+0xad4>)
 8008ab2:	f7ff bb27 	b.w	8008104 <_dtoa_r+0xd4>
 8008ab6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f47f ab03 	bne.w	80080c4 <_dtoa_r+0x94>
 8008abe:	4b12      	ldr	r3, [pc, #72]	; (8008b08 <_dtoa_r+0xad8>)
 8008ac0:	f7ff bb20 	b.w	8008104 <_dtoa_r+0xd4>
 8008ac4:	f1ba 0f00 	cmp.w	sl, #0
 8008ac8:	dc03      	bgt.n	8008ad2 <_dtoa_r+0xaa2>
 8008aca:	9b06      	ldr	r3, [sp, #24]
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	f73f aec7 	bgt.w	8008860 <_dtoa_r+0x830>
 8008ad2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008ad6:	4621      	mov	r1, r4
 8008ad8:	4628      	mov	r0, r5
 8008ada:	f7ff fa1d 	bl	8007f18 <quorem>
 8008ade:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008ae2:	f808 3b01 	strb.w	r3, [r8], #1
 8008ae6:	9a01      	ldr	r2, [sp, #4]
 8008ae8:	eba8 0202 	sub.w	r2, r8, r2
 8008aec:	4592      	cmp	sl, r2
 8008aee:	ddb7      	ble.n	8008a60 <_dtoa_r+0xa30>
 8008af0:	4629      	mov	r1, r5
 8008af2:	2300      	movs	r3, #0
 8008af4:	220a      	movs	r2, #10
 8008af6:	4630      	mov	r0, r6
 8008af8:	f000 fa96 	bl	8009028 <__multadd>
 8008afc:	4605      	mov	r5, r0
 8008afe:	e7ea      	b.n	8008ad6 <_dtoa_r+0xaa6>
 8008b00:	0800a6df 	.word	0x0800a6df
 8008b04:	0800a63c 	.word	0x0800a63c
 8008b08:	0800a660 	.word	0x0800a660

08008b0c <__sflush_r>:
 8008b0c:	898a      	ldrh	r2, [r1, #12]
 8008b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b12:	4605      	mov	r5, r0
 8008b14:	0710      	lsls	r0, r2, #28
 8008b16:	460c      	mov	r4, r1
 8008b18:	d458      	bmi.n	8008bcc <__sflush_r+0xc0>
 8008b1a:	684b      	ldr	r3, [r1, #4]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	dc05      	bgt.n	8008b2c <__sflush_r+0x20>
 8008b20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	dc02      	bgt.n	8008b2c <__sflush_r+0x20>
 8008b26:	2000      	movs	r0, #0
 8008b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b2e:	2e00      	cmp	r6, #0
 8008b30:	d0f9      	beq.n	8008b26 <__sflush_r+0x1a>
 8008b32:	2300      	movs	r3, #0
 8008b34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b38:	682f      	ldr	r7, [r5, #0]
 8008b3a:	602b      	str	r3, [r5, #0]
 8008b3c:	d032      	beq.n	8008ba4 <__sflush_r+0x98>
 8008b3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b40:	89a3      	ldrh	r3, [r4, #12]
 8008b42:	075a      	lsls	r2, r3, #29
 8008b44:	d505      	bpl.n	8008b52 <__sflush_r+0x46>
 8008b46:	6863      	ldr	r3, [r4, #4]
 8008b48:	1ac0      	subs	r0, r0, r3
 8008b4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b4c:	b10b      	cbz	r3, 8008b52 <__sflush_r+0x46>
 8008b4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b50:	1ac0      	subs	r0, r0, r3
 8008b52:	2300      	movs	r3, #0
 8008b54:	4602      	mov	r2, r0
 8008b56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b58:	6a21      	ldr	r1, [r4, #32]
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	47b0      	blx	r6
 8008b5e:	1c43      	adds	r3, r0, #1
 8008b60:	89a3      	ldrh	r3, [r4, #12]
 8008b62:	d106      	bne.n	8008b72 <__sflush_r+0x66>
 8008b64:	6829      	ldr	r1, [r5, #0]
 8008b66:	291d      	cmp	r1, #29
 8008b68:	d82c      	bhi.n	8008bc4 <__sflush_r+0xb8>
 8008b6a:	4a2a      	ldr	r2, [pc, #168]	; (8008c14 <__sflush_r+0x108>)
 8008b6c:	40ca      	lsrs	r2, r1
 8008b6e:	07d6      	lsls	r6, r2, #31
 8008b70:	d528      	bpl.n	8008bc4 <__sflush_r+0xb8>
 8008b72:	2200      	movs	r2, #0
 8008b74:	6062      	str	r2, [r4, #4]
 8008b76:	04d9      	lsls	r1, r3, #19
 8008b78:	6922      	ldr	r2, [r4, #16]
 8008b7a:	6022      	str	r2, [r4, #0]
 8008b7c:	d504      	bpl.n	8008b88 <__sflush_r+0x7c>
 8008b7e:	1c42      	adds	r2, r0, #1
 8008b80:	d101      	bne.n	8008b86 <__sflush_r+0x7a>
 8008b82:	682b      	ldr	r3, [r5, #0]
 8008b84:	b903      	cbnz	r3, 8008b88 <__sflush_r+0x7c>
 8008b86:	6560      	str	r0, [r4, #84]	; 0x54
 8008b88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b8a:	602f      	str	r7, [r5, #0]
 8008b8c:	2900      	cmp	r1, #0
 8008b8e:	d0ca      	beq.n	8008b26 <__sflush_r+0x1a>
 8008b90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b94:	4299      	cmp	r1, r3
 8008b96:	d002      	beq.n	8008b9e <__sflush_r+0x92>
 8008b98:	4628      	mov	r0, r5
 8008b9a:	f000 fd7d 	bl	8009698 <_free_r>
 8008b9e:	2000      	movs	r0, #0
 8008ba0:	6360      	str	r0, [r4, #52]	; 0x34
 8008ba2:	e7c1      	b.n	8008b28 <__sflush_r+0x1c>
 8008ba4:	6a21      	ldr	r1, [r4, #32]
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	4628      	mov	r0, r5
 8008baa:	47b0      	blx	r6
 8008bac:	1c41      	adds	r1, r0, #1
 8008bae:	d1c7      	bne.n	8008b40 <__sflush_r+0x34>
 8008bb0:	682b      	ldr	r3, [r5, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d0c4      	beq.n	8008b40 <__sflush_r+0x34>
 8008bb6:	2b1d      	cmp	r3, #29
 8008bb8:	d001      	beq.n	8008bbe <__sflush_r+0xb2>
 8008bba:	2b16      	cmp	r3, #22
 8008bbc:	d101      	bne.n	8008bc2 <__sflush_r+0xb6>
 8008bbe:	602f      	str	r7, [r5, #0]
 8008bc0:	e7b1      	b.n	8008b26 <__sflush_r+0x1a>
 8008bc2:	89a3      	ldrh	r3, [r4, #12]
 8008bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bc8:	81a3      	strh	r3, [r4, #12]
 8008bca:	e7ad      	b.n	8008b28 <__sflush_r+0x1c>
 8008bcc:	690f      	ldr	r7, [r1, #16]
 8008bce:	2f00      	cmp	r7, #0
 8008bd0:	d0a9      	beq.n	8008b26 <__sflush_r+0x1a>
 8008bd2:	0793      	lsls	r3, r2, #30
 8008bd4:	680e      	ldr	r6, [r1, #0]
 8008bd6:	bf08      	it	eq
 8008bd8:	694b      	ldreq	r3, [r1, #20]
 8008bda:	600f      	str	r7, [r1, #0]
 8008bdc:	bf18      	it	ne
 8008bde:	2300      	movne	r3, #0
 8008be0:	eba6 0807 	sub.w	r8, r6, r7
 8008be4:	608b      	str	r3, [r1, #8]
 8008be6:	f1b8 0f00 	cmp.w	r8, #0
 8008bea:	dd9c      	ble.n	8008b26 <__sflush_r+0x1a>
 8008bec:	6a21      	ldr	r1, [r4, #32]
 8008bee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008bf0:	4643      	mov	r3, r8
 8008bf2:	463a      	mov	r2, r7
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	47b0      	blx	r6
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	dc06      	bgt.n	8008c0a <__sflush_r+0xfe>
 8008bfc:	89a3      	ldrh	r3, [r4, #12]
 8008bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c02:	81a3      	strh	r3, [r4, #12]
 8008c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c08:	e78e      	b.n	8008b28 <__sflush_r+0x1c>
 8008c0a:	4407      	add	r7, r0
 8008c0c:	eba8 0800 	sub.w	r8, r8, r0
 8008c10:	e7e9      	b.n	8008be6 <__sflush_r+0xda>
 8008c12:	bf00      	nop
 8008c14:	20400001 	.word	0x20400001

08008c18 <_fflush_r>:
 8008c18:	b538      	push	{r3, r4, r5, lr}
 8008c1a:	690b      	ldr	r3, [r1, #16]
 8008c1c:	4605      	mov	r5, r0
 8008c1e:	460c      	mov	r4, r1
 8008c20:	b913      	cbnz	r3, 8008c28 <_fflush_r+0x10>
 8008c22:	2500      	movs	r5, #0
 8008c24:	4628      	mov	r0, r5
 8008c26:	bd38      	pop	{r3, r4, r5, pc}
 8008c28:	b118      	cbz	r0, 8008c32 <_fflush_r+0x1a>
 8008c2a:	6983      	ldr	r3, [r0, #24]
 8008c2c:	b90b      	cbnz	r3, 8008c32 <_fflush_r+0x1a>
 8008c2e:	f000 f887 	bl	8008d40 <__sinit>
 8008c32:	4b14      	ldr	r3, [pc, #80]	; (8008c84 <_fflush_r+0x6c>)
 8008c34:	429c      	cmp	r4, r3
 8008c36:	d11b      	bne.n	8008c70 <_fflush_r+0x58>
 8008c38:	686c      	ldr	r4, [r5, #4]
 8008c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d0ef      	beq.n	8008c22 <_fflush_r+0xa>
 8008c42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c44:	07d0      	lsls	r0, r2, #31
 8008c46:	d404      	bmi.n	8008c52 <_fflush_r+0x3a>
 8008c48:	0599      	lsls	r1, r3, #22
 8008c4a:	d402      	bmi.n	8008c52 <_fflush_r+0x3a>
 8008c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c4e:	f000 f91a 	bl	8008e86 <__retarget_lock_acquire_recursive>
 8008c52:	4628      	mov	r0, r5
 8008c54:	4621      	mov	r1, r4
 8008c56:	f7ff ff59 	bl	8008b0c <__sflush_r>
 8008c5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c5c:	07da      	lsls	r2, r3, #31
 8008c5e:	4605      	mov	r5, r0
 8008c60:	d4e0      	bmi.n	8008c24 <_fflush_r+0xc>
 8008c62:	89a3      	ldrh	r3, [r4, #12]
 8008c64:	059b      	lsls	r3, r3, #22
 8008c66:	d4dd      	bmi.n	8008c24 <_fflush_r+0xc>
 8008c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c6a:	f000 f90d 	bl	8008e88 <__retarget_lock_release_recursive>
 8008c6e:	e7d9      	b.n	8008c24 <_fflush_r+0xc>
 8008c70:	4b05      	ldr	r3, [pc, #20]	; (8008c88 <_fflush_r+0x70>)
 8008c72:	429c      	cmp	r4, r3
 8008c74:	d101      	bne.n	8008c7a <_fflush_r+0x62>
 8008c76:	68ac      	ldr	r4, [r5, #8]
 8008c78:	e7df      	b.n	8008c3a <_fflush_r+0x22>
 8008c7a:	4b04      	ldr	r3, [pc, #16]	; (8008c8c <_fflush_r+0x74>)
 8008c7c:	429c      	cmp	r4, r3
 8008c7e:	bf08      	it	eq
 8008c80:	68ec      	ldreq	r4, [r5, #12]
 8008c82:	e7da      	b.n	8008c3a <_fflush_r+0x22>
 8008c84:	0800a710 	.word	0x0800a710
 8008c88:	0800a730 	.word	0x0800a730
 8008c8c:	0800a6f0 	.word	0x0800a6f0

08008c90 <std>:
 8008c90:	2300      	movs	r3, #0
 8008c92:	b510      	push	{r4, lr}
 8008c94:	4604      	mov	r4, r0
 8008c96:	e9c0 3300 	strd	r3, r3, [r0]
 8008c9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c9e:	6083      	str	r3, [r0, #8]
 8008ca0:	8181      	strh	r1, [r0, #12]
 8008ca2:	6643      	str	r3, [r0, #100]	; 0x64
 8008ca4:	81c2      	strh	r2, [r0, #14]
 8008ca6:	6183      	str	r3, [r0, #24]
 8008ca8:	4619      	mov	r1, r3
 8008caa:	2208      	movs	r2, #8
 8008cac:	305c      	adds	r0, #92	; 0x5c
 8008cae:	f7fe fb59 	bl	8007364 <memset>
 8008cb2:	4b05      	ldr	r3, [pc, #20]	; (8008cc8 <std+0x38>)
 8008cb4:	6263      	str	r3, [r4, #36]	; 0x24
 8008cb6:	4b05      	ldr	r3, [pc, #20]	; (8008ccc <std+0x3c>)
 8008cb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cba:	4b05      	ldr	r3, [pc, #20]	; (8008cd0 <std+0x40>)
 8008cbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cbe:	4b05      	ldr	r3, [pc, #20]	; (8008cd4 <std+0x44>)
 8008cc0:	6224      	str	r4, [r4, #32]
 8008cc2:	6323      	str	r3, [r4, #48]	; 0x30
 8008cc4:	bd10      	pop	{r4, pc}
 8008cc6:	bf00      	nop
 8008cc8:	08009e75 	.word	0x08009e75
 8008ccc:	08009e97 	.word	0x08009e97
 8008cd0:	08009ecf 	.word	0x08009ecf
 8008cd4:	08009ef3 	.word	0x08009ef3

08008cd8 <_cleanup_r>:
 8008cd8:	4901      	ldr	r1, [pc, #4]	; (8008ce0 <_cleanup_r+0x8>)
 8008cda:	f000 b8af 	b.w	8008e3c <_fwalk_reent>
 8008cde:	bf00      	nop
 8008ce0:	08008c19 	.word	0x08008c19

08008ce4 <__sfmoreglue>:
 8008ce4:	b570      	push	{r4, r5, r6, lr}
 8008ce6:	2268      	movs	r2, #104	; 0x68
 8008ce8:	1e4d      	subs	r5, r1, #1
 8008cea:	4355      	muls	r5, r2
 8008cec:	460e      	mov	r6, r1
 8008cee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008cf2:	f000 fd3d 	bl	8009770 <_malloc_r>
 8008cf6:	4604      	mov	r4, r0
 8008cf8:	b140      	cbz	r0, 8008d0c <__sfmoreglue+0x28>
 8008cfa:	2100      	movs	r1, #0
 8008cfc:	e9c0 1600 	strd	r1, r6, [r0]
 8008d00:	300c      	adds	r0, #12
 8008d02:	60a0      	str	r0, [r4, #8]
 8008d04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d08:	f7fe fb2c 	bl	8007364 <memset>
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	bd70      	pop	{r4, r5, r6, pc}

08008d10 <__sfp_lock_acquire>:
 8008d10:	4801      	ldr	r0, [pc, #4]	; (8008d18 <__sfp_lock_acquire+0x8>)
 8008d12:	f000 b8b8 	b.w	8008e86 <__retarget_lock_acquire_recursive>
 8008d16:	bf00      	nop
 8008d18:	240684e5 	.word	0x240684e5

08008d1c <__sfp_lock_release>:
 8008d1c:	4801      	ldr	r0, [pc, #4]	; (8008d24 <__sfp_lock_release+0x8>)
 8008d1e:	f000 b8b3 	b.w	8008e88 <__retarget_lock_release_recursive>
 8008d22:	bf00      	nop
 8008d24:	240684e5 	.word	0x240684e5

08008d28 <__sinit_lock_acquire>:
 8008d28:	4801      	ldr	r0, [pc, #4]	; (8008d30 <__sinit_lock_acquire+0x8>)
 8008d2a:	f000 b8ac 	b.w	8008e86 <__retarget_lock_acquire_recursive>
 8008d2e:	bf00      	nop
 8008d30:	240684e6 	.word	0x240684e6

08008d34 <__sinit_lock_release>:
 8008d34:	4801      	ldr	r0, [pc, #4]	; (8008d3c <__sinit_lock_release+0x8>)
 8008d36:	f000 b8a7 	b.w	8008e88 <__retarget_lock_release_recursive>
 8008d3a:	bf00      	nop
 8008d3c:	240684e6 	.word	0x240684e6

08008d40 <__sinit>:
 8008d40:	b510      	push	{r4, lr}
 8008d42:	4604      	mov	r4, r0
 8008d44:	f7ff fff0 	bl	8008d28 <__sinit_lock_acquire>
 8008d48:	69a3      	ldr	r3, [r4, #24]
 8008d4a:	b11b      	cbz	r3, 8008d54 <__sinit+0x14>
 8008d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d50:	f7ff bff0 	b.w	8008d34 <__sinit_lock_release>
 8008d54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d58:	6523      	str	r3, [r4, #80]	; 0x50
 8008d5a:	4b13      	ldr	r3, [pc, #76]	; (8008da8 <__sinit+0x68>)
 8008d5c:	4a13      	ldr	r2, [pc, #76]	; (8008dac <__sinit+0x6c>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d62:	42a3      	cmp	r3, r4
 8008d64:	bf04      	itt	eq
 8008d66:	2301      	moveq	r3, #1
 8008d68:	61a3      	streq	r3, [r4, #24]
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	f000 f820 	bl	8008db0 <__sfp>
 8008d70:	6060      	str	r0, [r4, #4]
 8008d72:	4620      	mov	r0, r4
 8008d74:	f000 f81c 	bl	8008db0 <__sfp>
 8008d78:	60a0      	str	r0, [r4, #8]
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f000 f818 	bl	8008db0 <__sfp>
 8008d80:	2200      	movs	r2, #0
 8008d82:	60e0      	str	r0, [r4, #12]
 8008d84:	2104      	movs	r1, #4
 8008d86:	6860      	ldr	r0, [r4, #4]
 8008d88:	f7ff ff82 	bl	8008c90 <std>
 8008d8c:	68a0      	ldr	r0, [r4, #8]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	2109      	movs	r1, #9
 8008d92:	f7ff ff7d 	bl	8008c90 <std>
 8008d96:	68e0      	ldr	r0, [r4, #12]
 8008d98:	2202      	movs	r2, #2
 8008d9a:	2112      	movs	r1, #18
 8008d9c:	f7ff ff78 	bl	8008c90 <std>
 8008da0:	2301      	movs	r3, #1
 8008da2:	61a3      	str	r3, [r4, #24]
 8008da4:	e7d2      	b.n	8008d4c <__sinit+0xc>
 8008da6:	bf00      	nop
 8008da8:	0800a628 	.word	0x0800a628
 8008dac:	08008cd9 	.word	0x08008cd9

08008db0 <__sfp>:
 8008db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db2:	4607      	mov	r7, r0
 8008db4:	f7ff ffac 	bl	8008d10 <__sfp_lock_acquire>
 8008db8:	4b1e      	ldr	r3, [pc, #120]	; (8008e34 <__sfp+0x84>)
 8008dba:	681e      	ldr	r6, [r3, #0]
 8008dbc:	69b3      	ldr	r3, [r6, #24]
 8008dbe:	b913      	cbnz	r3, 8008dc6 <__sfp+0x16>
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	f7ff ffbd 	bl	8008d40 <__sinit>
 8008dc6:	3648      	adds	r6, #72	; 0x48
 8008dc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	d503      	bpl.n	8008dd8 <__sfp+0x28>
 8008dd0:	6833      	ldr	r3, [r6, #0]
 8008dd2:	b30b      	cbz	r3, 8008e18 <__sfp+0x68>
 8008dd4:	6836      	ldr	r6, [r6, #0]
 8008dd6:	e7f7      	b.n	8008dc8 <__sfp+0x18>
 8008dd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ddc:	b9d5      	cbnz	r5, 8008e14 <__sfp+0x64>
 8008dde:	4b16      	ldr	r3, [pc, #88]	; (8008e38 <__sfp+0x88>)
 8008de0:	60e3      	str	r3, [r4, #12]
 8008de2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008de6:	6665      	str	r5, [r4, #100]	; 0x64
 8008de8:	f000 f84c 	bl	8008e84 <__retarget_lock_init_recursive>
 8008dec:	f7ff ff96 	bl	8008d1c <__sfp_lock_release>
 8008df0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008df4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008df8:	6025      	str	r5, [r4, #0]
 8008dfa:	61a5      	str	r5, [r4, #24]
 8008dfc:	2208      	movs	r2, #8
 8008dfe:	4629      	mov	r1, r5
 8008e00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e04:	f7fe faae 	bl	8007364 <memset>
 8008e08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e10:	4620      	mov	r0, r4
 8008e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e14:	3468      	adds	r4, #104	; 0x68
 8008e16:	e7d9      	b.n	8008dcc <__sfp+0x1c>
 8008e18:	2104      	movs	r1, #4
 8008e1a:	4638      	mov	r0, r7
 8008e1c:	f7ff ff62 	bl	8008ce4 <__sfmoreglue>
 8008e20:	4604      	mov	r4, r0
 8008e22:	6030      	str	r0, [r6, #0]
 8008e24:	2800      	cmp	r0, #0
 8008e26:	d1d5      	bne.n	8008dd4 <__sfp+0x24>
 8008e28:	f7ff ff78 	bl	8008d1c <__sfp_lock_release>
 8008e2c:	230c      	movs	r3, #12
 8008e2e:	603b      	str	r3, [r7, #0]
 8008e30:	e7ee      	b.n	8008e10 <__sfp+0x60>
 8008e32:	bf00      	nop
 8008e34:	0800a628 	.word	0x0800a628
 8008e38:	ffff0001 	.word	0xffff0001

08008e3c <_fwalk_reent>:
 8008e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e40:	4606      	mov	r6, r0
 8008e42:	4688      	mov	r8, r1
 8008e44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e48:	2700      	movs	r7, #0
 8008e4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e4e:	f1b9 0901 	subs.w	r9, r9, #1
 8008e52:	d505      	bpl.n	8008e60 <_fwalk_reent+0x24>
 8008e54:	6824      	ldr	r4, [r4, #0]
 8008e56:	2c00      	cmp	r4, #0
 8008e58:	d1f7      	bne.n	8008e4a <_fwalk_reent+0xe>
 8008e5a:	4638      	mov	r0, r7
 8008e5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e60:	89ab      	ldrh	r3, [r5, #12]
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d907      	bls.n	8008e76 <_fwalk_reent+0x3a>
 8008e66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	d003      	beq.n	8008e76 <_fwalk_reent+0x3a>
 8008e6e:	4629      	mov	r1, r5
 8008e70:	4630      	mov	r0, r6
 8008e72:	47c0      	blx	r8
 8008e74:	4307      	orrs	r7, r0
 8008e76:	3568      	adds	r5, #104	; 0x68
 8008e78:	e7e9      	b.n	8008e4e <_fwalk_reent+0x12>
	...

08008e7c <_localeconv_r>:
 8008e7c:	4800      	ldr	r0, [pc, #0]	; (8008e80 <_localeconv_r+0x4>)
 8008e7e:	4770      	bx	lr
 8008e80:	2404e430 	.word	0x2404e430

08008e84 <__retarget_lock_init_recursive>:
 8008e84:	4770      	bx	lr

08008e86 <__retarget_lock_acquire_recursive>:
 8008e86:	4770      	bx	lr

08008e88 <__retarget_lock_release_recursive>:
 8008e88:	4770      	bx	lr

08008e8a <__swhatbuf_r>:
 8008e8a:	b570      	push	{r4, r5, r6, lr}
 8008e8c:	460e      	mov	r6, r1
 8008e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e92:	2900      	cmp	r1, #0
 8008e94:	b096      	sub	sp, #88	; 0x58
 8008e96:	4614      	mov	r4, r2
 8008e98:	461d      	mov	r5, r3
 8008e9a:	da08      	bge.n	8008eae <__swhatbuf_r+0x24>
 8008e9c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	602a      	str	r2, [r5, #0]
 8008ea4:	061a      	lsls	r2, r3, #24
 8008ea6:	d410      	bmi.n	8008eca <__swhatbuf_r+0x40>
 8008ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eac:	e00e      	b.n	8008ecc <__swhatbuf_r+0x42>
 8008eae:	466a      	mov	r2, sp
 8008eb0:	f001 f876 	bl	8009fa0 <_fstat_r>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	dbf1      	blt.n	8008e9c <__swhatbuf_r+0x12>
 8008eb8:	9a01      	ldr	r2, [sp, #4]
 8008eba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ebe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ec2:	425a      	negs	r2, r3
 8008ec4:	415a      	adcs	r2, r3
 8008ec6:	602a      	str	r2, [r5, #0]
 8008ec8:	e7ee      	b.n	8008ea8 <__swhatbuf_r+0x1e>
 8008eca:	2340      	movs	r3, #64	; 0x40
 8008ecc:	2000      	movs	r0, #0
 8008ece:	6023      	str	r3, [r4, #0]
 8008ed0:	b016      	add	sp, #88	; 0x58
 8008ed2:	bd70      	pop	{r4, r5, r6, pc}

08008ed4 <__smakebuf_r>:
 8008ed4:	898b      	ldrh	r3, [r1, #12]
 8008ed6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ed8:	079d      	lsls	r5, r3, #30
 8008eda:	4606      	mov	r6, r0
 8008edc:	460c      	mov	r4, r1
 8008ede:	d507      	bpl.n	8008ef0 <__smakebuf_r+0x1c>
 8008ee0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ee4:	6023      	str	r3, [r4, #0]
 8008ee6:	6123      	str	r3, [r4, #16]
 8008ee8:	2301      	movs	r3, #1
 8008eea:	6163      	str	r3, [r4, #20]
 8008eec:	b002      	add	sp, #8
 8008eee:	bd70      	pop	{r4, r5, r6, pc}
 8008ef0:	ab01      	add	r3, sp, #4
 8008ef2:	466a      	mov	r2, sp
 8008ef4:	f7ff ffc9 	bl	8008e8a <__swhatbuf_r>
 8008ef8:	9900      	ldr	r1, [sp, #0]
 8008efa:	4605      	mov	r5, r0
 8008efc:	4630      	mov	r0, r6
 8008efe:	f000 fc37 	bl	8009770 <_malloc_r>
 8008f02:	b948      	cbnz	r0, 8008f18 <__smakebuf_r+0x44>
 8008f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f08:	059a      	lsls	r2, r3, #22
 8008f0a:	d4ef      	bmi.n	8008eec <__smakebuf_r+0x18>
 8008f0c:	f023 0303 	bic.w	r3, r3, #3
 8008f10:	f043 0302 	orr.w	r3, r3, #2
 8008f14:	81a3      	strh	r3, [r4, #12]
 8008f16:	e7e3      	b.n	8008ee0 <__smakebuf_r+0xc>
 8008f18:	4b0d      	ldr	r3, [pc, #52]	; (8008f50 <__smakebuf_r+0x7c>)
 8008f1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f1c:	89a3      	ldrh	r3, [r4, #12]
 8008f1e:	6020      	str	r0, [r4, #0]
 8008f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f24:	81a3      	strh	r3, [r4, #12]
 8008f26:	9b00      	ldr	r3, [sp, #0]
 8008f28:	6163      	str	r3, [r4, #20]
 8008f2a:	9b01      	ldr	r3, [sp, #4]
 8008f2c:	6120      	str	r0, [r4, #16]
 8008f2e:	b15b      	cbz	r3, 8008f48 <__smakebuf_r+0x74>
 8008f30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f34:	4630      	mov	r0, r6
 8008f36:	f001 f845 	bl	8009fc4 <_isatty_r>
 8008f3a:	b128      	cbz	r0, 8008f48 <__smakebuf_r+0x74>
 8008f3c:	89a3      	ldrh	r3, [r4, #12]
 8008f3e:	f023 0303 	bic.w	r3, r3, #3
 8008f42:	f043 0301 	orr.w	r3, r3, #1
 8008f46:	81a3      	strh	r3, [r4, #12]
 8008f48:	89a0      	ldrh	r0, [r4, #12]
 8008f4a:	4305      	orrs	r5, r0
 8008f4c:	81a5      	strh	r5, [r4, #12]
 8008f4e:	e7cd      	b.n	8008eec <__smakebuf_r+0x18>
 8008f50:	08008cd9 	.word	0x08008cd9

08008f54 <malloc>:
 8008f54:	4b02      	ldr	r3, [pc, #8]	; (8008f60 <malloc+0xc>)
 8008f56:	4601      	mov	r1, r0
 8008f58:	6818      	ldr	r0, [r3, #0]
 8008f5a:	f000 bc09 	b.w	8009770 <_malloc_r>
 8008f5e:	bf00      	nop
 8008f60:	2404e2dc 	.word	0x2404e2dc

08008f64 <_Balloc>:
 8008f64:	b570      	push	{r4, r5, r6, lr}
 8008f66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f68:	4604      	mov	r4, r0
 8008f6a:	460d      	mov	r5, r1
 8008f6c:	b976      	cbnz	r6, 8008f8c <_Balloc+0x28>
 8008f6e:	2010      	movs	r0, #16
 8008f70:	f7ff fff0 	bl	8008f54 <malloc>
 8008f74:	4602      	mov	r2, r0
 8008f76:	6260      	str	r0, [r4, #36]	; 0x24
 8008f78:	b920      	cbnz	r0, 8008f84 <_Balloc+0x20>
 8008f7a:	4b18      	ldr	r3, [pc, #96]	; (8008fdc <_Balloc+0x78>)
 8008f7c:	4818      	ldr	r0, [pc, #96]	; (8008fe0 <_Balloc+0x7c>)
 8008f7e:	2166      	movs	r1, #102	; 0x66
 8008f80:	f000 ffce 	bl	8009f20 <__assert_func>
 8008f84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f88:	6006      	str	r6, [r0, #0]
 8008f8a:	60c6      	str	r6, [r0, #12]
 8008f8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f8e:	68f3      	ldr	r3, [r6, #12]
 8008f90:	b183      	cbz	r3, 8008fb4 <_Balloc+0x50>
 8008f92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f9a:	b9b8      	cbnz	r0, 8008fcc <_Balloc+0x68>
 8008f9c:	2101      	movs	r1, #1
 8008f9e:	fa01 f605 	lsl.w	r6, r1, r5
 8008fa2:	1d72      	adds	r2, r6, #5
 8008fa4:	0092      	lsls	r2, r2, #2
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	f000 fb60 	bl	800966c <_calloc_r>
 8008fac:	b160      	cbz	r0, 8008fc8 <_Balloc+0x64>
 8008fae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008fb2:	e00e      	b.n	8008fd2 <_Balloc+0x6e>
 8008fb4:	2221      	movs	r2, #33	; 0x21
 8008fb6:	2104      	movs	r1, #4
 8008fb8:	4620      	mov	r0, r4
 8008fba:	f000 fb57 	bl	800966c <_calloc_r>
 8008fbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fc0:	60f0      	str	r0, [r6, #12]
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1e4      	bne.n	8008f92 <_Balloc+0x2e>
 8008fc8:	2000      	movs	r0, #0
 8008fca:	bd70      	pop	{r4, r5, r6, pc}
 8008fcc:	6802      	ldr	r2, [r0, #0]
 8008fce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008fd8:	e7f7      	b.n	8008fca <_Balloc+0x66>
 8008fda:	bf00      	nop
 8008fdc:	0800a66d 	.word	0x0800a66d
 8008fe0:	0800a750 	.word	0x0800a750

08008fe4 <_Bfree>:
 8008fe4:	b570      	push	{r4, r5, r6, lr}
 8008fe6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fe8:	4605      	mov	r5, r0
 8008fea:	460c      	mov	r4, r1
 8008fec:	b976      	cbnz	r6, 800900c <_Bfree+0x28>
 8008fee:	2010      	movs	r0, #16
 8008ff0:	f7ff ffb0 	bl	8008f54 <malloc>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	6268      	str	r0, [r5, #36]	; 0x24
 8008ff8:	b920      	cbnz	r0, 8009004 <_Bfree+0x20>
 8008ffa:	4b09      	ldr	r3, [pc, #36]	; (8009020 <_Bfree+0x3c>)
 8008ffc:	4809      	ldr	r0, [pc, #36]	; (8009024 <_Bfree+0x40>)
 8008ffe:	218a      	movs	r1, #138	; 0x8a
 8009000:	f000 ff8e 	bl	8009f20 <__assert_func>
 8009004:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009008:	6006      	str	r6, [r0, #0]
 800900a:	60c6      	str	r6, [r0, #12]
 800900c:	b13c      	cbz	r4, 800901e <_Bfree+0x3a>
 800900e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009010:	6862      	ldr	r2, [r4, #4]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009018:	6021      	str	r1, [r4, #0]
 800901a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800901e:	bd70      	pop	{r4, r5, r6, pc}
 8009020:	0800a66d 	.word	0x0800a66d
 8009024:	0800a750 	.word	0x0800a750

08009028 <__multadd>:
 8009028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800902c:	690d      	ldr	r5, [r1, #16]
 800902e:	4607      	mov	r7, r0
 8009030:	460c      	mov	r4, r1
 8009032:	461e      	mov	r6, r3
 8009034:	f101 0c14 	add.w	ip, r1, #20
 8009038:	2000      	movs	r0, #0
 800903a:	f8dc 3000 	ldr.w	r3, [ip]
 800903e:	b299      	uxth	r1, r3
 8009040:	fb02 6101 	mla	r1, r2, r1, r6
 8009044:	0c1e      	lsrs	r6, r3, #16
 8009046:	0c0b      	lsrs	r3, r1, #16
 8009048:	fb02 3306 	mla	r3, r2, r6, r3
 800904c:	b289      	uxth	r1, r1
 800904e:	3001      	adds	r0, #1
 8009050:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009054:	4285      	cmp	r5, r0
 8009056:	f84c 1b04 	str.w	r1, [ip], #4
 800905a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800905e:	dcec      	bgt.n	800903a <__multadd+0x12>
 8009060:	b30e      	cbz	r6, 80090a6 <__multadd+0x7e>
 8009062:	68a3      	ldr	r3, [r4, #8]
 8009064:	42ab      	cmp	r3, r5
 8009066:	dc19      	bgt.n	800909c <__multadd+0x74>
 8009068:	6861      	ldr	r1, [r4, #4]
 800906a:	4638      	mov	r0, r7
 800906c:	3101      	adds	r1, #1
 800906e:	f7ff ff79 	bl	8008f64 <_Balloc>
 8009072:	4680      	mov	r8, r0
 8009074:	b928      	cbnz	r0, 8009082 <__multadd+0x5a>
 8009076:	4602      	mov	r2, r0
 8009078:	4b0c      	ldr	r3, [pc, #48]	; (80090ac <__multadd+0x84>)
 800907a:	480d      	ldr	r0, [pc, #52]	; (80090b0 <__multadd+0x88>)
 800907c:	21b5      	movs	r1, #181	; 0xb5
 800907e:	f000 ff4f 	bl	8009f20 <__assert_func>
 8009082:	6922      	ldr	r2, [r4, #16]
 8009084:	3202      	adds	r2, #2
 8009086:	f104 010c 	add.w	r1, r4, #12
 800908a:	0092      	lsls	r2, r2, #2
 800908c:	300c      	adds	r0, #12
 800908e:	f7fe f95b 	bl	8007348 <memcpy>
 8009092:	4621      	mov	r1, r4
 8009094:	4638      	mov	r0, r7
 8009096:	f7ff ffa5 	bl	8008fe4 <_Bfree>
 800909a:	4644      	mov	r4, r8
 800909c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090a0:	3501      	adds	r5, #1
 80090a2:	615e      	str	r6, [r3, #20]
 80090a4:	6125      	str	r5, [r4, #16]
 80090a6:	4620      	mov	r0, r4
 80090a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090ac:	0800a6df 	.word	0x0800a6df
 80090b0:	0800a750 	.word	0x0800a750

080090b4 <__hi0bits>:
 80090b4:	0c03      	lsrs	r3, r0, #16
 80090b6:	041b      	lsls	r3, r3, #16
 80090b8:	b9d3      	cbnz	r3, 80090f0 <__hi0bits+0x3c>
 80090ba:	0400      	lsls	r0, r0, #16
 80090bc:	2310      	movs	r3, #16
 80090be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80090c2:	bf04      	itt	eq
 80090c4:	0200      	lsleq	r0, r0, #8
 80090c6:	3308      	addeq	r3, #8
 80090c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80090cc:	bf04      	itt	eq
 80090ce:	0100      	lsleq	r0, r0, #4
 80090d0:	3304      	addeq	r3, #4
 80090d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80090d6:	bf04      	itt	eq
 80090d8:	0080      	lsleq	r0, r0, #2
 80090da:	3302      	addeq	r3, #2
 80090dc:	2800      	cmp	r0, #0
 80090de:	db05      	blt.n	80090ec <__hi0bits+0x38>
 80090e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80090e4:	f103 0301 	add.w	r3, r3, #1
 80090e8:	bf08      	it	eq
 80090ea:	2320      	moveq	r3, #32
 80090ec:	4618      	mov	r0, r3
 80090ee:	4770      	bx	lr
 80090f0:	2300      	movs	r3, #0
 80090f2:	e7e4      	b.n	80090be <__hi0bits+0xa>

080090f4 <__lo0bits>:
 80090f4:	6803      	ldr	r3, [r0, #0]
 80090f6:	f013 0207 	ands.w	r2, r3, #7
 80090fa:	4601      	mov	r1, r0
 80090fc:	d00b      	beq.n	8009116 <__lo0bits+0x22>
 80090fe:	07da      	lsls	r2, r3, #31
 8009100:	d423      	bmi.n	800914a <__lo0bits+0x56>
 8009102:	0798      	lsls	r0, r3, #30
 8009104:	bf49      	itett	mi
 8009106:	085b      	lsrmi	r3, r3, #1
 8009108:	089b      	lsrpl	r3, r3, #2
 800910a:	2001      	movmi	r0, #1
 800910c:	600b      	strmi	r3, [r1, #0]
 800910e:	bf5c      	itt	pl
 8009110:	600b      	strpl	r3, [r1, #0]
 8009112:	2002      	movpl	r0, #2
 8009114:	4770      	bx	lr
 8009116:	b298      	uxth	r0, r3
 8009118:	b9a8      	cbnz	r0, 8009146 <__lo0bits+0x52>
 800911a:	0c1b      	lsrs	r3, r3, #16
 800911c:	2010      	movs	r0, #16
 800911e:	b2da      	uxtb	r2, r3
 8009120:	b90a      	cbnz	r2, 8009126 <__lo0bits+0x32>
 8009122:	3008      	adds	r0, #8
 8009124:	0a1b      	lsrs	r3, r3, #8
 8009126:	071a      	lsls	r2, r3, #28
 8009128:	bf04      	itt	eq
 800912a:	091b      	lsreq	r3, r3, #4
 800912c:	3004      	addeq	r0, #4
 800912e:	079a      	lsls	r2, r3, #30
 8009130:	bf04      	itt	eq
 8009132:	089b      	lsreq	r3, r3, #2
 8009134:	3002      	addeq	r0, #2
 8009136:	07da      	lsls	r2, r3, #31
 8009138:	d403      	bmi.n	8009142 <__lo0bits+0x4e>
 800913a:	085b      	lsrs	r3, r3, #1
 800913c:	f100 0001 	add.w	r0, r0, #1
 8009140:	d005      	beq.n	800914e <__lo0bits+0x5a>
 8009142:	600b      	str	r3, [r1, #0]
 8009144:	4770      	bx	lr
 8009146:	4610      	mov	r0, r2
 8009148:	e7e9      	b.n	800911e <__lo0bits+0x2a>
 800914a:	2000      	movs	r0, #0
 800914c:	4770      	bx	lr
 800914e:	2020      	movs	r0, #32
 8009150:	4770      	bx	lr
	...

08009154 <__i2b>:
 8009154:	b510      	push	{r4, lr}
 8009156:	460c      	mov	r4, r1
 8009158:	2101      	movs	r1, #1
 800915a:	f7ff ff03 	bl	8008f64 <_Balloc>
 800915e:	4602      	mov	r2, r0
 8009160:	b928      	cbnz	r0, 800916e <__i2b+0x1a>
 8009162:	4b05      	ldr	r3, [pc, #20]	; (8009178 <__i2b+0x24>)
 8009164:	4805      	ldr	r0, [pc, #20]	; (800917c <__i2b+0x28>)
 8009166:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800916a:	f000 fed9 	bl	8009f20 <__assert_func>
 800916e:	2301      	movs	r3, #1
 8009170:	6144      	str	r4, [r0, #20]
 8009172:	6103      	str	r3, [r0, #16]
 8009174:	bd10      	pop	{r4, pc}
 8009176:	bf00      	nop
 8009178:	0800a6df 	.word	0x0800a6df
 800917c:	0800a750 	.word	0x0800a750

08009180 <__multiply>:
 8009180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009184:	4691      	mov	r9, r2
 8009186:	690a      	ldr	r2, [r1, #16]
 8009188:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800918c:	429a      	cmp	r2, r3
 800918e:	bfb8      	it	lt
 8009190:	460b      	movlt	r3, r1
 8009192:	460c      	mov	r4, r1
 8009194:	bfbc      	itt	lt
 8009196:	464c      	movlt	r4, r9
 8009198:	4699      	movlt	r9, r3
 800919a:	6927      	ldr	r7, [r4, #16]
 800919c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80091a0:	68a3      	ldr	r3, [r4, #8]
 80091a2:	6861      	ldr	r1, [r4, #4]
 80091a4:	eb07 060a 	add.w	r6, r7, sl
 80091a8:	42b3      	cmp	r3, r6
 80091aa:	b085      	sub	sp, #20
 80091ac:	bfb8      	it	lt
 80091ae:	3101      	addlt	r1, #1
 80091b0:	f7ff fed8 	bl	8008f64 <_Balloc>
 80091b4:	b930      	cbnz	r0, 80091c4 <__multiply+0x44>
 80091b6:	4602      	mov	r2, r0
 80091b8:	4b44      	ldr	r3, [pc, #272]	; (80092cc <__multiply+0x14c>)
 80091ba:	4845      	ldr	r0, [pc, #276]	; (80092d0 <__multiply+0x150>)
 80091bc:	f240 115d 	movw	r1, #349	; 0x15d
 80091c0:	f000 feae 	bl	8009f20 <__assert_func>
 80091c4:	f100 0514 	add.w	r5, r0, #20
 80091c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80091cc:	462b      	mov	r3, r5
 80091ce:	2200      	movs	r2, #0
 80091d0:	4543      	cmp	r3, r8
 80091d2:	d321      	bcc.n	8009218 <__multiply+0x98>
 80091d4:	f104 0314 	add.w	r3, r4, #20
 80091d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80091dc:	f109 0314 	add.w	r3, r9, #20
 80091e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80091e4:	9202      	str	r2, [sp, #8]
 80091e6:	1b3a      	subs	r2, r7, r4
 80091e8:	3a15      	subs	r2, #21
 80091ea:	f022 0203 	bic.w	r2, r2, #3
 80091ee:	3204      	adds	r2, #4
 80091f0:	f104 0115 	add.w	r1, r4, #21
 80091f4:	428f      	cmp	r7, r1
 80091f6:	bf38      	it	cc
 80091f8:	2204      	movcc	r2, #4
 80091fa:	9201      	str	r2, [sp, #4]
 80091fc:	9a02      	ldr	r2, [sp, #8]
 80091fe:	9303      	str	r3, [sp, #12]
 8009200:	429a      	cmp	r2, r3
 8009202:	d80c      	bhi.n	800921e <__multiply+0x9e>
 8009204:	2e00      	cmp	r6, #0
 8009206:	dd03      	ble.n	8009210 <__multiply+0x90>
 8009208:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800920c:	2b00      	cmp	r3, #0
 800920e:	d05a      	beq.n	80092c6 <__multiply+0x146>
 8009210:	6106      	str	r6, [r0, #16]
 8009212:	b005      	add	sp, #20
 8009214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009218:	f843 2b04 	str.w	r2, [r3], #4
 800921c:	e7d8      	b.n	80091d0 <__multiply+0x50>
 800921e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009222:	f1ba 0f00 	cmp.w	sl, #0
 8009226:	d024      	beq.n	8009272 <__multiply+0xf2>
 8009228:	f104 0e14 	add.w	lr, r4, #20
 800922c:	46a9      	mov	r9, r5
 800922e:	f04f 0c00 	mov.w	ip, #0
 8009232:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009236:	f8d9 1000 	ldr.w	r1, [r9]
 800923a:	fa1f fb82 	uxth.w	fp, r2
 800923e:	b289      	uxth	r1, r1
 8009240:	fb0a 110b 	mla	r1, sl, fp, r1
 8009244:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009248:	f8d9 2000 	ldr.w	r2, [r9]
 800924c:	4461      	add	r1, ip
 800924e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009252:	fb0a c20b 	mla	r2, sl, fp, ip
 8009256:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800925a:	b289      	uxth	r1, r1
 800925c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009260:	4577      	cmp	r7, lr
 8009262:	f849 1b04 	str.w	r1, [r9], #4
 8009266:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800926a:	d8e2      	bhi.n	8009232 <__multiply+0xb2>
 800926c:	9a01      	ldr	r2, [sp, #4]
 800926e:	f845 c002 	str.w	ip, [r5, r2]
 8009272:	9a03      	ldr	r2, [sp, #12]
 8009274:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009278:	3304      	adds	r3, #4
 800927a:	f1b9 0f00 	cmp.w	r9, #0
 800927e:	d020      	beq.n	80092c2 <__multiply+0x142>
 8009280:	6829      	ldr	r1, [r5, #0]
 8009282:	f104 0c14 	add.w	ip, r4, #20
 8009286:	46ae      	mov	lr, r5
 8009288:	f04f 0a00 	mov.w	sl, #0
 800928c:	f8bc b000 	ldrh.w	fp, [ip]
 8009290:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009294:	fb09 220b 	mla	r2, r9, fp, r2
 8009298:	4492      	add	sl, r2
 800929a:	b289      	uxth	r1, r1
 800929c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80092a0:	f84e 1b04 	str.w	r1, [lr], #4
 80092a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80092a8:	f8be 1000 	ldrh.w	r1, [lr]
 80092ac:	0c12      	lsrs	r2, r2, #16
 80092ae:	fb09 1102 	mla	r1, r9, r2, r1
 80092b2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80092b6:	4567      	cmp	r7, ip
 80092b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80092bc:	d8e6      	bhi.n	800928c <__multiply+0x10c>
 80092be:	9a01      	ldr	r2, [sp, #4]
 80092c0:	50a9      	str	r1, [r5, r2]
 80092c2:	3504      	adds	r5, #4
 80092c4:	e79a      	b.n	80091fc <__multiply+0x7c>
 80092c6:	3e01      	subs	r6, #1
 80092c8:	e79c      	b.n	8009204 <__multiply+0x84>
 80092ca:	bf00      	nop
 80092cc:	0800a6df 	.word	0x0800a6df
 80092d0:	0800a750 	.word	0x0800a750

080092d4 <__pow5mult>:
 80092d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092d8:	4615      	mov	r5, r2
 80092da:	f012 0203 	ands.w	r2, r2, #3
 80092de:	4606      	mov	r6, r0
 80092e0:	460f      	mov	r7, r1
 80092e2:	d007      	beq.n	80092f4 <__pow5mult+0x20>
 80092e4:	4c25      	ldr	r4, [pc, #148]	; (800937c <__pow5mult+0xa8>)
 80092e6:	3a01      	subs	r2, #1
 80092e8:	2300      	movs	r3, #0
 80092ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80092ee:	f7ff fe9b 	bl	8009028 <__multadd>
 80092f2:	4607      	mov	r7, r0
 80092f4:	10ad      	asrs	r5, r5, #2
 80092f6:	d03d      	beq.n	8009374 <__pow5mult+0xa0>
 80092f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80092fa:	b97c      	cbnz	r4, 800931c <__pow5mult+0x48>
 80092fc:	2010      	movs	r0, #16
 80092fe:	f7ff fe29 	bl	8008f54 <malloc>
 8009302:	4602      	mov	r2, r0
 8009304:	6270      	str	r0, [r6, #36]	; 0x24
 8009306:	b928      	cbnz	r0, 8009314 <__pow5mult+0x40>
 8009308:	4b1d      	ldr	r3, [pc, #116]	; (8009380 <__pow5mult+0xac>)
 800930a:	481e      	ldr	r0, [pc, #120]	; (8009384 <__pow5mult+0xb0>)
 800930c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009310:	f000 fe06 	bl	8009f20 <__assert_func>
 8009314:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009318:	6004      	str	r4, [r0, #0]
 800931a:	60c4      	str	r4, [r0, #12]
 800931c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009320:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009324:	b94c      	cbnz	r4, 800933a <__pow5mult+0x66>
 8009326:	f240 2171 	movw	r1, #625	; 0x271
 800932a:	4630      	mov	r0, r6
 800932c:	f7ff ff12 	bl	8009154 <__i2b>
 8009330:	2300      	movs	r3, #0
 8009332:	f8c8 0008 	str.w	r0, [r8, #8]
 8009336:	4604      	mov	r4, r0
 8009338:	6003      	str	r3, [r0, #0]
 800933a:	f04f 0900 	mov.w	r9, #0
 800933e:	07eb      	lsls	r3, r5, #31
 8009340:	d50a      	bpl.n	8009358 <__pow5mult+0x84>
 8009342:	4639      	mov	r1, r7
 8009344:	4622      	mov	r2, r4
 8009346:	4630      	mov	r0, r6
 8009348:	f7ff ff1a 	bl	8009180 <__multiply>
 800934c:	4639      	mov	r1, r7
 800934e:	4680      	mov	r8, r0
 8009350:	4630      	mov	r0, r6
 8009352:	f7ff fe47 	bl	8008fe4 <_Bfree>
 8009356:	4647      	mov	r7, r8
 8009358:	106d      	asrs	r5, r5, #1
 800935a:	d00b      	beq.n	8009374 <__pow5mult+0xa0>
 800935c:	6820      	ldr	r0, [r4, #0]
 800935e:	b938      	cbnz	r0, 8009370 <__pow5mult+0x9c>
 8009360:	4622      	mov	r2, r4
 8009362:	4621      	mov	r1, r4
 8009364:	4630      	mov	r0, r6
 8009366:	f7ff ff0b 	bl	8009180 <__multiply>
 800936a:	6020      	str	r0, [r4, #0]
 800936c:	f8c0 9000 	str.w	r9, [r0]
 8009370:	4604      	mov	r4, r0
 8009372:	e7e4      	b.n	800933e <__pow5mult+0x6a>
 8009374:	4638      	mov	r0, r7
 8009376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800937a:	bf00      	nop
 800937c:	0800a8a0 	.word	0x0800a8a0
 8009380:	0800a66d 	.word	0x0800a66d
 8009384:	0800a750 	.word	0x0800a750

08009388 <__lshift>:
 8009388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800938c:	460c      	mov	r4, r1
 800938e:	6849      	ldr	r1, [r1, #4]
 8009390:	6923      	ldr	r3, [r4, #16]
 8009392:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009396:	68a3      	ldr	r3, [r4, #8]
 8009398:	4607      	mov	r7, r0
 800939a:	4691      	mov	r9, r2
 800939c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093a0:	f108 0601 	add.w	r6, r8, #1
 80093a4:	42b3      	cmp	r3, r6
 80093a6:	db0b      	blt.n	80093c0 <__lshift+0x38>
 80093a8:	4638      	mov	r0, r7
 80093aa:	f7ff fddb 	bl	8008f64 <_Balloc>
 80093ae:	4605      	mov	r5, r0
 80093b0:	b948      	cbnz	r0, 80093c6 <__lshift+0x3e>
 80093b2:	4602      	mov	r2, r0
 80093b4:	4b2a      	ldr	r3, [pc, #168]	; (8009460 <__lshift+0xd8>)
 80093b6:	482b      	ldr	r0, [pc, #172]	; (8009464 <__lshift+0xdc>)
 80093b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80093bc:	f000 fdb0 	bl	8009f20 <__assert_func>
 80093c0:	3101      	adds	r1, #1
 80093c2:	005b      	lsls	r3, r3, #1
 80093c4:	e7ee      	b.n	80093a4 <__lshift+0x1c>
 80093c6:	2300      	movs	r3, #0
 80093c8:	f100 0114 	add.w	r1, r0, #20
 80093cc:	f100 0210 	add.w	r2, r0, #16
 80093d0:	4618      	mov	r0, r3
 80093d2:	4553      	cmp	r3, sl
 80093d4:	db37      	blt.n	8009446 <__lshift+0xbe>
 80093d6:	6920      	ldr	r0, [r4, #16]
 80093d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093dc:	f104 0314 	add.w	r3, r4, #20
 80093e0:	f019 091f 	ands.w	r9, r9, #31
 80093e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80093e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80093ec:	d02f      	beq.n	800944e <__lshift+0xc6>
 80093ee:	f1c9 0e20 	rsb	lr, r9, #32
 80093f2:	468a      	mov	sl, r1
 80093f4:	f04f 0c00 	mov.w	ip, #0
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	fa02 f209 	lsl.w	r2, r2, r9
 80093fe:	ea42 020c 	orr.w	r2, r2, ip
 8009402:	f84a 2b04 	str.w	r2, [sl], #4
 8009406:	f853 2b04 	ldr.w	r2, [r3], #4
 800940a:	4298      	cmp	r0, r3
 800940c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009410:	d8f2      	bhi.n	80093f8 <__lshift+0x70>
 8009412:	1b03      	subs	r3, r0, r4
 8009414:	3b15      	subs	r3, #21
 8009416:	f023 0303 	bic.w	r3, r3, #3
 800941a:	3304      	adds	r3, #4
 800941c:	f104 0215 	add.w	r2, r4, #21
 8009420:	4290      	cmp	r0, r2
 8009422:	bf38      	it	cc
 8009424:	2304      	movcc	r3, #4
 8009426:	f841 c003 	str.w	ip, [r1, r3]
 800942a:	f1bc 0f00 	cmp.w	ip, #0
 800942e:	d001      	beq.n	8009434 <__lshift+0xac>
 8009430:	f108 0602 	add.w	r6, r8, #2
 8009434:	3e01      	subs	r6, #1
 8009436:	4638      	mov	r0, r7
 8009438:	612e      	str	r6, [r5, #16]
 800943a:	4621      	mov	r1, r4
 800943c:	f7ff fdd2 	bl	8008fe4 <_Bfree>
 8009440:	4628      	mov	r0, r5
 8009442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009446:	f842 0f04 	str.w	r0, [r2, #4]!
 800944a:	3301      	adds	r3, #1
 800944c:	e7c1      	b.n	80093d2 <__lshift+0x4a>
 800944e:	3904      	subs	r1, #4
 8009450:	f853 2b04 	ldr.w	r2, [r3], #4
 8009454:	f841 2f04 	str.w	r2, [r1, #4]!
 8009458:	4298      	cmp	r0, r3
 800945a:	d8f9      	bhi.n	8009450 <__lshift+0xc8>
 800945c:	e7ea      	b.n	8009434 <__lshift+0xac>
 800945e:	bf00      	nop
 8009460:	0800a6df 	.word	0x0800a6df
 8009464:	0800a750 	.word	0x0800a750

08009468 <__mcmp>:
 8009468:	b530      	push	{r4, r5, lr}
 800946a:	6902      	ldr	r2, [r0, #16]
 800946c:	690c      	ldr	r4, [r1, #16]
 800946e:	1b12      	subs	r2, r2, r4
 8009470:	d10e      	bne.n	8009490 <__mcmp+0x28>
 8009472:	f100 0314 	add.w	r3, r0, #20
 8009476:	3114      	adds	r1, #20
 8009478:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800947c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009480:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009484:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009488:	42a5      	cmp	r5, r4
 800948a:	d003      	beq.n	8009494 <__mcmp+0x2c>
 800948c:	d305      	bcc.n	800949a <__mcmp+0x32>
 800948e:	2201      	movs	r2, #1
 8009490:	4610      	mov	r0, r2
 8009492:	bd30      	pop	{r4, r5, pc}
 8009494:	4283      	cmp	r3, r0
 8009496:	d3f3      	bcc.n	8009480 <__mcmp+0x18>
 8009498:	e7fa      	b.n	8009490 <__mcmp+0x28>
 800949a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800949e:	e7f7      	b.n	8009490 <__mcmp+0x28>

080094a0 <__mdiff>:
 80094a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a4:	460c      	mov	r4, r1
 80094a6:	4606      	mov	r6, r0
 80094a8:	4611      	mov	r1, r2
 80094aa:	4620      	mov	r0, r4
 80094ac:	4690      	mov	r8, r2
 80094ae:	f7ff ffdb 	bl	8009468 <__mcmp>
 80094b2:	1e05      	subs	r5, r0, #0
 80094b4:	d110      	bne.n	80094d8 <__mdiff+0x38>
 80094b6:	4629      	mov	r1, r5
 80094b8:	4630      	mov	r0, r6
 80094ba:	f7ff fd53 	bl	8008f64 <_Balloc>
 80094be:	b930      	cbnz	r0, 80094ce <__mdiff+0x2e>
 80094c0:	4b3a      	ldr	r3, [pc, #232]	; (80095ac <__mdiff+0x10c>)
 80094c2:	4602      	mov	r2, r0
 80094c4:	f240 2132 	movw	r1, #562	; 0x232
 80094c8:	4839      	ldr	r0, [pc, #228]	; (80095b0 <__mdiff+0x110>)
 80094ca:	f000 fd29 	bl	8009f20 <__assert_func>
 80094ce:	2301      	movs	r3, #1
 80094d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80094d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d8:	bfa4      	itt	ge
 80094da:	4643      	movge	r3, r8
 80094dc:	46a0      	movge	r8, r4
 80094de:	4630      	mov	r0, r6
 80094e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80094e4:	bfa6      	itte	ge
 80094e6:	461c      	movge	r4, r3
 80094e8:	2500      	movge	r5, #0
 80094ea:	2501      	movlt	r5, #1
 80094ec:	f7ff fd3a 	bl	8008f64 <_Balloc>
 80094f0:	b920      	cbnz	r0, 80094fc <__mdiff+0x5c>
 80094f2:	4b2e      	ldr	r3, [pc, #184]	; (80095ac <__mdiff+0x10c>)
 80094f4:	4602      	mov	r2, r0
 80094f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80094fa:	e7e5      	b.n	80094c8 <__mdiff+0x28>
 80094fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009500:	6926      	ldr	r6, [r4, #16]
 8009502:	60c5      	str	r5, [r0, #12]
 8009504:	f104 0914 	add.w	r9, r4, #20
 8009508:	f108 0514 	add.w	r5, r8, #20
 800950c:	f100 0e14 	add.w	lr, r0, #20
 8009510:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009514:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009518:	f108 0210 	add.w	r2, r8, #16
 800951c:	46f2      	mov	sl, lr
 800951e:	2100      	movs	r1, #0
 8009520:	f859 3b04 	ldr.w	r3, [r9], #4
 8009524:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009528:	fa1f f883 	uxth.w	r8, r3
 800952c:	fa11 f18b 	uxtah	r1, r1, fp
 8009530:	0c1b      	lsrs	r3, r3, #16
 8009532:	eba1 0808 	sub.w	r8, r1, r8
 8009536:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800953a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800953e:	fa1f f888 	uxth.w	r8, r8
 8009542:	1419      	asrs	r1, r3, #16
 8009544:	454e      	cmp	r6, r9
 8009546:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800954a:	f84a 3b04 	str.w	r3, [sl], #4
 800954e:	d8e7      	bhi.n	8009520 <__mdiff+0x80>
 8009550:	1b33      	subs	r3, r6, r4
 8009552:	3b15      	subs	r3, #21
 8009554:	f023 0303 	bic.w	r3, r3, #3
 8009558:	3304      	adds	r3, #4
 800955a:	3415      	adds	r4, #21
 800955c:	42a6      	cmp	r6, r4
 800955e:	bf38      	it	cc
 8009560:	2304      	movcc	r3, #4
 8009562:	441d      	add	r5, r3
 8009564:	4473      	add	r3, lr
 8009566:	469e      	mov	lr, r3
 8009568:	462e      	mov	r6, r5
 800956a:	4566      	cmp	r6, ip
 800956c:	d30e      	bcc.n	800958c <__mdiff+0xec>
 800956e:	f10c 0203 	add.w	r2, ip, #3
 8009572:	1b52      	subs	r2, r2, r5
 8009574:	f022 0203 	bic.w	r2, r2, #3
 8009578:	3d03      	subs	r5, #3
 800957a:	45ac      	cmp	ip, r5
 800957c:	bf38      	it	cc
 800957e:	2200      	movcc	r2, #0
 8009580:	441a      	add	r2, r3
 8009582:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009586:	b17b      	cbz	r3, 80095a8 <__mdiff+0x108>
 8009588:	6107      	str	r7, [r0, #16]
 800958a:	e7a3      	b.n	80094d4 <__mdiff+0x34>
 800958c:	f856 8b04 	ldr.w	r8, [r6], #4
 8009590:	fa11 f288 	uxtah	r2, r1, r8
 8009594:	1414      	asrs	r4, r2, #16
 8009596:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800959a:	b292      	uxth	r2, r2
 800959c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80095a0:	f84e 2b04 	str.w	r2, [lr], #4
 80095a4:	1421      	asrs	r1, r4, #16
 80095a6:	e7e0      	b.n	800956a <__mdiff+0xca>
 80095a8:	3f01      	subs	r7, #1
 80095aa:	e7ea      	b.n	8009582 <__mdiff+0xe2>
 80095ac:	0800a6df 	.word	0x0800a6df
 80095b0:	0800a750 	.word	0x0800a750

080095b4 <__d2b>:
 80095b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095b8:	4689      	mov	r9, r1
 80095ba:	2101      	movs	r1, #1
 80095bc:	ec57 6b10 	vmov	r6, r7, d0
 80095c0:	4690      	mov	r8, r2
 80095c2:	f7ff fccf 	bl	8008f64 <_Balloc>
 80095c6:	4604      	mov	r4, r0
 80095c8:	b930      	cbnz	r0, 80095d8 <__d2b+0x24>
 80095ca:	4602      	mov	r2, r0
 80095cc:	4b25      	ldr	r3, [pc, #148]	; (8009664 <__d2b+0xb0>)
 80095ce:	4826      	ldr	r0, [pc, #152]	; (8009668 <__d2b+0xb4>)
 80095d0:	f240 310a 	movw	r1, #778	; 0x30a
 80095d4:	f000 fca4 	bl	8009f20 <__assert_func>
 80095d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80095dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80095e0:	bb35      	cbnz	r5, 8009630 <__d2b+0x7c>
 80095e2:	2e00      	cmp	r6, #0
 80095e4:	9301      	str	r3, [sp, #4]
 80095e6:	d028      	beq.n	800963a <__d2b+0x86>
 80095e8:	4668      	mov	r0, sp
 80095ea:	9600      	str	r6, [sp, #0]
 80095ec:	f7ff fd82 	bl	80090f4 <__lo0bits>
 80095f0:	9900      	ldr	r1, [sp, #0]
 80095f2:	b300      	cbz	r0, 8009636 <__d2b+0x82>
 80095f4:	9a01      	ldr	r2, [sp, #4]
 80095f6:	f1c0 0320 	rsb	r3, r0, #32
 80095fa:	fa02 f303 	lsl.w	r3, r2, r3
 80095fe:	430b      	orrs	r3, r1
 8009600:	40c2      	lsrs	r2, r0
 8009602:	6163      	str	r3, [r4, #20]
 8009604:	9201      	str	r2, [sp, #4]
 8009606:	9b01      	ldr	r3, [sp, #4]
 8009608:	61a3      	str	r3, [r4, #24]
 800960a:	2b00      	cmp	r3, #0
 800960c:	bf14      	ite	ne
 800960e:	2202      	movne	r2, #2
 8009610:	2201      	moveq	r2, #1
 8009612:	6122      	str	r2, [r4, #16]
 8009614:	b1d5      	cbz	r5, 800964c <__d2b+0x98>
 8009616:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800961a:	4405      	add	r5, r0
 800961c:	f8c9 5000 	str.w	r5, [r9]
 8009620:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009624:	f8c8 0000 	str.w	r0, [r8]
 8009628:	4620      	mov	r0, r4
 800962a:	b003      	add	sp, #12
 800962c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009630:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009634:	e7d5      	b.n	80095e2 <__d2b+0x2e>
 8009636:	6161      	str	r1, [r4, #20]
 8009638:	e7e5      	b.n	8009606 <__d2b+0x52>
 800963a:	a801      	add	r0, sp, #4
 800963c:	f7ff fd5a 	bl	80090f4 <__lo0bits>
 8009640:	9b01      	ldr	r3, [sp, #4]
 8009642:	6163      	str	r3, [r4, #20]
 8009644:	2201      	movs	r2, #1
 8009646:	6122      	str	r2, [r4, #16]
 8009648:	3020      	adds	r0, #32
 800964a:	e7e3      	b.n	8009614 <__d2b+0x60>
 800964c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009650:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009654:	f8c9 0000 	str.w	r0, [r9]
 8009658:	6918      	ldr	r0, [r3, #16]
 800965a:	f7ff fd2b 	bl	80090b4 <__hi0bits>
 800965e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009662:	e7df      	b.n	8009624 <__d2b+0x70>
 8009664:	0800a6df 	.word	0x0800a6df
 8009668:	0800a750 	.word	0x0800a750

0800966c <_calloc_r>:
 800966c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800966e:	fba1 2402 	umull	r2, r4, r1, r2
 8009672:	b94c      	cbnz	r4, 8009688 <_calloc_r+0x1c>
 8009674:	4611      	mov	r1, r2
 8009676:	9201      	str	r2, [sp, #4]
 8009678:	f000 f87a 	bl	8009770 <_malloc_r>
 800967c:	9a01      	ldr	r2, [sp, #4]
 800967e:	4605      	mov	r5, r0
 8009680:	b930      	cbnz	r0, 8009690 <_calloc_r+0x24>
 8009682:	4628      	mov	r0, r5
 8009684:	b003      	add	sp, #12
 8009686:	bd30      	pop	{r4, r5, pc}
 8009688:	220c      	movs	r2, #12
 800968a:	6002      	str	r2, [r0, #0]
 800968c:	2500      	movs	r5, #0
 800968e:	e7f8      	b.n	8009682 <_calloc_r+0x16>
 8009690:	4621      	mov	r1, r4
 8009692:	f7fd fe67 	bl	8007364 <memset>
 8009696:	e7f4      	b.n	8009682 <_calloc_r+0x16>

08009698 <_free_r>:
 8009698:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800969a:	2900      	cmp	r1, #0
 800969c:	d044      	beq.n	8009728 <_free_r+0x90>
 800969e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096a2:	9001      	str	r0, [sp, #4]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f1a1 0404 	sub.w	r4, r1, #4
 80096aa:	bfb8      	it	lt
 80096ac:	18e4      	addlt	r4, r4, r3
 80096ae:	f000 fcd7 	bl	800a060 <__malloc_lock>
 80096b2:	4a1e      	ldr	r2, [pc, #120]	; (800972c <_free_r+0x94>)
 80096b4:	9801      	ldr	r0, [sp, #4]
 80096b6:	6813      	ldr	r3, [r2, #0]
 80096b8:	b933      	cbnz	r3, 80096c8 <_free_r+0x30>
 80096ba:	6063      	str	r3, [r4, #4]
 80096bc:	6014      	str	r4, [r2, #0]
 80096be:	b003      	add	sp, #12
 80096c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096c4:	f000 bcd2 	b.w	800a06c <__malloc_unlock>
 80096c8:	42a3      	cmp	r3, r4
 80096ca:	d908      	bls.n	80096de <_free_r+0x46>
 80096cc:	6825      	ldr	r5, [r4, #0]
 80096ce:	1961      	adds	r1, r4, r5
 80096d0:	428b      	cmp	r3, r1
 80096d2:	bf01      	itttt	eq
 80096d4:	6819      	ldreq	r1, [r3, #0]
 80096d6:	685b      	ldreq	r3, [r3, #4]
 80096d8:	1949      	addeq	r1, r1, r5
 80096da:	6021      	streq	r1, [r4, #0]
 80096dc:	e7ed      	b.n	80096ba <_free_r+0x22>
 80096de:	461a      	mov	r2, r3
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	b10b      	cbz	r3, 80096e8 <_free_r+0x50>
 80096e4:	42a3      	cmp	r3, r4
 80096e6:	d9fa      	bls.n	80096de <_free_r+0x46>
 80096e8:	6811      	ldr	r1, [r2, #0]
 80096ea:	1855      	adds	r5, r2, r1
 80096ec:	42a5      	cmp	r5, r4
 80096ee:	d10b      	bne.n	8009708 <_free_r+0x70>
 80096f0:	6824      	ldr	r4, [r4, #0]
 80096f2:	4421      	add	r1, r4
 80096f4:	1854      	adds	r4, r2, r1
 80096f6:	42a3      	cmp	r3, r4
 80096f8:	6011      	str	r1, [r2, #0]
 80096fa:	d1e0      	bne.n	80096be <_free_r+0x26>
 80096fc:	681c      	ldr	r4, [r3, #0]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	6053      	str	r3, [r2, #4]
 8009702:	4421      	add	r1, r4
 8009704:	6011      	str	r1, [r2, #0]
 8009706:	e7da      	b.n	80096be <_free_r+0x26>
 8009708:	d902      	bls.n	8009710 <_free_r+0x78>
 800970a:	230c      	movs	r3, #12
 800970c:	6003      	str	r3, [r0, #0]
 800970e:	e7d6      	b.n	80096be <_free_r+0x26>
 8009710:	6825      	ldr	r5, [r4, #0]
 8009712:	1961      	adds	r1, r4, r5
 8009714:	428b      	cmp	r3, r1
 8009716:	bf04      	itt	eq
 8009718:	6819      	ldreq	r1, [r3, #0]
 800971a:	685b      	ldreq	r3, [r3, #4]
 800971c:	6063      	str	r3, [r4, #4]
 800971e:	bf04      	itt	eq
 8009720:	1949      	addeq	r1, r1, r5
 8009722:	6021      	streq	r1, [r4, #0]
 8009724:	6054      	str	r4, [r2, #4]
 8009726:	e7ca      	b.n	80096be <_free_r+0x26>
 8009728:	b003      	add	sp, #12
 800972a:	bd30      	pop	{r4, r5, pc}
 800972c:	240684e8 	.word	0x240684e8

08009730 <sbrk_aligned>:
 8009730:	b570      	push	{r4, r5, r6, lr}
 8009732:	4e0e      	ldr	r6, [pc, #56]	; (800976c <sbrk_aligned+0x3c>)
 8009734:	460c      	mov	r4, r1
 8009736:	6831      	ldr	r1, [r6, #0]
 8009738:	4605      	mov	r5, r0
 800973a:	b911      	cbnz	r1, 8009742 <sbrk_aligned+0x12>
 800973c:	f000 fb8a 	bl	8009e54 <_sbrk_r>
 8009740:	6030      	str	r0, [r6, #0]
 8009742:	4621      	mov	r1, r4
 8009744:	4628      	mov	r0, r5
 8009746:	f000 fb85 	bl	8009e54 <_sbrk_r>
 800974a:	1c43      	adds	r3, r0, #1
 800974c:	d00a      	beq.n	8009764 <sbrk_aligned+0x34>
 800974e:	1cc4      	adds	r4, r0, #3
 8009750:	f024 0403 	bic.w	r4, r4, #3
 8009754:	42a0      	cmp	r0, r4
 8009756:	d007      	beq.n	8009768 <sbrk_aligned+0x38>
 8009758:	1a21      	subs	r1, r4, r0
 800975a:	4628      	mov	r0, r5
 800975c:	f000 fb7a 	bl	8009e54 <_sbrk_r>
 8009760:	3001      	adds	r0, #1
 8009762:	d101      	bne.n	8009768 <sbrk_aligned+0x38>
 8009764:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009768:	4620      	mov	r0, r4
 800976a:	bd70      	pop	{r4, r5, r6, pc}
 800976c:	240684ec 	.word	0x240684ec

08009770 <_malloc_r>:
 8009770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009774:	1ccd      	adds	r5, r1, #3
 8009776:	f025 0503 	bic.w	r5, r5, #3
 800977a:	3508      	adds	r5, #8
 800977c:	2d0c      	cmp	r5, #12
 800977e:	bf38      	it	cc
 8009780:	250c      	movcc	r5, #12
 8009782:	2d00      	cmp	r5, #0
 8009784:	4607      	mov	r7, r0
 8009786:	db01      	blt.n	800978c <_malloc_r+0x1c>
 8009788:	42a9      	cmp	r1, r5
 800978a:	d905      	bls.n	8009798 <_malloc_r+0x28>
 800978c:	230c      	movs	r3, #12
 800978e:	603b      	str	r3, [r7, #0]
 8009790:	2600      	movs	r6, #0
 8009792:	4630      	mov	r0, r6
 8009794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009798:	4e2e      	ldr	r6, [pc, #184]	; (8009854 <_malloc_r+0xe4>)
 800979a:	f000 fc61 	bl	800a060 <__malloc_lock>
 800979e:	6833      	ldr	r3, [r6, #0]
 80097a0:	461c      	mov	r4, r3
 80097a2:	bb34      	cbnz	r4, 80097f2 <_malloc_r+0x82>
 80097a4:	4629      	mov	r1, r5
 80097a6:	4638      	mov	r0, r7
 80097a8:	f7ff ffc2 	bl	8009730 <sbrk_aligned>
 80097ac:	1c43      	adds	r3, r0, #1
 80097ae:	4604      	mov	r4, r0
 80097b0:	d14d      	bne.n	800984e <_malloc_r+0xde>
 80097b2:	6834      	ldr	r4, [r6, #0]
 80097b4:	4626      	mov	r6, r4
 80097b6:	2e00      	cmp	r6, #0
 80097b8:	d140      	bne.n	800983c <_malloc_r+0xcc>
 80097ba:	6823      	ldr	r3, [r4, #0]
 80097bc:	4631      	mov	r1, r6
 80097be:	4638      	mov	r0, r7
 80097c0:	eb04 0803 	add.w	r8, r4, r3
 80097c4:	f000 fb46 	bl	8009e54 <_sbrk_r>
 80097c8:	4580      	cmp	r8, r0
 80097ca:	d13a      	bne.n	8009842 <_malloc_r+0xd2>
 80097cc:	6821      	ldr	r1, [r4, #0]
 80097ce:	3503      	adds	r5, #3
 80097d0:	1a6d      	subs	r5, r5, r1
 80097d2:	f025 0503 	bic.w	r5, r5, #3
 80097d6:	3508      	adds	r5, #8
 80097d8:	2d0c      	cmp	r5, #12
 80097da:	bf38      	it	cc
 80097dc:	250c      	movcc	r5, #12
 80097de:	4629      	mov	r1, r5
 80097e0:	4638      	mov	r0, r7
 80097e2:	f7ff ffa5 	bl	8009730 <sbrk_aligned>
 80097e6:	3001      	adds	r0, #1
 80097e8:	d02b      	beq.n	8009842 <_malloc_r+0xd2>
 80097ea:	6823      	ldr	r3, [r4, #0]
 80097ec:	442b      	add	r3, r5
 80097ee:	6023      	str	r3, [r4, #0]
 80097f0:	e00e      	b.n	8009810 <_malloc_r+0xa0>
 80097f2:	6822      	ldr	r2, [r4, #0]
 80097f4:	1b52      	subs	r2, r2, r5
 80097f6:	d41e      	bmi.n	8009836 <_malloc_r+0xc6>
 80097f8:	2a0b      	cmp	r2, #11
 80097fa:	d916      	bls.n	800982a <_malloc_r+0xba>
 80097fc:	1961      	adds	r1, r4, r5
 80097fe:	42a3      	cmp	r3, r4
 8009800:	6025      	str	r5, [r4, #0]
 8009802:	bf18      	it	ne
 8009804:	6059      	strne	r1, [r3, #4]
 8009806:	6863      	ldr	r3, [r4, #4]
 8009808:	bf08      	it	eq
 800980a:	6031      	streq	r1, [r6, #0]
 800980c:	5162      	str	r2, [r4, r5]
 800980e:	604b      	str	r3, [r1, #4]
 8009810:	4638      	mov	r0, r7
 8009812:	f104 060b 	add.w	r6, r4, #11
 8009816:	f000 fc29 	bl	800a06c <__malloc_unlock>
 800981a:	f026 0607 	bic.w	r6, r6, #7
 800981e:	1d23      	adds	r3, r4, #4
 8009820:	1af2      	subs	r2, r6, r3
 8009822:	d0b6      	beq.n	8009792 <_malloc_r+0x22>
 8009824:	1b9b      	subs	r3, r3, r6
 8009826:	50a3      	str	r3, [r4, r2]
 8009828:	e7b3      	b.n	8009792 <_malloc_r+0x22>
 800982a:	6862      	ldr	r2, [r4, #4]
 800982c:	42a3      	cmp	r3, r4
 800982e:	bf0c      	ite	eq
 8009830:	6032      	streq	r2, [r6, #0]
 8009832:	605a      	strne	r2, [r3, #4]
 8009834:	e7ec      	b.n	8009810 <_malloc_r+0xa0>
 8009836:	4623      	mov	r3, r4
 8009838:	6864      	ldr	r4, [r4, #4]
 800983a:	e7b2      	b.n	80097a2 <_malloc_r+0x32>
 800983c:	4634      	mov	r4, r6
 800983e:	6876      	ldr	r6, [r6, #4]
 8009840:	e7b9      	b.n	80097b6 <_malloc_r+0x46>
 8009842:	230c      	movs	r3, #12
 8009844:	603b      	str	r3, [r7, #0]
 8009846:	4638      	mov	r0, r7
 8009848:	f000 fc10 	bl	800a06c <__malloc_unlock>
 800984c:	e7a1      	b.n	8009792 <_malloc_r+0x22>
 800984e:	6025      	str	r5, [r4, #0]
 8009850:	e7de      	b.n	8009810 <_malloc_r+0xa0>
 8009852:	bf00      	nop
 8009854:	240684e8 	.word	0x240684e8

08009858 <__ssputs_r>:
 8009858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800985c:	688e      	ldr	r6, [r1, #8]
 800985e:	429e      	cmp	r6, r3
 8009860:	4682      	mov	sl, r0
 8009862:	460c      	mov	r4, r1
 8009864:	4690      	mov	r8, r2
 8009866:	461f      	mov	r7, r3
 8009868:	d838      	bhi.n	80098dc <__ssputs_r+0x84>
 800986a:	898a      	ldrh	r2, [r1, #12]
 800986c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009870:	d032      	beq.n	80098d8 <__ssputs_r+0x80>
 8009872:	6825      	ldr	r5, [r4, #0]
 8009874:	6909      	ldr	r1, [r1, #16]
 8009876:	eba5 0901 	sub.w	r9, r5, r1
 800987a:	6965      	ldr	r5, [r4, #20]
 800987c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009880:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009884:	3301      	adds	r3, #1
 8009886:	444b      	add	r3, r9
 8009888:	106d      	asrs	r5, r5, #1
 800988a:	429d      	cmp	r5, r3
 800988c:	bf38      	it	cc
 800988e:	461d      	movcc	r5, r3
 8009890:	0553      	lsls	r3, r2, #21
 8009892:	d531      	bpl.n	80098f8 <__ssputs_r+0xa0>
 8009894:	4629      	mov	r1, r5
 8009896:	f7ff ff6b 	bl	8009770 <_malloc_r>
 800989a:	4606      	mov	r6, r0
 800989c:	b950      	cbnz	r0, 80098b4 <__ssputs_r+0x5c>
 800989e:	230c      	movs	r3, #12
 80098a0:	f8ca 3000 	str.w	r3, [sl]
 80098a4:	89a3      	ldrh	r3, [r4, #12]
 80098a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098aa:	81a3      	strh	r3, [r4, #12]
 80098ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098b4:	6921      	ldr	r1, [r4, #16]
 80098b6:	464a      	mov	r2, r9
 80098b8:	f7fd fd46 	bl	8007348 <memcpy>
 80098bc:	89a3      	ldrh	r3, [r4, #12]
 80098be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098c6:	81a3      	strh	r3, [r4, #12]
 80098c8:	6126      	str	r6, [r4, #16]
 80098ca:	6165      	str	r5, [r4, #20]
 80098cc:	444e      	add	r6, r9
 80098ce:	eba5 0509 	sub.w	r5, r5, r9
 80098d2:	6026      	str	r6, [r4, #0]
 80098d4:	60a5      	str	r5, [r4, #8]
 80098d6:	463e      	mov	r6, r7
 80098d8:	42be      	cmp	r6, r7
 80098da:	d900      	bls.n	80098de <__ssputs_r+0x86>
 80098dc:	463e      	mov	r6, r7
 80098de:	6820      	ldr	r0, [r4, #0]
 80098e0:	4632      	mov	r2, r6
 80098e2:	4641      	mov	r1, r8
 80098e4:	f000 fba2 	bl	800a02c <memmove>
 80098e8:	68a3      	ldr	r3, [r4, #8]
 80098ea:	1b9b      	subs	r3, r3, r6
 80098ec:	60a3      	str	r3, [r4, #8]
 80098ee:	6823      	ldr	r3, [r4, #0]
 80098f0:	4433      	add	r3, r6
 80098f2:	6023      	str	r3, [r4, #0]
 80098f4:	2000      	movs	r0, #0
 80098f6:	e7db      	b.n	80098b0 <__ssputs_r+0x58>
 80098f8:	462a      	mov	r2, r5
 80098fa:	f000 fbbd 	bl	800a078 <_realloc_r>
 80098fe:	4606      	mov	r6, r0
 8009900:	2800      	cmp	r0, #0
 8009902:	d1e1      	bne.n	80098c8 <__ssputs_r+0x70>
 8009904:	6921      	ldr	r1, [r4, #16]
 8009906:	4650      	mov	r0, sl
 8009908:	f7ff fec6 	bl	8009698 <_free_r>
 800990c:	e7c7      	b.n	800989e <__ssputs_r+0x46>
	...

08009910 <_svfiprintf_r>:
 8009910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009914:	4698      	mov	r8, r3
 8009916:	898b      	ldrh	r3, [r1, #12]
 8009918:	061b      	lsls	r3, r3, #24
 800991a:	b09d      	sub	sp, #116	; 0x74
 800991c:	4607      	mov	r7, r0
 800991e:	460d      	mov	r5, r1
 8009920:	4614      	mov	r4, r2
 8009922:	d50e      	bpl.n	8009942 <_svfiprintf_r+0x32>
 8009924:	690b      	ldr	r3, [r1, #16]
 8009926:	b963      	cbnz	r3, 8009942 <_svfiprintf_r+0x32>
 8009928:	2140      	movs	r1, #64	; 0x40
 800992a:	f7ff ff21 	bl	8009770 <_malloc_r>
 800992e:	6028      	str	r0, [r5, #0]
 8009930:	6128      	str	r0, [r5, #16]
 8009932:	b920      	cbnz	r0, 800993e <_svfiprintf_r+0x2e>
 8009934:	230c      	movs	r3, #12
 8009936:	603b      	str	r3, [r7, #0]
 8009938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800993c:	e0d1      	b.n	8009ae2 <_svfiprintf_r+0x1d2>
 800993e:	2340      	movs	r3, #64	; 0x40
 8009940:	616b      	str	r3, [r5, #20]
 8009942:	2300      	movs	r3, #0
 8009944:	9309      	str	r3, [sp, #36]	; 0x24
 8009946:	2320      	movs	r3, #32
 8009948:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800994c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009950:	2330      	movs	r3, #48	; 0x30
 8009952:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009afc <_svfiprintf_r+0x1ec>
 8009956:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800995a:	f04f 0901 	mov.w	r9, #1
 800995e:	4623      	mov	r3, r4
 8009960:	469a      	mov	sl, r3
 8009962:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009966:	b10a      	cbz	r2, 800996c <_svfiprintf_r+0x5c>
 8009968:	2a25      	cmp	r2, #37	; 0x25
 800996a:	d1f9      	bne.n	8009960 <_svfiprintf_r+0x50>
 800996c:	ebba 0b04 	subs.w	fp, sl, r4
 8009970:	d00b      	beq.n	800998a <_svfiprintf_r+0x7a>
 8009972:	465b      	mov	r3, fp
 8009974:	4622      	mov	r2, r4
 8009976:	4629      	mov	r1, r5
 8009978:	4638      	mov	r0, r7
 800997a:	f7ff ff6d 	bl	8009858 <__ssputs_r>
 800997e:	3001      	adds	r0, #1
 8009980:	f000 80aa 	beq.w	8009ad8 <_svfiprintf_r+0x1c8>
 8009984:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009986:	445a      	add	r2, fp
 8009988:	9209      	str	r2, [sp, #36]	; 0x24
 800998a:	f89a 3000 	ldrb.w	r3, [sl]
 800998e:	2b00      	cmp	r3, #0
 8009990:	f000 80a2 	beq.w	8009ad8 <_svfiprintf_r+0x1c8>
 8009994:	2300      	movs	r3, #0
 8009996:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800999a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800999e:	f10a 0a01 	add.w	sl, sl, #1
 80099a2:	9304      	str	r3, [sp, #16]
 80099a4:	9307      	str	r3, [sp, #28]
 80099a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099aa:	931a      	str	r3, [sp, #104]	; 0x68
 80099ac:	4654      	mov	r4, sl
 80099ae:	2205      	movs	r2, #5
 80099b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099b4:	4851      	ldr	r0, [pc, #324]	; (8009afc <_svfiprintf_r+0x1ec>)
 80099b6:	f7f6 fcb3 	bl	8000320 <memchr>
 80099ba:	9a04      	ldr	r2, [sp, #16]
 80099bc:	b9d8      	cbnz	r0, 80099f6 <_svfiprintf_r+0xe6>
 80099be:	06d0      	lsls	r0, r2, #27
 80099c0:	bf44      	itt	mi
 80099c2:	2320      	movmi	r3, #32
 80099c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099c8:	0711      	lsls	r1, r2, #28
 80099ca:	bf44      	itt	mi
 80099cc:	232b      	movmi	r3, #43	; 0x2b
 80099ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099d2:	f89a 3000 	ldrb.w	r3, [sl]
 80099d6:	2b2a      	cmp	r3, #42	; 0x2a
 80099d8:	d015      	beq.n	8009a06 <_svfiprintf_r+0xf6>
 80099da:	9a07      	ldr	r2, [sp, #28]
 80099dc:	4654      	mov	r4, sl
 80099de:	2000      	movs	r0, #0
 80099e0:	f04f 0c0a 	mov.w	ip, #10
 80099e4:	4621      	mov	r1, r4
 80099e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099ea:	3b30      	subs	r3, #48	; 0x30
 80099ec:	2b09      	cmp	r3, #9
 80099ee:	d94e      	bls.n	8009a8e <_svfiprintf_r+0x17e>
 80099f0:	b1b0      	cbz	r0, 8009a20 <_svfiprintf_r+0x110>
 80099f2:	9207      	str	r2, [sp, #28]
 80099f4:	e014      	b.n	8009a20 <_svfiprintf_r+0x110>
 80099f6:	eba0 0308 	sub.w	r3, r0, r8
 80099fa:	fa09 f303 	lsl.w	r3, r9, r3
 80099fe:	4313      	orrs	r3, r2
 8009a00:	9304      	str	r3, [sp, #16]
 8009a02:	46a2      	mov	sl, r4
 8009a04:	e7d2      	b.n	80099ac <_svfiprintf_r+0x9c>
 8009a06:	9b03      	ldr	r3, [sp, #12]
 8009a08:	1d19      	adds	r1, r3, #4
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	9103      	str	r1, [sp, #12]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	bfbb      	ittet	lt
 8009a12:	425b      	neglt	r3, r3
 8009a14:	f042 0202 	orrlt.w	r2, r2, #2
 8009a18:	9307      	strge	r3, [sp, #28]
 8009a1a:	9307      	strlt	r3, [sp, #28]
 8009a1c:	bfb8      	it	lt
 8009a1e:	9204      	strlt	r2, [sp, #16]
 8009a20:	7823      	ldrb	r3, [r4, #0]
 8009a22:	2b2e      	cmp	r3, #46	; 0x2e
 8009a24:	d10c      	bne.n	8009a40 <_svfiprintf_r+0x130>
 8009a26:	7863      	ldrb	r3, [r4, #1]
 8009a28:	2b2a      	cmp	r3, #42	; 0x2a
 8009a2a:	d135      	bne.n	8009a98 <_svfiprintf_r+0x188>
 8009a2c:	9b03      	ldr	r3, [sp, #12]
 8009a2e:	1d1a      	adds	r2, r3, #4
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	9203      	str	r2, [sp, #12]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	bfb8      	it	lt
 8009a38:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009a3c:	3402      	adds	r4, #2
 8009a3e:	9305      	str	r3, [sp, #20]
 8009a40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009b0c <_svfiprintf_r+0x1fc>
 8009a44:	7821      	ldrb	r1, [r4, #0]
 8009a46:	2203      	movs	r2, #3
 8009a48:	4650      	mov	r0, sl
 8009a4a:	f7f6 fc69 	bl	8000320 <memchr>
 8009a4e:	b140      	cbz	r0, 8009a62 <_svfiprintf_r+0x152>
 8009a50:	2340      	movs	r3, #64	; 0x40
 8009a52:	eba0 000a 	sub.w	r0, r0, sl
 8009a56:	fa03 f000 	lsl.w	r0, r3, r0
 8009a5a:	9b04      	ldr	r3, [sp, #16]
 8009a5c:	4303      	orrs	r3, r0
 8009a5e:	3401      	adds	r4, #1
 8009a60:	9304      	str	r3, [sp, #16]
 8009a62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a66:	4826      	ldr	r0, [pc, #152]	; (8009b00 <_svfiprintf_r+0x1f0>)
 8009a68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a6c:	2206      	movs	r2, #6
 8009a6e:	f7f6 fc57 	bl	8000320 <memchr>
 8009a72:	2800      	cmp	r0, #0
 8009a74:	d038      	beq.n	8009ae8 <_svfiprintf_r+0x1d8>
 8009a76:	4b23      	ldr	r3, [pc, #140]	; (8009b04 <_svfiprintf_r+0x1f4>)
 8009a78:	bb1b      	cbnz	r3, 8009ac2 <_svfiprintf_r+0x1b2>
 8009a7a:	9b03      	ldr	r3, [sp, #12]
 8009a7c:	3307      	adds	r3, #7
 8009a7e:	f023 0307 	bic.w	r3, r3, #7
 8009a82:	3308      	adds	r3, #8
 8009a84:	9303      	str	r3, [sp, #12]
 8009a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a88:	4433      	add	r3, r6
 8009a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8009a8c:	e767      	b.n	800995e <_svfiprintf_r+0x4e>
 8009a8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a92:	460c      	mov	r4, r1
 8009a94:	2001      	movs	r0, #1
 8009a96:	e7a5      	b.n	80099e4 <_svfiprintf_r+0xd4>
 8009a98:	2300      	movs	r3, #0
 8009a9a:	3401      	adds	r4, #1
 8009a9c:	9305      	str	r3, [sp, #20]
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	f04f 0c0a 	mov.w	ip, #10
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009aaa:	3a30      	subs	r2, #48	; 0x30
 8009aac:	2a09      	cmp	r2, #9
 8009aae:	d903      	bls.n	8009ab8 <_svfiprintf_r+0x1a8>
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d0c5      	beq.n	8009a40 <_svfiprintf_r+0x130>
 8009ab4:	9105      	str	r1, [sp, #20]
 8009ab6:	e7c3      	b.n	8009a40 <_svfiprintf_r+0x130>
 8009ab8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009abc:	4604      	mov	r4, r0
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e7f0      	b.n	8009aa4 <_svfiprintf_r+0x194>
 8009ac2:	ab03      	add	r3, sp, #12
 8009ac4:	9300      	str	r3, [sp, #0]
 8009ac6:	462a      	mov	r2, r5
 8009ac8:	4b0f      	ldr	r3, [pc, #60]	; (8009b08 <_svfiprintf_r+0x1f8>)
 8009aca:	a904      	add	r1, sp, #16
 8009acc:	4638      	mov	r0, r7
 8009ace:	f7fd fce3 	bl	8007498 <_printf_float>
 8009ad2:	1c42      	adds	r2, r0, #1
 8009ad4:	4606      	mov	r6, r0
 8009ad6:	d1d6      	bne.n	8009a86 <_svfiprintf_r+0x176>
 8009ad8:	89ab      	ldrh	r3, [r5, #12]
 8009ada:	065b      	lsls	r3, r3, #25
 8009adc:	f53f af2c 	bmi.w	8009938 <_svfiprintf_r+0x28>
 8009ae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ae2:	b01d      	add	sp, #116	; 0x74
 8009ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae8:	ab03      	add	r3, sp, #12
 8009aea:	9300      	str	r3, [sp, #0]
 8009aec:	462a      	mov	r2, r5
 8009aee:	4b06      	ldr	r3, [pc, #24]	; (8009b08 <_svfiprintf_r+0x1f8>)
 8009af0:	a904      	add	r1, sp, #16
 8009af2:	4638      	mov	r0, r7
 8009af4:	f7fd ff5c 	bl	80079b0 <_printf_i>
 8009af8:	e7eb      	b.n	8009ad2 <_svfiprintf_r+0x1c2>
 8009afa:	bf00      	nop
 8009afc:	0800a8ac 	.word	0x0800a8ac
 8009b00:	0800a8b6 	.word	0x0800a8b6
 8009b04:	08007499 	.word	0x08007499
 8009b08:	08009859 	.word	0x08009859
 8009b0c:	0800a8b2 	.word	0x0800a8b2

08009b10 <__sfputc_r>:
 8009b10:	6893      	ldr	r3, [r2, #8]
 8009b12:	3b01      	subs	r3, #1
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	b410      	push	{r4}
 8009b18:	6093      	str	r3, [r2, #8]
 8009b1a:	da08      	bge.n	8009b2e <__sfputc_r+0x1e>
 8009b1c:	6994      	ldr	r4, [r2, #24]
 8009b1e:	42a3      	cmp	r3, r4
 8009b20:	db01      	blt.n	8009b26 <__sfputc_r+0x16>
 8009b22:	290a      	cmp	r1, #10
 8009b24:	d103      	bne.n	8009b2e <__sfputc_r+0x1e>
 8009b26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b2a:	f7fe b935 	b.w	8007d98 <__swbuf_r>
 8009b2e:	6813      	ldr	r3, [r2, #0]
 8009b30:	1c58      	adds	r0, r3, #1
 8009b32:	6010      	str	r0, [r2, #0]
 8009b34:	7019      	strb	r1, [r3, #0]
 8009b36:	4608      	mov	r0, r1
 8009b38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b3c:	4770      	bx	lr

08009b3e <__sfputs_r>:
 8009b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b40:	4606      	mov	r6, r0
 8009b42:	460f      	mov	r7, r1
 8009b44:	4614      	mov	r4, r2
 8009b46:	18d5      	adds	r5, r2, r3
 8009b48:	42ac      	cmp	r4, r5
 8009b4a:	d101      	bne.n	8009b50 <__sfputs_r+0x12>
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	e007      	b.n	8009b60 <__sfputs_r+0x22>
 8009b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b54:	463a      	mov	r2, r7
 8009b56:	4630      	mov	r0, r6
 8009b58:	f7ff ffda 	bl	8009b10 <__sfputc_r>
 8009b5c:	1c43      	adds	r3, r0, #1
 8009b5e:	d1f3      	bne.n	8009b48 <__sfputs_r+0xa>
 8009b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b64 <_vfiprintf_r>:
 8009b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b68:	460d      	mov	r5, r1
 8009b6a:	b09d      	sub	sp, #116	; 0x74
 8009b6c:	4614      	mov	r4, r2
 8009b6e:	4698      	mov	r8, r3
 8009b70:	4606      	mov	r6, r0
 8009b72:	b118      	cbz	r0, 8009b7c <_vfiprintf_r+0x18>
 8009b74:	6983      	ldr	r3, [r0, #24]
 8009b76:	b90b      	cbnz	r3, 8009b7c <_vfiprintf_r+0x18>
 8009b78:	f7ff f8e2 	bl	8008d40 <__sinit>
 8009b7c:	4b89      	ldr	r3, [pc, #548]	; (8009da4 <_vfiprintf_r+0x240>)
 8009b7e:	429d      	cmp	r5, r3
 8009b80:	d11b      	bne.n	8009bba <_vfiprintf_r+0x56>
 8009b82:	6875      	ldr	r5, [r6, #4]
 8009b84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b86:	07d9      	lsls	r1, r3, #31
 8009b88:	d405      	bmi.n	8009b96 <_vfiprintf_r+0x32>
 8009b8a:	89ab      	ldrh	r3, [r5, #12]
 8009b8c:	059a      	lsls	r2, r3, #22
 8009b8e:	d402      	bmi.n	8009b96 <_vfiprintf_r+0x32>
 8009b90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b92:	f7ff f978 	bl	8008e86 <__retarget_lock_acquire_recursive>
 8009b96:	89ab      	ldrh	r3, [r5, #12]
 8009b98:	071b      	lsls	r3, r3, #28
 8009b9a:	d501      	bpl.n	8009ba0 <_vfiprintf_r+0x3c>
 8009b9c:	692b      	ldr	r3, [r5, #16]
 8009b9e:	b9eb      	cbnz	r3, 8009bdc <_vfiprintf_r+0x78>
 8009ba0:	4629      	mov	r1, r5
 8009ba2:	4630      	mov	r0, r6
 8009ba4:	f7fe f94a 	bl	8007e3c <__swsetup_r>
 8009ba8:	b1c0      	cbz	r0, 8009bdc <_vfiprintf_r+0x78>
 8009baa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bac:	07dc      	lsls	r4, r3, #31
 8009bae:	d50e      	bpl.n	8009bce <_vfiprintf_r+0x6a>
 8009bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bb4:	b01d      	add	sp, #116	; 0x74
 8009bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bba:	4b7b      	ldr	r3, [pc, #492]	; (8009da8 <_vfiprintf_r+0x244>)
 8009bbc:	429d      	cmp	r5, r3
 8009bbe:	d101      	bne.n	8009bc4 <_vfiprintf_r+0x60>
 8009bc0:	68b5      	ldr	r5, [r6, #8]
 8009bc2:	e7df      	b.n	8009b84 <_vfiprintf_r+0x20>
 8009bc4:	4b79      	ldr	r3, [pc, #484]	; (8009dac <_vfiprintf_r+0x248>)
 8009bc6:	429d      	cmp	r5, r3
 8009bc8:	bf08      	it	eq
 8009bca:	68f5      	ldreq	r5, [r6, #12]
 8009bcc:	e7da      	b.n	8009b84 <_vfiprintf_r+0x20>
 8009bce:	89ab      	ldrh	r3, [r5, #12]
 8009bd0:	0598      	lsls	r0, r3, #22
 8009bd2:	d4ed      	bmi.n	8009bb0 <_vfiprintf_r+0x4c>
 8009bd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bd6:	f7ff f957 	bl	8008e88 <__retarget_lock_release_recursive>
 8009bda:	e7e9      	b.n	8009bb0 <_vfiprintf_r+0x4c>
 8009bdc:	2300      	movs	r3, #0
 8009bde:	9309      	str	r3, [sp, #36]	; 0x24
 8009be0:	2320      	movs	r3, #32
 8009be2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009be6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bea:	2330      	movs	r3, #48	; 0x30
 8009bec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009db0 <_vfiprintf_r+0x24c>
 8009bf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bf4:	f04f 0901 	mov.w	r9, #1
 8009bf8:	4623      	mov	r3, r4
 8009bfa:	469a      	mov	sl, r3
 8009bfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c00:	b10a      	cbz	r2, 8009c06 <_vfiprintf_r+0xa2>
 8009c02:	2a25      	cmp	r2, #37	; 0x25
 8009c04:	d1f9      	bne.n	8009bfa <_vfiprintf_r+0x96>
 8009c06:	ebba 0b04 	subs.w	fp, sl, r4
 8009c0a:	d00b      	beq.n	8009c24 <_vfiprintf_r+0xc0>
 8009c0c:	465b      	mov	r3, fp
 8009c0e:	4622      	mov	r2, r4
 8009c10:	4629      	mov	r1, r5
 8009c12:	4630      	mov	r0, r6
 8009c14:	f7ff ff93 	bl	8009b3e <__sfputs_r>
 8009c18:	3001      	adds	r0, #1
 8009c1a:	f000 80aa 	beq.w	8009d72 <_vfiprintf_r+0x20e>
 8009c1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c20:	445a      	add	r2, fp
 8009c22:	9209      	str	r2, [sp, #36]	; 0x24
 8009c24:	f89a 3000 	ldrb.w	r3, [sl]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	f000 80a2 	beq.w	8009d72 <_vfiprintf_r+0x20e>
 8009c2e:	2300      	movs	r3, #0
 8009c30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c38:	f10a 0a01 	add.w	sl, sl, #1
 8009c3c:	9304      	str	r3, [sp, #16]
 8009c3e:	9307      	str	r3, [sp, #28]
 8009c40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c44:	931a      	str	r3, [sp, #104]	; 0x68
 8009c46:	4654      	mov	r4, sl
 8009c48:	2205      	movs	r2, #5
 8009c4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c4e:	4858      	ldr	r0, [pc, #352]	; (8009db0 <_vfiprintf_r+0x24c>)
 8009c50:	f7f6 fb66 	bl	8000320 <memchr>
 8009c54:	9a04      	ldr	r2, [sp, #16]
 8009c56:	b9d8      	cbnz	r0, 8009c90 <_vfiprintf_r+0x12c>
 8009c58:	06d1      	lsls	r1, r2, #27
 8009c5a:	bf44      	itt	mi
 8009c5c:	2320      	movmi	r3, #32
 8009c5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c62:	0713      	lsls	r3, r2, #28
 8009c64:	bf44      	itt	mi
 8009c66:	232b      	movmi	r3, #43	; 0x2b
 8009c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8009c70:	2b2a      	cmp	r3, #42	; 0x2a
 8009c72:	d015      	beq.n	8009ca0 <_vfiprintf_r+0x13c>
 8009c74:	9a07      	ldr	r2, [sp, #28]
 8009c76:	4654      	mov	r4, sl
 8009c78:	2000      	movs	r0, #0
 8009c7a:	f04f 0c0a 	mov.w	ip, #10
 8009c7e:	4621      	mov	r1, r4
 8009c80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c84:	3b30      	subs	r3, #48	; 0x30
 8009c86:	2b09      	cmp	r3, #9
 8009c88:	d94e      	bls.n	8009d28 <_vfiprintf_r+0x1c4>
 8009c8a:	b1b0      	cbz	r0, 8009cba <_vfiprintf_r+0x156>
 8009c8c:	9207      	str	r2, [sp, #28]
 8009c8e:	e014      	b.n	8009cba <_vfiprintf_r+0x156>
 8009c90:	eba0 0308 	sub.w	r3, r0, r8
 8009c94:	fa09 f303 	lsl.w	r3, r9, r3
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	9304      	str	r3, [sp, #16]
 8009c9c:	46a2      	mov	sl, r4
 8009c9e:	e7d2      	b.n	8009c46 <_vfiprintf_r+0xe2>
 8009ca0:	9b03      	ldr	r3, [sp, #12]
 8009ca2:	1d19      	adds	r1, r3, #4
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	9103      	str	r1, [sp, #12]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	bfbb      	ittet	lt
 8009cac:	425b      	neglt	r3, r3
 8009cae:	f042 0202 	orrlt.w	r2, r2, #2
 8009cb2:	9307      	strge	r3, [sp, #28]
 8009cb4:	9307      	strlt	r3, [sp, #28]
 8009cb6:	bfb8      	it	lt
 8009cb8:	9204      	strlt	r2, [sp, #16]
 8009cba:	7823      	ldrb	r3, [r4, #0]
 8009cbc:	2b2e      	cmp	r3, #46	; 0x2e
 8009cbe:	d10c      	bne.n	8009cda <_vfiprintf_r+0x176>
 8009cc0:	7863      	ldrb	r3, [r4, #1]
 8009cc2:	2b2a      	cmp	r3, #42	; 0x2a
 8009cc4:	d135      	bne.n	8009d32 <_vfiprintf_r+0x1ce>
 8009cc6:	9b03      	ldr	r3, [sp, #12]
 8009cc8:	1d1a      	adds	r2, r3, #4
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	9203      	str	r2, [sp, #12]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	bfb8      	it	lt
 8009cd2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009cd6:	3402      	adds	r4, #2
 8009cd8:	9305      	str	r3, [sp, #20]
 8009cda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009dc0 <_vfiprintf_r+0x25c>
 8009cde:	7821      	ldrb	r1, [r4, #0]
 8009ce0:	2203      	movs	r2, #3
 8009ce2:	4650      	mov	r0, sl
 8009ce4:	f7f6 fb1c 	bl	8000320 <memchr>
 8009ce8:	b140      	cbz	r0, 8009cfc <_vfiprintf_r+0x198>
 8009cea:	2340      	movs	r3, #64	; 0x40
 8009cec:	eba0 000a 	sub.w	r0, r0, sl
 8009cf0:	fa03 f000 	lsl.w	r0, r3, r0
 8009cf4:	9b04      	ldr	r3, [sp, #16]
 8009cf6:	4303      	orrs	r3, r0
 8009cf8:	3401      	adds	r4, #1
 8009cfa:	9304      	str	r3, [sp, #16]
 8009cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d00:	482c      	ldr	r0, [pc, #176]	; (8009db4 <_vfiprintf_r+0x250>)
 8009d02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d06:	2206      	movs	r2, #6
 8009d08:	f7f6 fb0a 	bl	8000320 <memchr>
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	d03f      	beq.n	8009d90 <_vfiprintf_r+0x22c>
 8009d10:	4b29      	ldr	r3, [pc, #164]	; (8009db8 <_vfiprintf_r+0x254>)
 8009d12:	bb1b      	cbnz	r3, 8009d5c <_vfiprintf_r+0x1f8>
 8009d14:	9b03      	ldr	r3, [sp, #12]
 8009d16:	3307      	adds	r3, #7
 8009d18:	f023 0307 	bic.w	r3, r3, #7
 8009d1c:	3308      	adds	r3, #8
 8009d1e:	9303      	str	r3, [sp, #12]
 8009d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d22:	443b      	add	r3, r7
 8009d24:	9309      	str	r3, [sp, #36]	; 0x24
 8009d26:	e767      	b.n	8009bf8 <_vfiprintf_r+0x94>
 8009d28:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d2c:	460c      	mov	r4, r1
 8009d2e:	2001      	movs	r0, #1
 8009d30:	e7a5      	b.n	8009c7e <_vfiprintf_r+0x11a>
 8009d32:	2300      	movs	r3, #0
 8009d34:	3401      	adds	r4, #1
 8009d36:	9305      	str	r3, [sp, #20]
 8009d38:	4619      	mov	r1, r3
 8009d3a:	f04f 0c0a 	mov.w	ip, #10
 8009d3e:	4620      	mov	r0, r4
 8009d40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d44:	3a30      	subs	r2, #48	; 0x30
 8009d46:	2a09      	cmp	r2, #9
 8009d48:	d903      	bls.n	8009d52 <_vfiprintf_r+0x1ee>
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d0c5      	beq.n	8009cda <_vfiprintf_r+0x176>
 8009d4e:	9105      	str	r1, [sp, #20]
 8009d50:	e7c3      	b.n	8009cda <_vfiprintf_r+0x176>
 8009d52:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d56:	4604      	mov	r4, r0
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e7f0      	b.n	8009d3e <_vfiprintf_r+0x1da>
 8009d5c:	ab03      	add	r3, sp, #12
 8009d5e:	9300      	str	r3, [sp, #0]
 8009d60:	462a      	mov	r2, r5
 8009d62:	4b16      	ldr	r3, [pc, #88]	; (8009dbc <_vfiprintf_r+0x258>)
 8009d64:	a904      	add	r1, sp, #16
 8009d66:	4630      	mov	r0, r6
 8009d68:	f7fd fb96 	bl	8007498 <_printf_float>
 8009d6c:	4607      	mov	r7, r0
 8009d6e:	1c78      	adds	r0, r7, #1
 8009d70:	d1d6      	bne.n	8009d20 <_vfiprintf_r+0x1bc>
 8009d72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d74:	07d9      	lsls	r1, r3, #31
 8009d76:	d405      	bmi.n	8009d84 <_vfiprintf_r+0x220>
 8009d78:	89ab      	ldrh	r3, [r5, #12]
 8009d7a:	059a      	lsls	r2, r3, #22
 8009d7c:	d402      	bmi.n	8009d84 <_vfiprintf_r+0x220>
 8009d7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d80:	f7ff f882 	bl	8008e88 <__retarget_lock_release_recursive>
 8009d84:	89ab      	ldrh	r3, [r5, #12]
 8009d86:	065b      	lsls	r3, r3, #25
 8009d88:	f53f af12 	bmi.w	8009bb0 <_vfiprintf_r+0x4c>
 8009d8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d8e:	e711      	b.n	8009bb4 <_vfiprintf_r+0x50>
 8009d90:	ab03      	add	r3, sp, #12
 8009d92:	9300      	str	r3, [sp, #0]
 8009d94:	462a      	mov	r2, r5
 8009d96:	4b09      	ldr	r3, [pc, #36]	; (8009dbc <_vfiprintf_r+0x258>)
 8009d98:	a904      	add	r1, sp, #16
 8009d9a:	4630      	mov	r0, r6
 8009d9c:	f7fd fe08 	bl	80079b0 <_printf_i>
 8009da0:	e7e4      	b.n	8009d6c <_vfiprintf_r+0x208>
 8009da2:	bf00      	nop
 8009da4:	0800a710 	.word	0x0800a710
 8009da8:	0800a730 	.word	0x0800a730
 8009dac:	0800a6f0 	.word	0x0800a6f0
 8009db0:	0800a8ac 	.word	0x0800a8ac
 8009db4:	0800a8b6 	.word	0x0800a8b6
 8009db8:	08007499 	.word	0x08007499
 8009dbc:	08009b3f 	.word	0x08009b3f
 8009dc0:	0800a8b2 	.word	0x0800a8b2

08009dc4 <_putc_r>:
 8009dc4:	b570      	push	{r4, r5, r6, lr}
 8009dc6:	460d      	mov	r5, r1
 8009dc8:	4614      	mov	r4, r2
 8009dca:	4606      	mov	r6, r0
 8009dcc:	b118      	cbz	r0, 8009dd6 <_putc_r+0x12>
 8009dce:	6983      	ldr	r3, [r0, #24]
 8009dd0:	b90b      	cbnz	r3, 8009dd6 <_putc_r+0x12>
 8009dd2:	f7fe ffb5 	bl	8008d40 <__sinit>
 8009dd6:	4b1c      	ldr	r3, [pc, #112]	; (8009e48 <_putc_r+0x84>)
 8009dd8:	429c      	cmp	r4, r3
 8009dda:	d124      	bne.n	8009e26 <_putc_r+0x62>
 8009ddc:	6874      	ldr	r4, [r6, #4]
 8009dde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009de0:	07d8      	lsls	r0, r3, #31
 8009de2:	d405      	bmi.n	8009df0 <_putc_r+0x2c>
 8009de4:	89a3      	ldrh	r3, [r4, #12]
 8009de6:	0599      	lsls	r1, r3, #22
 8009de8:	d402      	bmi.n	8009df0 <_putc_r+0x2c>
 8009dea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dec:	f7ff f84b 	bl	8008e86 <__retarget_lock_acquire_recursive>
 8009df0:	68a3      	ldr	r3, [r4, #8]
 8009df2:	3b01      	subs	r3, #1
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	60a3      	str	r3, [r4, #8]
 8009df8:	da05      	bge.n	8009e06 <_putc_r+0x42>
 8009dfa:	69a2      	ldr	r2, [r4, #24]
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	db1c      	blt.n	8009e3a <_putc_r+0x76>
 8009e00:	b2eb      	uxtb	r3, r5
 8009e02:	2b0a      	cmp	r3, #10
 8009e04:	d019      	beq.n	8009e3a <_putc_r+0x76>
 8009e06:	6823      	ldr	r3, [r4, #0]
 8009e08:	1c5a      	adds	r2, r3, #1
 8009e0a:	6022      	str	r2, [r4, #0]
 8009e0c:	701d      	strb	r5, [r3, #0]
 8009e0e:	b2ed      	uxtb	r5, r5
 8009e10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e12:	07da      	lsls	r2, r3, #31
 8009e14:	d405      	bmi.n	8009e22 <_putc_r+0x5e>
 8009e16:	89a3      	ldrh	r3, [r4, #12]
 8009e18:	059b      	lsls	r3, r3, #22
 8009e1a:	d402      	bmi.n	8009e22 <_putc_r+0x5e>
 8009e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e1e:	f7ff f833 	bl	8008e88 <__retarget_lock_release_recursive>
 8009e22:	4628      	mov	r0, r5
 8009e24:	bd70      	pop	{r4, r5, r6, pc}
 8009e26:	4b09      	ldr	r3, [pc, #36]	; (8009e4c <_putc_r+0x88>)
 8009e28:	429c      	cmp	r4, r3
 8009e2a:	d101      	bne.n	8009e30 <_putc_r+0x6c>
 8009e2c:	68b4      	ldr	r4, [r6, #8]
 8009e2e:	e7d6      	b.n	8009dde <_putc_r+0x1a>
 8009e30:	4b07      	ldr	r3, [pc, #28]	; (8009e50 <_putc_r+0x8c>)
 8009e32:	429c      	cmp	r4, r3
 8009e34:	bf08      	it	eq
 8009e36:	68f4      	ldreq	r4, [r6, #12]
 8009e38:	e7d1      	b.n	8009dde <_putc_r+0x1a>
 8009e3a:	4629      	mov	r1, r5
 8009e3c:	4622      	mov	r2, r4
 8009e3e:	4630      	mov	r0, r6
 8009e40:	f7fd ffaa 	bl	8007d98 <__swbuf_r>
 8009e44:	4605      	mov	r5, r0
 8009e46:	e7e3      	b.n	8009e10 <_putc_r+0x4c>
 8009e48:	0800a710 	.word	0x0800a710
 8009e4c:	0800a730 	.word	0x0800a730
 8009e50:	0800a6f0 	.word	0x0800a6f0

08009e54 <_sbrk_r>:
 8009e54:	b538      	push	{r3, r4, r5, lr}
 8009e56:	4d06      	ldr	r5, [pc, #24]	; (8009e70 <_sbrk_r+0x1c>)
 8009e58:	2300      	movs	r3, #0
 8009e5a:	4604      	mov	r4, r0
 8009e5c:	4608      	mov	r0, r1
 8009e5e:	602b      	str	r3, [r5, #0]
 8009e60:	f7f6 ff28 	bl	8000cb4 <_sbrk>
 8009e64:	1c43      	adds	r3, r0, #1
 8009e66:	d102      	bne.n	8009e6e <_sbrk_r+0x1a>
 8009e68:	682b      	ldr	r3, [r5, #0]
 8009e6a:	b103      	cbz	r3, 8009e6e <_sbrk_r+0x1a>
 8009e6c:	6023      	str	r3, [r4, #0]
 8009e6e:	bd38      	pop	{r3, r4, r5, pc}
 8009e70:	240684f0 	.word	0x240684f0

08009e74 <__sread>:
 8009e74:	b510      	push	{r4, lr}
 8009e76:	460c      	mov	r4, r1
 8009e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e7c:	f000 f92c 	bl	800a0d8 <_read_r>
 8009e80:	2800      	cmp	r0, #0
 8009e82:	bfab      	itete	ge
 8009e84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e86:	89a3      	ldrhlt	r3, [r4, #12]
 8009e88:	181b      	addge	r3, r3, r0
 8009e8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e8e:	bfac      	ite	ge
 8009e90:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e92:	81a3      	strhlt	r3, [r4, #12]
 8009e94:	bd10      	pop	{r4, pc}

08009e96 <__swrite>:
 8009e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e9a:	461f      	mov	r7, r3
 8009e9c:	898b      	ldrh	r3, [r1, #12]
 8009e9e:	05db      	lsls	r3, r3, #23
 8009ea0:	4605      	mov	r5, r0
 8009ea2:	460c      	mov	r4, r1
 8009ea4:	4616      	mov	r6, r2
 8009ea6:	d505      	bpl.n	8009eb4 <__swrite+0x1e>
 8009ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eac:	2302      	movs	r3, #2
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f000 f898 	bl	8009fe4 <_lseek_r>
 8009eb4:	89a3      	ldrh	r3, [r4, #12]
 8009eb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009eba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ebe:	81a3      	strh	r3, [r4, #12]
 8009ec0:	4632      	mov	r2, r6
 8009ec2:	463b      	mov	r3, r7
 8009ec4:	4628      	mov	r0, r5
 8009ec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eca:	f000 b817 	b.w	8009efc <_write_r>

08009ece <__sseek>:
 8009ece:	b510      	push	{r4, lr}
 8009ed0:	460c      	mov	r4, r1
 8009ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ed6:	f000 f885 	bl	8009fe4 <_lseek_r>
 8009eda:	1c43      	adds	r3, r0, #1
 8009edc:	89a3      	ldrh	r3, [r4, #12]
 8009ede:	bf15      	itete	ne
 8009ee0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ee2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ee6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009eea:	81a3      	strheq	r3, [r4, #12]
 8009eec:	bf18      	it	ne
 8009eee:	81a3      	strhne	r3, [r4, #12]
 8009ef0:	bd10      	pop	{r4, pc}

08009ef2 <__sclose>:
 8009ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ef6:	f000 b831 	b.w	8009f5c <_close_r>
	...

08009efc <_write_r>:
 8009efc:	b538      	push	{r3, r4, r5, lr}
 8009efe:	4d07      	ldr	r5, [pc, #28]	; (8009f1c <_write_r+0x20>)
 8009f00:	4604      	mov	r4, r0
 8009f02:	4608      	mov	r0, r1
 8009f04:	4611      	mov	r1, r2
 8009f06:	2200      	movs	r2, #0
 8009f08:	602a      	str	r2, [r5, #0]
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	f7f6 fbfa 	bl	8000704 <_write>
 8009f10:	1c43      	adds	r3, r0, #1
 8009f12:	d102      	bne.n	8009f1a <_write_r+0x1e>
 8009f14:	682b      	ldr	r3, [r5, #0]
 8009f16:	b103      	cbz	r3, 8009f1a <_write_r+0x1e>
 8009f18:	6023      	str	r3, [r4, #0]
 8009f1a:	bd38      	pop	{r3, r4, r5, pc}
 8009f1c:	240684f0 	.word	0x240684f0

08009f20 <__assert_func>:
 8009f20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f22:	4614      	mov	r4, r2
 8009f24:	461a      	mov	r2, r3
 8009f26:	4b09      	ldr	r3, [pc, #36]	; (8009f4c <__assert_func+0x2c>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4605      	mov	r5, r0
 8009f2c:	68d8      	ldr	r0, [r3, #12]
 8009f2e:	b14c      	cbz	r4, 8009f44 <__assert_func+0x24>
 8009f30:	4b07      	ldr	r3, [pc, #28]	; (8009f50 <__assert_func+0x30>)
 8009f32:	9100      	str	r1, [sp, #0]
 8009f34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f38:	4906      	ldr	r1, [pc, #24]	; (8009f54 <__assert_func+0x34>)
 8009f3a:	462b      	mov	r3, r5
 8009f3c:	f000 f81e 	bl	8009f7c <fiprintf>
 8009f40:	f000 f8e9 	bl	800a116 <abort>
 8009f44:	4b04      	ldr	r3, [pc, #16]	; (8009f58 <__assert_func+0x38>)
 8009f46:	461c      	mov	r4, r3
 8009f48:	e7f3      	b.n	8009f32 <__assert_func+0x12>
 8009f4a:	bf00      	nop
 8009f4c:	2404e2dc 	.word	0x2404e2dc
 8009f50:	0800a8bd 	.word	0x0800a8bd
 8009f54:	0800a8ca 	.word	0x0800a8ca
 8009f58:	0800a8f8 	.word	0x0800a8f8

08009f5c <_close_r>:
 8009f5c:	b538      	push	{r3, r4, r5, lr}
 8009f5e:	4d06      	ldr	r5, [pc, #24]	; (8009f78 <_close_r+0x1c>)
 8009f60:	2300      	movs	r3, #0
 8009f62:	4604      	mov	r4, r0
 8009f64:	4608      	mov	r0, r1
 8009f66:	602b      	str	r3, [r5, #0]
 8009f68:	f7f6 fe96 	bl	8000c98 <_close>
 8009f6c:	1c43      	adds	r3, r0, #1
 8009f6e:	d102      	bne.n	8009f76 <_close_r+0x1a>
 8009f70:	682b      	ldr	r3, [r5, #0]
 8009f72:	b103      	cbz	r3, 8009f76 <_close_r+0x1a>
 8009f74:	6023      	str	r3, [r4, #0]
 8009f76:	bd38      	pop	{r3, r4, r5, pc}
 8009f78:	240684f0 	.word	0x240684f0

08009f7c <fiprintf>:
 8009f7c:	b40e      	push	{r1, r2, r3}
 8009f7e:	b503      	push	{r0, r1, lr}
 8009f80:	4601      	mov	r1, r0
 8009f82:	ab03      	add	r3, sp, #12
 8009f84:	4805      	ldr	r0, [pc, #20]	; (8009f9c <fiprintf+0x20>)
 8009f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f8a:	6800      	ldr	r0, [r0, #0]
 8009f8c:	9301      	str	r3, [sp, #4]
 8009f8e:	f7ff fde9 	bl	8009b64 <_vfiprintf_r>
 8009f92:	b002      	add	sp, #8
 8009f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f98:	b003      	add	sp, #12
 8009f9a:	4770      	bx	lr
 8009f9c:	2404e2dc 	.word	0x2404e2dc

08009fa0 <_fstat_r>:
 8009fa0:	b538      	push	{r3, r4, r5, lr}
 8009fa2:	4d07      	ldr	r5, [pc, #28]	; (8009fc0 <_fstat_r+0x20>)
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	4604      	mov	r4, r0
 8009fa8:	4608      	mov	r0, r1
 8009faa:	4611      	mov	r1, r2
 8009fac:	602b      	str	r3, [r5, #0]
 8009fae:	f7f6 fe77 	bl	8000ca0 <_fstat>
 8009fb2:	1c43      	adds	r3, r0, #1
 8009fb4:	d102      	bne.n	8009fbc <_fstat_r+0x1c>
 8009fb6:	682b      	ldr	r3, [r5, #0]
 8009fb8:	b103      	cbz	r3, 8009fbc <_fstat_r+0x1c>
 8009fba:	6023      	str	r3, [r4, #0]
 8009fbc:	bd38      	pop	{r3, r4, r5, pc}
 8009fbe:	bf00      	nop
 8009fc0:	240684f0 	.word	0x240684f0

08009fc4 <_isatty_r>:
 8009fc4:	b538      	push	{r3, r4, r5, lr}
 8009fc6:	4d06      	ldr	r5, [pc, #24]	; (8009fe0 <_isatty_r+0x1c>)
 8009fc8:	2300      	movs	r3, #0
 8009fca:	4604      	mov	r4, r0
 8009fcc:	4608      	mov	r0, r1
 8009fce:	602b      	str	r3, [r5, #0]
 8009fd0:	f7f6 fe6c 	bl	8000cac <_isatty>
 8009fd4:	1c43      	adds	r3, r0, #1
 8009fd6:	d102      	bne.n	8009fde <_isatty_r+0x1a>
 8009fd8:	682b      	ldr	r3, [r5, #0]
 8009fda:	b103      	cbz	r3, 8009fde <_isatty_r+0x1a>
 8009fdc:	6023      	str	r3, [r4, #0]
 8009fde:	bd38      	pop	{r3, r4, r5, pc}
 8009fe0:	240684f0 	.word	0x240684f0

08009fe4 <_lseek_r>:
 8009fe4:	b538      	push	{r3, r4, r5, lr}
 8009fe6:	4d07      	ldr	r5, [pc, #28]	; (800a004 <_lseek_r+0x20>)
 8009fe8:	4604      	mov	r4, r0
 8009fea:	4608      	mov	r0, r1
 8009fec:	4611      	mov	r1, r2
 8009fee:	2200      	movs	r2, #0
 8009ff0:	602a      	str	r2, [r5, #0]
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	f7f6 fe5c 	bl	8000cb0 <_lseek>
 8009ff8:	1c43      	adds	r3, r0, #1
 8009ffa:	d102      	bne.n	800a002 <_lseek_r+0x1e>
 8009ffc:	682b      	ldr	r3, [r5, #0]
 8009ffe:	b103      	cbz	r3, 800a002 <_lseek_r+0x1e>
 800a000:	6023      	str	r3, [r4, #0]
 800a002:	bd38      	pop	{r3, r4, r5, pc}
 800a004:	240684f0 	.word	0x240684f0

0800a008 <__ascii_mbtowc>:
 800a008:	b082      	sub	sp, #8
 800a00a:	b901      	cbnz	r1, 800a00e <__ascii_mbtowc+0x6>
 800a00c:	a901      	add	r1, sp, #4
 800a00e:	b142      	cbz	r2, 800a022 <__ascii_mbtowc+0x1a>
 800a010:	b14b      	cbz	r3, 800a026 <__ascii_mbtowc+0x1e>
 800a012:	7813      	ldrb	r3, [r2, #0]
 800a014:	600b      	str	r3, [r1, #0]
 800a016:	7812      	ldrb	r2, [r2, #0]
 800a018:	1e10      	subs	r0, r2, #0
 800a01a:	bf18      	it	ne
 800a01c:	2001      	movne	r0, #1
 800a01e:	b002      	add	sp, #8
 800a020:	4770      	bx	lr
 800a022:	4610      	mov	r0, r2
 800a024:	e7fb      	b.n	800a01e <__ascii_mbtowc+0x16>
 800a026:	f06f 0001 	mvn.w	r0, #1
 800a02a:	e7f8      	b.n	800a01e <__ascii_mbtowc+0x16>

0800a02c <memmove>:
 800a02c:	4288      	cmp	r0, r1
 800a02e:	b510      	push	{r4, lr}
 800a030:	eb01 0402 	add.w	r4, r1, r2
 800a034:	d902      	bls.n	800a03c <memmove+0x10>
 800a036:	4284      	cmp	r4, r0
 800a038:	4623      	mov	r3, r4
 800a03a:	d807      	bhi.n	800a04c <memmove+0x20>
 800a03c:	1e43      	subs	r3, r0, #1
 800a03e:	42a1      	cmp	r1, r4
 800a040:	d008      	beq.n	800a054 <memmove+0x28>
 800a042:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a046:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a04a:	e7f8      	b.n	800a03e <memmove+0x12>
 800a04c:	4402      	add	r2, r0
 800a04e:	4601      	mov	r1, r0
 800a050:	428a      	cmp	r2, r1
 800a052:	d100      	bne.n	800a056 <memmove+0x2a>
 800a054:	bd10      	pop	{r4, pc}
 800a056:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a05a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a05e:	e7f7      	b.n	800a050 <memmove+0x24>

0800a060 <__malloc_lock>:
 800a060:	4801      	ldr	r0, [pc, #4]	; (800a068 <__malloc_lock+0x8>)
 800a062:	f7fe bf10 	b.w	8008e86 <__retarget_lock_acquire_recursive>
 800a066:	bf00      	nop
 800a068:	240684e4 	.word	0x240684e4

0800a06c <__malloc_unlock>:
 800a06c:	4801      	ldr	r0, [pc, #4]	; (800a074 <__malloc_unlock+0x8>)
 800a06e:	f7fe bf0b 	b.w	8008e88 <__retarget_lock_release_recursive>
 800a072:	bf00      	nop
 800a074:	240684e4 	.word	0x240684e4

0800a078 <_realloc_r>:
 800a078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a07c:	4680      	mov	r8, r0
 800a07e:	4614      	mov	r4, r2
 800a080:	460e      	mov	r6, r1
 800a082:	b921      	cbnz	r1, 800a08e <_realloc_r+0x16>
 800a084:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a088:	4611      	mov	r1, r2
 800a08a:	f7ff bb71 	b.w	8009770 <_malloc_r>
 800a08e:	b92a      	cbnz	r2, 800a09c <_realloc_r+0x24>
 800a090:	f7ff fb02 	bl	8009698 <_free_r>
 800a094:	4625      	mov	r5, r4
 800a096:	4628      	mov	r0, r5
 800a098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a09c:	f000 f842 	bl	800a124 <_malloc_usable_size_r>
 800a0a0:	4284      	cmp	r4, r0
 800a0a2:	4607      	mov	r7, r0
 800a0a4:	d802      	bhi.n	800a0ac <_realloc_r+0x34>
 800a0a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a0aa:	d812      	bhi.n	800a0d2 <_realloc_r+0x5a>
 800a0ac:	4621      	mov	r1, r4
 800a0ae:	4640      	mov	r0, r8
 800a0b0:	f7ff fb5e 	bl	8009770 <_malloc_r>
 800a0b4:	4605      	mov	r5, r0
 800a0b6:	2800      	cmp	r0, #0
 800a0b8:	d0ed      	beq.n	800a096 <_realloc_r+0x1e>
 800a0ba:	42bc      	cmp	r4, r7
 800a0bc:	4622      	mov	r2, r4
 800a0be:	4631      	mov	r1, r6
 800a0c0:	bf28      	it	cs
 800a0c2:	463a      	movcs	r2, r7
 800a0c4:	f7fd f940 	bl	8007348 <memcpy>
 800a0c8:	4631      	mov	r1, r6
 800a0ca:	4640      	mov	r0, r8
 800a0cc:	f7ff fae4 	bl	8009698 <_free_r>
 800a0d0:	e7e1      	b.n	800a096 <_realloc_r+0x1e>
 800a0d2:	4635      	mov	r5, r6
 800a0d4:	e7df      	b.n	800a096 <_realloc_r+0x1e>
	...

0800a0d8 <_read_r>:
 800a0d8:	b538      	push	{r3, r4, r5, lr}
 800a0da:	4d07      	ldr	r5, [pc, #28]	; (800a0f8 <_read_r+0x20>)
 800a0dc:	4604      	mov	r4, r0
 800a0de:	4608      	mov	r0, r1
 800a0e0:	4611      	mov	r1, r2
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	602a      	str	r2, [r5, #0]
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	f7f6 fdc8 	bl	8000c7c <_read>
 800a0ec:	1c43      	adds	r3, r0, #1
 800a0ee:	d102      	bne.n	800a0f6 <_read_r+0x1e>
 800a0f0:	682b      	ldr	r3, [r5, #0]
 800a0f2:	b103      	cbz	r3, 800a0f6 <_read_r+0x1e>
 800a0f4:	6023      	str	r3, [r4, #0]
 800a0f6:	bd38      	pop	{r3, r4, r5, pc}
 800a0f8:	240684f0 	.word	0x240684f0

0800a0fc <__ascii_wctomb>:
 800a0fc:	b149      	cbz	r1, 800a112 <__ascii_wctomb+0x16>
 800a0fe:	2aff      	cmp	r2, #255	; 0xff
 800a100:	bf85      	ittet	hi
 800a102:	238a      	movhi	r3, #138	; 0x8a
 800a104:	6003      	strhi	r3, [r0, #0]
 800a106:	700a      	strbls	r2, [r1, #0]
 800a108:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a10c:	bf98      	it	ls
 800a10e:	2001      	movls	r0, #1
 800a110:	4770      	bx	lr
 800a112:	4608      	mov	r0, r1
 800a114:	4770      	bx	lr

0800a116 <abort>:
 800a116:	b508      	push	{r3, lr}
 800a118:	2006      	movs	r0, #6
 800a11a:	f000 f833 	bl	800a184 <raise>
 800a11e:	2001      	movs	r0, #1
 800a120:	f7f6 fda6 	bl	8000c70 <_exit>

0800a124 <_malloc_usable_size_r>:
 800a124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a128:	1f18      	subs	r0, r3, #4
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	bfbc      	itt	lt
 800a12e:	580b      	ldrlt	r3, [r1, r0]
 800a130:	18c0      	addlt	r0, r0, r3
 800a132:	4770      	bx	lr

0800a134 <_raise_r>:
 800a134:	291f      	cmp	r1, #31
 800a136:	b538      	push	{r3, r4, r5, lr}
 800a138:	4604      	mov	r4, r0
 800a13a:	460d      	mov	r5, r1
 800a13c:	d904      	bls.n	800a148 <_raise_r+0x14>
 800a13e:	2316      	movs	r3, #22
 800a140:	6003      	str	r3, [r0, #0]
 800a142:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a146:	bd38      	pop	{r3, r4, r5, pc}
 800a148:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a14a:	b112      	cbz	r2, 800a152 <_raise_r+0x1e>
 800a14c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a150:	b94b      	cbnz	r3, 800a166 <_raise_r+0x32>
 800a152:	4620      	mov	r0, r4
 800a154:	f000 f830 	bl	800a1b8 <_getpid_r>
 800a158:	462a      	mov	r2, r5
 800a15a:	4601      	mov	r1, r0
 800a15c:	4620      	mov	r0, r4
 800a15e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a162:	f000 b817 	b.w	800a194 <_kill_r>
 800a166:	2b01      	cmp	r3, #1
 800a168:	d00a      	beq.n	800a180 <_raise_r+0x4c>
 800a16a:	1c59      	adds	r1, r3, #1
 800a16c:	d103      	bne.n	800a176 <_raise_r+0x42>
 800a16e:	2316      	movs	r3, #22
 800a170:	6003      	str	r3, [r0, #0]
 800a172:	2001      	movs	r0, #1
 800a174:	e7e7      	b.n	800a146 <_raise_r+0x12>
 800a176:	2400      	movs	r4, #0
 800a178:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a17c:	4628      	mov	r0, r5
 800a17e:	4798      	blx	r3
 800a180:	2000      	movs	r0, #0
 800a182:	e7e0      	b.n	800a146 <_raise_r+0x12>

0800a184 <raise>:
 800a184:	4b02      	ldr	r3, [pc, #8]	; (800a190 <raise+0xc>)
 800a186:	4601      	mov	r1, r0
 800a188:	6818      	ldr	r0, [r3, #0]
 800a18a:	f7ff bfd3 	b.w	800a134 <_raise_r>
 800a18e:	bf00      	nop
 800a190:	2404e2dc 	.word	0x2404e2dc

0800a194 <_kill_r>:
 800a194:	b538      	push	{r3, r4, r5, lr}
 800a196:	4d07      	ldr	r5, [pc, #28]	; (800a1b4 <_kill_r+0x20>)
 800a198:	2300      	movs	r3, #0
 800a19a:	4604      	mov	r4, r0
 800a19c:	4608      	mov	r0, r1
 800a19e:	4611      	mov	r1, r2
 800a1a0:	602b      	str	r3, [r5, #0]
 800a1a2:	f7f6 fd5b 	bl	8000c5c <_kill>
 800a1a6:	1c43      	adds	r3, r0, #1
 800a1a8:	d102      	bne.n	800a1b0 <_kill_r+0x1c>
 800a1aa:	682b      	ldr	r3, [r5, #0]
 800a1ac:	b103      	cbz	r3, 800a1b0 <_kill_r+0x1c>
 800a1ae:	6023      	str	r3, [r4, #0]
 800a1b0:	bd38      	pop	{r3, r4, r5, pc}
 800a1b2:	bf00      	nop
 800a1b4:	240684f0 	.word	0x240684f0

0800a1b8 <_getpid_r>:
 800a1b8:	f7f6 bd4e 	b.w	8000c58 <_getpid>
 800a1bc:	0000      	movs	r0, r0
	...

0800a1c0 <exp>:
 800a1c0:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 800a1c2:	ee10 3a90 	vmov	r3, s1
 800a1c6:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800a1ca:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800a1ce:	18a2      	adds	r2, r4, r2
 800a1d0:	2a3e      	cmp	r2, #62	; 0x3e
 800a1d2:	ee10 1a10 	vmov	r1, s0
 800a1d6:	d922      	bls.n	800a21e <exp+0x5e>
 800a1d8:	2a00      	cmp	r2, #0
 800a1da:	da06      	bge.n	800a1ea <exp+0x2a>
 800a1dc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800a1e0:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a1e4:	b004      	add	sp, #16
 800a1e6:	bcf0      	pop	{r4, r5, r6, r7}
 800a1e8:	4770      	bx	lr
 800a1ea:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 800a1ee:	f04f 0000 	mov.w	r0, #0
 800a1f2:	d913      	bls.n	800a21c <exp+0x5c>
 800a1f4:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 800a1f8:	bf08      	it	eq
 800a1fa:	4281      	cmpeq	r1, r0
 800a1fc:	f000 80a0 	beq.w	800a340 <exp+0x180>
 800a200:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a204:	4294      	cmp	r4, r2
 800a206:	d0e9      	beq.n	800a1dc <exp+0x1c>
 800a208:	4283      	cmp	r3, r0
 800a20a:	da03      	bge.n	800a214 <exp+0x54>
 800a20c:	b004      	add	sp, #16
 800a20e:	bcf0      	pop	{r4, r5, r6, r7}
 800a210:	f000 b8c6 	b.w	800a3a0 <__math_uflow>
 800a214:	b004      	add	sp, #16
 800a216:	bcf0      	pop	{r4, r5, r6, r7}
 800a218:	f000 b8ca 	b.w	800a3b0 <__math_oflow>
 800a21c:	4604      	mov	r4, r0
 800a21e:	4950      	ldr	r1, [pc, #320]	; (800a360 <exp+0x1a0>)
 800a220:	ed91 6b02 	vldr	d6, [r1, #8]
 800a224:	ed91 5b00 	vldr	d5, [r1]
 800a228:	eeb0 7b46 	vmov.f64	d7, d6
 800a22c:	eea5 7b00 	vfma.f64	d7, d5, d0
 800a230:	ee17 5a10 	vmov	r5, s14
 800a234:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a238:	ed91 6b04 	vldr	d6, [r1, #16]
 800a23c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800a240:	eea6 0b07 	vfma.f64	d0, d6, d7
 800a244:	ed91 6b06 	vldr	d6, [r1, #24]
 800a248:	18d8      	adds	r0, r3, r3
 800a24a:	f100 030f 	add.w	r3, r0, #15
 800a24e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800a252:	eea6 0b07 	vfma.f64	d0, d6, d7
 800a256:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 800a25a:	ee20 7b00 	vmul.f64	d7, d0, d0
 800a25e:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 800a262:	ed91 5b08 	vldr	d5, [r1, #32]
 800a266:	ee30 6b06 	vadd.f64	d6, d0, d6
 800a26a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800a26e:	eea4 5b00 	vfma.f64	d5, d4, d0
 800a272:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 800a276:	eea5 6b07 	vfma.f64	d6, d5, d7
 800a27a:	ee27 7b07 	vmul.f64	d7, d7, d7
 800a27e:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 800a282:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 800a286:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800a28a:	eea4 5b00 	vfma.f64	d5, d4, d0
 800a28e:	2600      	movs	r6, #0
 800a290:	19f2      	adds	r2, r6, r7
 800a292:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 800a296:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a29a:	2c00      	cmp	r4, #0
 800a29c:	d14b      	bne.n	800a336 <exp+0x176>
 800a29e:	42b5      	cmp	r5, r6
 800a2a0:	db10      	blt.n	800a2c4 <exp+0x104>
 800a2a2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800a2a6:	ed9f 7b28 	vldr	d7, [pc, #160]	; 800a348 <exp+0x188>
 800a2aa:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800a2ae:	4610      	mov	r0, r2
 800a2b0:	ec41 0b10 	vmov	d0, r0, r1
 800a2b4:	eea6 0b00 	vfma.f64	d0, d6, d0
 800a2b8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a2bc:	b004      	add	sp, #16
 800a2be:	bcf0      	pop	{r4, r5, r6, r7}
 800a2c0:	f000 b88a 	b.w	800a3d8 <__math_check_oflow>
 800a2c4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800a2c8:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800a2cc:	4610      	mov	r0, r2
 800a2ce:	ec41 0b17 	vmov	d7, r0, r1
 800a2d2:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800a2d6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a2da:	ee37 5b06 	vadd.f64	d5, d7, d6
 800a2de:	eeb4 5bc4 	vcmpe.f64	d5, d4
 800a2e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2e6:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800a350 <exp+0x190>
 800a2ea:	d51e      	bpl.n	800a32a <exp+0x16a>
 800a2ec:	ee35 3b04 	vadd.f64	d3, d5, d4
 800a2f0:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a2f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a2f8:	ee34 6b43 	vsub.f64	d6, d4, d3
 800a2fc:	ee36 5b05 	vadd.f64	d5, d6, d5
 800a300:	ee35 5b07 	vadd.f64	d5, d5, d7
 800a304:	ee35 5b03 	vadd.f64	d5, d5, d3
 800a308:	ee35 5b44 	vsub.f64	d5, d5, d4
 800a30c:	eeb5 5b40 	vcmp.f64	d5, #0.0
 800a310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a314:	d101      	bne.n	800a31a <exp+0x15a>
 800a316:	ed9f 5b10 	vldr	d5, [pc, #64]	; 800a358 <exp+0x198>
 800a31a:	ed8d 0b00 	vstr	d0, [sp]
 800a31e:	ed9d 7b00 	vldr	d7, [sp]
 800a322:	ee27 7b00 	vmul.f64	d7, d7, d0
 800a326:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a32a:	ee25 0b00 	vmul.f64	d0, d5, d0
 800a32e:	b004      	add	sp, #16
 800a330:	bcf0      	pop	{r4, r5, r6, r7}
 800a332:	f000 b845 	b.w	800a3c0 <__math_check_uflow>
 800a336:	ec43 2b10 	vmov	d0, r2, r3
 800a33a:	eea6 0b00 	vfma.f64	d0, d6, d0
 800a33e:	e751      	b.n	800a1e4 <exp+0x24>
 800a340:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800a358 <exp+0x198>
 800a344:	e74e      	b.n	800a1e4 <exp+0x24>
 800a346:	bf00      	nop
 800a348:	00000000 	.word	0x00000000
 800a34c:	7f000000 	.word	0x7f000000
 800a350:	00000000 	.word	0x00000000
 800a354:	00100000 	.word	0x00100000
	...
 800a360:	0800aa08 	.word	0x0800aa08

0800a364 <with_errno>:
 800a364:	b513      	push	{r0, r1, r4, lr}
 800a366:	4604      	mov	r4, r0
 800a368:	ed8d 0b00 	vstr	d0, [sp]
 800a36c:	f7fc ffc2 	bl	80072f4 <__errno>
 800a370:	ed9d 0b00 	vldr	d0, [sp]
 800a374:	6004      	str	r4, [r0, #0]
 800a376:	b002      	add	sp, #8
 800a378:	bd10      	pop	{r4, pc}

0800a37a <xflow>:
 800a37a:	b082      	sub	sp, #8
 800a37c:	b158      	cbz	r0, 800a396 <xflow+0x1c>
 800a37e:	eeb1 7b40 	vneg.f64	d7, d0
 800a382:	ed8d 7b00 	vstr	d7, [sp]
 800a386:	ed9d 7b00 	vldr	d7, [sp]
 800a38a:	2022      	movs	r0, #34	; 0x22
 800a38c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a390:	b002      	add	sp, #8
 800a392:	f7ff bfe7 	b.w	800a364 <with_errno>
 800a396:	eeb0 7b40 	vmov.f64	d7, d0
 800a39a:	e7f2      	b.n	800a382 <xflow+0x8>
 800a39c:	0000      	movs	r0, r0
	...

0800a3a0 <__math_uflow>:
 800a3a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a3a8 <__math_uflow+0x8>
 800a3a4:	f7ff bfe9 	b.w	800a37a <xflow>
 800a3a8:	00000000 	.word	0x00000000
 800a3ac:	10000000 	.word	0x10000000

0800a3b0 <__math_oflow>:
 800a3b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a3b8 <__math_oflow+0x8>
 800a3b4:	f7ff bfe1 	b.w	800a37a <xflow>
 800a3b8:	00000000 	.word	0x00000000
 800a3bc:	70000000 	.word	0x70000000

0800a3c0 <__math_check_uflow>:
 800a3c0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800a3c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3c8:	d102      	bne.n	800a3d0 <__math_check_uflow+0x10>
 800a3ca:	2022      	movs	r0, #34	; 0x22
 800a3cc:	f7ff bfca 	b.w	800a364 <with_errno>
 800a3d0:	4770      	bx	lr
 800a3d2:	0000      	movs	r0, r0
 800a3d4:	0000      	movs	r0, r0
	...

0800a3d8 <__math_check_oflow>:
 800a3d8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800a3f8 <__math_check_oflow+0x20>
 800a3dc:	eeb0 7bc0 	vabs.f64	d7, d0
 800a3e0:	eeb4 7b46 	vcmp.f64	d7, d6
 800a3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3e8:	dd02      	ble.n	800a3f0 <__math_check_oflow+0x18>
 800a3ea:	2022      	movs	r0, #34	; 0x22
 800a3ec:	f7ff bfba 	b.w	800a364 <with_errno>
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	f3af 8000 	nop.w
 800a3f8:	ffffffff 	.word	0xffffffff
 800a3fc:	7fefffff 	.word	0x7fefffff

0800a400 <_init>:
 800a400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a402:	bf00      	nop
 800a404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a406:	bc08      	pop	{r3}
 800a408:	469e      	mov	lr, r3
 800a40a:	4770      	bx	lr

0800a40c <_fini>:
 800a40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a40e:	bf00      	nop
 800a410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a412:	bc08      	pop	{r3}
 800a414:	469e      	mov	lr, r3
 800a416:	4770      	bx	lr
