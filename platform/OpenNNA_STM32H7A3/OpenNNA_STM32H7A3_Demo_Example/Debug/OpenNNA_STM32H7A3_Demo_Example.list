
OpenNNA_STM32H7A3_Demo_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086e0  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017a8  08008990  08008990  00018990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a138  0800a138  0001a138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a140  0800a140  0001a140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a144  0800a144  0001a144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000244  24000000  0800a148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000fae1c  24000244  0800a38c  00020244  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240fb060  0800a38c  0002b060  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 10 .debug_info   000245ee  00000000  00000000  00020272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004e49  00000000  00000000  00044860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00014c6a  00000000  00000000  000496a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001318  00000000  00000000  0005e318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002478  00000000  00000000  0005f630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000058b7  00000000  00000000  00061aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002278d  00000000  00000000  0006735f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013fb4b  00000000  00000000  00089aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  001c9637  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000046a8  00000000  00000000  001c9688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000244 	.word	0x24000244
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08008978 	.word	0x08008978

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000248 	.word	0x24000248
 80002ec:	08008978 	.word	0x08008978

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr

08000304 <strlen>:
 8000304:	4603      	mov	r3, r0
 8000306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800030a:	2a00      	cmp	r2, #0
 800030c:	d1fb      	bne.n	8000306 <strlen+0x2>
 800030e:	1a18      	subs	r0, r3, r0
 8000310:	3801      	subs	r0, #1
 8000312:	4770      	bx	lr
	...

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b974 	b.w	80006c0 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468e      	mov	lr, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d14d      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fe:	428a      	cmp	r2, r1
 8000400:	4694      	mov	ip, r2
 8000402:	d969      	bls.n	80004d8 <__udivmoddi4+0xe8>
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	b152      	cbz	r2, 8000420 <__udivmoddi4+0x30>
 800040a:	fa01 f302 	lsl.w	r3, r1, r2
 800040e:	f1c2 0120 	rsb	r1, r2, #32
 8000412:	fa20 f101 	lsr.w	r1, r0, r1
 8000416:	fa0c fc02 	lsl.w	ip, ip, r2
 800041a:	ea41 0e03 	orr.w	lr, r1, r3
 800041e:	4094      	lsls	r4, r2
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	0c21      	lsrs	r1, r4, #16
 8000426:	fbbe f6f8 	udiv	r6, lr, r8
 800042a:	fa1f f78c 	uxth.w	r7, ip
 800042e:	fb08 e316 	mls	r3, r8, r6, lr
 8000432:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000436:	fb06 f107 	mul.w	r1, r6, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f106 30ff 	add.w	r0, r6, #4294967295
 8000446:	f080 811f 	bcs.w	8000688 <__udivmoddi4+0x298>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 811c 	bls.w	8000688 <__udivmoddi4+0x298>
 8000450:	3e02      	subs	r6, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3310 	mls	r3, r8, r0, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb00 f707 	mul.w	r7, r0, r7
 8000468:	42a7      	cmp	r7, r4
 800046a:	d90a      	bls.n	8000482 <__udivmoddi4+0x92>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f100 33ff 	add.w	r3, r0, #4294967295
 8000474:	f080 810a 	bcs.w	800068c <__udivmoddi4+0x29c>
 8000478:	42a7      	cmp	r7, r4
 800047a:	f240 8107 	bls.w	800068c <__udivmoddi4+0x29c>
 800047e:	4464      	add	r4, ip
 8000480:	3802      	subs	r0, #2
 8000482:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000486:	1be4      	subs	r4, r4, r7
 8000488:	2600      	movs	r6, #0
 800048a:	b11d      	cbz	r5, 8000494 <__udivmoddi4+0xa4>
 800048c:	40d4      	lsrs	r4, r2
 800048e:	2300      	movs	r3, #0
 8000490:	e9c5 4300 	strd	r4, r3, [r5]
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d909      	bls.n	80004b2 <__udivmoddi4+0xc2>
 800049e:	2d00      	cmp	r5, #0
 80004a0:	f000 80ef 	beq.w	8000682 <__udivmoddi4+0x292>
 80004a4:	2600      	movs	r6, #0
 80004a6:	e9c5 0100 	strd	r0, r1, [r5]
 80004aa:	4630      	mov	r0, r6
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	fab3 f683 	clz	r6, r3
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	d14a      	bne.n	8000550 <__udivmoddi4+0x160>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d302      	bcc.n	80004c4 <__udivmoddi4+0xd4>
 80004be:	4282      	cmp	r2, r0
 80004c0:	f200 80f9 	bhi.w	80006b6 <__udivmoddi4+0x2c6>
 80004c4:	1a84      	subs	r4, r0, r2
 80004c6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ca:	2001      	movs	r0, #1
 80004cc:	469e      	mov	lr, r3
 80004ce:	2d00      	cmp	r5, #0
 80004d0:	d0e0      	beq.n	8000494 <__udivmoddi4+0xa4>
 80004d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004d6:	e7dd      	b.n	8000494 <__udivmoddi4+0xa4>
 80004d8:	b902      	cbnz	r2, 80004dc <__udivmoddi4+0xec>
 80004da:	deff      	udf	#255	; 0xff
 80004dc:	fab2 f282 	clz	r2, r2
 80004e0:	2a00      	cmp	r2, #0
 80004e2:	f040 8092 	bne.w	800060a <__udivmoddi4+0x21a>
 80004e6:	eba1 010c 	sub.w	r1, r1, ip
 80004ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ee:	fa1f fe8c 	uxth.w	lr, ip
 80004f2:	2601      	movs	r6, #1
 80004f4:	0c20      	lsrs	r0, r4, #16
 80004f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004fa:	fb07 1113 	mls	r1, r7, r3, r1
 80004fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000502:	fb0e f003 	mul.w	r0, lr, r3
 8000506:	4288      	cmp	r0, r1
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x12c>
 800050a:	eb1c 0101 	adds.w	r1, ip, r1
 800050e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x12a>
 8000514:	4288      	cmp	r0, r1
 8000516:	f200 80cb 	bhi.w	80006b0 <__udivmoddi4+0x2c0>
 800051a:	4643      	mov	r3, r8
 800051c:	1a09      	subs	r1, r1, r0
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb1 f0f7 	udiv	r0, r1, r7
 8000524:	fb07 1110 	mls	r1, r7, r0, r1
 8000528:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800052c:	fb0e fe00 	mul.w	lr, lr, r0
 8000530:	45a6      	cmp	lr, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x156>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f100 31ff 	add.w	r1, r0, #4294967295
 800053c:	d202      	bcs.n	8000544 <__udivmoddi4+0x154>
 800053e:	45a6      	cmp	lr, r4
 8000540:	f200 80bb 	bhi.w	80006ba <__udivmoddi4+0x2ca>
 8000544:	4608      	mov	r0, r1
 8000546:	eba4 040e 	sub.w	r4, r4, lr
 800054a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x9a>
 8000550:	f1c6 0720 	rsb	r7, r6, #32
 8000554:	40b3      	lsls	r3, r6
 8000556:	fa22 fc07 	lsr.w	ip, r2, r7
 800055a:	ea4c 0c03 	orr.w	ip, ip, r3
 800055e:	fa20 f407 	lsr.w	r4, r0, r7
 8000562:	fa01 f306 	lsl.w	r3, r1, r6
 8000566:	431c      	orrs	r4, r3
 8000568:	40f9      	lsrs	r1, r7
 800056a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800056e:	fa00 f306 	lsl.w	r3, r0, r6
 8000572:	fbb1 f8f9 	udiv	r8, r1, r9
 8000576:	0c20      	lsrs	r0, r4, #16
 8000578:	fa1f fe8c 	uxth.w	lr, ip
 800057c:	fb09 1118 	mls	r1, r9, r8, r1
 8000580:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000584:	fb08 f00e 	mul.w	r0, r8, lr
 8000588:	4288      	cmp	r0, r1
 800058a:	fa02 f206 	lsl.w	r2, r2, r6
 800058e:	d90b      	bls.n	80005a8 <__udivmoddi4+0x1b8>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f108 3aff 	add.w	sl, r8, #4294967295
 8000598:	f080 8088 	bcs.w	80006ac <__udivmoddi4+0x2bc>
 800059c:	4288      	cmp	r0, r1
 800059e:	f240 8085 	bls.w	80006ac <__udivmoddi4+0x2bc>
 80005a2:	f1a8 0802 	sub.w	r8, r8, #2
 80005a6:	4461      	add	r1, ip
 80005a8:	1a09      	subs	r1, r1, r0
 80005aa:	b2a4      	uxth	r4, r4
 80005ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80005b0:	fb09 1110 	mls	r1, r9, r0, r1
 80005b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005bc:	458e      	cmp	lr, r1
 80005be:	d908      	bls.n	80005d2 <__udivmoddi4+0x1e2>
 80005c0:	eb1c 0101 	adds.w	r1, ip, r1
 80005c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005c8:	d26c      	bcs.n	80006a4 <__udivmoddi4+0x2b4>
 80005ca:	458e      	cmp	lr, r1
 80005cc:	d96a      	bls.n	80006a4 <__udivmoddi4+0x2b4>
 80005ce:	3802      	subs	r0, #2
 80005d0:	4461      	add	r1, ip
 80005d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005d6:	fba0 9402 	umull	r9, r4, r0, r2
 80005da:	eba1 010e 	sub.w	r1, r1, lr
 80005de:	42a1      	cmp	r1, r4
 80005e0:	46c8      	mov	r8, r9
 80005e2:	46a6      	mov	lr, r4
 80005e4:	d356      	bcc.n	8000694 <__udivmoddi4+0x2a4>
 80005e6:	d053      	beq.n	8000690 <__udivmoddi4+0x2a0>
 80005e8:	b15d      	cbz	r5, 8000602 <__udivmoddi4+0x212>
 80005ea:	ebb3 0208 	subs.w	r2, r3, r8
 80005ee:	eb61 010e 	sbc.w	r1, r1, lr
 80005f2:	fa01 f707 	lsl.w	r7, r1, r7
 80005f6:	fa22 f306 	lsr.w	r3, r2, r6
 80005fa:	40f1      	lsrs	r1, r6
 80005fc:	431f      	orrs	r7, r3
 80005fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000602:	2600      	movs	r6, #0
 8000604:	4631      	mov	r1, r6
 8000606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	40d8      	lsrs	r0, r3
 8000610:	fa0c fc02 	lsl.w	ip, ip, r2
 8000614:	fa21 f303 	lsr.w	r3, r1, r3
 8000618:	4091      	lsls	r1, r2
 800061a:	4301      	orrs	r1, r0
 800061c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000620:	fa1f fe8c 	uxth.w	lr, ip
 8000624:	fbb3 f0f7 	udiv	r0, r3, r7
 8000628:	fb07 3610 	mls	r6, r7, r0, r3
 800062c:	0c0b      	lsrs	r3, r1, #16
 800062e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000632:	fb00 f60e 	mul.w	r6, r0, lr
 8000636:	429e      	cmp	r6, r3
 8000638:	fa04 f402 	lsl.w	r4, r4, r2
 800063c:	d908      	bls.n	8000650 <__udivmoddi4+0x260>
 800063e:	eb1c 0303 	adds.w	r3, ip, r3
 8000642:	f100 38ff 	add.w	r8, r0, #4294967295
 8000646:	d22f      	bcs.n	80006a8 <__udivmoddi4+0x2b8>
 8000648:	429e      	cmp	r6, r3
 800064a:	d92d      	bls.n	80006a8 <__udivmoddi4+0x2b8>
 800064c:	3802      	subs	r0, #2
 800064e:	4463      	add	r3, ip
 8000650:	1b9b      	subs	r3, r3, r6
 8000652:	b289      	uxth	r1, r1
 8000654:	fbb3 f6f7 	udiv	r6, r3, r7
 8000658:	fb07 3316 	mls	r3, r7, r6, r3
 800065c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000660:	fb06 f30e 	mul.w	r3, r6, lr
 8000664:	428b      	cmp	r3, r1
 8000666:	d908      	bls.n	800067a <__udivmoddi4+0x28a>
 8000668:	eb1c 0101 	adds.w	r1, ip, r1
 800066c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000670:	d216      	bcs.n	80006a0 <__udivmoddi4+0x2b0>
 8000672:	428b      	cmp	r3, r1
 8000674:	d914      	bls.n	80006a0 <__udivmoddi4+0x2b0>
 8000676:	3e02      	subs	r6, #2
 8000678:	4461      	add	r1, ip
 800067a:	1ac9      	subs	r1, r1, r3
 800067c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000680:	e738      	b.n	80004f4 <__udivmoddi4+0x104>
 8000682:	462e      	mov	r6, r5
 8000684:	4628      	mov	r0, r5
 8000686:	e705      	b.n	8000494 <__udivmoddi4+0xa4>
 8000688:	4606      	mov	r6, r0
 800068a:	e6e3      	b.n	8000454 <__udivmoddi4+0x64>
 800068c:	4618      	mov	r0, r3
 800068e:	e6f8      	b.n	8000482 <__udivmoddi4+0x92>
 8000690:	454b      	cmp	r3, r9
 8000692:	d2a9      	bcs.n	80005e8 <__udivmoddi4+0x1f8>
 8000694:	ebb9 0802 	subs.w	r8, r9, r2
 8000698:	eb64 0e0c 	sbc.w	lr, r4, ip
 800069c:	3801      	subs	r0, #1
 800069e:	e7a3      	b.n	80005e8 <__udivmoddi4+0x1f8>
 80006a0:	4646      	mov	r6, r8
 80006a2:	e7ea      	b.n	800067a <__udivmoddi4+0x28a>
 80006a4:	4620      	mov	r0, r4
 80006a6:	e794      	b.n	80005d2 <__udivmoddi4+0x1e2>
 80006a8:	4640      	mov	r0, r8
 80006aa:	e7d1      	b.n	8000650 <__udivmoddi4+0x260>
 80006ac:	46d0      	mov	r8, sl
 80006ae:	e77b      	b.n	80005a8 <__udivmoddi4+0x1b8>
 80006b0:	3b02      	subs	r3, #2
 80006b2:	4461      	add	r1, ip
 80006b4:	e732      	b.n	800051c <__udivmoddi4+0x12c>
 80006b6:	4630      	mov	r0, r6
 80006b8:	e709      	b.n	80004ce <__udivmoddi4+0xde>
 80006ba:	4464      	add	r4, ip
 80006bc:	3802      	subs	r0, #2
 80006be:	e742      	b.n	8000546 <__udivmoddi4+0x156>

080006c0 <__aeabi_idiv0>:
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop

080006c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    //osDelay(1);
	  OpenNNA_Demo_Example();
 80006c6:	f002 fd9f 	bl	8003208 <OpenNNA_Demo_Example>
	  while(1);
 80006ca:	e7fe      	b.n	80006ca <StartDefaultTask+0x6>

080006cc <SystemClock_Config>:
{
 80006cc:	b500      	push	{lr}
 80006ce:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d0:	224c      	movs	r2, #76	; 0x4c
 80006d2:	2100      	movs	r1, #0
 80006d4:	a809      	add	r0, sp, #36	; 0x24
 80006d6:	f005 f963 	bl	80059a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006da:	2220      	movs	r2, #32
 80006dc:	2100      	movs	r1, #0
 80006de:	a801      	add	r0, sp, #4
 80006e0:	f005 f95e 	bl	80059a0 <memset>
  RCC->CKGAENR = 0xFFFFFFFF;
 80006e4:	4b24      	ldr	r3, [pc, #144]	; (8000778 <SystemClock_Config+0xac>)
 80006e6:	f04f 32ff 	mov.w	r2, #4294967295
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006ea:	2004      	movs	r0, #4
  RCC->CKGAENR = 0xFFFFFFFF;
 80006ec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006f0:	f000 fc5a 	bl	8000fa8 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006f4:	2300      	movs	r3, #0
 80006f6:	9300      	str	r3, [sp, #0]
 80006f8:	4b20      	ldr	r3, [pc, #128]	; (800077c <SystemClock_Config+0xb0>)
 80006fa:	699a      	ldr	r2, [r3, #24]
 80006fc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000700:	619a      	str	r2, [r3, #24]
 8000702:	699a      	ldr	r2, [r3, #24]
 8000704:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000708:	9200      	str	r2, [sp, #0]
 800070a:	9a00      	ldr	r2, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800070c:	699a      	ldr	r2, [r3, #24]
 800070e:	0492      	lsls	r2, r2, #18
 8000710:	d5fc      	bpl.n	800070c <SystemClock_Config+0x40>
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000712:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000714:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000718:	2121      	movs	r1, #33	; 0x21
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800071a:	200c      	movs	r0, #12
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800071c:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800071e:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000720:	2246      	movs	r2, #70	; 0x46
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000722:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000726:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000728:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800072c:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072e:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000732:	e9cd 2317 	strd	r2, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000736:	2300      	movs	r3, #0
 8000738:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800073e:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f000 fc6e 	bl	8001020 <HAL_RCC_OscConfig>
 8000744:	b108      	cbz	r0, 800074a <SystemClock_Config+0x7e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000746:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000748:	e7fe      	b.n	8000748 <SystemClock_Config+0x7c>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074a:	223f      	movs	r2, #63	; 0x3f
 800074c:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800074e:	2107      	movs	r1, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000750:	e9cd 2301 	strd	r2, r3, [sp, #4]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000754:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000756:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800075a:	e9cd 0003 	strd	r0, r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800075e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000760:	e9cd 3305 	strd	r3, r3, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000764:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000768:	f000 ff86 	bl	8001678 <HAL_RCC_ClockConfig>
 800076c:	b108      	cbz	r0, 8000772 <SystemClock_Config+0xa6>
 800076e:	b672      	cpsid	i
  while (1)
 8000770:	e7fe      	b.n	8000770 <SystemClock_Config+0xa4>
}
 8000772:	b01d      	add	sp, #116	; 0x74
 8000774:	f85d fb04 	ldr.w	pc, [sp], #4
 8000778:	58024400 	.word	0x58024400
 800077c:	58024800 	.word	0x58024800

08000780 <main>:
{
 8000780:	b500      	push	{lr}
 8000782:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000784:	2400      	movs	r4, #0
  HAL_Init();
 8000786:	f000 fa85 	bl	8000c94 <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2501      	movs	r5, #1
  SystemClock_Config();
 800078c:	f7ff ff9e 	bl	80006cc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	2214      	movs	r2, #20
 8000792:	2100      	movs	r1, #0
 8000794:	a809      	add	r0, sp, #36	; 0x24
 8000796:	f005 f903 	bl	80059a0 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	4b7b      	ldr	r3, [pc, #492]	; (8000988 <main+0x208>)
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800079c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a0:	487a      	ldr	r0, [pc, #488]	; (800098c <main+0x20c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a6:	f44f 6680 	mov.w	r6, #1024	; 0x400
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	f042 0204 	orr.w	r2, r2, #4
 80007ae:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80007b2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80007b6:	f002 0204 	and.w	r2, r2, #4
 80007ba:	9201      	str	r2, [sp, #4]
 80007bc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007be:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80007c2:	f042 0220 	orr.w	r2, r2, #32
 80007c6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80007ca:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80007ce:	f002 0220 	and.w	r2, r2, #32
 80007d2:	9202      	str	r2, [sp, #8]
 80007d4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80007da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80007de:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80007e2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80007e6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80007ea:	9203      	str	r2, [sp, #12]
 80007ec:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80007f2:	f042 0202 	orr.w	r2, r2, #2
 80007f6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80007fa:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80007fe:	f002 0202 	and.w	r2, r2, #2
 8000802:	9204      	str	r2, [sp, #16]
 8000804:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000806:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800080a:	f042 0208 	orr.w	r2, r2, #8
 800080e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8000812:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8000816:	f002 0208 	and.w	r2, r2, #8
 800081a:	9205      	str	r2, [sp, #20]
 800081c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800081e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8000822:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000826:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800082a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800082e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000832:	9206      	str	r2, [sp, #24]
 8000834:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800083a:	f042 0201 	orr.w	r2, r2, #1
 800083e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8000842:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8000846:	f002 0201 	and.w	r2, r2, #1
 800084a:	9207      	str	r2, [sp, #28]
 800084c:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800084e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8000852:	f042 0210 	orr.w	r2, r2, #16
 8000856:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800085c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000860:	f003 0310 	and.w	r3, r3, #16
 8000864:	9308      	str	r3, [sp, #32]
 8000866:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000868:	f000 fb98 	bl	8000f9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000872:	4847      	ldr	r0, [pc, #284]	; (8000990 <main+0x210>)
 8000874:	f000 fb92 	bl	8000f9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	2102      	movs	r1, #2
 800087c:	4845      	ldr	r0, [pc, #276]	; (8000994 <main+0x214>)
 800087e:	f000 fb8d 	bl	8000f9c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000882:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000886:	a909      	add	r1, sp, #36	; 0x24
 8000888:	4843      	ldr	r0, [pc, #268]	; (8000998 <main+0x218>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088c:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000890:	f000 fa98 	bl	8000dc4 <HAL_GPIO_Init>
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000894:	a909      	add	r1, sp, #36	; 0x24
 8000896:	483d      	ldr	r0, [pc, #244]	; (800098c <main+0x20c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	e9cd 6509 	strd	r6, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f000 fa90 	bl	8000dc4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80008a4:	f244 0301 	movw	r3, #16385	; 0x4001
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	a909      	add	r1, sp, #36	; 0x24
 80008aa:	4839      	ldr	r0, [pc, #228]	; (8000990 <main+0x210>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f000 fa86 	bl	8000dc4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b8:	2280      	movs	r2, #128	; 0x80
 80008ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80008be:	a909      	add	r1, sp, #36	; 0x24
 80008c0:	4836      	ldr	r0, [pc, #216]	; (800099c <main+0x21c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c4:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f000 fa7c 	bl	8000dc4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80008cc:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008d0:	a909      	add	r1, sp, #36	; 0x24
 80008d2:	4833      	ldr	r0, [pc, #204]	; (80009a0 <main+0x220>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d6:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008da:	f000 fa73 	bl	8000dc4 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80008de:	230a      	movs	r3, #10
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80008e0:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2602      	movs	r6, #2
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80008e4:	a909      	add	r1, sp, #36	; 0x24
 80008e6:	482e      	ldr	r0, [pc, #184]	; (80009a0 <main+0x220>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80008e8:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f000 fa68 	bl	8000dc4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80008f4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	a909      	add	r1, sp, #36	; 0x24
 80008fa:	4829      	ldr	r0, [pc, #164]	; (80009a0 <main+0x220>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	f000 fa5e 	bl	8000dc4 <HAL_GPIO_Init>
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000908:	a909      	add	r1, sp, #36	; 0x24
 800090a:	4822      	ldr	r0, [pc, #136]	; (8000994 <main+0x214>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	e9cd 6509 	strd	r6, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  huart3.Instance = USART3;
 8000914:	4d23      	ldr	r5, [pc, #140]	; (80009a4 <main+0x224>)
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000916:	f000 fa55 	bl	8000dc4 <HAL_GPIO_Init>
  huart3.Init.BaudRate = 115200;
 800091a:	4923      	ldr	r1, [pc, #140]	; (80009a8 <main+0x228>)
 800091c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000920:	4628      	mov	r0, r5
  huart3.Init.Parity = UART_PARITY_NONE;
 8000922:	612c      	str	r4, [r5, #16]
  huart3.Init.BaudRate = 115200;
 8000924:	e9c5 1300 	strd	r1, r3, [r5]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000928:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 800092a:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	e9c5 3405 	strd	r3, r4, [r5, #20]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000932:	e9c5 4407 	strd	r4, r4, [r5, #28]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000936:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800093a:	f002 f9b3 	bl	8002ca4 <HAL_UART_Init>
 800093e:	4601      	mov	r1, r0
 8000940:	b108      	cbz	r0, 8000946 <main+0x1c6>
 8000942:	b672      	cpsid	i
  while (1)
 8000944:	e7fe      	b.n	8000944 <main+0x1c4>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000946:	4628      	mov	r0, r5
 8000948:	f002 fa19 	bl	8002d7e <HAL_UARTEx_SetTxFifoThreshold>
 800094c:	4601      	mov	r1, r0
 800094e:	b108      	cbz	r0, 8000954 <main+0x1d4>
 8000950:	b672      	cpsid	i
  while (1)
 8000952:	e7fe      	b.n	8000952 <main+0x1d2>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000954:	4628      	mov	r0, r5
 8000956:	f002 fa36 	bl	8002dc6 <HAL_UARTEx_SetRxFifoThreshold>
 800095a:	b108      	cbz	r0, 8000960 <main+0x1e0>
 800095c:	b672      	cpsid	i
  while (1)
 800095e:	e7fe      	b.n	800095e <main+0x1de>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000960:	4628      	mov	r0, r5
 8000962:	f002 f9f1 	bl	8002d48 <HAL_UARTEx_DisableFifoMode>
 8000966:	4604      	mov	r4, r0
 8000968:	b108      	cbz	r0, 800096e <main+0x1ee>
 800096a:	b672      	cpsid	i
  while (1)
 800096c:	e7fe      	b.n	800096c <main+0x1ec>
  osKernelInitialize();
 800096e:	f003 faef 	bl	8003f50 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000972:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <main+0x22c>)
 8000974:	4621      	mov	r1, r4
 8000976:	480e      	ldr	r0, [pc, #56]	; (80009b0 <main+0x230>)
 8000978:	f003 fb16 	bl	8003fa8 <osThreadNew>
 800097c:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <main+0x234>)
 800097e:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000980:	f003 faf8 	bl	8003f74 <osKernelStart>
  while (1)
 8000984:	e7fe      	b.n	8000984 <main+0x204>
 8000986:	bf00      	nop
 8000988:	58024400 	.word	0x58024400
 800098c:	58021400 	.word	0x58021400
 8000990:	58020400 	.word	0x58020400
 8000994:	58021000 	.word	0x58021000
 8000998:	58020800 	.word	0x58020800
 800099c:	58021800 	.word	0x58021800
 80009a0:	58020000 	.word	0x58020000
 80009a4:	24000264 	.word	0x24000264
 80009a8:	40004800 	.word	0x40004800
 80009ac:	08008b88 	.word	0x08008b88
 80009b0:	080006c5 	.word	0x080006c5
 80009b4:	24000260 	.word	0x24000260

080009b8 <Error_Handler>:
 80009b8:	b672      	cpsid	i
  while (1)
 80009ba:	e7fe      	b.n	80009ba <Error_Handler+0x2>

080009bc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009bc:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <HAL_MspInit+0x2c>)
{
 80009be:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009c0:	210f      	movs	r1, #15
 80009c2:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 80009ca:	f042 0202 	orr.w	r2, r2, #2
 80009ce:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009d2:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80009d8:	f003 0302 	and.w	r3, r3, #2
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e0:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009e2:	f000 b9a9 	b.w	8000d38 <HAL_NVIC_SetPriority>
 80009e6:	bf00      	nop
 80009e8:	58024400 	.word	0x58024400

080009ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ec:	b510      	push	{r4, lr}
 80009ee:	b0b6      	sub	sp, #216	; 0xd8
 80009f0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	2214      	movs	r2, #20
 80009f4:	2100      	movs	r1, #0
 80009f6:	a803      	add	r0, sp, #12
 80009f8:	f004 ffd2 	bl	80059a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009fc:	22b8      	movs	r2, #184	; 0xb8
 80009fe:	2100      	movs	r1, #0
 8000a00:	a808      	add	r0, sp, #32
 8000a02:	f004 ffcd 	bl	80059a0 <memset>
  if(huart->Instance==USART3)
 8000a06:	6822      	ldr	r2, [r4, #0]
 8000a08:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <HAL_UART_MspInit+0x84>)
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d12e      	bne.n	8000a6c <HAL_UART_MspInit+0x80>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a0e:	2302      	movs	r3, #2
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a10:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a12:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a14:	f001 f88c 	bl	8001b30 <HAL_RCCEx_PeriphCLKConfig>
 8000a18:	b108      	cbz	r0, 8000a1e <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8000a1a:	f7ff ffcd 	bl	80009b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <HAL_UART_MspInit+0x88>)
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a20:	a903      	add	r1, sp, #12
 8000a22:	4815      	ldr	r0, [pc, #84]	; (8000a78 <HAL_UART_MspInit+0x8c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a24:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8000a28:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000a2c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8000a30:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8000a34:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000a38:	9201      	str	r2, [sp, #4]
 8000a3a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8000a40:	f042 0208 	orr.w	r2, r2, #8
 8000a44:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a50:	f003 0308 	and.w	r3, r3, #8
 8000a54:	9302      	str	r3, [sp, #8]
 8000a56:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a64:	2307      	movs	r3, #7
 8000a66:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a68:	f000 f9ac 	bl	8000dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a6c:	b036      	add	sp, #216	; 0xd8
 8000a6e:	bd10      	pop	{r4, pc}
 8000a70:	40004800 	.word	0x40004800
 8000a74:	58024400 	.word	0x58024400
 8000a78:	58020c00 	.word	0x58020c00

08000a7c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <NMI_Handler>

08000a7e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <HardFault_Handler>

08000a80 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler>

08000a82 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <BusFault_Handler>

08000a84 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <UsageFault_Handler>

08000a86 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a86:	4770      	bx	lr

08000a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8a:	f000 f931 	bl	8000cf0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a8e:	f004 fa5b 	bl	8004f48 <xTaskGetSchedulerState>
 8000a92:	2801      	cmp	r0, #1
 8000a94:	d003      	beq.n	8000a9e <SysTick_Handler+0x16>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 8000a9a:	f004 bd63 	b.w	8005564 <xPortSysTickHandler>
}
 8000a9e:	bd08      	pop	{r3, pc}

08000aa0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	4770      	bx	lr

08000aa4 <_kill>:

int _kill(int pid, int sig)
{
 8000aa4:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000aa6:	f004 ff33 	bl	8005910 <__errno>
 8000aaa:	2316      	movs	r3, #22
 8000aac:	6003      	str	r3, [r0, #0]
	return -1;
}
 8000aae:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab2:	bd08      	pop	{r3, pc}

08000ab4 <_exit>:

void _exit (int status)
{
 8000ab4:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000ab6:	f004 ff2b 	bl	8005910 <__errno>
 8000aba:	2316      	movs	r3, #22
 8000abc:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8000abe:	e7fe      	b.n	8000abe <_exit+0xa>

08000ac0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac0:	b570      	push	{r4, r5, r6, lr}
 8000ac2:	460d      	mov	r5, r1
 8000ac4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac6:	460e      	mov	r6, r1
 8000ac8:	1b73      	subs	r3, r6, r5
 8000aca:	429c      	cmp	r4, r3
 8000acc:	dc01      	bgt.n	8000ad2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8000ace:	4620      	mov	r0, r4
 8000ad0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8000ad2:	f3af 8000 	nop.w
 8000ad6:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ada:	e7f5      	b.n	8000ac8 <_read+0x8>

08000adc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	460d      	mov	r5, r1
 8000ae0:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae2:	460e      	mov	r6, r1
 8000ae4:	1b73      	subs	r3, r6, r5
 8000ae6:	429c      	cmp	r4, r3
 8000ae8:	dc01      	bgt.n	8000aee <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8000aea:	4620      	mov	r0, r4
 8000aec:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8000aee:	f816 0b01 	ldrb.w	r0, [r6], #1
 8000af2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af6:	e7f5      	b.n	8000ae4 <_write+0x8>

08000af8 <_close>:

int _close(int file)
{
	return -1;
}
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr

08000afe <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000afe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8000b02:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000b04:	604b      	str	r3, [r1, #4]
}
 8000b06:	4770      	bx	lr

08000b08 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000b08:	2001      	movs	r0, #1
 8000b0a:	4770      	bx	lr

08000b0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	4770      	bx	lr

08000b10 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b10:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <_sbrk+0x30>)
{
 8000b12:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000b14:	6811      	ldr	r1, [r2, #0]
{
 8000b16:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000b18:	b909      	cbnz	r1, 8000b1e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000b1a:	490a      	ldr	r1, [pc, #40]	; (8000b44 <_sbrk+0x34>)
 8000b1c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b1e:	6810      	ldr	r0, [r2, #0]
 8000b20:	4909      	ldr	r1, [pc, #36]	; (8000b48 <_sbrk+0x38>)
 8000b22:	4c0a      	ldr	r4, [pc, #40]	; (8000b4c <_sbrk+0x3c>)
 8000b24:	4403      	add	r3, r0
 8000b26:	1b09      	subs	r1, r1, r4
 8000b28:	428b      	cmp	r3, r1
 8000b2a:	d906      	bls.n	8000b3a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000b2c:	f004 fef0 	bl	8005910 <__errno>
 8000b30:	230c      	movs	r3, #12
 8000b32:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000b38:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000b3a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8000b3c:	e7fc      	b.n	8000b38 <_sbrk+0x28>
 8000b3e:	bf00      	nop
 8000b40:	240002f4 	.word	0x240002f4
 8000b44:	240fb060 	.word	0x240fb060
 8000b48:	24100000 	.word	0x24100000
 8000b4c:	00000400 	.word	0x00000400

08000b50 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b50:	4a20      	ldr	r2, [pc, #128]	; (8000bd4 <SystemInit+0x84>)
 8000b52:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000b56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b5a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b5e:	4a1e      	ldr	r2, [pc, #120]	; (8000bd8 <SystemInit+0x88>)
 8000b60:	6813      	ldr	r3, [r2, #0]
 8000b62:	f003 030f 	and.w	r3, r3, #15
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d805      	bhi.n	8000b76 <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b6a:	6813      	ldr	r3, [r2, #0]
 8000b6c:	f023 030f 	bic.w	r3, r3, #15
 8000b70:	f043 0303 	orr.w	r3, r3, #3
 8000b74:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <SystemInit+0x8c>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	f042 0201 	orr.w	r2, r2, #1
 8000b7e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b84:	4a16      	ldr	r2, [pc, #88]	; (8000be0 <SystemInit+0x90>)
 8000b86:	6819      	ldr	r1, [r3, #0]
 8000b88:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b8a:	4913      	ldr	r1, [pc, #76]	; (8000bd8 <SystemInit+0x88>)
  RCC->CR &= 0xEAF6ED7FU;
 8000b8c:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b8e:	680a      	ldr	r2, [r1, #0]
 8000b90:	f012 0f0c 	tst.w	r2, #12
 8000b94:	d005      	beq.n	8000ba2 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b96:	680a      	ldr	r2, [r1, #0]
 8000b98:	f022 020f 	bic.w	r2, r2, #15
 8000b9c:	f042 0203 	orr.w	r2, r2, #3
 8000ba0:	600a      	str	r2, [r1, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000ba2:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ba4:	490f      	ldr	r1, [pc, #60]	; (8000be4 <SystemInit+0x94>)
  RCC->CDCFGR1 = 0x00000000;
 8000ba6:	619a      	str	r2, [r3, #24]
  RCC->CDCFGR2 = 0x00000000;
 8000ba8:	61da      	str	r2, [r3, #28]
  RCC->SRDCFGR = 0x00000000;
 8000baa:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000bac:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bae:	490e      	ldr	r1, [pc, #56]	; (8000be8 <SystemInit+0x98>)
 8000bb0:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bb2:	490e      	ldr	r1, [pc, #56]	; (8000bec <SystemInit+0x9c>)
 8000bb4:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bb8:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000bba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000bbc:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000bbe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bc0:	6819      	ldr	r1, [r3, #0]
 8000bc2:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000bc6:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000bc8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000bca:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <SystemInit+0xa0>)
 8000bd0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00
 8000bd8:	52002000 	.word	0x52002000
 8000bdc:	58024400 	.word	0x58024400
 8000be0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000be4:	02020200 	.word	0x02020200
 8000be8:	01ff0000 	.word	0x01ff0000
 8000bec:	01010280 	.word	0x01010280
 8000bf0:	52004000 	.word	0x52004000

08000bf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c2c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bf8:	f7ff ffaa 	bl	8000b50 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bfc:	480c      	ldr	r0, [pc, #48]	; (8000c30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bfe:	490d      	ldr	r1, [pc, #52]	; (8000c34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c00:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c14:	4c0a      	ldr	r4, [pc, #40]	; (8000c40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c22:	f004 fe7b 	bl	800591c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c26:	f7ff fdab 	bl	8000780 <main>
  bx  lr
 8000c2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c2c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000c30:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c34:	24000244 	.word	0x24000244
  ldr r2, =_sidata
 8000c38:	0800a148 	.word	0x0800a148
  ldr r2, =_sbss
 8000c3c:	24000244 	.word	0x24000244
  ldr r4, =_ebss
 8000c40:	240fb060 	.word	0x240fb060

08000c44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC_IRQHandler>
	...

08000c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <HAL_InitTick+0x40>)
{
 8000c4c:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 8000c4e:	7818      	ldrb	r0, [r3, #0]
 8000c50:	b908      	cbnz	r0, 8000c56 <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 8000c52:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000c54:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5a:	4a0c      	ldr	r2, [pc, #48]	; (8000c8c <HAL_InitTick+0x44>)
 8000c5c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000c60:	6810      	ldr	r0, [r2, #0]
 8000c62:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c66:	f000 f899 	bl	8000d9c <HAL_SYSTICK_Config>
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	2800      	cmp	r0, #0
 8000c6e:	d1f0      	bne.n	8000c52 <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c70:	2d0f      	cmp	r5, #15
 8000c72:	d8ee      	bhi.n	8000c52 <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c74:	4602      	mov	r2, r0
 8000c76:	4629      	mov	r1, r5
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7c:	f000 f85c 	bl	8000d38 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <HAL_InitTick+0x48>)
 8000c82:	4620      	mov	r0, r4
 8000c84:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 8000c86:	e7e5      	b.n	8000c54 <HAL_InitTick+0xc>
 8000c88:	24000008 	.word	0x24000008
 8000c8c:	24000000 	.word	0x24000000
 8000c90:	2400000c 	.word	0x2400000c

08000c94 <HAL_Init>:
{
 8000c94:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c96:	2003      	movs	r0, #3
 8000c98:	f000 f83c 	bl	8000d14 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000c9c:	f000 fc4c 	bl	8001538 <HAL_RCC_GetSysClockFreq>
 8000ca0:	490f      	ldr	r1, [pc, #60]	; (8000ce0 <HAL_Init+0x4c>)
 8000ca2:	4a10      	ldr	r2, [pc, #64]	; (8000ce4 <HAL_Init+0x50>)
 8000ca4:	698b      	ldr	r3, [r1, #24]
 8000ca6:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8000caa:	5cd3      	ldrb	r3, [r2, r3]
 8000cac:	f003 031f 	and.w	r3, r3, #31
 8000cb0:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000cb2:	698b      	ldr	r3, [r1, #24]
 8000cb4:	f003 030f 	and.w	r3, r3, #15
 8000cb8:	5cd3      	ldrb	r3, [r2, r3]
 8000cba:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <HAL_Init+0x54>)
 8000cbc:	f003 031f 	and.w	r3, r3, #31
 8000cc0:	fa20 f303 	lsr.w	r3, r0, r3
 8000cc4:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <HAL_Init+0x58>)
 8000cc8:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cca:	200f      	movs	r0, #15
 8000ccc:	f7ff ffbc 	bl	8000c48 <HAL_InitTick>
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	b918      	cbnz	r0, 8000cdc <HAL_Init+0x48>
  HAL_MspInit();
 8000cd4:	f7ff fe72 	bl	80009bc <HAL_MspInit>
}
 8000cd8:	4620      	mov	r0, r4
 8000cda:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000cdc:	2401      	movs	r4, #1
 8000cde:	e7fb      	b.n	8000cd8 <HAL_Init+0x44>
 8000ce0:	58024400 	.word	0x58024400
 8000ce4:	08008bac 	.word	0x08008bac
 8000ce8:	24000004 	.word	0x24000004
 8000cec:	24000000 	.word	0x24000000

08000cf0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000cf0:	4a03      	ldr	r2, [pc, #12]	; (8000d00 <HAL_IncTick+0x10>)
 8000cf2:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <HAL_IncTick+0x14>)
 8000cf4:	6811      	ldr	r1, [r2, #0]
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	440b      	add	r3, r1
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	240002f8 	.word	0x240002f8
 8000d04:	24000008 	.word	0x24000008

08000d08 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d08:	4b01      	ldr	r3, [pc, #4]	; (8000d10 <HAL_GetTick+0x8>)
 8000d0a:	6818      	ldr	r0, [r3, #0]
}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	240002f8 	.word	0x240002f8

08000d14 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d14:	4907      	ldr	r1, [pc, #28]	; (8000d34 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d16:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d18:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000d22:	0412      	lsls	r2, r2, #16
 8000d24:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000d30:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3a:	b530      	push	{r4, r5, lr}
 8000d3c:	68dc      	ldr	r4, [r3, #12]
 8000d3e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d42:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d48:	2d04      	cmp	r5, #4
 8000d4a:	bf28      	it	cs
 8000d4c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4e:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d54:	bf8c      	ite	hi
 8000d56:	3c03      	subhi	r4, #3
 8000d58:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5a:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8000d5e:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d60:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d68:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	fa01 f104 	lsl.w	r1, r1, r4
 8000d70:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000d78:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000d7a:	db06      	blt.n	8000d8a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000d80:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000d84:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000d88:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	f000 000f 	and.w	r0, r0, #15
 8000d8e:	4a02      	ldr	r2, [pc, #8]	; (8000d98 <HAL_NVIC_SetPriority+0x60>)
 8000d90:	5413      	strb	r3, [r2, r0]
 8000d92:	e7f9      	b.n	8000d88 <HAL_NVIC_SetPriority+0x50>
 8000d94:	e000ed00 	.word	0xe000ed00
 8000d98:	e000ed14 	.word	0xe000ed14

08000d9c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d9c:	3801      	subs	r0, #1
 8000d9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000da2:	d20b      	bcs.n	8000dbc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da8:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <HAL_SYSTICK_Config+0x24>)
 8000daa:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dac:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dae:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db4:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db6:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dba:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000dbc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8000dc8:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8000f98 <HAL_GPIO_Init+0x1d4>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dce:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000dd2:	680a      	ldr	r2, [r1, #0]
 8000dd4:	fa32 f503 	lsrs.w	r5, r2, r3
 8000dd8:	d102      	bne.n	8000de0 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8000dda:	b003      	add	sp, #12
 8000ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000de0:	f04f 0e01 	mov.w	lr, #1
 8000de4:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00U)
 8000de8:	ea1e 0202 	ands.w	r2, lr, r2
 8000dec:	f000 80bd 	beq.w	8000f6a <HAL_GPIO_Init+0x1a6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000df0:	684e      	ldr	r6, [r1, #4]
 8000df2:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000df6:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dfa:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000dfe:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e02:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e04:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e08:	2f01      	cmp	r7, #1
 8000e0a:	d834      	bhi.n	8000e76 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000e0c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e0e:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e12:	68cf      	ldr	r7, [r1, #12]
 8000e14:	fa07 f708 	lsl.w	r7, r7, r8
 8000e18:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8000e1c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000e1e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e20:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e24:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8000e28:	409f      	lsls	r7, r3
 8000e2a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000e2e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000e30:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e32:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e34:	ea07 0e0c 	and.w	lr, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e38:	688f      	ldr	r7, [r1, #8]
 8000e3a:	fa07 f708 	lsl.w	r7, r7, r8
 8000e3e:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
 8000e42:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e44:	d119      	bne.n	8000e7a <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 8000e46:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e4a:	f003 0b07 	and.w	fp, r3, #7
 8000e4e:	f04f 0e0f 	mov.w	lr, #15
 8000e52:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000e56:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8000e5a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e5e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000e62:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e66:	690f      	ldr	r7, [r1, #16]
 8000e68:	fa07 f70b 	lsl.w	r7, r7, fp
 8000e6c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000e70:	f8ca 7020 	str.w	r7, [sl, #32]
 8000e74:	e001      	b.n	8000e7a <HAL_GPIO_Init+0xb6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e76:	2d03      	cmp	r5, #3
 8000e78:	d1da      	bne.n	8000e30 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 8000e7a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e7c:	fa05 f508 	lsl.w	r5, r5, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e80:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e84:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e88:	ea47 0705 	orr.w	r7, r7, r5
      GPIOx->MODER = temp;
 8000e8c:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e8e:	d06c      	beq.n	8000f6a <HAL_GPIO_Init+0x1a6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e90:	f8d9 5154 	ldr.w	r5, [r9, #340]	; 0x154
 8000e94:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e98:	f003 0c03 	and.w	ip, r3, #3
 8000e9c:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea0:	f045 0502 	orr.w	r5, r5, #2
 8000ea4:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ea8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eac:	f8c9 5154 	str.w	r5, [r9, #340]	; 0x154
 8000eb0:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000eb4:	f8d9 5154 	ldr.w	r5, [r9, #340]	; 0x154
 8000eb8:	f005 0502 	and.w	r5, r5, #2
 8000ebc:	9501      	str	r5, [sp, #4]
 8000ebe:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ec0:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2U];
 8000ec4:	f8d7 8008 	ldr.w	r8, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ec8:	ea28 0e05 	bic.w	lr, r8, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ecc:	4d31      	ldr	r5, [pc, #196]	; (8000f94 <HAL_GPIO_Init+0x1d0>)
 8000ece:	42a8      	cmp	r0, r5
 8000ed0:	d04d      	beq.n	8000f6e <HAL_GPIO_Init+0x1aa>
 8000ed2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ed6:	42a8      	cmp	r0, r5
 8000ed8:	d04b      	beq.n	8000f72 <HAL_GPIO_Init+0x1ae>
 8000eda:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ede:	42a8      	cmp	r0, r5
 8000ee0:	d049      	beq.n	8000f76 <HAL_GPIO_Init+0x1b2>
 8000ee2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ee6:	42a8      	cmp	r0, r5
 8000ee8:	d047      	beq.n	8000f7a <HAL_GPIO_Init+0x1b6>
 8000eea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000eee:	42a8      	cmp	r0, r5
 8000ef0:	d045      	beq.n	8000f7e <HAL_GPIO_Init+0x1ba>
 8000ef2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ef6:	42a8      	cmp	r0, r5
 8000ef8:	d043      	beq.n	8000f82 <HAL_GPIO_Init+0x1be>
 8000efa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000efe:	42a8      	cmp	r0, r5
 8000f00:	d041      	beq.n	8000f86 <HAL_GPIO_Init+0x1c2>
 8000f02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f06:	42a8      	cmp	r0, r5
 8000f08:	d03f      	beq.n	8000f8a <HAL_GPIO_Init+0x1c6>
 8000f0a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f0e:	42a8      	cmp	r0, r5
 8000f10:	d03d      	beq.n	8000f8e <HAL_GPIO_Init+0x1ca>
 8000f12:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f16:	42a8      	cmp	r0, r5
 8000f18:	bf0c      	ite	eq
 8000f1a:	2509      	moveq	r5, #9
 8000f1c:	250a      	movne	r5, #10
 8000f1e:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f22:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f26:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f2a:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8000f2c:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8000f30:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8000f32:	bf0c      	ite	eq
 8000f34:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000f36:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f38:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 8000f3c:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8000f3e:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8000f40:	bf0c      	ite	eq
 8000f42:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000f44:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f46:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 8000f4a:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8000f4c:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        temp &= ~(iocurrent);
 8000f50:	bf0c      	ite	eq
 8000f52:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000f54:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f56:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8000f58:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8000f5c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 8000f60:	bf54      	ite	pl
 8000f62:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8000f64:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8000f66:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    position++;
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	e731      	b.n	8000dd2 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f6e:	2500      	movs	r5, #0
 8000f70:	e7d5      	b.n	8000f1e <HAL_GPIO_Init+0x15a>
 8000f72:	2501      	movs	r5, #1
 8000f74:	e7d3      	b.n	8000f1e <HAL_GPIO_Init+0x15a>
 8000f76:	2502      	movs	r5, #2
 8000f78:	e7d1      	b.n	8000f1e <HAL_GPIO_Init+0x15a>
 8000f7a:	2503      	movs	r5, #3
 8000f7c:	e7cf      	b.n	8000f1e <HAL_GPIO_Init+0x15a>
 8000f7e:	2504      	movs	r5, #4
 8000f80:	e7cd      	b.n	8000f1e <HAL_GPIO_Init+0x15a>
 8000f82:	2505      	movs	r5, #5
 8000f84:	e7cb      	b.n	8000f1e <HAL_GPIO_Init+0x15a>
 8000f86:	2506      	movs	r5, #6
 8000f88:	e7c9      	b.n	8000f1e <HAL_GPIO_Init+0x15a>
 8000f8a:	2507      	movs	r5, #7
 8000f8c:	e7c7      	b.n	8000f1e <HAL_GPIO_Init+0x15a>
 8000f8e:	2508      	movs	r5, #8
 8000f90:	e7c5      	b.n	8000f1e <HAL_GPIO_Init+0x15a>
 8000f92:	bf00      	nop
 8000f94:	58020000 	.word	0x58020000
 8000f98:	58024400 	.word	0x58024400

08000f9c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f9c:	b10a      	cbz	r2, 8000fa2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f9e:	6181      	str	r1, [r0, #24]
  }
}
 8000fa0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000fa2:	0409      	lsls	r1, r1, #16
 8000fa4:	e7fb      	b.n	8000f9e <HAL_GPIO_WritePin+0x2>
	...

08000fa8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000fa8:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8000faa:	4d1c      	ldr	r5, [pc, #112]	; (800101c <HAL_PWREx_ConfigSupply+0x74>)
{
 8000fac:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8000fae:	68eb      	ldr	r3, [r5, #12]
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	2b06      	cmp	r3, #6
 8000fb6:	d006      	beq.n	8000fc6 <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000fb8:	68e8      	ldr	r0, [r5, #12]
 8000fba:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000fbe:	1b00      	subs	r0, r0, r4
 8000fc0:	bf18      	it	ne
 8000fc2:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8000fc4:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000fc6:	68eb      	ldr	r3, [r5, #12]
 8000fc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fcc:	4303      	orrs	r3, r0
 8000fce:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 8000fd0:	f7ff fe9a 	bl	8000d08 <HAL_GetTick>
 8000fd4:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000fd6:	686b      	ldr	r3, [r5, #4]
 8000fd8:	049a      	lsls	r2, r3, #18
 8000fda:	d508      	bpl.n	8000fee <HAL_PWREx_ConfigSupply+0x46>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8000fdc:	f1a4 031d 	sub.w	r3, r4, #29
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d90c      	bls.n	8000ffe <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8000fe4:	3c2d      	subs	r4, #45	; 0x2d
 8000fe6:	2c01      	cmp	r4, #1
 8000fe8:	d909      	bls.n	8000ffe <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 8000fea:	2000      	movs	r0, #0
 8000fec:	e7ea      	b.n	8000fc4 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000fee:	f7ff fe8b 	bl	8000d08 <HAL_GetTick>
 8000ff2:	1b80      	subs	r0, r0, r6
 8000ff4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000ff8:	d9ed      	bls.n	8000fd6 <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	e7e2      	b.n	8000fc4 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 8000ffe:	f7ff fe83 	bl	8000d08 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001002:	4d06      	ldr	r5, [pc, #24]	; (800101c <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8001004:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001006:	68eb      	ldr	r3, [r5, #12]
 8001008:	03db      	lsls	r3, r3, #15
 800100a:	d4ee      	bmi.n	8000fea <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800100c:	f7ff fe7c 	bl	8000d08 <HAL_GetTick>
 8001010:	1b00      	subs	r0, r0, r4
 8001012:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001016:	d9f6      	bls.n	8001006 <HAL_PWREx_ConfigSupply+0x5e>
 8001018:	e7ef      	b.n	8000ffa <HAL_PWREx_ConfigSupply+0x52>
 800101a:	bf00      	nop
 800101c:	58024800 	.word	0x58024800

08001020 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001022:	4604      	mov	r4, r0
 8001024:	b908      	cbnz	r0, 800102a <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 8001026:	2001      	movs	r0, #1
 8001028:	e07f      	b.n	800112a <HAL_RCC_OscConfig+0x10a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800102a:	6803      	ldr	r3, [r0, #0]
 800102c:	07df      	lsls	r7, r3, #31
 800102e:	d453      	bmi.n	80010d8 <HAL_RCC_OscConfig+0xb8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001030:	6823      	ldr	r3, [r4, #0]
 8001032:	079e      	lsls	r6, r3, #30
 8001034:	f100 80b9 	bmi.w	80011aa <HAL_RCC_OscConfig+0x18a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001038:	6823      	ldr	r3, [r4, #0]
 800103a:	06da      	lsls	r2, r3, #27
 800103c:	d51c      	bpl.n	8001078 <HAL_RCC_OscConfig+0x58>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800103e:	4b99      	ldr	r3, [pc, #612]	; (80012a4 <HAL_RCC_OscConfig+0x284>)
 8001040:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001042:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001044:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001048:	2a08      	cmp	r2, #8
 800104a:	d007      	beq.n	800105c <HAL_RCC_OscConfig+0x3c>
 800104c:	2a18      	cmp	r2, #24
 800104e:	f040 80fb 	bne.w	8001248 <HAL_RCC_OscConfig+0x228>
 8001052:	f001 0203 	and.w	r2, r1, #3
 8001056:	2a01      	cmp	r2, #1
 8001058:	f040 80f6 	bne.w	8001248 <HAL_RCC_OscConfig+0x228>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	05db      	lsls	r3, r3, #23
 8001060:	d502      	bpl.n	8001068 <HAL_RCC_OscConfig+0x48>
 8001062:	69e3      	ldr	r3, [r4, #28]
 8001064:	2b80      	cmp	r3, #128	; 0x80
 8001066:	d1de      	bne.n	8001026 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001068:	4a8e      	ldr	r2, [pc, #568]	; (80012a4 <HAL_RCC_OscConfig+0x284>)
 800106a:	6a21      	ldr	r1, [r4, #32]
 800106c:	68d3      	ldr	r3, [r2, #12]
 800106e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8001072:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001076:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001078:	6823      	ldr	r3, [r4, #0]
 800107a:	0719      	lsls	r1, r3, #28
 800107c:	f100 8116 	bmi.w	80012ac <HAL_RCC_OscConfig+0x28c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001080:	6823      	ldr	r3, [r4, #0]
 8001082:	069a      	lsls	r2, r3, #26
 8001084:	f100 8137 	bmi.w	80012f6 <HAL_RCC_OscConfig+0x2d6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001088:	6823      	ldr	r3, [r4, #0]
 800108a:	075d      	lsls	r5, r3, #29
 800108c:	d51e      	bpl.n	80010cc <HAL_RCC_OscConfig+0xac>
    PWR->CR1 |= PWR_CR1_DBP;
 800108e:	4d86      	ldr	r5, [pc, #536]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 8001090:	682b      	ldr	r3, [r5, #0]
 8001092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001096:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001098:	f7ff fe36 	bl	8000d08 <HAL_GetTick>
 800109c:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800109e:	682b      	ldr	r3, [r5, #0]
 80010a0:	05da      	lsls	r2, r3, #23
 80010a2:	f140 814d 	bpl.w	8001340 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010a6:	68a3      	ldr	r3, [r4, #8]
 80010a8:	4d7e      	ldr	r5, [pc, #504]	; (80012a4 <HAL_RCC_OscConfig+0x284>)
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	f040 814f 	bne.w	800134e <HAL_RCC_OscConfig+0x32e>
 80010b0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010b8:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80010bc:	f7ff fe24 	bl	8000d08 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80010c0:	4e78      	ldr	r6, [pc, #480]	; (80012a4 <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 80010c2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80010c4:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80010c6:	079b      	lsls	r3, r3, #30
 80010c8:	f140 817d 	bpl.w	80013c6 <HAL_RCC_OscConfig+0x3a6>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010cc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80010ce:	2800      	cmp	r0, #0
 80010d0:	f040 8180 	bne.w	80013d4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
  }
  return HAL_OK;
 80010d4:	2000      	movs	r0, #0
 80010d6:	e028      	b.n	800112a <HAL_RCC_OscConfig+0x10a>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010d8:	4b72      	ldr	r3, [pc, #456]	; (80012a4 <HAL_RCC_OscConfig+0x284>)
 80010da:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80010dc:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010de:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80010e2:	2a10      	cmp	r2, #16
 80010e4:	d005      	beq.n	80010f2 <HAL_RCC_OscConfig+0xd2>
 80010e6:	2a18      	cmp	r2, #24
 80010e8:	d10a      	bne.n	8001100 <HAL_RCC_OscConfig+0xe0>
 80010ea:	f001 0203 	and.w	r2, r1, #3
 80010ee:	2a02      	cmp	r2, #2
 80010f0:	d106      	bne.n	8001100 <HAL_RCC_OscConfig+0xe0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	039d      	lsls	r5, r3, #14
 80010f6:	d59b      	bpl.n	8001030 <HAL_RCC_OscConfig+0x10>
 80010f8:	6863      	ldr	r3, [r4, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d198      	bne.n	8001030 <HAL_RCC_OscConfig+0x10>
 80010fe:	e792      	b.n	8001026 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001100:	6862      	ldr	r2, [r4, #4]
 8001102:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001106:	d111      	bne.n	800112c <HAL_RCC_OscConfig+0x10c>
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800110e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001110:	f7ff fdfa 	bl	8000d08 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001114:	4e63      	ldr	r6, [pc, #396]	; (80012a4 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 8001116:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001118:	6833      	ldr	r3, [r6, #0]
 800111a:	0398      	lsls	r0, r3, #14
 800111c:	d488      	bmi.n	8001030 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800111e:	f7ff fdf3 	bl	8000d08 <HAL_GetTick>
 8001122:	1b40      	subs	r0, r0, r5
 8001124:	2864      	cmp	r0, #100	; 0x64
 8001126:	d9f7      	bls.n	8001118 <HAL_RCC_OscConfig+0xf8>
            return HAL_TIMEOUT;
 8001128:	2003      	movs	r0, #3
}
 800112a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800112c:	4d5d      	ldr	r5, [pc, #372]	; (80012a4 <HAL_RCC_OscConfig+0x284>)
 800112e:	682b      	ldr	r3, [r5, #0]
 8001130:	b9ba      	cbnz	r2, 8001162 <HAL_RCC_OscConfig+0x142>
 8001132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001136:	602b      	str	r3, [r5, #0]
 8001138:	682b      	ldr	r3, [r5, #0]
 800113a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800113e:	602b      	str	r3, [r5, #0]
 8001140:	682b      	ldr	r3, [r5, #0]
 8001142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001146:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001148:	f7ff fdde 	bl	8000d08 <HAL_GetTick>
 800114c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800114e:	682b      	ldr	r3, [r5, #0]
 8001150:	0399      	lsls	r1, r3, #14
 8001152:	f57f af6d 	bpl.w	8001030 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001156:	f7ff fdd7 	bl	8000d08 <HAL_GetTick>
 800115a:	1b80      	subs	r0, r0, r6
 800115c:	2864      	cmp	r0, #100	; 0x64
 800115e:	d9f6      	bls.n	800114e <HAL_RCC_OscConfig+0x12e>
 8001160:	e7e2      	b.n	8001128 <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001162:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001166:	d10b      	bne.n	8001180 <HAL_RCC_OscConfig+0x160>
 8001168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800116c:	602b      	str	r3, [r5, #0]
 800116e:	682b      	ldr	r3, [r5, #0]
 8001170:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001174:	602b      	str	r3, [r5, #0]
 8001176:	682b      	ldr	r3, [r5, #0]
 8001178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800117c:	602b      	str	r3, [r5, #0]
 800117e:	e7c7      	b.n	8001110 <HAL_RCC_OscConfig+0xf0>
 8001180:	f5b2 1fa8 	cmp.w	r2, #1376256	; 0x150000
 8001184:	d106      	bne.n	8001194 <HAL_RCC_OscConfig+0x174>
 8001186:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800118a:	602b      	str	r3, [r5, #0]
 800118c:	682b      	ldr	r3, [r5, #0]
 800118e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001192:	e7ef      	b.n	8001174 <HAL_RCC_OscConfig+0x154>
 8001194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001198:	602b      	str	r3, [r5, #0]
 800119a:	682b      	ldr	r3, [r5, #0]
 800119c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a0:	602b      	str	r3, [r5, #0]
 80011a2:	682b      	ldr	r3, [r5, #0]
 80011a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80011a8:	e7e8      	b.n	800117c <HAL_RCC_OscConfig+0x15c>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011aa:	4b3e      	ldr	r3, [pc, #248]	; (80012a4 <HAL_RCC_OscConfig+0x284>)
 80011ac:	68e1      	ldr	r1, [r4, #12]
 80011ae:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011b0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80011b2:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 80011b6:	d003      	beq.n	80011c0 <HAL_RCC_OscConfig+0x1a0>
 80011b8:	2a18      	cmp	r2, #24
 80011ba:	d121      	bne.n	8001200 <HAL_RCC_OscConfig+0x1e0>
 80011bc:	0782      	lsls	r2, r0, #30
 80011be:	d11f      	bne.n	8001200 <HAL_RCC_OscConfig+0x1e0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	075b      	lsls	r3, r3, #29
 80011c4:	d502      	bpl.n	80011cc <HAL_RCC_OscConfig+0x1ac>
 80011c6:	2900      	cmp	r1, #0
 80011c8:	f43f af2d 	beq.w	8001026 <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80011cc:	4d35      	ldr	r5, [pc, #212]	; (80012a4 <HAL_RCC_OscConfig+0x284>)
 80011ce:	682a      	ldr	r2, [r5, #0]
 80011d0:	f022 0219 	bic.w	r2, r2, #25
 80011d4:	430a      	orrs	r2, r1
 80011d6:	602a      	str	r2, [r5, #0]
          tickstart = HAL_GetTick();
 80011d8:	f7ff fd96 	bl	8000d08 <HAL_GetTick>
 80011dc:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011de:	682b      	ldr	r3, [r5, #0]
 80011e0:	075f      	lsls	r7, r3, #29
 80011e2:	d507      	bpl.n	80011f4 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e4:	686b      	ldr	r3, [r5, #4]
 80011e6:	6922      	ldr	r2, [r4, #16]
 80011e8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80011ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80011f0:	606b      	str	r3, [r5, #4]
 80011f2:	e721      	b.n	8001038 <HAL_RCC_OscConfig+0x18>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f4:	f7ff fd88 	bl	8000d08 <HAL_GetTick>
 80011f8:	1b80      	subs	r0, r0, r6
 80011fa:	2802      	cmp	r0, #2
 80011fc:	d9ef      	bls.n	80011de <HAL_RCC_OscConfig+0x1be>
 80011fe:	e793      	b.n	8001128 <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001200:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001202:	b181      	cbz	r1, 8001226 <HAL_RCC_OscConfig+0x206>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001204:	f022 0219 	bic.w	r2, r2, #25
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001208:	4d26      	ldr	r5, [pc, #152]	; (80012a4 <HAL_RCC_OscConfig+0x284>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800120a:	430a      	orrs	r2, r1
 800120c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800120e:	f7ff fd7b 	bl	8000d08 <HAL_GetTick>
 8001212:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001214:	682b      	ldr	r3, [r5, #0]
 8001216:	0758      	lsls	r0, r3, #29
 8001218:	d4e4      	bmi.n	80011e4 <HAL_RCC_OscConfig+0x1c4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800121a:	f7ff fd75 	bl	8000d08 <HAL_GetTick>
 800121e:	1b80      	subs	r0, r0, r6
 8001220:	2802      	cmp	r0, #2
 8001222:	d9f7      	bls.n	8001214 <HAL_RCC_OscConfig+0x1f4>
 8001224:	e780      	b.n	8001128 <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_HSI_DISABLE();
 8001226:	f022 0201 	bic.w	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800122a:	4e1e      	ldr	r6, [pc, #120]	; (80012a4 <HAL_RCC_OscConfig+0x284>)
        __HAL_RCC_HSI_DISABLE();
 800122c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800122e:	f7ff fd6b 	bl	8000d08 <HAL_GetTick>
 8001232:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001234:	6833      	ldr	r3, [r6, #0]
 8001236:	0759      	lsls	r1, r3, #29
 8001238:	f57f aefe 	bpl.w	8001038 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800123c:	f7ff fd64 	bl	8000d08 <HAL_GetTick>
 8001240:	1b40      	subs	r0, r0, r5
 8001242:	2802      	cmp	r0, #2
 8001244:	d9f6      	bls.n	8001234 <HAL_RCC_OscConfig+0x214>
 8001246:	e76f      	b.n	8001128 <HAL_RCC_OscConfig+0x108>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001248:	69e2      	ldr	r2, [r4, #28]
 800124a:	b1c2      	cbz	r2, 800127e <HAL_RCC_OscConfig+0x25e>
        __HAL_RCC_CSI_ENABLE();
 800124c:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800124e:	4d15      	ldr	r5, [pc, #84]	; (80012a4 <HAL_RCC_OscConfig+0x284>)
        __HAL_RCC_CSI_ENABLE();
 8001250:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001254:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001256:	f7ff fd57 	bl	8000d08 <HAL_GetTick>
 800125a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800125c:	682b      	ldr	r3, [r5, #0]
 800125e:	05df      	lsls	r7, r3, #23
 8001260:	d507      	bpl.n	8001272 <HAL_RCC_OscConfig+0x252>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001262:	68eb      	ldr	r3, [r5, #12]
 8001264:	6a22      	ldr	r2, [r4, #32]
 8001266:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800126a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800126e:	60eb      	str	r3, [r5, #12]
 8001270:	e702      	b.n	8001078 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001272:	f7ff fd49 	bl	8000d08 <HAL_GetTick>
 8001276:	1b80      	subs	r0, r0, r6
 8001278:	2802      	cmp	r0, #2
 800127a:	d9ef      	bls.n	800125c <HAL_RCC_OscConfig+0x23c>
 800127c:	e754      	b.n	8001128 <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_CSI_DISABLE();
 800127e:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001280:	4e08      	ldr	r6, [pc, #32]	; (80012a4 <HAL_RCC_OscConfig+0x284>)
        __HAL_RCC_CSI_DISABLE();
 8001282:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001286:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001288:	f7ff fd3e 	bl	8000d08 <HAL_GetTick>
 800128c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800128e:	6833      	ldr	r3, [r6, #0]
 8001290:	05d8      	lsls	r0, r3, #23
 8001292:	f57f aef1 	bpl.w	8001078 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001296:	f7ff fd37 	bl	8000d08 <HAL_GetTick>
 800129a:	1b40      	subs	r0, r0, r5
 800129c:	2802      	cmp	r0, #2
 800129e:	d9f6      	bls.n	800128e <HAL_RCC_OscConfig+0x26e>
 80012a0:	e742      	b.n	8001128 <HAL_RCC_OscConfig+0x108>
 80012a2:	bf00      	nop
 80012a4:	58024400 	.word	0x58024400
 80012a8:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012ac:	6963      	ldr	r3, [r4, #20]
 80012ae:	4da1      	ldr	r5, [pc, #644]	; (8001534 <HAL_RCC_OscConfig+0x514>)
 80012b0:	b183      	cbz	r3, 80012d4 <HAL_RCC_OscConfig+0x2b4>
      __HAL_RCC_LSI_ENABLE();
 80012b2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80012ba:	f7ff fd25 	bl	8000d08 <HAL_GetTick>
 80012be:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012c0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012c2:	079b      	lsls	r3, r3, #30
 80012c4:	f53f aedc 	bmi.w	8001080 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c8:	f7ff fd1e 	bl	8000d08 <HAL_GetTick>
 80012cc:	1b80      	subs	r0, r0, r6
 80012ce:	2802      	cmp	r0, #2
 80012d0:	d9f6      	bls.n	80012c0 <HAL_RCC_OscConfig+0x2a0>
 80012d2:	e729      	b.n	8001128 <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_LSI_DISABLE();
 80012d4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012d6:	f023 0301 	bic.w	r3, r3, #1
 80012da:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80012dc:	f7ff fd14 	bl	8000d08 <HAL_GetTick>
 80012e0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012e2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012e4:	079f      	lsls	r7, r3, #30
 80012e6:	f57f aecb 	bpl.w	8001080 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ea:	f7ff fd0d 	bl	8000d08 <HAL_GetTick>
 80012ee:	1b80      	subs	r0, r0, r6
 80012f0:	2802      	cmp	r0, #2
 80012f2:	d9f6      	bls.n	80012e2 <HAL_RCC_OscConfig+0x2c2>
 80012f4:	e718      	b.n	8001128 <HAL_RCC_OscConfig+0x108>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80012f6:	69a3      	ldr	r3, [r4, #24]
 80012f8:	4d8e      	ldr	r5, [pc, #568]	; (8001534 <HAL_RCC_OscConfig+0x514>)
 80012fa:	b183      	cbz	r3, 800131e <HAL_RCC_OscConfig+0x2fe>
      __HAL_RCC_HSI48_ENABLE();
 80012fc:	682b      	ldr	r3, [r5, #0]
 80012fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001302:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001304:	f7ff fd00 	bl	8000d08 <HAL_GetTick>
 8001308:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800130a:	682b      	ldr	r3, [r5, #0]
 800130c:	0498      	lsls	r0, r3, #18
 800130e:	f53f aebb 	bmi.w	8001088 <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001312:	f7ff fcf9 	bl	8000d08 <HAL_GetTick>
 8001316:	1b80      	subs	r0, r0, r6
 8001318:	2802      	cmp	r0, #2
 800131a:	d9f6      	bls.n	800130a <HAL_RCC_OscConfig+0x2ea>
 800131c:	e704      	b.n	8001128 <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_HSI48_DISABLE();
 800131e:	682b      	ldr	r3, [r5, #0]
 8001320:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001324:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001326:	f7ff fcef 	bl	8000d08 <HAL_GetTick>
 800132a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800132c:	682b      	ldr	r3, [r5, #0]
 800132e:	0499      	lsls	r1, r3, #18
 8001330:	f57f aeaa 	bpl.w	8001088 <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001334:	f7ff fce8 	bl	8000d08 <HAL_GetTick>
 8001338:	1b80      	subs	r0, r0, r6
 800133a:	2802      	cmp	r0, #2
 800133c:	d9f6      	bls.n	800132c <HAL_RCC_OscConfig+0x30c>
 800133e:	e6f3      	b.n	8001128 <HAL_RCC_OscConfig+0x108>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001340:	f7ff fce2 	bl	8000d08 <HAL_GetTick>
 8001344:	1b80      	subs	r0, r0, r6
 8001346:	2864      	cmp	r0, #100	; 0x64
 8001348:	f67f aea9 	bls.w	800109e <HAL_RCC_OscConfig+0x7e>
 800134c:	e6ec      	b.n	8001128 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800134e:	b9d3      	cbnz	r3, 8001386 <HAL_RCC_OscConfig+0x366>
 8001350:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001352:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001356:	f023 0301 	bic.w	r3, r3, #1
 800135a:	672b      	str	r3, [r5, #112]	; 0x70
 800135c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800135e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001362:	672b      	str	r3, [r5, #112]	; 0x70
 8001364:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001366:	f023 0304 	bic.w	r3, r3, #4
 800136a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800136c:	f7ff fccc 	bl	8000d08 <HAL_GetTick>
 8001370:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001372:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001374:	0798      	lsls	r0, r3, #30
 8001376:	f57f aea9 	bpl.w	80010cc <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800137a:	f7ff fcc5 	bl	8000d08 <HAL_GetTick>
 800137e:	1b80      	subs	r0, r0, r6
 8001380:	42b8      	cmp	r0, r7
 8001382:	d9f6      	bls.n	8001372 <HAL_RCC_OscConfig+0x352>
 8001384:	e6d0      	b.n	8001128 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001386:	2b05      	cmp	r3, #5
 8001388:	d108      	bne.n	800139c <HAL_RCC_OscConfig+0x37c>
 800138a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	672b      	str	r3, [r5, #112]	; 0x70
 8001392:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001394:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001398:	672b      	str	r3, [r5, #112]	; 0x70
 800139a:	e689      	b.n	80010b0 <HAL_RCC_OscConfig+0x90>
 800139c:	2b85      	cmp	r3, #133	; 0x85
 800139e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013a0:	d106      	bne.n	80013b0 <HAL_RCC_OscConfig+0x390>
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	672b      	str	r3, [r5, #112]	; 0x70
 80013a8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ae:	e7f3      	b.n	8001398 <HAL_RCC_OscConfig+0x378>
 80013b0:	f023 0301 	bic.w	r3, r3, #1
 80013b4:	672b      	str	r3, [r5, #112]	; 0x70
 80013b6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013b8:	f023 0304 	bic.w	r3, r3, #4
 80013bc:	672b      	str	r3, [r5, #112]	; 0x70
 80013be:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013c4:	e677      	b.n	80010b6 <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c6:	f7ff fc9f 	bl	8000d08 <HAL_GetTick>
 80013ca:	1b40      	subs	r0, r0, r5
 80013cc:	42b8      	cmp	r0, r7
 80013ce:	f67f ae79 	bls.w	80010c4 <HAL_RCC_OscConfig+0xa4>
 80013d2:	e6a9      	b.n	8001128 <HAL_RCC_OscConfig+0x108>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80013d4:	4d57      	ldr	r5, [pc, #348]	; (8001534 <HAL_RCC_OscConfig+0x514>)
 80013d6:	692b      	ldr	r3, [r5, #16]
 80013d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013dc:	2b18      	cmp	r3, #24
 80013de:	d07a      	beq.n	80014d6 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_PLL_DISABLE();
 80013e0:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013e2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80013e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013e8:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ea:	d167      	bne.n	80014bc <HAL_RCC_OscConfig+0x49c>
        tickstart = HAL_GetTick();
 80013ec:	f7ff fc8c 	bl	8000d08 <HAL_GetTick>
 80013f0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013f2:	682b      	ldr	r3, [r5, #0]
 80013f4:	0199      	lsls	r1, r3, #6
 80013f6:	d45b      	bmi.n	80014b0 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013f8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80013fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80013fc:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8001400:	f023 0303 	bic.w	r3, r3, #3
 8001404:	4313      	orrs	r3, r2
 8001406:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001408:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800140c:	62ab      	str	r3, [r5, #40]	; 0x28
 800140e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001410:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001412:	3b01      	subs	r3, #1
 8001414:	3a01      	subs	r2, #1
 8001416:	025b      	lsls	r3, r3, #9
 8001418:	0412      	lsls	r2, r2, #16
 800141a:	b29b      	uxth	r3, r3
 800141c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001420:	4313      	orrs	r3, r2
 8001422:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001424:	3a01      	subs	r2, #1
 8001426:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800142a:	4313      	orrs	r3, r2
 800142c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800142e:	3a01      	subs	r2, #1
 8001430:	0612      	lsls	r2, r2, #24
 8001432:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001436:	4313      	orrs	r3, r2
 8001438:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800143a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800143c:	f023 0301 	bic.w	r3, r3, #1
 8001440:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001442:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001444:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800144a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800144e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001452:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001454:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001456:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001458:	f023 030c 	bic.w	r3, r3, #12
 800145c:	4313      	orrs	r3, r2
 800145e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001460:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001462:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001464:	f023 0302 	bic.w	r3, r3, #2
 8001468:	4313      	orrs	r3, r2
 800146a:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800146c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800146e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001472:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001474:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800147a:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800147c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800147e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001482:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8001484:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800148c:	682b      	ldr	r3, [r5, #0]
 800148e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001492:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001494:	f7ff fc38 	bl	8000d08 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001498:	4d26      	ldr	r5, [pc, #152]	; (8001534 <HAL_RCC_OscConfig+0x514>)
        tickstart = HAL_GetTick();
 800149a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800149c:	682b      	ldr	r3, [r5, #0]
 800149e:	019a      	lsls	r2, r3, #6
 80014a0:	f53f ae18 	bmi.w	80010d4 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a4:	f7ff fc30 	bl	8000d08 <HAL_GetTick>
 80014a8:	1b00      	subs	r0, r0, r4
 80014aa:	2802      	cmp	r0, #2
 80014ac:	d9f6      	bls.n	800149c <HAL_RCC_OscConfig+0x47c>
 80014ae:	e63b      	b.n	8001128 <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b0:	f7ff fc2a 	bl	8000d08 <HAL_GetTick>
 80014b4:	1b80      	subs	r0, r0, r6
 80014b6:	2802      	cmp	r0, #2
 80014b8:	d99b      	bls.n	80013f2 <HAL_RCC_OscConfig+0x3d2>
 80014ba:	e635      	b.n	8001128 <HAL_RCC_OscConfig+0x108>
        tickstart = HAL_GetTick();
 80014bc:	f7ff fc24 	bl	8000d08 <HAL_GetTick>
 80014c0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014c2:	682b      	ldr	r3, [r5, #0]
 80014c4:	019b      	lsls	r3, r3, #6
 80014c6:	f57f ae05 	bpl.w	80010d4 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ca:	f7ff fc1d 	bl	8000d08 <HAL_GetTick>
 80014ce:	1b00      	subs	r0, r0, r4
 80014d0:	2802      	cmp	r0, #2
 80014d2:	d9f6      	bls.n	80014c2 <HAL_RCC_OscConfig+0x4a2>
 80014d4:	e628      	b.n	8001128 <HAL_RCC_OscConfig+0x108>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014d6:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80014d8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80014da:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014dc:	f43f ae25 	beq.w	800112a <HAL_RCC_OscConfig+0x10a>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e0:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80014e6:	4281      	cmp	r1, r0
 80014e8:	f47f ad9d 	bne.w	8001026 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80014ec:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80014f2:	428a      	cmp	r2, r1
 80014f4:	f47f ad97 	bne.w	8001026 <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80014f8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80014fa:	f3c3 0108 	ubfx	r1, r3, #0, #9
 80014fe:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001500:	4291      	cmp	r1, r2
 8001502:	f47f ad90 	bne.w	8001026 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001506:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001508:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800150c:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800150e:	4291      	cmp	r1, r2
 8001510:	f47f ad89 	bne.w	8001026 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001514:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001516:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800151a:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800151c:	4291      	cmp	r1, r2
 800151e:	f47f ad82 	bne.w	8001026 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001522:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001524:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8001528:	3801      	subs	r0, #1
  return HAL_OK;
 800152a:	1a18      	subs	r0, r3, r0
 800152c:	bf18      	it	ne
 800152e:	2001      	movne	r0, #1
 8001530:	e5fb      	b.n	800112a <HAL_RCC_OscConfig+0x10a>
 8001532:	bf00      	nop
 8001534:	58024400 	.word	0x58024400

08001538 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001538:	4b48      	ldr	r3, [pc, #288]	; (800165c <HAL_RCC_GetSysClockFreq+0x124>)
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001540:	2a10      	cmp	r2, #16
{
 8001542:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001544:	f000 8086 	beq.w	8001654 <HAL_RCC_GetSysClockFreq+0x11c>
 8001548:	2a18      	cmp	r2, #24
 800154a:	d00c      	beq.n	8001566 <HAL_RCC_GetSysClockFreq+0x2e>
 800154c:	2a00      	cmp	r2, #0
 800154e:	f040 8083 	bne.w	8001658 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4842      	ldr	r0, [pc, #264]	; (8001660 <HAL_RCC_GetSysClockFreq+0x128>)
 8001556:	f012 0f20 	tst.w	r2, #32
 800155a:	d003      	beq.n	8001564 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001562:	40d8      	lsrs	r0, r3
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8001564:	bd30      	pop	{r4, r5, pc}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001566:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001568:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800156a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    if (pllm != 0U)
 800156c:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001570:	f3c5 1005 	ubfx	r0, r5, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (pllm != 0U)
 8001576:	d0f5      	beq.n	8001564 <HAL_RCC_GetSysClockFreq+0x2c>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001578:	f3c2 02cc 	ubfx	r2, r2, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800157c:	f004 0401 	and.w	r4, r4, #1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001580:	ee07 0a90 	vmov	s15, r0
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001584:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001588:	4362      	muls	r2, r4
 800158a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800158e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001592:	2901      	cmp	r1, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001594:	ee07 2a90 	vmov	s15, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001598:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 800159c:	d04c      	beq.n	8001638 <HAL_RCC_GetSysClockFreq+0x100>
 800159e:	2902      	cmp	r1, #2
 80015a0:	d03c      	beq.n	800161c <HAL_RCC_GetSysClockFreq+0xe4>
 80015a2:	2900      	cmp	r1, #0
 80015a4:	d148      	bne.n	8001638 <HAL_RCC_GetSysClockFreq+0x100>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	0692      	lsls	r2, r2, #26
 80015aa:	d527      	bpl.n	80015fc <HAL_RCC_GetSysClockFreq+0xc4>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80015ac:	6819      	ldr	r1, [r3, #0]
 80015ae:	4a2c      	ldr	r2, [pc, #176]	; (8001660 <HAL_RCC_GetSysClockFreq+0x128>)
 80015b0:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80015b6:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80015b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015bc:	ee07 2a10 	vmov	s14, r2
 80015c0:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80015c4:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80015c8:	ee06 3a90 	vmov	s13, r3
 80015cc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80015d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80015d4:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80015d8:	4b20      	ldr	r3, [pc, #128]	; (800165c <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80015da:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80015e4:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80015e6:	ee07 3a10 	vmov	s14, r3
 80015ea:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80015ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80015f2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80015f6:	ee17 0a90 	vmov	r0, s15
 80015fa:	e7b3      	b.n	8001564 <HAL_RCC_GetSysClockFreq+0x2c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001602:	ee07 3a10 	vmov	s14, r3
 8001606:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800160a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800160e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001612:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8001664 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001616:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800161a:	e7dd      	b.n	80015d8 <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001622:	ee07 3a10 	vmov	s14, r3
 8001626:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800162a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800162e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001632:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8001668 <HAL_RCC_GetSysClockFreq+0x130>
 8001636:	e7ee      	b.n	8001616 <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800163e:	ee07 3a10 	vmov	s14, r3
 8001642:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001646:	ee77 7a27 	vadd.f32	s15, s14, s15
 800164a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800164e:	ed9f 6a07 	vldr	s12, [pc, #28]	; 800166c <HAL_RCC_GetSysClockFreq+0x134>
 8001652:	e7e0      	b.n	8001616 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001654:	4806      	ldr	r0, [pc, #24]	; (8001670 <HAL_RCC_GetSysClockFreq+0x138>)
 8001656:	e785      	b.n	8001564 <HAL_RCC_GetSysClockFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 8001658:	4806      	ldr	r0, [pc, #24]	; (8001674 <HAL_RCC_GetSysClockFreq+0x13c>)
 800165a:	e783      	b.n	8001564 <HAL_RCC_GetSysClockFreq+0x2c>
 800165c:	58024400 	.word	0x58024400
 8001660:	03d09000 	.word	0x03d09000
 8001664:	4c742400 	.word	0x4c742400
 8001668:	4af42400 	.word	0x4af42400
 800166c:	4a742400 	.word	0x4a742400
 8001670:	007a1200 	.word	0x007a1200
 8001674:	003d0900 	.word	0x003d0900

08001678 <HAL_RCC_ClockConfig>:
{
 8001678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800167c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800167e:	4604      	mov	r4, r0
 8001680:	b910      	cbnz	r0, 8001688 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001682:	2001      	movs	r0, #1
}
 8001684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001688:	4a88      	ldr	r2, [pc, #544]	; (80018ac <HAL_RCC_ClockConfig+0x234>)
 800168a:	6813      	ldr	r3, [r2, #0]
 800168c:	f003 030f 	and.w	r3, r3, #15
 8001690:	428b      	cmp	r3, r1
 8001692:	f0c0 8093 	bcc.w	80017bc <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001696:	6823      	ldr	r3, [r4, #0]
 8001698:	075f      	lsls	r7, r3, #29
 800169a:	f100 809b 	bmi.w	80017d4 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800169e:	071e      	lsls	r6, r3, #28
 80016a0:	d50b      	bpl.n	80016ba <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80016a2:	4983      	ldr	r1, [pc, #524]	; (80018b0 <HAL_RCC_ClockConfig+0x238>)
 80016a4:	6966      	ldr	r6, [r4, #20]
 80016a6:	69c8      	ldr	r0, [r1, #28]
 80016a8:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80016ac:	4286      	cmp	r6, r0
 80016ae:	d904      	bls.n	80016ba <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80016b0:	69ca      	ldr	r2, [r1, #28]
 80016b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80016b6:	4332      	orrs	r2, r6
 80016b8:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ba:	06d8      	lsls	r0, r3, #27
 80016bc:	d50b      	bpl.n	80016d6 <HAL_RCC_ClockConfig+0x5e>
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80016be:	497c      	ldr	r1, [pc, #496]	; (80018b0 <HAL_RCC_ClockConfig+0x238>)
 80016c0:	69a6      	ldr	r6, [r4, #24]
 80016c2:	69c8      	ldr	r0, [r1, #28]
 80016c4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80016c8:	4286      	cmp	r6, r0
 80016ca:	d904      	bls.n	80016d6 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80016cc:	69ca      	ldr	r2, [r1, #28]
 80016ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80016d2:	4332      	orrs	r2, r6
 80016d4:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80016d6:	0699      	lsls	r1, r3, #26
 80016d8:	d50b      	bpl.n	80016f2 <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80016da:	4975      	ldr	r1, [pc, #468]	; (80018b0 <HAL_RCC_ClockConfig+0x238>)
 80016dc:	69e6      	ldr	r6, [r4, #28]
 80016de:	6a08      	ldr	r0, [r1, #32]
 80016e0:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80016e4:	4286      	cmp	r6, r0
 80016e6:	d904      	bls.n	80016f2 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80016e8:	6a0a      	ldr	r2, [r1, #32]
 80016ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80016ee:	4332      	orrs	r2, r6
 80016f0:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f2:	079a      	lsls	r2, r3, #30
 80016f4:	d50b      	bpl.n	800170e <HAL_RCC_ClockConfig+0x96>
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80016f6:	496e      	ldr	r1, [pc, #440]	; (80018b0 <HAL_RCC_ClockConfig+0x238>)
 80016f8:	68e6      	ldr	r6, [r4, #12]
 80016fa:	6988      	ldr	r0, [r1, #24]
 80016fc:	f000 000f 	and.w	r0, r0, #15
 8001700:	4286      	cmp	r6, r0
 8001702:	d904      	bls.n	800170e <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001704:	698a      	ldr	r2, [r1, #24]
 8001706:	f022 020f 	bic.w	r2, r2, #15
 800170a:	4332      	orrs	r2, r6
 800170c:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800170e:	07df      	lsls	r7, r3, #31
 8001710:	d46e      	bmi.n	80017f0 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001712:	6823      	ldr	r3, [r4, #0]
 8001714:	079e      	lsls	r6, r3, #30
 8001716:	f100 80a1 	bmi.w	800185c <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800171a:	4964      	ldr	r1, [pc, #400]	; (80018ac <HAL_RCC_ClockConfig+0x234>)
 800171c:	680a      	ldr	r2, [r1, #0]
 800171e:	f002 020f 	and.w	r2, r2, #15
 8001722:	42aa      	cmp	r2, r5
 8001724:	f200 80a8 	bhi.w	8001878 <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001728:	0758      	lsls	r0, r3, #29
 800172a:	f100 80b1 	bmi.w	8001890 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800172e:	0719      	lsls	r1, r3, #28
 8001730:	d50b      	bpl.n	800174a <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001732:	495f      	ldr	r1, [pc, #380]	; (80018b0 <HAL_RCC_ClockConfig+0x238>)
 8001734:	6965      	ldr	r5, [r4, #20]
 8001736:	69c8      	ldr	r0, [r1, #28]
 8001738:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800173c:	4285      	cmp	r5, r0
 800173e:	d204      	bcs.n	800174a <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001740:	69ca      	ldr	r2, [r1, #28]
 8001742:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001746:	432a      	orrs	r2, r5
 8001748:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800174a:	06da      	lsls	r2, r3, #27
 800174c:	d50b      	bpl.n	8001766 <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800174e:	4958      	ldr	r1, [pc, #352]	; (80018b0 <HAL_RCC_ClockConfig+0x238>)
 8001750:	69a5      	ldr	r5, [r4, #24]
 8001752:	69c8      	ldr	r0, [r1, #28]
 8001754:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001758:	4285      	cmp	r5, r0
 800175a:	d204      	bcs.n	8001766 <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800175c:	69ca      	ldr	r2, [r1, #28]
 800175e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001762:	432a      	orrs	r2, r5
 8001764:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001766:	069b      	lsls	r3, r3, #26
 8001768:	d50b      	bpl.n	8001782 <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800176a:	4a51      	ldr	r2, [pc, #324]	; (80018b0 <HAL_RCC_ClockConfig+0x238>)
 800176c:	69e0      	ldr	r0, [r4, #28]
 800176e:	6a11      	ldr	r1, [r2, #32]
 8001770:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8001774:	4288      	cmp	r0, r1
 8001776:	d204      	bcs.n	8001782 <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001778:	6a13      	ldr	r3, [r2, #32]
 800177a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800177e:	4303      	orrs	r3, r0
 8001780:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001782:	f7ff fed9 	bl	8001538 <HAL_RCC_GetSysClockFreq>
 8001786:	494a      	ldr	r1, [pc, #296]	; (80018b0 <HAL_RCC_ClockConfig+0x238>)
 8001788:	4a4a      	ldr	r2, [pc, #296]	; (80018b4 <HAL_RCC_ClockConfig+0x23c>)
 800178a:	698b      	ldr	r3, [r1, #24]
 800178c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001790:	5cd3      	ldrb	r3, [r2, r3]
 8001792:	f003 031f 	and.w	r3, r3, #31
 8001796:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001798:	698b      	ldr	r3, [r1, #24]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	5cd3      	ldrb	r3, [r2, r3]
 80017a0:	4a45      	ldr	r2, [pc, #276]	; (80018b8 <HAL_RCC_ClockConfig+0x240>)
 80017a2:	f003 031f 	and.w	r3, r3, #31
 80017a6:	fa20 f303 	lsr.w	r3, r0, r3
 80017aa:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80017ac:	4b43      	ldr	r3, [pc, #268]	; (80018bc <HAL_RCC_ClockConfig+0x244>)
 80017ae:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 80017b0:	4b43      	ldr	r3, [pc, #268]	; (80018c0 <HAL_RCC_ClockConfig+0x248>)
}
 80017b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 80017b6:	6818      	ldr	r0, [r3, #0]
 80017b8:	f7ff ba46 	b.w	8000c48 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017bc:	6813      	ldr	r3, [r2, #0]
 80017be:	f023 030f 	bic.w	r3, r3, #15
 80017c2:	430b      	orrs	r3, r1
 80017c4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c6:	6813      	ldr	r3, [r2, #0]
 80017c8:	f003 030f 	and.w	r3, r3, #15
 80017cc:	428b      	cmp	r3, r1
 80017ce:	f47f af58 	bne.w	8001682 <HAL_RCC_ClockConfig+0xa>
 80017d2:	e760      	b.n	8001696 <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80017d4:	4936      	ldr	r1, [pc, #216]	; (80018b0 <HAL_RCC_ClockConfig+0x238>)
 80017d6:	6926      	ldr	r6, [r4, #16]
 80017d8:	6988      	ldr	r0, [r1, #24]
 80017da:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80017de:	4286      	cmp	r6, r0
 80017e0:	f67f af5d 	bls.w	800169e <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80017e4:	698a      	ldr	r2, [r1, #24]
 80017e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017ea:	4332      	orrs	r2, r6
 80017ec:	618a      	str	r2, [r1, #24]
 80017ee:	e756      	b.n	800169e <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80017f0:	4b2f      	ldr	r3, [pc, #188]	; (80018b0 <HAL_RCC_ClockConfig+0x238>)
 80017f2:	68a1      	ldr	r1, [r4, #8]
 80017f4:	699a      	ldr	r2, [r3, #24]
 80017f6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80017fa:	430a      	orrs	r2, r1
 80017fc:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fe:	6862      	ldr	r2, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001800:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001802:	2a02      	cmp	r2, #2
 8001804:	d11d      	bne.n	8001842 <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001806:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800180a:	f43f af3a 	beq.w	8001682 <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800180e:	4e28      	ldr	r6, [pc, #160]	; (80018b0 <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001810:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001814:	6933      	ldr	r3, [r6, #16]
 8001816:	f023 0307 	bic.w	r3, r3, #7
 800181a:	4313      	orrs	r3, r2
 800181c:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 800181e:	f7ff fa73 	bl	8000d08 <HAL_GetTick>
 8001822:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001824:	6933      	ldr	r3, [r6, #16]
 8001826:	6862      	ldr	r2, [r4, #4]
 8001828:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800182c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8001830:	f43f af6f 	beq.w	8001712 <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001834:	f7ff fa68 	bl	8000d08 <HAL_GetTick>
 8001838:	1bc0      	subs	r0, r0, r7
 800183a:	4540      	cmp	r0, r8
 800183c:	d9f2      	bls.n	8001824 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 800183e:	2003      	movs	r0, #3
 8001840:	e720      	b.n	8001684 <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001842:	2a03      	cmp	r2, #3
 8001844:	d102      	bne.n	800184c <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001846:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800184a:	e7de      	b.n	800180a <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800184c:	2a01      	cmp	r2, #1
 800184e:	d102      	bne.n	8001856 <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001850:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001854:	e7d9      	b.n	800180a <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001856:	f013 0f04 	tst.w	r3, #4
 800185a:	e7d6      	b.n	800180a <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800185c:	4914      	ldr	r1, [pc, #80]	; (80018b0 <HAL_RCC_ClockConfig+0x238>)
 800185e:	68e6      	ldr	r6, [r4, #12]
 8001860:	6988      	ldr	r0, [r1, #24]
 8001862:	f000 000f 	and.w	r0, r0, #15
 8001866:	4286      	cmp	r6, r0
 8001868:	f4bf af57 	bcs.w	800171a <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800186c:	698a      	ldr	r2, [r1, #24]
 800186e:	f022 020f 	bic.w	r2, r2, #15
 8001872:	4332      	orrs	r2, r6
 8001874:	618a      	str	r2, [r1, #24]
 8001876:	e750      	b.n	800171a <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001878:	680a      	ldr	r2, [r1, #0]
 800187a:	f022 020f 	bic.w	r2, r2, #15
 800187e:	432a      	orrs	r2, r5
 8001880:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001882:	680a      	ldr	r2, [r1, #0]
 8001884:	f002 020f 	and.w	r2, r2, #15
 8001888:	42aa      	cmp	r2, r5
 800188a:	f47f aefa 	bne.w	8001682 <HAL_RCC_ClockConfig+0xa>
 800188e:	e74b      	b.n	8001728 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001890:	4907      	ldr	r1, [pc, #28]	; (80018b0 <HAL_RCC_ClockConfig+0x238>)
 8001892:	6925      	ldr	r5, [r4, #16]
 8001894:	6988      	ldr	r0, [r1, #24]
 8001896:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800189a:	4285      	cmp	r5, r0
 800189c:	f4bf af47 	bcs.w	800172e <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80018a0:	698a      	ldr	r2, [r1, #24]
 80018a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018a6:	432a      	orrs	r2, r5
 80018a8:	618a      	str	r2, [r1, #24]
 80018aa:	e740      	b.n	800172e <HAL_RCC_ClockConfig+0xb6>
 80018ac:	52002000 	.word	0x52002000
 80018b0:	58024400 	.word	0x58024400
 80018b4:	08008bac 	.word	0x08008bac
 80018b8:	24000004 	.word	0x24000004
 80018bc:	24000000 	.word	0x24000000
 80018c0:	2400000c 	.word	0x2400000c

080018c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018c4:	b510      	push	{r4, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80018c6:	4c0c      	ldr	r4, [pc, #48]	; (80018f8 <HAL_RCC_GetHCLKFreq+0x34>)
 80018c8:	f7ff fe36 	bl	8001538 <HAL_RCC_GetSysClockFreq>
 80018cc:	490b      	ldr	r1, [pc, #44]	; (80018fc <HAL_RCC_GetHCLKFreq+0x38>)
 80018ce:	69a3      	ldr	r3, [r4, #24]
 80018d0:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80018d4:	5cca      	ldrb	r2, [r1, r3]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80018d6:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80018d8:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80018dc:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80018e0:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80018e4:	5ccb      	ldrb	r3, [r1, r3]
 80018e6:	f003 031f 	and.w	r3, r3, #31
 80018ea:	fa22 f003 	lsr.w	r0, r2, r3
 80018ee:	4b04      	ldr	r3, [pc, #16]	; (8001900 <HAL_RCC_GetHCLKFreq+0x3c>)
 80018f0:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018f2:	4b04      	ldr	r3, [pc, #16]	; (8001904 <HAL_RCC_GetHCLKFreq+0x40>)
 80018f4:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80018f6:	bd10      	pop	{r4, pc}
 80018f8:	58024400 	.word	0x58024400
 80018fc:	08008bac 	.word	0x08008bac
 8001900:	24000004 	.word	0x24000004
 8001904:	24000000 	.word	0x24000000

08001908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001908:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800190a:	f7ff ffdb 	bl	80018c4 <HAL_RCC_GetHCLKFreq>
 800190e:	4b05      	ldr	r3, [pc, #20]	; (8001924 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001910:	4a05      	ldr	r2, [pc, #20]	; (8001928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001918:	5cd3      	ldrb	r3, [r2, r3]
 800191a:	f003 031f 	and.w	r3, r3, #31
#endif
}
 800191e:	40d8      	lsrs	r0, r3
 8001920:	bd08      	pop	{r3, pc}
 8001922:	bf00      	nop
 8001924:	58024400 	.word	0x58024400
 8001928:	08008bac 	.word	0x08008bac

0800192c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800192c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800192e:	f7ff ffc9 	bl	80018c4 <HAL_RCC_GetHCLKFreq>
 8001932:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001934:	4a05      	ldr	r2, [pc, #20]	; (800194c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800193c:	5cd3      	ldrb	r3, [r2, r3]
 800193e:	f003 031f 	and.w	r3, r3, #31
#endif
}
 8001942:	40d8      	lsrs	r0, r3
 8001944:	bd08      	pop	{r3, pc}
 8001946:	bf00      	nop
 8001948:	58024400 	.word	0x58024400
 800194c:	08008bac 	.word	0x08008bac

08001950 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8001950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001952:	4c3a      	ldr	r4, [pc, #232]	; (8001a3c <RCCEx_PLL2_Config+0xec>)
{
 8001954:	4606      	mov	r6, r0
 8001956:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001958:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	2b03      	cmp	r3, #3
 8001960:	d069      	beq.n	8001a36 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8001962:	6823      	ldr	r3, [r4, #0]
 8001964:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001968:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800196a:	f7ff f9cd 	bl	8000d08 <HAL_GetTick>
 800196e:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	011a      	lsls	r2, r3, #4
 8001974:	d44b      	bmi.n	8001a0e <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8001976:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001978:	6832      	ldr	r2, [r6, #0]
 800197a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800197e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001982:	62a3      	str	r3, [r4, #40]	; 0x28
 8001984:	68b3      	ldr	r3, [r6, #8]
 8001986:	68f2      	ldr	r2, [r6, #12]
 8001988:	3b01      	subs	r3, #1
 800198a:	3a01      	subs	r2, #1
 800198c:	025b      	lsls	r3, r3, #9
 800198e:	0412      	lsls	r2, r2, #16
 8001990:	b29b      	uxth	r3, r3
 8001992:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001996:	4313      	orrs	r3, r2
 8001998:	6872      	ldr	r2, [r6, #4]
 800199a:	3a01      	subs	r2, #1
 800199c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019a0:	4313      	orrs	r3, r2
 80019a2:	6932      	ldr	r2, [r6, #16]
 80019a4:	3a01      	subs	r2, #1
 80019a6:	0612      	lsls	r2, r2, #24
 80019a8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80019ac:	4313      	orrs	r3, r2
 80019ae:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80019b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80019b2:	6972      	ldr	r2, [r6, #20]
 80019b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80019b8:	4313      	orrs	r3, r2
 80019ba:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80019bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80019be:	69b2      	ldr	r2, [r6, #24]
 80019c0:	f023 0320 	bic.w	r3, r3, #32
 80019c4:	4313      	orrs	r3, r2
 80019c6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80019c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80019ca:	f023 0310 	bic.w	r3, r3, #16
 80019ce:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80019d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80019d2:	69f2      	ldr	r2, [r6, #28]
 80019d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80019d8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80019dc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80019e0:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80019e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80019e4:	f043 0310 	orr.w	r3, r3, #16
 80019e8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80019ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80019ec:	b9b5      	cbnz	r5, 8001a1c <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80019ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80019f2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80019f4:	4c11      	ldr	r4, [pc, #68]	; (8001a3c <RCCEx_PLL2_Config+0xec>)
 80019f6:	6823      	ldr	r3, [r4, #0]
 80019f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019fc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019fe:	f7ff f983 	bl	8000d08 <HAL_GetTick>
 8001a02:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8001a04:	6823      	ldr	r3, [r4, #0]
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	d50f      	bpl.n	8001a2a <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	e005      	b.n	8001a1a <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001a0e:	f7ff f97b 	bl	8000d08 <HAL_GetTick>
 8001a12:	1bc0      	subs	r0, r0, r7
 8001a14:	2802      	cmp	r0, #2
 8001a16:	d9ab      	bls.n	8001970 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8001a18:	2003      	movs	r0, #3
}
 8001a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001a1c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001a1e:	bf0c      	ite	eq
 8001a20:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001a24:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8001a28:	e7e3      	b.n	80019f2 <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001a2a:	f7ff f96d 	bl	8000d08 <HAL_GetTick>
 8001a2e:	1b40      	subs	r0, r0, r5
 8001a30:	2802      	cmp	r0, #2
 8001a32:	d9e7      	bls.n	8001a04 <RCCEx_PLL2_Config+0xb4>
 8001a34:	e7f0      	b.n	8001a18 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8001a36:	2001      	movs	r0, #1
 8001a38:	e7ef      	b.n	8001a1a <RCCEx_PLL2_Config+0xca>
 8001a3a:	bf00      	nop
 8001a3c:	58024400 	.word	0x58024400

08001a40 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8001a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001a42:	4c3a      	ldr	r4, [pc, #232]	; (8001b2c <RCCEx_PLL3_Config+0xec>)
{
 8001a44:	4606      	mov	r6, r0
 8001a46:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001a48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d069      	beq.n	8001b26 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8001a52:	6823      	ldr	r3, [r4, #0]
 8001a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a58:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a5a:	f7ff f955 	bl	8000d08 <HAL_GetTick>
 8001a5e:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8001a60:	6823      	ldr	r3, [r4, #0]
 8001a62:	009a      	lsls	r2, r3, #2
 8001a64:	d44b      	bmi.n	8001afe <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8001a66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a68:	6832      	ldr	r2, [r6, #0]
 8001a6a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8001a6e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001a72:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a74:	68b3      	ldr	r3, [r6, #8]
 8001a76:	68f2      	ldr	r2, [r6, #12]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	3a01      	subs	r2, #1
 8001a7c:	025b      	lsls	r3, r3, #9
 8001a7e:	0412      	lsls	r2, r2, #16
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001a86:	4313      	orrs	r3, r2
 8001a88:	6872      	ldr	r2, [r6, #4]
 8001a8a:	3a01      	subs	r2, #1
 8001a8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a90:	4313      	orrs	r3, r2
 8001a92:	6932      	ldr	r2, [r6, #16]
 8001a94:	3a01      	subs	r2, #1
 8001a96:	0612      	lsls	r2, r2, #24
 8001a98:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8001aa0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001aa2:	6972      	ldr	r2, [r6, #20]
 8001aa4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8001aac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001aae:	69b2      	ldr	r2, [r6, #24]
 8001ab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8001ab8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001aba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001abe:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8001ac0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ac2:	69f2      	ldr	r2, [r6, #28]
 8001ac4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ac8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001acc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ad0:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8001ad2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001ada:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001adc:	b9b5      	cbnz	r5, 8001b0c <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001ade:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001ae2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8001ae4:	4c11      	ldr	r4, [pc, #68]	; (8001b2c <RCCEx_PLL3_Config+0xec>)
 8001ae6:	6823      	ldr	r3, [r4, #0]
 8001ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aec:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aee:	f7ff f90b 	bl	8000d08 <HAL_GetTick>
 8001af2:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8001af4:	6823      	ldr	r3, [r4, #0]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	d50f      	bpl.n	8001b1a <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8001afa:	2000      	movs	r0, #0
 8001afc:	e005      	b.n	8001b0a <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001afe:	f7ff f903 	bl	8000d08 <HAL_GetTick>
 8001b02:	1bc0      	subs	r0, r0, r7
 8001b04:	2802      	cmp	r0, #2
 8001b06:	d9ab      	bls.n	8001a60 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8001b08:	2003      	movs	r0, #3
}
 8001b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001b0c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8001b0e:	bf0c      	ite	eq
 8001b10:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001b14:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8001b18:	e7e3      	b.n	8001ae2 <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001b1a:	f7ff f8f5 	bl	8000d08 <HAL_GetTick>
 8001b1e:	1b40      	subs	r0, r0, r5
 8001b20:	2802      	cmp	r0, #2
 8001b22:	d9e7      	bls.n	8001af4 <RCCEx_PLL3_Config+0xb4>
 8001b24:	e7f0      	b.n	8001b08 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8001b26:	2001      	movs	r0, #1
 8001b28:	e7ef      	b.n	8001b0a <RCCEx_PLL3_Config+0xca>
 8001b2a:	bf00      	nop
 8001b2c:	58024400 	.word	0x58024400

08001b30 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b34:	6806      	ldr	r6, [r0, #0]
{
 8001b36:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b38:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8001b3c:	d009      	beq.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001b3e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8001b40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b44:	d02c      	beq.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8001b46:	d811      	bhi.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8001b48:	b1e3      	cbz	r3, 8001b84 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8001b4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b4e:	d01f      	beq.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001b50:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001b52:	682b      	ldr	r3, [r5, #0]
 8001b54:	05d8      	lsls	r0, r3, #23
 8001b56:	f140 80d3 	bpl.w	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001b5a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	f200 80ce 	bhi.w	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8001b62:	e8df f003 	tbb	[pc, r3]
 8001b66:	2922      	.short	0x2922
 8001b68:	27c6      	.short	0x27c6
 8001b6a:	27          	.byte	0x27
 8001b6b:	00          	.byte	0x00
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001b6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001b70:	d1ee      	bne.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001b72:	4aaa      	ldr	r2, [pc, #680]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001b74:	2600      	movs	r6, #0
 8001b76:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 8001b78:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001b7a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001b7e:	430b      	orrs	r3, r1
 8001b80:	6513      	str	r3, [r2, #80]	; 0x50
 8001b82:	e7e6      	b.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b84:	4aa5      	ldr	r2, [pc, #660]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001b86:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001b8e:	e7f0      	b.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x42>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001b90:	2102      	movs	r1, #2
 8001b92:	3004      	adds	r0, #4
 8001b94:	f7ff fedc 	bl	8001950 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001b98:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001b9a:	2800      	cmp	r0, #0
 8001b9c:	d1d9      	bne.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8001b9e:	e7e8      	b.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x42>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001ba0:	2102      	movs	r1, #2
 8001ba2:	3024      	adds	r0, #36	; 0x24
 8001ba4:	f7ff ff4c 	bl	8001a40 <RCCEx_PLL3_Config>
 8001ba8:	e7f6      	b.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x68>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001baa:	4a9c      	ldr	r2, [pc, #624]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001bac:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb2:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8001bb4:	4634      	mov	r4, r6
 8001bb6:	e004      	b.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001bb8:	2100      	movs	r1, #0
 8001bba:	1d28      	adds	r0, r5, #4
 8001bbc:	f7ff fec8 	bl	8001950 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001bc0:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8001bc2:	2c00      	cmp	r4, #0
 8001bc4:	f040 809e 	bne.w	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001bc8:	4a94      	ldr	r2, [pc, #592]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001bca:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8001bcc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001bce:	f023 0307 	bic.w	r3, r3, #7
 8001bd2:	430b      	orrs	r3, r1
 8001bd4:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8001bd6:	682b      	ldr	r3, [r5, #0]
 8001bd8:	0599      	lsls	r1, r3, #22
 8001bda:	d50d      	bpl.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch(PeriphClkInit->Sai2AClockSelection)
 8001bdc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001bde:	2b80      	cmp	r3, #128	; 0x80
 8001be0:	f000 80af 	beq.w	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8001be4:	f200 8090 	bhi.w	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 809e 	beq.w	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8001bee:	2b40      	cmp	r3, #64	; 0x40
 8001bf0:	f000 80a1 	beq.w	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8001bf4:	2601      	movs	r6, #1
 8001bf6:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8001bf8:	682b      	ldr	r3, [r5, #0]
 8001bfa:	055a      	lsls	r2, r3, #21
 8001bfc:	d50f      	bpl.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0xee>
    switch(PeriphClkInit->Sai2BClockSelection)
 8001bfe:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c04:	f000 80c3 	beq.w	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8001c08:	f200 80a3 	bhi.w	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80b2 	beq.w	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x246>
 8001c12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c16:	f000 80b4 	beq.w	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8001c1a:	2601      	movs	r6, #1
 8001c1c:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8001c1e:	682b      	ldr	r3, [r5, #0]
 8001c20:	019b      	lsls	r3, r3, #6
 8001c22:	d50d      	bpl.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch(PeriphClkInit->OspiClockSelection)
 8001c24:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001c26:	2b20      	cmp	r3, #32
 8001c28:	f000 80cb 	beq.w	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8001c2c:	f200 80b7 	bhi.w	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 80b7 	beq.w	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8001c36:	2b10      	cmp	r3, #16
 8001c38:	f000 80bd 	beq.w	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8001c3c:	2601      	movs	r6, #1
 8001c3e:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8001c40:	682b      	ldr	r3, [r5, #0]
 8001c42:	04df      	lsls	r7, r3, #19
 8001c44:	d50f      	bpl.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->Spi123ClockSelection)
 8001c46:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c4c:	f000 80dd 	beq.w	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001c50:	f200 80bf 	bhi.w	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80cc 	beq.w	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8001c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c5e:	f000 80ce 	beq.w	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8001c62:	2601      	movs	r6, #1
 8001c64:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8001c66:	682b      	ldr	r3, [r5, #0]
 8001c68:	0498      	lsls	r0, r3, #18
 8001c6a:	d50f      	bpl.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x15c>
    switch(PeriphClkInit->Spi45ClockSelection)
 8001c6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c72:	f000 80ed 	beq.w	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x320>
 8001c76:	f200 80d3 	bhi.w	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 80d9 	beq.w	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x302>
 8001c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c84:	f000 80de 	beq.w	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8001c88:	2601      	movs	r6, #1
 8001c8a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8001c8c:	682b      	ldr	r3, [r5, #0]
 8001c8e:	0459      	lsls	r1, r3, #17
 8001c90:	d510      	bpl.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x184>
    switch(PeriphClkInit->Spi6ClockSelection)
 8001c92:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8001c96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c9a:	f000 80ff 	beq.w	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8001c9e:	f200 80df 	bhi.w	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 80e7 	beq.w	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x346>
 8001ca8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001cac:	f000 80f0 	beq.w	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8001cb0:	2601      	movs	r6, #1
 8001cb2:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001cb4:	682b      	ldr	r3, [r5, #0]
 8001cb6:	041a      	lsls	r2, r3, #16
 8001cb8:	d50d      	bpl.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    switch(PeriphClkInit->FdcanClockSelection)
 8001cba:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001cbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001cc0:	f000 80f4 	beq.w	8001eac <HAL_RCCEx_PeriphCLKConfig+0x37c>
 8001cc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cc8:	f000 80fe 	beq.w	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 80f2 	beq.w	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8001cd2:	2601      	movs	r6, #1
 8001cd4:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8001cd6:	682b      	ldr	r3, [r5, #0]
 8001cd8:	01db      	lsls	r3, r3, #7
 8001cda:	f140 810b 	bpl.w	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch(PeriphClkInit->FmcClockSelection)
 8001cde:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	f200 814b 	bhi.w	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8001ce6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001cea:	00fc      	.short	0x00fc
 8001cec:	014300f7 	.word	0x014300f7
 8001cf0:	00fc      	.short	0x00fc
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001cf8:	f7ff fea2 	bl	8001a40 <RCCEx_PLL3_Config>
 8001cfc:	e760      	b.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001cfe:	2601      	movs	r6, #1
 8001d00:	4634      	mov	r4, r6
 8001d02:	e768      	b.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8001d04:	4626      	mov	r6, r4
 8001d06:	e766      	b.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch(PeriphClkInit->Sai2AClockSelection)
 8001d08:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001d0c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001d10:	d002      	beq.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001d12:	2bc0      	cmp	r3, #192	; 0xc0
 8001d14:	f47f af6e 	bne.w	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    if(ret == HAL_OK)
 8001d18:	b9cc      	cbnz	r4, 8001d4e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8001d1a:	4a40      	ldr	r2, [pc, #256]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001d1c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8001d1e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001d20:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8001d24:	430b      	orrs	r3, r1
 8001d26:	6513      	str	r3, [r2, #80]	; 0x50
 8001d28:	e766      	b.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d2a:	4a3c      	ldr	r2, [pc, #240]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001d2c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d32:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001d34:	e7f0      	b.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001d36:	2100      	movs	r1, #0
 8001d38:	1d28      	adds	r0, r5, #4
 8001d3a:	f7ff fe09 	bl	8001950 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001d3e:	4604      	mov	r4, r0
      break;
 8001d40:	e7ea      	b.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001d42:	2100      	movs	r1, #0
 8001d44:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001d48:	f7ff fe7a 	bl	8001a40 <RCCEx_PLL3_Config>
 8001d4c:	e7f7      	b.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8001d4e:	4626      	mov	r6, r4
 8001d50:	e752      	b.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch(PeriphClkInit->Sai2BClockSelection)
 8001d52:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001d56:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001d5a:	d003      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8001d5c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001d60:	f47f af5b 	bne.w	8001c1a <HAL_RCCEx_PeriphCLKConfig+0xea>
    if(ret == HAL_OK)
 8001d64:	b9cc      	cbnz	r4, 8001d9a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8001d66:	4a2d      	ldr	r2, [pc, #180]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001d68:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8001d6a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001d6c:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 8001d70:	430b      	orrs	r3, r1
 8001d72:	6513      	str	r3, [r2, #80]	; 0x50
 8001d74:	e753      	b.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0xee>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d76:	4a29      	ldr	r2, [pc, #164]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001d78:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d7e:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001d80:	e7f0      	b.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x234>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001d82:	2100      	movs	r1, #0
 8001d84:	1d28      	adds	r0, r5, #4
 8001d86:	f7ff fde3 	bl	8001950 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001d8a:	4604      	mov	r4, r0
      break;
 8001d8c:	e7ea      	b.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x234>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001d8e:	2100      	movs	r1, #0
 8001d90:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001d94:	f7ff fe54 	bl	8001a40 <RCCEx_PLL3_Config>
 8001d98:	e7f7      	b.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8001d9a:	4626      	mov	r6, r4
 8001d9c:	e73f      	b.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0xee>
    switch(PeriphClkInit->OspiClockSelection)
 8001d9e:	2b30      	cmp	r3, #48	; 0x30
 8001da0:	f47f af4c 	bne.w	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
    if(ret == HAL_OK)
 8001da4:	b99c      	cbnz	r4, 8001dce <HAL_RCCEx_PeriphCLKConfig+0x29e>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8001da6:	4a1d      	ldr	r2, [pc, #116]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001da8:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8001daa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001dac:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001db0:	430b      	orrs	r3, r1
 8001db2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db4:	e744      	b.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x110>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001db6:	4a19      	ldr	r2, [pc, #100]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001db8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dbe:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001dc0:	e7f0      	b.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001dc2:	2102      	movs	r1, #2
 8001dc4:	1d28      	adds	r0, r5, #4
 8001dc6:	f7ff fdc3 	bl	8001950 <RCCEx_PLL2_Config>
 8001dca:	4604      	mov	r4, r0
      break;
 8001dcc:	e7ea      	b.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8001dce:	4626      	mov	r6, r4
 8001dd0:	e736      	b.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch(PeriphClkInit->Spi123ClockSelection)
 8001dd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001dd6:	d003      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8001dd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ddc:	f47f af41 	bne.w	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x132>
    if(ret == HAL_OK)
 8001de0:	b9cc      	cbnz	r4, 8001e16 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8001de2:	4a0e      	ldr	r2, [pc, #56]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001de4:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8001de6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001de8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001dec:	430b      	orrs	r3, r1
 8001dee:	6513      	str	r3, [r2, #80]	; 0x50
 8001df0:	e739      	b.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x136>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001df2:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001df4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dfa:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001dfc:	e7f0      	b.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001dfe:	2100      	movs	r1, #0
 8001e00:	1d28      	adds	r0, r5, #4
 8001e02:	f7ff fda5 	bl	8001950 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001e06:	4604      	mov	r4, r0
      break;
 8001e08:	e7ea      	b.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001e10:	f7ff fe16 	bl	8001a40 <RCCEx_PLL3_Config>
 8001e14:	e7f7      	b.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8001e16:	4626      	mov	r6, r4
 8001e18:	e725      	b.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8001e1a:	bf00      	nop
 8001e1c:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi45ClockSelection)
 8001e20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001e24:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8001e28:	d003      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x302>
 8001e2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001e2e:	f47f af2b 	bne.w	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x158>
    if(ret == HAL_OK)
 8001e32:	b99c      	cbnz	r4, 8001e5c <HAL_RCCEx_PeriphCLKConfig+0x32c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8001e34:	4a92      	ldr	r2, [pc, #584]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8001e36:	6e69      	ldr	r1, [r5, #100]	; 0x64
 8001e38:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001e3a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001e3e:	430b      	orrs	r3, r1
 8001e40:	6513      	str	r3, [r2, #80]	; 0x50
 8001e42:	e723      	b.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x15c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001e44:	2101      	movs	r1, #1
 8001e46:	1d28      	adds	r0, r5, #4
 8001e48:	f7ff fd82 	bl	8001950 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001e4c:	4604      	mov	r4, r0
      break;
 8001e4e:	e7f0      	b.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x302>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001e50:	2101      	movs	r1, #1
 8001e52:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001e56:	f7ff fdf3 	bl	8001a40 <RCCEx_PLL3_Config>
 8001e5a:	e7f7      	b.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8001e5c:	4626      	mov	r6, r4
 8001e5e:	e715      	b.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x15c>
    switch(PeriphClkInit->Spi6ClockSelection)
 8001e60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e64:	d007      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x346>
 8001e66:	d810      	bhi.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8001e68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001e6c:	d003      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x346>
 8001e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e72:	f47f af1d 	bne.w	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    if(ret == HAL_OK)
 8001e76:	b9bc      	cbnz	r4, 8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x378>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8001e78:	4a81      	ldr	r2, [pc, #516]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8001e7a:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8001e7e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001e80:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8001e84:	430b      	orrs	r3, r1
 8001e86:	6593      	str	r3, [r2, #88]	; 0x58
 8001e88:	e714      	b.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x184>
    switch(PeriphClkInit->Spi6ClockSelection)
 8001e8a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8001e8e:	e7f0      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x342>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001e90:	2101      	movs	r1, #1
 8001e92:	1d28      	adds	r0, r5, #4
 8001e94:	f7ff fd5c 	bl	8001950 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001e98:	4604      	mov	r4, r0
      break;
 8001e9a:	e7ec      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001ea2:	f7ff fdcd 	bl	8001a40 <RCCEx_PLL3_Config>
 8001ea6:	e7f7      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8001ea8:	4626      	mov	r6, r4
 8001eaa:	e703      	b.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001eac:	4a74      	ldr	r2, [pc, #464]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8001eae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001eb6:	b96c      	cbnz	r4, 8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001eb8:	4a71      	ldr	r2, [pc, #452]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8001eba:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8001ebc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001ebe:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001ec2:	430b      	orrs	r3, r1
 8001ec4:	6513      	str	r3, [r2, #80]	; 0x50
 8001ec6:	e706      	b.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001ec8:	2101      	movs	r1, #1
 8001eca:	1d28      	adds	r0, r5, #4
 8001ecc:	f7ff fd40 	bl	8001950 <RCCEx_PLL2_Config>
 8001ed0:	4604      	mov	r4, r0
      break;
 8001ed2:	e7f0      	b.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8001ed4:	4626      	mov	r6, r4
 8001ed6:	e6fe      	b.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ed8:	4a69      	ldr	r2, [pc, #420]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8001eda:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001ee2:	2c00      	cmp	r4, #0
 8001ee4:	d14d      	bne.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x452>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8001ee6:	4a66      	ldr	r2, [pc, #408]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8001ee8:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8001eea:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001eec:	f023 0303 	bic.w	r3, r3, #3
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ef4:	682b      	ldr	r3, [r5, #0]
 8001ef6:	025f      	lsls	r7, r3, #9
 8001ef8:	d54d      	bpl.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x466>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001efa:	4f62      	ldr	r7, [pc, #392]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f02:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8001f04:	f7fe ff00 	bl	8000d08 <HAL_GetTick>
 8001f08:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	05d8      	lsls	r0, r3, #23
 8001f0e:	d53a      	bpl.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x456>
    if(ret == HAL_OK)
 8001f10:	2c00      	cmp	r4, #0
 8001f12:	d16d      	bne.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8001f14:	4b5a      	ldr	r3, [pc, #360]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8001f16:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 8001f1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f1c:	4042      	eors	r2, r0
 8001f1e:	f412 7f40 	tst.w	r2, #768	; 0x300
 8001f22:	d00b      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x40c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f26:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f28:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f2c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001f30:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f32:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001f34:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001f38:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8001f3a:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8001f3c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8001f40:	d041      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x496>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f42:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8001f46:	494e      	ldr	r1, [pc, #312]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8001f48:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001f4c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001f50:	d14a      	bne.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8001f52:	6908      	ldr	r0, [r1, #16]
 8001f54:	4a4c      	ldr	r2, [pc, #304]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001f56:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8001f5a:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8001f5e:	4302      	orrs	r2, r0
 8001f60:	610a      	str	r2, [r1, #16]
 8001f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f66:	4a46      	ldr	r2, [pc, #280]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8001f68:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001f6a:	430b      	orrs	r3, r1
 8001f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6e:	e012      	b.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x466>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001f70:	2102      	movs	r1, #2
 8001f72:	1d28      	adds	r0, r5, #4
 8001f74:	f7ff fcec 	bl	8001950 <RCCEx_PLL2_Config>
 8001f78:	4604      	mov	r4, r0
      break;
 8001f7a:	e7b2      	b.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    switch(PeriphClkInit->FmcClockSelection)
 8001f7c:	2601      	movs	r6, #1
 8001f7e:	4634      	mov	r4, r6
 8001f80:	e7b8      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8001f82:	4626      	mov	r6, r4
 8001f84:	e7b6      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f86:	f7fe febf 	bl	8000d08 <HAL_GetTick>
 8001f8a:	eba0 0008 	sub.w	r0, r0, r8
 8001f8e:	2864      	cmp	r0, #100	; 0x64
 8001f90:	d9bb      	bls.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x3da>
        ret = HAL_TIMEOUT;
 8001f92:	2603      	movs	r6, #3
 8001f94:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8001f96:	682b      	ldr	r3, [r5, #0]
 8001f98:	07da      	lsls	r2, r3, #31
 8001f9a:	d509      	bpl.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch(PeriphClkInit->Usart16ClockSelection)
 8001f9c:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8001fa0:	2b10      	cmp	r3, #16
 8001fa2:	d03d      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8001fa4:	d826      	bhi.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8001fa6:	b35b      	cbz	r3, 8002000 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d033      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8001fac:	2601      	movs	r6, #1
 8001fae:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8001fb0:	682b      	ldr	r3, [r5, #0]
 8001fb2:	079b      	lsls	r3, r3, #30
 8001fb4:	d549      	bpl.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8001fb6:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8001fb8:	2b05      	cmp	r3, #5
 8001fba:	d85c      	bhi.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x546>
 8001fbc:	e8df f003 	tbb	[pc, r3]
 8001fc0:	3d55383d 	.word	0x3d55383d
 8001fc4:	3d3d      	.short	0x3d3d
        tickstart = HAL_GetTick();
 8001fc6:	f7fe fe9f 	bl	8000d08 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fca:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8002080 <HAL_RCCEx_PeriphCLKConfig+0x550>
        tickstart = HAL_GetTick();
 8001fce:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd0:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fd4:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8001fd8:	0799      	lsls	r1, r3, #30
 8001fda:	d4b2      	bmi.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x412>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fdc:	f7fe fe94 	bl	8000d08 <HAL_GetTick>
 8001fe0:	1bc0      	subs	r0, r0, r7
 8001fe2:	4548      	cmp	r0, r9
 8001fe4:	d9f6      	bls.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8001fe6:	e7d4      	b.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x462>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fe8:	690a      	ldr	r2, [r1, #16]
 8001fea:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8001fee:	e7b7      	b.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8001ff0:	4626      	mov	r6, r4
 8001ff2:	e7d0      	b.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x466>
    switch(PeriphClkInit->Usart16ClockSelection)
 8001ff4:	f023 0208 	bic.w	r2, r3, #8
 8001ff8:	2a20      	cmp	r2, #32
 8001ffa:	d001      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8001ffc:	2b18      	cmp	r3, #24
 8001ffe:	d1d5      	bne.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x47c>
    if(ret == HAL_OK)
 8002000:	b9a4      	cbnz	r4, 800202c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002002:	4a1f      	ldr	r2, [pc, #124]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002004:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 8002008:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800200a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800200e:	430b      	orrs	r3, r1
 8002010:	6553      	str	r3, [r2, #84]	; 0x54
 8002012:	e7cd      	b.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002014:	2101      	movs	r1, #1
 8002016:	1d28      	adds	r0, r5, #4
 8002018:	f7ff fc9a 	bl	8001950 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800201c:	4604      	mov	r4, r0
      break;
 800201e:	e7ef      	b.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002020:	2101      	movs	r1, #1
 8002022:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002026:	f7ff fd0b 	bl	8001a40 <RCCEx_PLL3_Config>
 800202a:	e7f7      	b.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 800202c:	4626      	mov	r6, r4
 800202e:	e7bf      	b.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002030:	2101      	movs	r1, #1
 8002032:	1d28      	adds	r0, r5, #4
 8002034:	f7ff fc8c 	bl	8001950 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002038:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 800203a:	b9fc      	cbnz	r4, 800207c <HAL_RCCEx_PeriphCLKConfig+0x54c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800203c:	4a10      	ldr	r2, [pc, #64]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800203e:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8002040:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002042:	f023 0307 	bic.w	r3, r3, #7
 8002046:	430b      	orrs	r3, r1
 8002048:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800204a:	682b      	ldr	r3, [r5, #0]
 800204c:	075f      	lsls	r7, r3, #29
 800204e:	d52d      	bpl.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x57c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002050:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002054:	2b05      	cmp	r3, #5
 8002056:	f200 813f 	bhi.w	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
 800205a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800205e:	001c      	.short	0x001c
 8002060:	01370017 	.word	0x01370017
 8002064:	001c001c 	.word	0x001c001c
 8002068:	001c      	.short	0x001c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800206a:	2101      	movs	r1, #1
 800206c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002070:	f7ff fce6 	bl	8001a40 <RCCEx_PLL3_Config>
 8002074:	e7e0      	b.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x508>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002076:	2601      	movs	r6, #1
 8002078:	4634      	mov	r4, r6
 800207a:	e7e6      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800207c:	4626      	mov	r6, r4
 800207e:	e7e4      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002080:	58024400 	.word	0x58024400
 8002084:	58024800 	.word	0x58024800
 8002088:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800208c:	2101      	movs	r1, #1
 800208e:	1d28      	adds	r0, r5, #4
 8002090:	f7ff fc5e 	bl	8001950 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002094:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8002096:	2c00      	cmp	r4, #0
 8002098:	f040 8121 	bne.w	80022de <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800209c:	4aab      	ldr	r2, [pc, #684]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x81c>)
 800209e:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 80020a2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80020a4:	f023 0307 	bic.w	r3, r3, #7
 80020a8:	430b      	orrs	r3, r1
 80020aa:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80020ac:	682b      	ldr	r3, [r5, #0]
 80020ae:	0698      	lsls	r0, r3, #26
 80020b0:	d510      	bpl.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80020b2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80020b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020ba:	f000 812b 	beq.w	8002314 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80020be:	f200 8110 	bhi.w	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8116 	beq.w	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 80020c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020cc:	f000 811c 	beq.w	8002308 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 80020d0:	2601      	movs	r6, #1
 80020d2:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80020d4:	682b      	ldr	r3, [r5, #0]
 80020d6:	0659      	lsls	r1, r3, #25
 80020d8:	d510      	bpl.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80020da:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 80020de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020e2:	f000 813b 	beq.w	800235c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80020e6:	f200 811d 	bhi.w	8002324 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 8123 	beq.w	8002336 <HAL_RCCEx_PeriphCLKConfig+0x806>
 80020f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020f4:	f000 812c 	beq.w	8002350 <HAL_RCCEx_PeriphCLKConfig+0x820>
 80020f8:	2601      	movs	r6, #1
 80020fa:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80020fc:	682b      	ldr	r3, [r5, #0]
 80020fe:	061a      	lsls	r2, r3, #24
 8002100:	d510      	bpl.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002102:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 8002106:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800210a:	f000 8148 	beq.w	800239e <HAL_RCCEx_PeriphCLKConfig+0x86e>
 800210e:	f200 812d 	bhi.w	800236c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 8133 	beq.w	800237e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8002118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800211c:	f000 8139 	beq.w	8002392 <HAL_RCCEx_PeriphCLKConfig+0x862>
 8002120:	2601      	movs	r6, #1
 8002122:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002124:	682b      	ldr	r3, [r5, #0]
 8002126:	071b      	lsls	r3, r3, #28
 8002128:	d514      	bpl.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x624>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800212a:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800212e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002132:	d107      	bne.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x614>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002134:	2102      	movs	r1, #2
 8002136:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800213a:	f7ff fc81 	bl	8001a40 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 800213e:	2800      	cmp	r0, #0
 8002140:	bf18      	it	ne
 8002142:	2601      	movne	r6, #1
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002144:	4a81      	ldr	r2, [pc, #516]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x81c>)
 8002146:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 800214a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800214c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002150:	430b      	orrs	r3, r1
 8002152:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002154:	682b      	ldr	r3, [r5, #0]
 8002156:	06df      	lsls	r7, r3, #27
 8002158:	d514      	bpl.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x654>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800215a:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800215e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002162:	d107      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x644>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002164:	2102      	movs	r1, #2
 8002166:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800216a:	f7ff fc69 	bl	8001a40 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800216e:	2800      	cmp	r0, #0
 8002170:	bf18      	it	ne
 8002172:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002174:	4a75      	ldr	r2, [pc, #468]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x81c>)
 8002176:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 800217a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800217c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002180:	430b      	orrs	r3, r1
 8002182:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002184:	682b      	ldr	r3, [r5, #0]
 8002186:	0318      	lsls	r0, r3, #12
 8002188:	d51a      	bpl.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    switch(PeriphClkInit->AdcClockSelection)
 800218a:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 800218e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8002192:	f000 810c 	beq.w	80023ae <HAL_RCCEx_PeriphCLKConfig+0x87e>
 8002196:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800219a:	d006      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x67a>
 800219c:	2900      	cmp	r1, #0
 800219e:	f040 810c 	bne.w	80023ba <HAL_RCCEx_PeriphCLKConfig+0x88a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80021a2:	1d28      	adds	r0, r5, #4
 80021a4:	f7ff fbd4 	bl	8001950 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80021a8:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 80021aa:	2c00      	cmp	r4, #0
 80021ac:	f040 8108 	bne.w	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x890>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021b0:	4a66      	ldr	r2, [pc, #408]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x81c>)
 80021b2:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 80021b6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80021b8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80021bc:	430b      	orrs	r3, r1
 80021be:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80021c0:	682b      	ldr	r3, [r5, #0]
 80021c2:	0359      	lsls	r1, r3, #13
 80021c4:	d51c      	bpl.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    switch(PeriphClkInit->UsbClockSelection)
 80021c6:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80021ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021ce:	f000 80f9 	beq.w	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x894>
 80021d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80021d6:	d008      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 80021d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021dc:	f040 80f9 	bne.w	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021e0:	4a5a      	ldr	r2, [pc, #360]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x81c>)
 80021e2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80021e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80021ea:	2c00      	cmp	r4, #0
 80021ec:	f040 80f4 	bne.w	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021f0:	4a56      	ldr	r2, [pc, #344]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x81c>)
 80021f2:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 80021f6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80021f8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80021fc:	430b      	orrs	r3, r1
 80021fe:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002200:	682b      	ldr	r3, [r5, #0]
 8002202:	03da      	lsls	r2, r3, #15
 8002204:	d509      	bpl.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
    switch(PeriphClkInit->SdmmcClockSelection)
 8002206:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 80e7 	beq.w	80023dc <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 800220e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002212:	f000 80f1 	beq.w	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
 8002216:	2601      	movs	r6, #1
 8002218:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800221a:	682b      	ldr	r3, [r5, #0]
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	d507      	bpl.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x700>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002220:	2102      	movs	r1, #2
 8002222:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002226:	f7ff fc0b 	bl	8001a40 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 800222a:	2800      	cmp	r0, #0
 800222c:	bf18      	it	ne
 800222e:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002230:	682b      	ldr	r3, [r5, #0]
 8002232:	039f      	lsls	r7, r3, #14
 8002234:	d50b      	bpl.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x71e>
    switch(PeriphClkInit->RngClockSelection)
 8002236:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 800223a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800223e:	f000 80f1 	beq.w	8002424 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8002242:	f200 80e1 	bhi.w	8002408 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8002246:	2900      	cmp	r1, #0
 8002248:	f000 80e4 	beq.w	8002414 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
 800224c:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800224e:	02dc      	lsls	r4, r3, #11
 8002250:	d506      	bpl.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x730>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002252:	493e      	ldr	r1, [pc, #248]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x81c>)
 8002254:	6fa8      	ldr	r0, [r5, #120]	; 0x78
 8002256:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002258:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800225c:	4302      	orrs	r2, r0
 800225e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002260:	0298      	lsls	r0, r3, #10
 8002262:	d506      	bpl.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x742>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002264:	4939      	ldr	r1, [pc, #228]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x81c>)
 8002266:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8002268:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800226a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800226e:	4302      	orrs	r2, r0
 8002270:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8002272:	0519      	lsls	r1, r3, #20
 8002274:	d506      	bpl.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x754>
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8002276:	4935      	ldr	r1, [pc, #212]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x81c>)
 8002278:	6f28      	ldr	r0, [r5, #112]	; 0x70
 800227a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800227c:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8002280:	4302      	orrs	r2, r0
 8002282:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002284:	005a      	lsls	r2, r3, #1
 8002286:	d509      	bpl.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x76c>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002288:	4a30      	ldr	r2, [pc, #192]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x81c>)
 800228a:	6911      	ldr	r1, [r2, #16]
 800228c:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8002290:	6111      	str	r1, [r2, #16]
 8002292:	6911      	ldr	r1, [r2, #16]
 8002294:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 8002298:	4301      	orrs	r1, r0
 800229a:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800229c:	2b00      	cmp	r3, #0
 800229e:	da06      	bge.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x77e>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80022a0:	492a      	ldr	r1, [pc, #168]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x81c>)
 80022a2:	6d28      	ldr	r0, [r5, #80]	; 0x50
 80022a4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80022a6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022aa:	4302      	orrs	r2, r0
 80022ac:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	d507      	bpl.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x792>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022b2:	4a26      	ldr	r2, [pc, #152]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x81c>)
 80022b4:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 80022b8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80022ba:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80022be:	430b      	orrs	r3, r1
 80022c0:	6553      	str	r3, [r2, #84]	; 0x54
}
 80022c2:	1e30      	subs	r0, r6, #0
 80022c4:	bf18      	it	ne
 80022c6:	2001      	movne	r0, #1
 80022c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80022cc:	2101      	movs	r1, #1
 80022ce:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80022d2:	f7ff fbb5 	bl	8001a40 <RCCEx_PLL3_Config>
 80022d6:	e6dd      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x564>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80022d8:	2601      	movs	r6, #1
 80022da:	4634      	mov	r4, r6
 80022dc:	e6e6      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80022de:	4626      	mov	r6, r4
 80022e0:	e6e4      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x57c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80022e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80022e6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80022ea:	d003      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 80022ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80022f0:	f47f aeee 	bne.w	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    if(ret == HAL_OK)
 80022f4:	b9a4      	cbnz	r4, 8002320 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022f6:	4a15      	ldr	r2, [pc, #84]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x81c>)
 80022f8:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 80022fc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80022fe:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8002302:	430b      	orrs	r3, r1
 8002304:	6553      	str	r3, [r2, #84]	; 0x54
 8002306:	e6e5      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002308:	2100      	movs	r1, #0
 800230a:	1d28      	adds	r0, r5, #4
 800230c:	f7ff fb20 	bl	8001950 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002310:	4604      	mov	r4, r0
      break;
 8002312:	e7ef      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002314:	2102      	movs	r1, #2
 8002316:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800231a:	f7ff fb91 	bl	8001a40 <RCCEx_PLL3_Config>
 800231e:	e7f7      	b.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
 8002320:	4626      	mov	r6, r4
 8002322:	e6d7      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002324:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002328:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800232c:	d003      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x806>
 800232e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002332:	f47f aee1 	bne.w	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    if(ret == HAL_OK)
 8002336:	b9bc      	cbnz	r4, 8002368 <HAL_RCCEx_PeriphCLKConfig+0x838>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002338:	4a04      	ldr	r2, [pc, #16]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x81c>)
 800233a:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 800233e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002340:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002344:	430b      	orrs	r3, r1
 8002346:	6593      	str	r3, [r2, #88]	; 0x58
 8002348:	e6d8      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800234a:	bf00      	nop
 800234c:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002350:	2100      	movs	r1, #0
 8002352:	1d28      	adds	r0, r5, #4
 8002354:	f7ff fafc 	bl	8001950 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002358:	4604      	mov	r4, r0
      break;
 800235a:	e7ec      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x806>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800235c:	2102      	movs	r1, #2
 800235e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002362:	f7ff fb6d 	bl	8001a40 <RCCEx_PLL3_Config>
 8002366:	e7f7      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x828>
 8002368:	4626      	mov	r6, r4
 800236a:	e6c7      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800236c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002370:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002374:	d003      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8002376:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800237a:	f47f aed1 	bne.w	8002120 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    if(ret == HAL_OK)
 800237e:	b9a4      	cbnz	r4, 80023aa <HAL_RCCEx_PeriphCLKConfig+0x87a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002380:	4a2c      	ldr	r2, [pc, #176]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x904>)
 8002382:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8002386:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002388:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800238c:	430b      	orrs	r3, r1
 800238e:	6593      	str	r3, [r2, #88]	; 0x58
 8002390:	e6c8      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002392:	2100      	movs	r1, #0
 8002394:	1d28      	adds	r0, r5, #4
 8002396:	f7ff fadb 	bl	8001950 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800239a:	4604      	mov	r4, r0
      break;
 800239c:	e7ef      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800239e:	2102      	movs	r1, #2
 80023a0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80023a4:	f7ff fb4c 	bl	8001a40 <RCCEx_PLL3_Config>
 80023a8:	e7f7      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x86a>
 80023aa:	4626      	mov	r6, r4
 80023ac:	e6ba      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80023ae:	2102      	movs	r1, #2
 80023b0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80023b4:	f7ff fb44 	bl	8001a40 <RCCEx_PLL3_Config>
 80023b8:	e6f6      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
    switch(PeriphClkInit->AdcClockSelection)
 80023ba:	2601      	movs	r6, #1
 80023bc:	4634      	mov	r4, r6
 80023be:	e6ff      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x690>
 80023c0:	4626      	mov	r6, r4
 80023c2:	e6fd      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80023c4:	2101      	movs	r1, #1
 80023c6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80023ca:	f7ff fb39 	bl	8001a40 <RCCEx_PLL3_Config>
 80023ce:	4604      	mov	r4, r0
      break;
 80023d0:	e70b      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x6ba>
    switch(PeriphClkInit->UsbClockSelection)
 80023d2:	2601      	movs	r6, #1
 80023d4:	4634      	mov	r4, r6
 80023d6:	e713      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 80023d8:	4626      	mov	r6, r4
 80023da:	e711      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023dc:	4a15      	ldr	r2, [pc, #84]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x904>)
 80023de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80023e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80023e6:	b96c      	cbnz	r4, 8002404 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80023e8:	4a12      	ldr	r2, [pc, #72]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x904>)
 80023ea:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80023ec:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80023ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f2:	430b      	orrs	r3, r1
 80023f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023f6:	e710      	b.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80023f8:	2102      	movs	r1, #2
 80023fa:	1d28      	adds	r0, r5, #4
 80023fc:	f7ff faa8 	bl	8001950 <RCCEx_PLL2_Config>
 8002400:	4604      	mov	r4, r0
      break;
 8002402:	e7f0      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 8002404:	4626      	mov	r6, r4
 8002406:	e708      	b.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
    switch(PeriphClkInit->RngClockSelection)
 8002408:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800240c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002410:	f47f af1c 	bne.w	800224c <HAL_RCCEx_PeriphCLKConfig+0x71c>
    if(ret == HAL_OK)
 8002414:	b964      	cbnz	r4, 8002430 <HAL_RCCEx_PeriphCLKConfig+0x900>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002416:	4807      	ldr	r0, [pc, #28]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x904>)
 8002418:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800241a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800241e:	430a      	orrs	r2, r1
 8002420:	6542      	str	r2, [r0, #84]	; 0x54
 8002422:	e714      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x71e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002424:	4803      	ldr	r0, [pc, #12]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x904>)
 8002426:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002428:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800242c:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 800242e:	e7f1      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
 8002430:	4626      	mov	r6, r4
 8002432:	e70c      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8002434:	58024400 	.word	0x58024400

08002438 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8002438:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800243a:	f7ff fa43 	bl	80018c4 <HAL_RCC_GetHCLKFreq>
 800243e:	4b05      	ldr	r3, [pc, #20]	; (8002454 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8002440:	4a05      	ldr	r2, [pc, #20]	; (8002458 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002448:	5cd3      	ldrb	r3, [r2, r3]
 800244a:	f003 031f 	and.w	r3, r3, #31
}
 800244e:	40d8      	lsrs	r0, r3
 8002450:	bd08      	pop	{r3, pc}
 8002452:	bf00      	nop
 8002454:	58024400 	.word	0x58024400
 8002458:	08008bac 	.word	0x08008bac

0800245c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800245c:	4a4e      	ldr	r2, [pc, #312]	; (8002598 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
{
 800245e:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002460:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8002462:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002464:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 8002466:	f416 3f7c 	tst.w	r6, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800246a:	f3c6 3105 	ubfx	r1, r6, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800246e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8002470:	f000 808d 	beq.w	800258e <HAL_RCCEx_GetPLL2ClockFreq+0x132>
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002474:	ee07 1a90 	vmov	s15, r1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002478:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800247c:	f3c5 1100 	ubfx	r1, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002480:	f004 0403 	and.w	r4, r4, #3
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002484:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002488:	434b      	muls	r3, r1
    switch (pllsource)
 800248a:	2c01      	cmp	r4, #1
 800248c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002490:	ee07 3a90 	vmov	s15, r3
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002494:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 8002498:	d06b      	beq.n	8002572 <HAL_RCCEx_GetPLL2ClockFreq+0x116>
 800249a:	2c02      	cmp	r4, #2
 800249c:	d05b      	beq.n	8002556 <HAL_RCCEx_GetPLL2ClockFreq+0xfa>
 800249e:	2c00      	cmp	r4, #0
 80024a0:	d167      	bne.n	8002572 <HAL_RCCEx_GetPLL2ClockFreq+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024a2:	6813      	ldr	r3, [r2, #0]
 80024a4:	069b      	lsls	r3, r3, #26
 80024a6:	d546      	bpl.n	8002536 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80024a8:	6811      	ldr	r1, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80024aa:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80024ac:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80024b0:	4a3a      	ldr	r2, [pc, #232]	; (800259c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80024b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80024b6:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80024b8:	ee07 2a10 	vmov	s14, r2
 80024bc:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80024c0:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80024c4:	ee06 3a90 	vmov	s13, r3
 80024c8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80024cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024d0:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80024d4:	4a30      	ldr	r2, [pc, #192]	; (8002598 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80024d6:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80024da:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80024dc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80024e0:	ee07 3a10 	vmov	s14, r3
 80024e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80024e8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80024ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80024f0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80024f4:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80024f8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80024fa:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80024fe:	ee07 3a10 	vmov	s14, r3
 8002502:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002506:	ee37 7a06 	vadd.f32	s14, s14, s12
 800250a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800250e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002512:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8002516:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002518:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800251c:	ee07 3a10 	vmov	s14, r3
 8002520:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002524:	ee37 6a06 	vadd.f32	s12, s14, s12
 8002528:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800252c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002530:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8002534:	bd70      	pop	{r4, r5, r6, pc}
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002536:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002538:	eddf 5a19 	vldr	s11, [pc, #100]	; 80025a0 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800253c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002540:	ee07 3a10 	vmov	s14, r3
 8002544:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800254c:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002550:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8002554:	e7be      	b.n	80024d4 <HAL_RCCEx_GetPLL2ClockFreq+0x78>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002556:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002558:	eddf 5a12 	vldr	s11, [pc, #72]	; 80025a4 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800255c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002560:	ee07 3a10 	vmov	s14, r3
 8002564:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002568:	ee77 7a27 	vadd.f32	s15, s14, s15
 800256c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002570:	e7ee      	b.n	8002550 <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002572:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002574:	eddf 5a0c 	vldr	s11, [pc, #48]	; 80025a8 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8002578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800257c:	ee07 3a10 	vmov	s14, r3
 8002580:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002584:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002588:	ee77 7a86 	vadd.f32	s15, s15, s12
 800258c:	e7e0      	b.n	8002550 <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800258e:	e9c0 1100 	strd	r1, r1, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002592:	6081      	str	r1, [r0, #8]
}
 8002594:	e7ce      	b.n	8002534 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 8002596:	bf00      	nop
 8002598:	58024400 	.word	0x58024400
 800259c:	03d09000 	.word	0x03d09000
 80025a0:	4c742400 	.word	0x4c742400
 80025a4:	4af42400 	.word	0x4af42400
 80025a8:	4a742400 	.word	0x4a742400

080025ac <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80025ac:	4a4e      	ldr	r2, [pc, #312]	; (80026e8 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
{
 80025ae:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80025b0:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80025b2:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80025b4:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 80025b6:	f016 7f7c 	tst.w	r6, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80025ba:	f3c6 5105 	ubfx	r1, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80025be:	6c53      	ldr	r3, [r2, #68]	; 0x44
  if (pll3m != 0U)
 80025c0:	f000 808d 	beq.w	80026de <HAL_RCCEx_GetPLL3ClockFreq+0x132>
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80025c4:	ee07 1a90 	vmov	s15, r1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80025c8:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80025cc:	f3c5 2100 	ubfx	r1, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80025d0:	f004 0403 	and.w	r4, r4, #3
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80025d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80025d8:	434b      	muls	r3, r1
    switch (pllsource)
 80025da:	2c01      	cmp	r4, #1
 80025dc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80025e0:	ee07 3a90 	vmov	s15, r3
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80025e4:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 80025e8:	d06b      	beq.n	80026c2 <HAL_RCCEx_GetPLL3ClockFreq+0x116>
 80025ea:	2c02      	cmp	r4, #2
 80025ec:	d05b      	beq.n	80026a6 <HAL_RCCEx_GetPLL3ClockFreq+0xfa>
 80025ee:	2c00      	cmp	r4, #0
 80025f0:	d167      	bne.n	80026c2 <HAL_RCCEx_GetPLL3ClockFreq+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025f2:	6813      	ldr	r3, [r2, #0]
 80025f4:	069b      	lsls	r3, r3, #26
 80025f6:	d546      	bpl.n	8002686 <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80025f8:	6811      	ldr	r1, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80025fa:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80025fc:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8002600:	4a3a      	ldr	r2, [pc, #232]	; (80026ec <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002602:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002606:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002608:	ee07 2a10 	vmov	s14, r2
 800260c:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8002610:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8002614:	ee06 3a90 	vmov	s13, r3
 8002618:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800261c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002620:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8002624:	4a30      	ldr	r2, [pc, #192]	; (80026e8 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002626:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800262a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800262c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002630:	ee07 3a10 	vmov	s14, r3
 8002634:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002638:	ee37 7a06 	vadd.f32	s14, s14, s12
 800263c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002640:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002644:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8002648:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800264a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800264e:	ee07 3a10 	vmov	s14, r3
 8002652:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002656:	ee37 7a06 	vadd.f32	s14, s14, s12
 800265a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800265e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002662:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8002666:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002668:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800266c:	ee07 3a10 	vmov	s14, r3
 8002670:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002674:	ee37 6a06 	vadd.f32	s12, s14, s12
 8002678:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800267c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002680:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8002684:	bd70      	pop	{r4, r5, r6, pc}
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002686:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002688:	eddf 5a19 	vldr	s11, [pc, #100]	; 80026f0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800268c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002690:	ee07 3a10 	vmov	s14, r3
 8002694:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800269c:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80026a0:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80026a4:	e7be      	b.n	8002624 <HAL_RCCEx_GetPLL3ClockFreq+0x78>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80026a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80026a8:	eddf 5a12 	vldr	s11, [pc, #72]	; 80026f4 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80026ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b0:	ee07 3a10 	vmov	s14, r3
 80026b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80026b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026bc:	ee77 7a86 	vadd.f32	s15, s15, s12
 80026c0:	e7ee      	b.n	80026a0 <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80026c2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80026c4:	eddf 5a0c 	vldr	s11, [pc, #48]	; 80026f8 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 80026c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026cc:	ee07 3a10 	vmov	s14, r3
 80026d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80026d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026d8:	ee77 7a86 	vadd.f32	s15, s15, s12
 80026dc:	e7e0      	b.n	80026a0 <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80026de:	e9c0 1100 	strd	r1, r1, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80026e2:	6081      	str	r1, [r0, #8]
}
 80026e4:	e7ce      	b.n	8002684 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 80026e6:	bf00      	nop
 80026e8:	58024400 	.word	0x58024400
 80026ec:	03d09000 	.word	0x03d09000
 80026f0:	4c742400 	.word	0x4c742400
 80026f4:	4af42400 	.word	0x4af42400
 80026f8:	4a742400 	.word	0x4a742400

080026fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026fc:	b530      	push	{r4, r5, lr}
 80026fe:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002700:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002702:	69c0      	ldr	r0, [r0, #28]
{
 8002704:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002706:	6921      	ldr	r1, [r4, #16]
 8002708:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800270a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800270c:	430a      	orrs	r2, r1
 800270e:	6961      	ldr	r1, [r4, #20]
 8002710:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002712:	4999      	ldr	r1, [pc, #612]	; (8002978 <UART_SetConfig+0x27c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002714:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002716:	4029      	ands	r1, r5
 8002718:	430a      	orrs	r2, r1

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800271a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800271c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002724:	430a      	orrs	r2, r1
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002726:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002728:	605a      	str	r2, [r3, #4]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800272a:	4a94      	ldr	r2, [pc, #592]	; (800297c <UART_SetConfig+0x280>)
 800272c:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 800272e:	bf1c      	itt	ne
 8002730:	6a22      	ldrne	r2, [r4, #32]
 8002732:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 800273a:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800273e:	430a      	orrs	r2, r1

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002740:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002742:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002746:	f022 020f 	bic.w	r2, r2, #15
 800274a:	430a      	orrs	r2, r1
 800274c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800274e:	4a8c      	ldr	r2, [pc, #560]	; (8002980 <UART_SetConfig+0x284>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d11c      	bne.n	800278e <UART_SetConfig+0x92>
 8002754:	4b8b      	ldr	r3, [pc, #556]	; (8002984 <UART_SetConfig+0x288>)
 8002756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002758:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800275c:	2b28      	cmp	r3, #40	; 0x28
 800275e:	f200 8083 	bhi.w	8002868 <UART_SetConfig+0x16c>
 8002762:	4a89      	ldr	r2, [pc, #548]	; (8002988 <UART_SetConfig+0x28c>)
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002764:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002768:	5cd3      	ldrb	r3, [r2, r3]
 800276a:	f040 8152 	bne.w	8002a12 <UART_SetConfig+0x316>
  {
    switch (clocksource)
 800276e:	2b08      	cmp	r3, #8
 8002770:	f200 80d6 	bhi.w	8002920 <UART_SetConfig+0x224>
 8002774:	2b08      	cmp	r3, #8
 8002776:	d877      	bhi.n	8002868 <UART_SetConfig+0x16c>
 8002778:	e8df f013 	tbh	[pc, r3, lsl #1]
 800277c:	013c0136 	.word	0x013c0136
 8002780:	00760076 	.word	0x00760076
 8002784:	0076013f 	.word	0x0076013f
 8002788:	00760076 	.word	0x00760076
 800278c:	0144      	.short	0x0144
  UART_GETCLOCKSOURCE(huart, clocksource);
 800278e:	4a7f      	ldr	r2, [pc, #508]	; (800298c <UART_SetConfig+0x290>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d107      	bne.n	80027a4 <UART_SetConfig+0xa8>
 8002794:	4b7b      	ldr	r3, [pc, #492]	; (8002984 <UART_SetConfig+0x288>)
 8002796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	2b05      	cmp	r3, #5
 800279e:	d863      	bhi.n	8002868 <UART_SetConfig+0x16c>
 80027a0:	4a7b      	ldr	r2, [pc, #492]	; (8002990 <UART_SetConfig+0x294>)
 80027a2:	e7df      	b.n	8002764 <UART_SetConfig+0x68>
 80027a4:	4a7b      	ldr	r2, [pc, #492]	; (8002994 <UART_SetConfig+0x298>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d107      	bne.n	80027ba <UART_SetConfig+0xbe>
 80027aa:	4b76      	ldr	r3, [pc, #472]	; (8002984 <UART_SetConfig+0x288>)
 80027ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	2b05      	cmp	r3, #5
 80027b4:	d858      	bhi.n	8002868 <UART_SetConfig+0x16c>
 80027b6:	4a78      	ldr	r2, [pc, #480]	; (8002998 <UART_SetConfig+0x29c>)
 80027b8:	e7d4      	b.n	8002764 <UART_SetConfig+0x68>
 80027ba:	4a78      	ldr	r2, [pc, #480]	; (800299c <UART_SetConfig+0x2a0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d107      	bne.n	80027d0 <UART_SetConfig+0xd4>
 80027c0:	4b70      	ldr	r3, [pc, #448]	; (8002984 <UART_SetConfig+0x288>)
 80027c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	2b05      	cmp	r3, #5
 80027ca:	d84d      	bhi.n	8002868 <UART_SetConfig+0x16c>
 80027cc:	4a74      	ldr	r2, [pc, #464]	; (80029a0 <UART_SetConfig+0x2a4>)
 80027ce:	e7c9      	b.n	8002764 <UART_SetConfig+0x68>
 80027d0:	4a74      	ldr	r2, [pc, #464]	; (80029a4 <UART_SetConfig+0x2a8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d107      	bne.n	80027e6 <UART_SetConfig+0xea>
 80027d6:	4b6b      	ldr	r3, [pc, #428]	; (8002984 <UART_SetConfig+0x288>)
 80027d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	2b05      	cmp	r3, #5
 80027e0:	d842      	bhi.n	8002868 <UART_SetConfig+0x16c>
 80027e2:	4a71      	ldr	r2, [pc, #452]	; (80029a8 <UART_SetConfig+0x2ac>)
 80027e4:	e7be      	b.n	8002764 <UART_SetConfig+0x68>
 80027e6:	4a71      	ldr	r2, [pc, #452]	; (80029ac <UART_SetConfig+0x2b0>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d107      	bne.n	80027fc <UART_SetConfig+0x100>
 80027ec:	4b65      	ldr	r3, [pc, #404]	; (8002984 <UART_SetConfig+0x288>)
 80027ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027f4:	2b28      	cmp	r3, #40	; 0x28
 80027f6:	d837      	bhi.n	8002868 <UART_SetConfig+0x16c>
 80027f8:	4a6d      	ldr	r2, [pc, #436]	; (80029b0 <UART_SetConfig+0x2b4>)
 80027fa:	e7b3      	b.n	8002764 <UART_SetConfig+0x68>
 80027fc:	4a6d      	ldr	r2, [pc, #436]	; (80029b4 <UART_SetConfig+0x2b8>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d107      	bne.n	8002812 <UART_SetConfig+0x116>
 8002802:	4b60      	ldr	r3, [pc, #384]	; (8002984 <UART_SetConfig+0x288>)
 8002804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	2b05      	cmp	r3, #5
 800280c:	d82c      	bhi.n	8002868 <UART_SetConfig+0x16c>
 800280e:	4a6a      	ldr	r2, [pc, #424]	; (80029b8 <UART_SetConfig+0x2bc>)
 8002810:	e7a8      	b.n	8002764 <UART_SetConfig+0x68>
 8002812:	4a6a      	ldr	r2, [pc, #424]	; (80029bc <UART_SetConfig+0x2c0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d107      	bne.n	8002828 <UART_SetConfig+0x12c>
 8002818:	4b5a      	ldr	r3, [pc, #360]	; (8002984 <UART_SetConfig+0x288>)
 800281a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	2b05      	cmp	r3, #5
 8002822:	d821      	bhi.n	8002868 <UART_SetConfig+0x16c>
 8002824:	4a66      	ldr	r2, [pc, #408]	; (80029c0 <UART_SetConfig+0x2c4>)
 8002826:	e79d      	b.n	8002764 <UART_SetConfig+0x68>
 8002828:	4a66      	ldr	r2, [pc, #408]	; (80029c4 <UART_SetConfig+0x2c8>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d107      	bne.n	800283e <UART_SetConfig+0x142>
 800282e:	4b55      	ldr	r3, [pc, #340]	; (8002984 <UART_SetConfig+0x288>)
 8002830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002832:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002836:	2b28      	cmp	r3, #40	; 0x28
 8002838:	d816      	bhi.n	8002868 <UART_SetConfig+0x16c>
 800283a:	4a63      	ldr	r2, [pc, #396]	; (80029c8 <UART_SetConfig+0x2cc>)
 800283c:	e792      	b.n	8002764 <UART_SetConfig+0x68>
 800283e:	4a63      	ldr	r2, [pc, #396]	; (80029cc <UART_SetConfig+0x2d0>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d107      	bne.n	8002854 <UART_SetConfig+0x158>
 8002844:	4b4f      	ldr	r3, [pc, #316]	; (8002984 <UART_SetConfig+0x288>)
 8002846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002848:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800284c:	2b28      	cmp	r3, #40	; 0x28
 800284e:	d80b      	bhi.n	8002868 <UART_SetConfig+0x16c>
 8002850:	4a5f      	ldr	r2, [pc, #380]	; (80029d0 <UART_SetConfig+0x2d4>)
 8002852:	e787      	b.n	8002764 <UART_SetConfig+0x68>
 8002854:	4a49      	ldr	r2, [pc, #292]	; (800297c <UART_SetConfig+0x280>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d106      	bne.n	8002868 <UART_SetConfig+0x16c>
 800285a:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 800285e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	2b05      	cmp	r3, #5
 8002866:	d901      	bls.n	800286c <UART_SetConfig+0x170>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002868:	2001      	movs	r0, #1
 800286a:	e00e      	b.n	800288a <UART_SetConfig+0x18e>
 800286c:	4959      	ldr	r1, [pc, #356]	; (80029d4 <UART_SetConfig+0x2d8>)
 800286e:	5ccb      	ldrb	r3, [r1, r3]
    switch (clocksource)
 8002870:	2b10      	cmp	r3, #16
 8002872:	d023      	beq.n	80028bc <UART_SetConfig+0x1c0>
 8002874:	d811      	bhi.n	800289a <UART_SetConfig+0x19e>
 8002876:	2b04      	cmp	r3, #4
 8002878:	d016      	beq.n	80028a8 <UART_SetConfig+0x1ac>
 800287a:	2b08      	cmp	r3, #8
 800287c:	d019      	beq.n	80028b2 <UART_SetConfig+0x1b6>
 800287e:	2b02      	cmp	r3, #2
 8002880:	d1f2      	bne.n	8002868 <UART_SetConfig+0x16c>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8002882:	f7ff fdd9 	bl	8002438 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 8002886:	bb10      	cbnz	r0, 80028ce <UART_SetConfig+0x1d2>
 8002888:	2000      	movs	r0, #0
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
 800288a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800288e:	66a3      	str	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002890:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8002892:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70

  return ret;
}
 8002896:	b007      	add	sp, #28
 8002898:	bd30      	pop	{r4, r5, pc}
    switch (clocksource)
 800289a:	2b20      	cmp	r3, #32
 800289c:	d03e      	beq.n	800291c <UART_SetConfig+0x220>
 800289e:	2b40      	cmp	r3, #64	; 0x40
 80028a0:	d1e2      	bne.n	8002868 <UART_SetConfig+0x16c>
 80028a2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80028a6:	e012      	b.n	80028ce <UART_SetConfig+0x1d2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80028a8:	4668      	mov	r0, sp
 80028aa:	f7ff fdd7 	bl	800245c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80028ae:	9801      	ldr	r0, [sp, #4]
        break;
 80028b0:	e7e9      	b.n	8002886 <UART_SetConfig+0x18a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80028b2:	a803      	add	r0, sp, #12
 80028b4:	f7ff fe7a 	bl	80025ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80028b8:	9804      	ldr	r0, [sp, #16]
        break;
 80028ba:	e7e4      	b.n	8002886 <UART_SetConfig+0x18a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028bc:	6813      	ldr	r3, [r2, #0]
 80028be:	4846      	ldr	r0, [pc, #280]	; (80029d8 <UART_SetConfig+0x2dc>)
 80028c0:	f013 0f20 	tst.w	r3, #32
 80028c4:	d003      	beq.n	80028ce <UART_SetConfig+0x1d2>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80028c6:	6813      	ldr	r3, [r2, #0]
 80028c8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80028cc:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80028ce:	4b43      	ldr	r3, [pc, #268]	; (80029dc <UART_SetConfig+0x2e0>)
 80028d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80028d2:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80028d4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80028d8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80028dc:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80028e0:	4299      	cmp	r1, r3
 80028e2:	d8c1      	bhi.n	8002868 <UART_SetConfig+0x16c>
 80028e4:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80028e8:	d8be      	bhi.n	8002868 <UART_SetConfig+0x16c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80028ea:	2300      	movs	r3, #0
 80028ec:	4619      	mov	r1, r3
 80028ee:	f7fd fd67 	bl	80003c0 <__aeabi_uldivmod>
 80028f2:	462a      	mov	r2, r5
 80028f4:	0209      	lsls	r1, r1, #8
 80028f6:	086b      	lsrs	r3, r5, #1
 80028f8:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80028fc:	0200      	lsls	r0, r0, #8
 80028fe:	18c0      	adds	r0, r0, r3
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	f141 0100 	adc.w	r1, r1, #0
 8002908:	f7fd fd5a 	bl	80003c0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800290c:	4b34      	ldr	r3, [pc, #208]	; (80029e0 <UART_SetConfig+0x2e4>)
 800290e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002912:	429a      	cmp	r2, r3
 8002914:	d8a8      	bhi.n	8002868 <UART_SetConfig+0x16c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002916:	6823      	ldr	r3, [r4, #0]
 8002918:	60d8      	str	r0, [r3, #12]
 800291a:	e7b5      	b.n	8002888 <UART_SetConfig+0x18c>
        pclk = (uint32_t) CSI_VALUE;
 800291c:	4831      	ldr	r0, [pc, #196]	; (80029e4 <UART_SetConfig+0x2e8>)
 800291e:	e7d6      	b.n	80028ce <UART_SetConfig+0x1d2>
    switch (clocksource)
 8002920:	2b20      	cmp	r3, #32
 8002922:	d074      	beq.n	8002a0e <UART_SetConfig+0x312>
 8002924:	2b40      	cmp	r3, #64	; 0x40
 8002926:	d00b      	beq.n	8002940 <UART_SetConfig+0x244>
 8002928:	2b10      	cmp	r3, #16
 800292a:	d19d      	bne.n	8002868 <UART_SetConfig+0x16c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800292c:	4b15      	ldr	r3, [pc, #84]	; (8002984 <UART_SetConfig+0x288>)
 800292e:	482a      	ldr	r0, [pc, #168]	; (80029d8 <UART_SetConfig+0x2dc>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	f012 0f20 	tst.w	r2, #32
 8002936:	d003      	beq.n	8002940 <UART_SetConfig+0x244>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800293e:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002940:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002942:	4b26      	ldr	r3, [pc, #152]	; (80029dc <UART_SetConfig+0x2e0>)
 8002944:	6862      	ldr	r2, [r4, #4]
 8002946:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800294a:	fbb0 f3f3 	udiv	r3, r0, r3
 800294e:	0850      	lsrs	r0, r2, #1
 8002950:	eb00 0043 	add.w	r0, r0, r3, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002954:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002958:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800295c:	f1a0 0210 	sub.w	r2, r0, #16
 8002960:	429a      	cmp	r2, r3
 8002962:	d881      	bhi.n	8002868 <UART_SetConfig+0x16c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002964:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002968:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800296c:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800296e:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8002970:	4318      	orrs	r0, r3
 8002972:	60d0      	str	r0, [r2, #12]
 8002974:	e788      	b.n	8002888 <UART_SetConfig+0x18c>
 8002976:	bf00      	nop
 8002978:	cfff69f3 	.word	0xcfff69f3
 800297c:	58000c00 	.word	0x58000c00
 8002980:	40011000 	.word	0x40011000
 8002984:	58024400 	.word	0x58024400
 8002988:	08008bbc 	.word	0x08008bbc
 800298c:	40004400 	.word	0x40004400
 8002990:	08008be5 	.word	0x08008be5
 8002994:	40004800 	.word	0x40004800
 8002998:	08008be5 	.word	0x08008be5
 800299c:	40004c00 	.word	0x40004c00
 80029a0:	08008be5 	.word	0x08008be5
 80029a4:	40005000 	.word	0x40005000
 80029a8:	08008be5 	.word	0x08008be5
 80029ac:	40011400 	.word	0x40011400
 80029b0:	08008bbc 	.word	0x08008bbc
 80029b4:	40007800 	.word	0x40007800
 80029b8:	08008be5 	.word	0x08008be5
 80029bc:	40007c00 	.word	0x40007c00
 80029c0:	08008be5 	.word	0x08008be5
 80029c4:	40011800 	.word	0x40011800
 80029c8:	08008bbc 	.word	0x08008bbc
 80029cc:	40011c00 	.word	0x40011c00
 80029d0:	08008bbc 	.word	0x08008bbc
 80029d4:	08008beb 	.word	0x08008beb
 80029d8:	03d09000 	.word	0x03d09000
 80029dc:	08008bf2 	.word	0x08008bf2
 80029e0:	000ffcff 	.word	0x000ffcff
 80029e4:	003d0900 	.word	0x003d0900
        pclk = HAL_RCC_GetPCLK1Freq();
 80029e8:	f7fe ff8e 	bl	8001908 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80029ec:	2800      	cmp	r0, #0
 80029ee:	f43f af4b 	beq.w	8002888 <UART_SetConfig+0x18c>
 80029f2:	e7a5      	b.n	8002940 <UART_SetConfig+0x244>
        pclk = HAL_RCC_GetPCLK2Freq();
 80029f4:	f7fe ff9a 	bl	800192c <HAL_RCC_GetPCLK2Freq>
        break;
 80029f8:	e7f8      	b.n	80029ec <UART_SetConfig+0x2f0>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80029fa:	4668      	mov	r0, sp
 80029fc:	f7ff fd2e 	bl	800245c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8002a00:	9801      	ldr	r0, [sp, #4]
        break;
 8002a02:	e7f3      	b.n	80029ec <UART_SetConfig+0x2f0>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002a04:	a803      	add	r0, sp, #12
 8002a06:	f7ff fdd1 	bl	80025ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8002a0a:	9804      	ldr	r0, [sp, #16]
        break;
 8002a0c:	e7ee      	b.n	80029ec <UART_SetConfig+0x2f0>
        pclk = (uint32_t) CSI_VALUE;
 8002a0e:	482b      	ldr	r0, [pc, #172]	; (8002abc <UART_SetConfig+0x3c0>)
 8002a10:	e796      	b.n	8002940 <UART_SetConfig+0x244>
    switch (clocksource)
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d818      	bhi.n	8002a48 <UART_SetConfig+0x34c>
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	f63f af26 	bhi.w	8002868 <UART_SetConfig+0x16c>
 8002a1c:	a201      	add	r2, pc, #4	; (adr r2, 8002a24 <UART_SetConfig+0x328>)
 8002a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a22:	bf00      	nop
 8002a24:	08002a8b 	.word	0x08002a8b
 8002a28:	08002a97 	.word	0x08002a97
 8002a2c:	08002869 	.word	0x08002869
 8002a30:	08002869 	.word	0x08002869
 8002a34:	08002a9d 	.word	0x08002a9d
 8002a38:	08002869 	.word	0x08002869
 8002a3c:	08002869 	.word	0x08002869
 8002a40:	08002869 	.word	0x08002869
 8002a44:	08002aa7 	.word	0x08002aa7
 8002a48:	2b20      	cmp	r3, #32
 8002a4a:	d031      	beq.n	8002ab0 <UART_SetConfig+0x3b4>
 8002a4c:	2b40      	cmp	r3, #64	; 0x40
 8002a4e:	d031      	beq.n	8002ab4 <UART_SetConfig+0x3b8>
 8002a50:	2b10      	cmp	r3, #16
 8002a52:	f47f af09 	bne.w	8002868 <UART_SetConfig+0x16c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a56:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <UART_SetConfig+0x3c4>)
 8002a58:	481a      	ldr	r0, [pc, #104]	; (8002ac4 <UART_SetConfig+0x3c8>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	f012 0f20 	tst.w	r2, #32
 8002a60:	d003      	beq.n	8002a6a <UART_SetConfig+0x36e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002a68:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a6a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002a6c:	4a16      	ldr	r2, [pc, #88]	; (8002ac8 <UART_SetConfig+0x3cc>)
 8002a6e:	6863      	ldr	r3, [r4, #4]
 8002a70:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8002a74:	fbb0 f0f2 	udiv	r0, r0, r2
 8002a78:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002a7c:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a80:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002a84:	f1a0 0210 	sub.w	r2, r0, #16
 8002a88:	e743      	b.n	8002912 <UART_SetConfig+0x216>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a8a:	f7fe ff3d 	bl	8001908 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	f43f aefa 	beq.w	8002888 <UART_SetConfig+0x18c>
 8002a94:	e7e9      	b.n	8002a6a <UART_SetConfig+0x36e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a96:	f7fe ff49 	bl	800192c <HAL_RCC_GetPCLK2Freq>
        break;
 8002a9a:	e7f8      	b.n	8002a8e <UART_SetConfig+0x392>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002a9c:	4668      	mov	r0, sp
 8002a9e:	f7ff fcdd 	bl	800245c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8002aa2:	9801      	ldr	r0, [sp, #4]
        break;
 8002aa4:	e7f3      	b.n	8002a8e <UART_SetConfig+0x392>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002aa6:	a803      	add	r0, sp, #12
 8002aa8:	f7ff fd80 	bl	80025ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8002aac:	9804      	ldr	r0, [sp, #16]
        break;
 8002aae:	e7ee      	b.n	8002a8e <UART_SetConfig+0x392>
        pclk = (uint32_t) CSI_VALUE;
 8002ab0:	4802      	ldr	r0, [pc, #8]	; (8002abc <UART_SetConfig+0x3c0>)
 8002ab2:	e7da      	b.n	8002a6a <UART_SetConfig+0x36e>
    switch (clocksource)
 8002ab4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002ab8:	e7d7      	b.n	8002a6a <UART_SetConfig+0x36e>
 8002aba:	bf00      	nop
 8002abc:	003d0900 	.word	0x003d0900
 8002ac0:	58024400 	.word	0x58024400
 8002ac4:	03d09000 	.word	0x03d09000
 8002ac8:	08008bf2 	.word	0x08008bf2

08002acc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002acc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002ace:	07da      	lsls	r2, r3, #31
{
 8002ad0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ad2:	d506      	bpl.n	8002ae2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ad4:	6801      	ldr	r1, [r0, #0]
 8002ad6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002ad8:	684a      	ldr	r2, [r1, #4]
 8002ada:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002ade:	4322      	orrs	r2, r4
 8002ae0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ae2:	079c      	lsls	r4, r3, #30
 8002ae4:	d506      	bpl.n	8002af4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ae6:	6801      	ldr	r1, [r0, #0]
 8002ae8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002aea:	684a      	ldr	r2, [r1, #4]
 8002aec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002af0:	4322      	orrs	r2, r4
 8002af2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002af4:	0759      	lsls	r1, r3, #29
 8002af6:	d506      	bpl.n	8002b06 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002af8:	6801      	ldr	r1, [r0, #0]
 8002afa:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002afc:	684a      	ldr	r2, [r1, #4]
 8002afe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b02:	4322      	orrs	r2, r4
 8002b04:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b06:	071a      	lsls	r2, r3, #28
 8002b08:	d506      	bpl.n	8002b18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b0a:	6801      	ldr	r1, [r0, #0]
 8002b0c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002b0e:	684a      	ldr	r2, [r1, #4]
 8002b10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b14:	4322      	orrs	r2, r4
 8002b16:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b18:	06dc      	lsls	r4, r3, #27
 8002b1a:	d506      	bpl.n	8002b2a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b1c:	6801      	ldr	r1, [r0, #0]
 8002b1e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002b20:	688a      	ldr	r2, [r1, #8]
 8002b22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b26:	4322      	orrs	r2, r4
 8002b28:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b2a:	0699      	lsls	r1, r3, #26
 8002b2c:	d506      	bpl.n	8002b3c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b2e:	6801      	ldr	r1, [r0, #0]
 8002b30:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002b32:	688a      	ldr	r2, [r1, #8]
 8002b34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b38:	4322      	orrs	r2, r4
 8002b3a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b3c:	065a      	lsls	r2, r3, #25
 8002b3e:	d510      	bpl.n	8002b62 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b40:	6801      	ldr	r1, [r0, #0]
 8002b42:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002b44:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b46:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b4a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002b4e:	ea42 0204 	orr.w	r2, r2, r4
 8002b52:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b54:	d105      	bne.n	8002b62 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b56:	684a      	ldr	r2, [r1, #4]
 8002b58:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8002b5a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002b5e:	4322      	orrs	r2, r4
 8002b60:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b62:	061b      	lsls	r3, r3, #24
 8002b64:	d506      	bpl.n	8002b74 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b66:	6802      	ldr	r2, [r0, #0]
 8002b68:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8002b6a:	6853      	ldr	r3, [r2, #4]
 8002b6c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002b70:	430b      	orrs	r3, r1
 8002b72:	6053      	str	r3, [r2, #4]
  }
}
 8002b74:	bd10      	pop	{r4, pc}

08002b76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b7a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8002b7e:	4604      	mov	r4, r0
 8002b80:	460e      	mov	r6, r1
 8002b82:	4615      	mov	r5, r2
 8002b84:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b86:	6822      	ldr	r2, [r4, #0]
 8002b88:	69d3      	ldr	r3, [r2, #28]
 8002b8a:	ea36 0303 	bics.w	r3, r6, r3
 8002b8e:	bf0c      	ite	eq
 8002b90:	2301      	moveq	r3, #1
 8002b92:	2300      	movne	r3, #0
 8002b94:	42ab      	cmp	r3, r5
 8002b96:	d001      	beq.n	8002b9c <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002b98:	2000      	movs	r0, #0
 8002b9a:	e027      	b.n	8002bec <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8002b9c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002ba0:	d0f2      	beq.n	8002b88 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba2:	f7fe f8b1 	bl	8000d08 <HAL_GetTick>
 8002ba6:	1bc0      	subs	r0, r0, r7
 8002ba8:	4540      	cmp	r0, r8
 8002baa:	6820      	ldr	r0, [r4, #0]
 8002bac:	d802      	bhi.n	8002bb4 <UART_WaitOnFlagUntilTimeout+0x3e>
 8002bae:	f1b8 0f00 	cmp.w	r8, #0
 8002bb2:	d11d      	bne.n	8002bf0 <UART_WaitOnFlagUntilTimeout+0x7a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb4:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002bb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bbc:	e840 3200 	strex	r2, r3, [r0]
 8002bc0:	2a00      	cmp	r2, #0
 8002bc2:	d1f7      	bne.n	8002bb4 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc4:	f100 0308 	add.w	r3, r0, #8
 8002bc8:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bcc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd0:	f100 0108 	add.w	r1, r0, #8
 8002bd4:	e841 3200 	strex	r2, r3, [r1]
 8002bd8:	2a00      	cmp	r2, #0
 8002bda:	d1f3      	bne.n	8002bc4 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8002bdc:	2320      	movs	r3, #32
 8002bde:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8002be2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          return HAL_TIMEOUT;
 8002be6:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8002be8:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
}
 8002bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002bf0:	6803      	ldr	r3, [r0, #0]
 8002bf2:	075a      	lsls	r2, r3, #29
 8002bf4:	d5c7      	bpl.n	8002b86 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bf6:	69c3      	ldr	r3, [r0, #28]
 8002bf8:	051b      	lsls	r3, r3, #20
 8002bfa:	d5c4      	bpl.n	8002b86 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c00:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c02:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002c06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0a:	e840 3200 	strex	r2, r3, [r0]
 8002c0e:	2a00      	cmp	r2, #0
 8002c10:	d1f7      	bne.n	8002c02 <UART_WaitOnFlagUntilTimeout+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c12:	f100 0308 	add.w	r3, r0, #8
 8002c16:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1e:	f100 0108 	add.w	r1, r0, #8
 8002c22:	e841 3200 	strex	r2, r3, [r1]
 8002c26:	2a00      	cmp	r2, #0
 8002c28:	d1f3      	bne.n	8002c12 <UART_WaitOnFlagUntilTimeout+0x9c>
          huart->gState = HAL_UART_STATE_READY;
 8002c2a:	2320      	movs	r3, #32
 8002c2c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8002c30:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c34:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8002c38:	e7d5      	b.n	8002be6 <UART_WaitOnFlagUntilTimeout+0x70>

08002c3a <UART_CheckIdleState>:
{
 8002c3a:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c3c:	2500      	movs	r5, #0
{
 8002c3e:	4604      	mov	r4, r0
 8002c40:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c42:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8002c46:	f7fe f85f 	bl	8000d08 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c4a:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8002c4c:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c4e:	6812      	ldr	r2, [r2, #0]
 8002c50:	0711      	lsls	r1, r2, #28
 8002c52:	d417      	bmi.n	8002c84 <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c54:	6822      	ldr	r2, [r4, #0]
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	0752      	lsls	r2, r2, #29
 8002c5a:	d509      	bpl.n	8002c70 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c5c:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002c60:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c64:	4620      	mov	r0, r4
 8002c66:	9200      	str	r2, [sp, #0]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f7ff ff84 	bl	8002b76 <UART_WaitOnFlagUntilTimeout>
 8002c6e:	b9b0      	cbnz	r0, 8002c9e <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 8002c70:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c72:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002c74:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8002c78:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8002c7c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c80:	66e0      	str	r0, [r4, #108]	; 0x6c
  return HAL_OK;
 8002c82:	e00d      	b.n	8002ca0 <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c84:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002c88:	9003      	str	r0, [sp, #12]
 8002c8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c8e:	4620      	mov	r0, r4
 8002c90:	9200      	str	r2, [sp, #0]
 8002c92:	462a      	mov	r2, r5
 8002c94:	f7ff ff6f 	bl	8002b76 <UART_WaitOnFlagUntilTimeout>
 8002c98:	9b03      	ldr	r3, [sp, #12]
 8002c9a:	2800      	cmp	r0, #0
 8002c9c:	d0da      	beq.n	8002c54 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8002c9e:	2003      	movs	r0, #3
}
 8002ca0:	b005      	add	sp, #20
 8002ca2:	bd30      	pop	{r4, r5, pc}

08002ca4 <HAL_UART_Init>:
{
 8002ca4:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002ca6:	4604      	mov	r4, r0
 8002ca8:	b350      	cbz	r0, 8002d00 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002caa:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8002cae:	b91b      	cbnz	r3, 8002cb8 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8002cb0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8002cb4:	f7fd fe9a 	bl	80009ec <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002cb8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002cba:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cbc:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8002cbe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8002cc2:	6813      	ldr	r3, [r2, #0]
 8002cc4:	f023 0301 	bic.w	r3, r3, #1
 8002cc8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cca:	f7ff fd17 	bl	80026fc <UART_SetConfig>
 8002cce:	2801      	cmp	r0, #1
 8002cd0:	d016      	beq.n	8002d00 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002cd4:	b113      	cbz	r3, 8002cdc <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	f7ff fef8 	bl	8002acc <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cdc:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8002cde:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ce6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cee:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
}
 8002cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8002cfa:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002cfc:	f7ff bf9d 	b.w	8002c3a <UART_CheckIdleState>
}
 8002d00:	2001      	movs	r0, #1
 8002d02:	bd10      	pop	{r4, pc}

08002d04 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002d04:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8002d06:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002d08:	b91b      	cbnz	r3, 8002d12 <UARTEx_SetNbDataToProcess+0xe>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 8002d0a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002d0e:	6683      	str	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002d10:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002d12:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d14:	4d0a      	ldr	r5, [pc, #40]	; (8002d40 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002d16:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002d18:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8002d1a:	4c0a      	ldr	r4, [pc, #40]	; (8002d44 <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d1c:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002d20:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d22:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8002d24:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d2c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d30:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 8002d32:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d3a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 8002d3e:	e7e7      	b.n	8002d10 <UARTEx_SetNbDataToProcess+0xc>
 8002d40:	08008c12 	.word	0x08008c12
 8002d44:	08008c0a 	.word	0x08008c0a

08002d48 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8002d48:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d014      	beq.n	8002d7a <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d50:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002d52:	2324      	movs	r3, #36	; 0x24
 8002d54:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d58:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8002d5a:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002d5c:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8002d60:	f023 0301 	bic.w	r3, r3, #1
 8002d64:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002d66:	2300      	movs	r3, #0
 8002d68:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d6a:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002d6c:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8002d6e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8002d72:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  return HAL_OK;
 8002d76:	4618      	mov	r0, r3
 8002d78:	4770      	bx	lr
  __HAL_LOCK(huart);
 8002d7a:	2002      	movs	r0, #2
}
 8002d7c:	4770      	bx	lr

08002d7e <HAL_UARTEx_SetTxFifoThreshold>:
{
 8002d7e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8002d80:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 8002d84:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d01b      	beq.n	8002dc2 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8002d90:	2324      	movs	r3, #36	; 0x24
 8002d92:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d96:	6803      	ldr	r3, [r0, #0]
 8002d98:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	f022 0201 	bic.w	r2, r2, #1
 8002da0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8002da8:	4311      	orrs	r1, r2
 8002daa:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8002dac:	f7ff ffaa 	bl	8002d04 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002db0:	6803      	ldr	r3, [r0, #0]
 8002db2:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002db4:	2320      	movs	r3, #32
 8002db6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8002dba:	2000      	movs	r0, #0
 8002dbc:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8002dc0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8002dc2:	2002      	movs	r0, #2
 8002dc4:	e7fc      	b.n	8002dc0 <HAL_UARTEx_SetTxFifoThreshold+0x42>

08002dc6 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8002dc6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8002dc8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 8002dcc:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d01b      	beq.n	8002e0a <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8002dd8:	2324      	movs	r3, #36	; 0x24
 8002dda:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002dde:	6803      	ldr	r3, [r0, #0]
 8002de0:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8002df0:	4311      	orrs	r1, r2
 8002df2:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8002df4:	f7ff ff86 	bl	8002d04 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002df8:	6803      	ldr	r3, [r0, #0]
 8002dfa:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002dfc:	2320      	movs	r3, #32
 8002dfe:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8002e02:	2000      	movs	r0, #0
 8002e04:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8002e08:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8002e0a:	2002      	movs	r0, #2
 8002e0c:	e7fc      	b.n	8002e08 <HAL_UARTEx_SetRxFifoThreshold+0x42>
	...

08002e10 <OpenNNA_Printf>:
 * strings: OpenNNA输出的信息
 * PS：影响库运行的关键信息会通过这个函数往外打印，其他不重要的信息直接采用printf打印
 */
#if(DEBUG==1)
void OpenNNA_Printf(char * strings)
{
 8002e10:	b510      	push	{r4, lr}
    char mesg[250] = {"OpenNNA: "};
 8002e12:	4a0c      	ldr	r2, [pc, #48]	; (8002e44 <OpenNNA_Printf+0x34>)
{
 8002e14:	b0c0      	sub	sp, #256	; 0x100
 8002e16:	4604      	mov	r4, r0
    char mesg[250] = {"OpenNNA: "};
 8002e18:	6851      	ldr	r1, [r2, #4]
 8002e1a:	ab01      	add	r3, sp, #4
 8002e1c:	6810      	ldr	r0, [r2, #0]
 8002e1e:	8912      	ldrh	r2, [r2, #8]
 8002e20:	c303      	stmia	r3!, {r0, r1}
 8002e22:	2100      	movs	r1, #0
 8002e24:	801a      	strh	r2, [r3, #0]
 8002e26:	f10d 000e 	add.w	r0, sp, #14
 8002e2a:	22f0      	movs	r2, #240	; 0xf0
 8002e2c:	f002 fdb8 	bl	80059a0 <memset>
    strcat(mesg, strings);
 8002e30:	4621      	mov	r1, r4
 8002e32:	a801      	add	r0, sp, #4
 8002e34:	f003 fb9c 	bl	8006570 <strcat>
    printf("%s", mesg);
 8002e38:	a901      	add	r1, sp, #4
 8002e3a:	4803      	ldr	r0, [pc, #12]	; (8002e48 <OpenNNA_Printf+0x38>)
 8002e3c:	f003 fada 	bl	80063f4 <iprintf>
}
 8002e40:	b040      	add	sp, #256	; 0x100
 8002e42:	bd10      	pop	{r4, pc}
 8002e44:	08008990 	.word	0x08008990
 8002e48:	08008c1a 	.word	0x08008c1a

08002e4c <OpenNNA_Malloc>:
 * size: 要申请的内存长度
 * return: 内存地址
 */
void * OpenNNA_Malloc(unsigned long size)
{
    OpenNNA_Heap_Sum +=size;
 8002e4c:	4a02      	ldr	r2, [pc, #8]	; (8002e58 <OpenNNA_Malloc+0xc>)
 8002e4e:	6813      	ldr	r3, [r2, #0]
 8002e50:	4403      	add	r3, r0
 8002e52:	6013      	str	r3, [r2, #0]
    return (void *)malloc(size);
 8002e54:	f002 bd86 	b.w	8005964 <malloc>
 8002e58:	24000300 	.word	0x24000300

08002e5c <OpenNNA_CreateNetwork>:

/* Function :OpenNNA_CreateNetwork :创建一个神经网络对象
 * return: 神经网络对象
*/
struct layer * OpenNNA_CreateNetwork(void)
{
 8002e5c:	b510      	push	{r4, lr}
    struct layer * Network = NULL;
    Network = OpenNNA_Malloc(sizeof(layers));//为神经网络对象申请堆内存
 8002e5e:	2030      	movs	r0, #48	; 0x30
 8002e60:	f7ff fff4 	bl	8002e4c <OpenNNA_Malloc>
    Network->layer_next = NULL;
    Network->layer_prev = NULL;
    Network->Layer_Index = 0;
    Network->Layer_Name = LIB_NAME;
 8002e64:	4a08      	ldr	r2, [pc, #32]	; (8002e88 <OpenNNA_CreateNetwork+0x2c>)
    Network->layer_next = NULL;
 8002e66:	2300      	movs	r3, #0
    Network = OpenNNA_Malloc(sizeof(layers));//为神经网络对象申请堆内存
 8002e68:	4604      	mov	r4, r0
    Network->Layer_Name = LIB_NAME;
 8002e6a:	6082      	str	r2, [r0, #8]
    Network->Layer_Name_Alias = Author;
 8002e6c:	4a07      	ldr	r2, [pc, #28]	; (8002e8c <OpenNNA_CreateNetwork+0x30>)
    Network->layer_next = NULL;
 8002e6e:	62c3      	str	r3, [r0, #44]	; 0x2c
    Network->Layer_Para_Base = NULL;
    Network->Layer_Para_Extra = NULL;
    Network->Input_Feature_Map=NULL;
    Network->Output_Feature_Map=NULL;
 8002e70:	61c3      	str	r3, [r0, #28]
    Network->Layer_Index = 0;
 8002e72:	e9c0 3300 	strd	r3, r3, [r0]
    Network->Layer_Para_Base = NULL;
 8002e76:	e9c0 2303 	strd	r2, r3, [r0, #12]
    Network->Input_Feature_Map=NULL;
 8002e7a:	e9c0 3305 	strd	r3, r3, [r0, #20]
    printf(
 8002e7e:	4804      	ldr	r0, [pc, #16]	; (8002e90 <OpenNNA_CreateNetwork+0x34>)
 8002e80:	f003 fb3e 	bl	8006500 <puts>
#if(DEBUG==1)
    OpenNNA_Logo();
#endif
    return Network;
}
 8002e84:	4620      	mov	r0, r4
 8002e86:	bd10      	pop	{r4, pc}
 8002e88:	08008c1d 	.word	0x08008c1d
 8002e8c:	08008c46 	.word	0x08008c46
 8002e90:	08008c60 	.word	0x08008c60

08002e94 <OpenNNA_Add_Layer>:
                            const void *Layer_Para_Base, \
                            const void *Layer_Para_Extra, \
                            const void *Weights, \
                            const void *Bias \
                            )
{
 8002e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e98:	460f      	mov	r7, r1
 8002e9a:	b09a      	sub	sp, #104	; 0x68
 8002e9c:	4691      	mov	r9, r2
 8002e9e:	4698      	mov	r8, r3
    unsigned int layer_index = 0;
    struct layer * layer_prev = NULL;
    if(NULL != Network) {
 8002ea0:	4604      	mov	r4, r0
 8002ea2:	2800      	cmp	r0, #0
 8002ea4:	d13a      	bne.n	8002f1c <OpenNNA_Add_Layer+0x88>
        }
        Network->Weights = Weights;
        Network->Bias =Bias;
    }
    return 0;
}
 8002ea6:	b01a      	add	sp, #104	; 0x68
 8002ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            layer_index = Network->Layer_Index;
 8002eac:	f8d6 a004 	ldr.w	sl, [r6, #4]
 8002eb0:	4634      	mov	r4, r6
        while(NULL != Network->layer_next)
 8002eb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002eb4:	2e00      	cmp	r6, #0
 8002eb6:	d1f9      	bne.n	8002eac <OpenNNA_Add_Layer+0x18>
        Network->layer_next = OpenNNA_Malloc(sizeof(layers));//新建一个Layer
 8002eb8:	2030      	movs	r0, #48	; 0x30
 8002eba:	f7ff ffc7 	bl	8002e4c <OpenNNA_Malloc>
        Network->Layer_Para_Extra = Layer_Para_Extra;
 8002ebe:	9b22      	ldr	r3, [sp, #136]	; 0x88
        Network->layer_next = OpenNNA_Malloc(sizeof(layers));//新建一个Layer
 8002ec0:	62e0      	str	r0, [r4, #44]	; 0x2c
 8002ec2:	4605      	mov	r5, r0
        Network->layer_prev = layer_prev;
 8002ec4:	6004      	str	r4, [r0, #0]
        Network->Layer_Index = layer_index + 1;
 8002ec6:	f10a 0401 	add.w	r4, sl, #1
        Network->layer_next = NULL;
 8002eca:	62c6      	str	r6, [r0, #44]	; 0x2c
        Network->Layer_Para_Extra = Layer_Para_Extra;
 8002ecc:	6143      	str	r3, [r0, #20]
        Network->pfunc_Operator = NULL;
 8002ece:	6286      	str	r6, [r0, #40]	; 0x28
        Network->Layer_Para_Base = Layer_Para_Base;
 8002ed0:	e9c0 9803 	strd	r9, r8, [r0, #12]
            if (!strcmp(Layer_Name, operators[i].Operator_Name))//0找到
 8002ed4:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8002f34 <OpenNNA_Add_Layer+0xa0>
        Network->Layer_Name = Layer_Name;
 8002ed8:	e9c0 4701 	strd	r4, r7, [r0, #4]
        Network->Output_Feature_Map = NULL;
 8002edc:	e9c0 6606 	strd	r6, r6, [r0, #24]
            if (!strcmp(Layer_Name, operators[i].Operator_Name))//0找到
 8002ee0:	f858 1036 	ldr.w	r1, [r8, r6, lsl #3]
 8002ee4:	4638      	mov	r0, r7
 8002ee6:	f7fd fa03 	bl	80002f0 <strcmp>
 8002eea:	b9d0      	cbnz	r0, 8002f22 <OpenNNA_Add_Layer+0x8e>
                Network->pfunc_Operator = operators[i].pfunc_Operator;//算子函数指针填入
 8002eec:	eb08 06c6 	add.w	r6, r8, r6, lsl #3
 8002ef0:	6873      	ldr	r3, [r6, #4]
 8002ef2:	62ab      	str	r3, [r5, #40]	; 0x28
        if(NULL == Network->pfunc_Operator && 0 != Network->Layer_Index)//未找到算子报错，index=0时忽略
 8002ef4:	b9bb      	cbnz	r3, 8002f26 <OpenNNA_Add_Layer+0x92>
 8002ef6:	b1b4      	cbz	r4, 8002f26 <OpenNNA_Add_Layer+0x92>
            char mesg[100] = {0};
 8002ef8:	4601      	mov	r1, r0
 8002efa:	2260      	movs	r2, #96	; 0x60
 8002efc:	9001      	str	r0, [sp, #4]
 8002efe:	a802      	add	r0, sp, #8
 8002f00:	f002 fd4e 	bl	80059a0 <memset>
            sprintf(mesg, "Layer %d Operator:%s NOT FOUND IN LIB!!!\n", Network->Layer_Index, Layer_Name);
 8002f04:	463b      	mov	r3, r7
 8002f06:	4622      	mov	r2, r4
 8002f08:	4909      	ldr	r1, [pc, #36]	; (8002f30 <OpenNNA_Add_Layer+0x9c>)
 8002f0a:	a801      	add	r0, sp, #4
 8002f0c:	f003 fb10 	bl	8006530 <siprintf>
            OpenNNA_Printf(mesg);
 8002f10:	a801      	add	r0, sp, #4
 8002f12:	f7ff ff7d 	bl	8002e10 <OpenNNA_Printf>
            return -1;
 8002f16:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1a:	e7c4      	b.n	8002ea6 <OpenNNA_Add_Layer+0x12>
    unsigned int layer_index = 0;
 8002f1c:	f04f 0a00 	mov.w	sl, #0
 8002f20:	e7c7      	b.n	8002eb2 <OpenNNA_Add_Layer+0x1e>
        for (int i = 0; i < sizeof(operators); ++i) {
 8002f22:	3601      	adds	r6, #1
 8002f24:	e7dc      	b.n	8002ee0 <OpenNNA_Add_Layer+0x4c>
        Network->Weights = Weights;
 8002f26:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002f28:	622b      	str	r3, [r5, #32]
        Network->Bias =Bias;
 8002f2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002f2c:	626b      	str	r3, [r5, #36]	; 0x24
 8002f2e:	e7ba      	b.n	8002ea6 <OpenNNA_Add_Layer+0x12>
 8002f30:	08008e28 	.word	0x08008e28
 8002f34:	24000010 	.word	0x24000010

08002f38 <OpenNNA_Init>:
 * 这个函数主要做以下几件事情:
 * 1.以网络为粒度，为每一层分配输入/输出堆内存
 * 2.将最后一层和第0层(Host节点)连接，构成循环链表。方便推理函数遍历干活
*/
void OpenNNA_Init(struct layer * Network)
{
 8002f38:	b538      	push	{r3, r4, r5, lr}
#if(Dynamic_Fmap_heap == 1)//动态特征图堆内存(管理粒度:层)
    struct layer * Host = Network;//第0层
    struct layer * Last_Layer = NULL;//最后一层
    Network = Network->layer_next;//跳转到第一层
 8002f3a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
{
 8002f3c:	4605      	mov	r5, r0
    //提示动态堆内存分配已开启
#if(DEBUG==1)
    OpenNNA_Printf("Dynamic Fmap Heap Enable!\n");
 8002f3e:	4811      	ldr	r0, [pc, #68]	; (8002f84 <OpenNNA_Init+0x4c>)
 8002f40:	f7ff ff66 	bl	8002e10 <OpenNNA_Printf>
#endif
    Network->Input_Feature_Map= OpenNNA_Malloc(sizeof(data_t)*\
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Channel*\
 8002f44:	6923      	ldr	r3, [r4, #16]
 8002f46:	e9d3 0200 	ldrd	r0, r2, [r3]
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Row*\
 8002f4a:	689b      	ldr	r3, [r3, #8]
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Channel*\
 8002f4c:	4350      	muls	r0, r2
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Row*\
 8002f4e:	4358      	muls	r0, r3
    Network->Input_Feature_Map= OpenNNA_Malloc(sizeof(data_t)*\
 8002f50:	0080      	lsls	r0, r0, #2
 8002f52:	f7ff ff7b 	bl	8002e4c <OpenNNA_Malloc>
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Col\
    );
    //分配输出特征图的堆内存
    Network->Output_Feature_Map= OpenNNA_Malloc(sizeof(data_t)*\
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Channel*\
 8002f56:	6923      	ldr	r3, [r4, #16]
    Network->Input_Feature_Map= OpenNNA_Malloc(sizeof(data_t)*\
 8002f58:	61a0      	str	r0, [r4, #24]
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Channel*\
 8002f5a:	e9d3 0203 	ldrd	r0, r2, [r3, #12]
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Row*\
 8002f5e:	695b      	ldr	r3, [r3, #20]
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Channel*\
 8002f60:	4350      	muls	r0, r2
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Row*\
 8002f62:	4358      	muls	r0, r3
    Network->Output_Feature_Map= OpenNNA_Malloc(sizeof(data_t)*\
 8002f64:	0080      	lsls	r0, r0, #2
 8002f66:	f7ff ff71 	bl	8002e4c <OpenNNA_Malloc>
 8002f6a:	61e0      	str	r0, [r4, #28]
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Col\
    );
    while(NULL != Network->layer_next)//遍历到最后一层
 8002f6c:	4623      	mov	r3, r4
 8002f6e:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8002f70:	2c00      	cmp	r4, #0
 8002f72:	d1fb      	bne.n	8002f6c <OpenNNA_Init+0x34>
    {
        Network = Network->layer_next;
    }
    //将最后一层和第0层(Host节点)连接，构成循环链表。方便推理函数遍历干活
    Network->layer_next = Host;
 8002f74:	62dd      	str	r5, [r3, #44]	; 0x2c
    //将第0层的prev和最后一层连接，构成双向循环链表
    Last_Layer = Network;
    Network = Network->layer_next;//跳转到第0层
    Network->layer_prev= Last_Layer;//第0层prev连接最后一层
#if(DEBUG==1)
    OpenNNA_Printf("Init OK!\n");
 8002f76:	4804      	ldr	r0, [pc, #16]	; (8002f88 <OpenNNA_Init+0x50>)
    Network->layer_prev= Last_Layer;//第0层prev连接最后一层
 8002f78:	602b      	str	r3, [r5, #0]
    Network->layer_prev= Last_Layer;//第0层prev连接最后一层
#if(DEBUG==1)
    OpenNNA_Printf("Init OK!\n");
#endif
#endif
}
 8002f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    OpenNNA_Printf("Init OK!\n");
 8002f7e:	f7ff bf47 	b.w	8002e10 <OpenNNA_Printf>
 8002f82:	bf00      	nop
 8002f84:	08008e52 	.word	0x08008e52
 8002f88:	08008e6d 	.word	0x08008e6d

08002f8c <OpenNNA_Print_Network>:
/* Function :OpenNNA_Print_Network :打印网络信息
 * struct layer * Network: 网络对象
*/
#if(DEBUG==1)
void OpenNNA_Print_Network(struct layer * Network)
{
 8002f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf(
 8002f90:	6843      	ldr	r3, [r0, #4]
{
 8002f92:	4604      	mov	r4, r0
    );
    while(NULL != Network->layer_next)
    {
        Network = Network->layer_next;
        if(0 !=Network->Layer_Index && NULL != Network->Layer_Para_Base)
        printf(
 8002f94:	f8df a148 	ldr.w	sl, [pc, #328]	; 80030e0 <OpenNNA_Print_Network+0x154>
    printf(
 8002f98:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
{
 8002f9c:	ed2d 8b02 	vpush	{d8}
    printf(
 8002fa0:	4846      	ldr	r0, [pc, #280]	; (80030bc <OpenNNA_Print_Network+0x130>)
{
 8002fa2:	b093      	sub	sp, #76	; 0x4c
    printf(
 8002fa4:	f003 fa26 	bl	80063f4 <iprintf>
    printf(
 8002fa8:	4845      	ldr	r0, [pc, #276]	; (80030c0 <OpenNNA_Print_Network+0x134>)
 8002faa:	f003 faa9 	bl	8006500 <puts>
    while(NULL != Network->layer_next)
 8002fae:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8002fb0:	b124      	cbz	r4, 8002fbc <OpenNNA_Print_Network+0x30>
        if(0 !=Network->Layer_Index && NULL != Network->Layer_Para_Base)
 8002fb2:	f8d4 b004 	ldr.w	fp, [r4, #4]
 8002fb6:	f1bb 0f00 	cmp.w	fp, #0
 8002fba:	d10c      	bne.n	8002fd6 <OpenNNA_Print_Network+0x4a>
                OpenNNA_Get_LayerParam(Network,Network->Layer_Index),
                Network->Layer_Index
        );
        if(0 == Network->Layer_Index)break;
    }
    printf(
 8002fbc:	4b41      	ldr	r3, [pc, #260]	; (80030c4 <OpenNNA_Print_Network+0x138>)
 8002fbe:	4842      	ldr	r0, [pc, #264]	; (80030c8 <OpenNNA_Print_Network+0x13c>)
 8002fc0:	6819      	ldr	r1, [r3, #0]
 8002fc2:	4b42      	ldr	r3, [pc, #264]	; (80030cc <OpenNNA_Print_Network+0x140>)
 8002fc4:	008a      	lsls	r2, r1, #2
 8002fc6:	681b      	ldr	r3, [r3, #0]
            "Total Params:%d\n"
            "Flash:%d bytes\n"
            "Heap:%d bytes\n"
            "\n\n",OpenNNA_Flash_Sum,OpenNNA_Flash_Sum*sizeof(data_t),OpenNNA_Heap_Sum
    );
}
 8002fc8:	b013      	add	sp, #76	; 0x4c
 8002fca:	ecbd 8b02 	vpop	{d8}
 8002fce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf(
 8002fd2:	f003 ba0f 	b.w	80063f4 <iprintf>
        if(0 !=Network->Layer_Index && NULL != Network->Layer_Para_Base)
 8002fd6:	6921      	ldr	r1, [r4, #16]
 8002fd8:	2900      	cmp	r1, #0
 8002fda:	d0e8      	beq.n	8002fae <OpenNNA_Print_Network+0x22>
        printf(
 8002fdc:	68e3      	ldr	r3, [r4, #12]
 8002fde:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8002fe2:	ee08 3a10 	vmov	s16, r3
 8002fe6:	45d0      	cmp	r8, sl
 8002fe8:	e9d1 3200 	ldrd	r3, r2, [r1]
 8002fec:	920b      	str	r2, [sp, #44]	; 0x2c
 8002fee:	688a      	ldr	r2, [r1, #8]
 8002ff0:	920c      	str	r2, [sp, #48]	; 0x30
 8002ff2:	68ca      	ldr	r2, [r1, #12]
 8002ff4:	920d      	str	r2, [sp, #52]	; 0x34
 8002ff6:	690a      	ldr	r2, [r1, #16]
 8002ff8:	920e      	str	r2, [sp, #56]	; 0x38
 8002ffa:	694a      	ldr	r2, [r1, #20]
 8002ffc:	920f      	str	r2, [sp, #60]	; 0x3c
 8002ffe:	d151      	bne.n	80030a4 <OpenNNA_Print_Network+0x118>
                ((Network->Layer_Name=="Conv2d")?(((Layer_Para_Conv2d *)Network->Layer_Para_Extra)->kernel_channel):((Network->Layer_Name=="AvgPool")?0:((Network->Layer_Name=="MaxPool")?0:0))),
 8003000:	6961      	ldr	r1, [r4, #20]
        printf(
 8003002:	e9d1 6901 	ldrd	r6, r9, [r1, #4]
 8003006:	680f      	ldr	r7, [r1, #0]
 8003008:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    while(Network->Layer_Index !=layer_index) {
 800300a:	6869      	ldr	r1, [r5, #4]
 800300c:	458b      	cmp	fp, r1
 800300e:	d135      	bne.n	800307c <OpenNNA_Print_Network+0xf0>
    if(!strcmp("Dense",Network->Layer_Name)){
 8003010:	68a9      	ldr	r1, [r5, #8]
 8003012:	482f      	ldr	r0, [pc, #188]	; (80030d0 <OpenNNA_Print_Network+0x144>)
 8003014:	9311      	str	r3, [sp, #68]	; 0x44
 8003016:	9110      	str	r1, [sp, #64]	; 0x40
 8003018:	f7fd f96a 	bl	80002f0 <strcmp>
 800301c:	e9dd 1310 	ldrd	r1, r3, [sp, #64]	; 0x40
 8003020:	2800      	cmp	r0, #0
 8003022:	d12d      	bne.n	8003080 <OpenNNA_Print_Network+0xf4>
        ((Layer_Para_Base *)(Network->Layer_Para_Base))->Input_Fmap_Row *\
 8003024:	692a      	ldr	r2, [r5, #16]
        param = ((Layer_Para_Dense *)Network->Layer_Para_Extra)->units * \
 8003026:	6969      	ldr	r1, [r5, #20]
        ((Layer_Para_Base *)(Network->Layer_Para_Base))->Input_Fmap_Row *\
 8003028:	e9d2 0501 	ldrd	r0, r5, [r2, #4]
        param = ((Layer_Para_Dense *)Network->Layer_Para_Extra)->units * \
 800302c:	6809      	ldr	r1, [r1, #0]
        ((Layer_Para_Base *)(Network->Layer_Para_Base))->Input_Fmap_Row *\
 800302e:	4368      	muls	r0, r5
        ((Layer_Para_Base *)(Network->Layer_Para_Base))->Input_Fmap_Col *\
 8003030:	6815      	ldr	r5, [r2, #0]
        ((Layer_Para_Base *)(Network->Layer_Para_Base))->Input_Fmap_Row *\
 8003032:	4348      	muls	r0, r1
        param = ((Layer_Para_Dense *)Network->Layer_Para_Extra)->units * \
 8003034:	fb05 1100 	mla	r1, r5, r0, r1
    OpenNNA_Flash_Sum+=param;
 8003038:	4d22      	ldr	r5, [pc, #136]	; (80030c4 <OpenNNA_Print_Network+0x138>)
        printf(
 800303a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    OpenNNA_Flash_Sum+=param;
 800303c:	6828      	ldr	r0, [r5, #0]
 800303e:	4408      	add	r0, r1
 8003040:	6028      	str	r0, [r5, #0]
        printf(
 8003042:	9204      	str	r2, [sp, #16]
 8003044:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003046:	4823      	ldr	r0, [pc, #140]	; (80030d4 <OpenNNA_Print_Network+0x148>)
 8003048:	9203      	str	r2, [sp, #12]
 800304a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800304c:	f8cd 9014 	str.w	r9, [sp, #20]
 8003050:	9202      	str	r2, [sp, #8]
 8003052:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003054:	9201      	str	r2, [sp, #4]
 8003056:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003058:	e9cd 1b08 	strd	r1, fp, [sp, #32]
 800305c:	9200      	str	r2, [sp, #0]
 800305e:	ee18 1a10 	vmov	r1, s16
 8003062:	4642      	mov	r2, r8
 8003064:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8003068:	f003 f9c4 	bl	80063f4 <iprintf>
        if(0 == Network->Layer_Index)break;
 800306c:	6863      	ldr	r3, [r4, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d19d      	bne.n	8002fae <OpenNNA_Print_Network+0x22>
 8003072:	e7a3      	b.n	8002fbc <OpenNNA_Print_Network+0x30>
                ((Network->Layer_Name=="Conv2d")?(((Layer_Para_Conv2d *)Network->Layer_Para_Extra)->kernel_row):((Network->Layer_Name=="AvgPool")?(((Layer_Para_AvgPool *)Network->Layer_Para_Extra)->kernel_row):((Network->Layer_Name=="MaxPool")?(((Layer_Para_MaxPool *)Network->Layer_Para_Extra)->kernel_row):0))),
 8003074:	2600      	movs	r6, #0
        printf(
 8003076:	46b1      	mov	r9, r6
                ((Network->Layer_Name=="Conv2d")?(((Layer_Para_Conv2d *)Network->Layer_Para_Extra)->kernel_col):((Network->Layer_Name=="AvgPool")?(((Layer_Para_AvgPool *)Network->Layer_Para_Extra)->kernel_row):((Network->Layer_Name=="MaxPool")?(((Layer_Para_MaxPool *)Network->Layer_Para_Extra)->kernel_row):0))),
 8003078:	4637      	mov	r7, r6
 800307a:	e7c5      	b.n	8003008 <OpenNNA_Print_Network+0x7c>
        Network = Network->layer_next;
 800307c:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 800307e:	e7c4      	b.n	800300a <OpenNNA_Print_Network+0x7e>
    else if(!strcmp("Conv2d",Network->Layer_Name)) {
 8003080:	4650      	mov	r0, sl
 8003082:	9310      	str	r3, [sp, #64]	; 0x40
 8003084:	f7fd f934 	bl	80002f0 <strcmp>
 8003088:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800308a:	b948      	cbnz	r0, 80030a0 <OpenNNA_Print_Network+0x114>
        param = ((Layer_Para_Conv2d *)Network->Layer_Para_Extra)->kernel_col * \
 800308c:	696d      	ldr	r5, [r5, #20]
 800308e:	e9d5 1000 	ldrd	r1, r0, [r5]
 8003092:	4341      	muls	r1, r0
        ((Layer_Para_Conv2d *)Network->Layer_Para_Extra)->kernel_row *\
 8003094:	68a8      	ldr	r0, [r5, #8]
 8003096:	4348      	muls	r0, r1
        param = ((Layer_Para_Conv2d *)Network->Layer_Para_Extra)->kernel_col * \
 8003098:	68e9      	ldr	r1, [r5, #12]
 800309a:	fb00 1101 	mla	r1, r0, r1, r1
 800309e:	e7cb      	b.n	8003038 <OpenNNA_Print_Network+0xac>
    unsigned int param = 0;
 80030a0:	2100      	movs	r1, #0
 80030a2:	e7c9      	b.n	8003038 <OpenNNA_Print_Network+0xac>
                ((Network->Layer_Name=="Conv2d")?(((Layer_Para_Conv2d *)Network->Layer_Para_Extra)->kernel_row):((Network->Layer_Name=="AvgPool")?(((Layer_Para_AvgPool *)Network->Layer_Para_Extra)->kernel_row):((Network->Layer_Name=="MaxPool")?(((Layer_Para_MaxPool *)Network->Layer_Para_Extra)->kernel_row):0))),
 80030a4:	4a0c      	ldr	r2, [pc, #48]	; (80030d8 <OpenNNA_Print_Network+0x14c>)
 80030a6:	4590      	cmp	r8, r2
 80030a8:	d002      	beq.n	80030b0 <OpenNNA_Print_Network+0x124>
 80030aa:	4a0c      	ldr	r2, [pc, #48]	; (80030dc <OpenNNA_Print_Network+0x150>)
 80030ac:	4590      	cmp	r8, r2
 80030ae:	d1e1      	bne.n	8003074 <OpenNNA_Print_Network+0xe8>
 80030b0:	6961      	ldr	r1, [r4, #20]
        printf(
 80030b2:	f04f 0900 	mov.w	r9, #0
                ((Network->Layer_Name=="Conv2d")?(((Layer_Para_Conv2d *)Network->Layer_Para_Extra)->kernel_row):((Network->Layer_Name=="AvgPool")?(((Layer_Para_AvgPool *)Network->Layer_Para_Extra)->kernel_row):((Network->Layer_Name=="MaxPool")?(((Layer_Para_MaxPool *)Network->Layer_Para_Extra)->kernel_row):0))),
 80030b6:	684f      	ldr	r7, [r1, #4]
 80030b8:	463e      	mov	r6, r7
 80030ba:	e7a5      	b.n	8003008 <OpenNNA_Print_Network+0x7c>
 80030bc:	08008e77 	.word	0x08008e77
 80030c0:	08008f08 	.word	0x08008f08
 80030c4:	240002fc 	.word	0x240002fc
 80030c8:	08008fdd 	.word	0x08008fdd
 80030cc:	24000300 	.word	0x24000300
 80030d0:	0800905c 	.word	0x0800905c
 80030d4:	08009062 	.word	0x08009062
 80030d8:	080090f4 	.word	0x080090f4
 80030dc:	08009054 	.word	0x08009054
 80030e0:	0800913e 	.word	0x0800913e

080030e4 <OpenNNA_Predict>:
#endif
/* Function :OpenNNA_Init :神经网络推理
 * struct layer * Network: 网络对象
*/
void OpenNNA_Predict(struct layer * Network, const void *Network_Input, void *Network_Output)
{
 80030e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if (Dynamic_Fmap_heap==1)
    //跳转到第一层
    Network = Network->layer_next;
 80030e8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
{
 80030ea:	4616      	mov	r6, r2
    //遍历每一层计算一次(从第二层开始)
    while(0!=Network->Layer_Index)
    {
        //Free上一层的输入
        OpenNNA_Free(Network->layer_prev->Input_Feature_Map);
        Network->layer_prev->Input_Feature_Map = NULL;
 80030ec:	2700      	movs	r7, #0
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Col\
 80030ee:	6923      	ldr	r3, [r4, #16]
    *\
 80030f0:	e9d3 0201 	ldrd	r0, r2, [r3, #4]
    memcpy(Network->Input_Feature_Map,Network_Input,\
 80030f4:	681b      	ldr	r3, [r3, #0]
    *\
 80030f6:	4342      	muls	r2, r0
    memcpy(Network->Input_Feature_Map,Network_Input,\
 80030f8:	69a0      	ldr	r0, [r4, #24]
 80030fa:	435a      	muls	r2, r3
 80030fc:	0092      	lsls	r2, r2, #2
 80030fe:	f002 fc41 	bl	8005984 <memcpy>
    Network->pfunc_Operator(Network);//将本层参数传入算子进行计算
 8003102:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003104:	4620      	mov	r0, r4
 8003106:	4798      	blx	r3
    Network = Network->layer_next;
 8003108:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
    while(0!=Network->Layer_Index)
 800310a:	e9d4 5800 	ldrd	r5, r8, [r4]
 800310e:	f1b8 0f00 	cmp.w	r8, #0
 8003112:	d127      	bne.n	8003164 <OpenNNA_Predict+0x80>
    //跳回最后一层取结果
    Network = Network->layer_prev;
    //把最后一层的结果取出
    memcpy(Network_Output,Network->Output_Feature_Map,\
    sizeof(data_t)*\
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Col\
 8003114:	6929      	ldr	r1, [r5, #16]
    memcpy(Network_Output,Network->Output_Feature_Map,\
 8003116:	4630      	mov	r0, r6
    *\
 8003118:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 800311c:	4353      	muls	r3, r2
    memcpy(Network_Output,Network->Output_Feature_Map,\
 800311e:	68ca      	ldr	r2, [r1, #12]
 8003120:	69e9      	ldr	r1, [r5, #28]
 8003122:	435a      	muls	r2, r3
 8003124:	0092      	lsls	r2, r2, #2
 8003126:	f002 fc2d 	bl	8005984 <memcpy>
    free(address);
 800312a:	69e8      	ldr	r0, [r5, #28]
 800312c:	f002 fc22 	bl	8005974 <free>
    );
    //把最后一层的输输出free
    OpenNNA_Free(Network->Output_Feature_Map);
    Network->Output_Feature_Map = NULL;
    //跳转到第一层
    Network = Network->layer_next;
 8003130:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    Network->Output_Feature_Map = NULL;
 8003132:	f8c5 801c 	str.w	r8, [r5, #28]
    Network = Network->layer_next;
 8003136:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    //为第一层输入输出特征图申请堆内存
    //分配输入特征图的堆内存
    Network->Input_Feature_Map= OpenNNA_Malloc(sizeof(data_t)*\
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Channel*\
 8003138:	6923      	ldr	r3, [r4, #16]
 800313a:	e9d3 0200 	ldrd	r0, r2, [r3]
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Row*\
 800313e:	689b      	ldr	r3, [r3, #8]
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Channel*\
 8003140:	4350      	muls	r0, r2
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Row*\
 8003142:	4358      	muls	r0, r3
    Network->Input_Feature_Map= OpenNNA_Malloc(sizeof(data_t)*\
 8003144:	0080      	lsls	r0, r0, #2
 8003146:	f7ff fe81 	bl	8002e4c <OpenNNA_Malloc>
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Input_Fmap_Col\
    );
    //分配输出特征图的堆内存
    Network->Output_Feature_Map= OpenNNA_Malloc(sizeof(data_t)*\
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Channel*\
 800314a:	6923      	ldr	r3, [r4, #16]
    Network->Input_Feature_Map= OpenNNA_Malloc(sizeof(data_t)*\
 800314c:	61a0      	str	r0, [r4, #24]
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Channel*\
 800314e:	e9d3 0203 	ldrd	r0, r2, [r3, #12]
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Row*\
 8003152:	695b      	ldr	r3, [r3, #20]
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Channel*\
 8003154:	4350      	muls	r0, r2
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Row*\
 8003156:	4358      	muls	r0, r3
    Network->Output_Feature_Map= OpenNNA_Malloc(sizeof(data_t)*\
 8003158:	0080      	lsls	r0, r0, #2
 800315a:	f7ff fe77 	bl	8002e4c <OpenNNA_Malloc>
 800315e:	61e0      	str	r0, [r4, #28]
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Row\
    *\
    ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Channel\
    );
#endif
}
 8003160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    free(address);
 8003164:	69a8      	ldr	r0, [r5, #24]
 8003166:	f002 fc05 	bl	8005974 <free>
        Network->layer_prev->Input_Feature_Map = NULL;
 800316a:	6823      	ldr	r3, [r4, #0]
        ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Channel*\
 800316c:	6922      	ldr	r2, [r4, #16]
        Network->layer_prev->Input_Feature_Map = NULL;
 800316e:	619f      	str	r7, [r3, #24]
        Network->Input_Feature_Map=Network->layer_prev->Output_Feature_Map;
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	61a3      	str	r3, [r4, #24]
        ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Channel*\
 8003174:	e9d2 3003 	ldrd	r3, r0, [r2, #12]
 8003178:	4343      	muls	r3, r0
        ((Layer_Para_Base *)Network->Layer_Para_Base)->Output_Fmap_Row*\
 800317a:	6950      	ldr	r0, [r2, #20]
 800317c:	4358      	muls	r0, r3
        Network->Output_Feature_Map= OpenNNA_Malloc(sizeof(data_t)*\
 800317e:	0080      	lsls	r0, r0, #2
 8003180:	f7ff fe64 	bl	8002e4c <OpenNNA_Malloc>
        Network->pfunc_Operator(Network);//将本层参数传入算子进行计算
 8003184:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        Network->Output_Feature_Map= OpenNNA_Malloc(sizeof(data_t)*\
 8003186:	61e0      	str	r0, [r4, #28]
        Network->pfunc_Operator(Network);//将本层参数传入算子进行计算
 8003188:	4620      	mov	r0, r4
 800318a:	4798      	blx	r3
        Network = Network->layer_next;//计算完成跳转到下一层
 800318c:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 800318e:	e7bc      	b.n	800310a <OpenNNA_Predict+0x26>

08003190 <OpenNNA_Free_FmapHeap>:
 * struct layer * Network: 网络对象
 * (无论是静态申请堆内存还是动态申请堆内存，
 * 第一层网络对象的属性里的Input_Feature_Map&Output_Feature_Map一定会被分配值)
*/
void OpenNNA_Free_FmapHeap(struct layer *Network)
{
 8003190:	b538      	push	{r3, r4, r5, lr}
    Network= Network->layer_next;
 8003192:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    if(0!=Network->Layer_Index) {
 8003194:	6863      	ldr	r3, [r4, #4]
 8003196:	b143      	cbz	r3, 80031aa <OpenNNA_Free_FmapHeap+0x1a>
        OpenNNA_Free(Network->Input_Feature_Map);
        Network->Input_Feature_Map = NULL;
 8003198:	2500      	movs	r5, #0
    free(address);
 800319a:	69a0      	ldr	r0, [r4, #24]
 800319c:	f002 fbea 	bl	8005974 <free>
 80031a0:	69e0      	ldr	r0, [r4, #28]
        Network->Input_Feature_Map = NULL;
 80031a2:	61a5      	str	r5, [r4, #24]
    free(address);
 80031a4:	f002 fbe6 	bl	8005974 <free>
        OpenNNA_Free(Network->Output_Feature_Map);
        Network->Output_Feature_Map = NULL;
 80031a8:	61e5      	str	r5, [r4, #28]
    }
#if(DEBUG==1)
    OpenNNA_Printf("Fmap Heap Free Success!\n");
 80031aa:	4802      	ldr	r0, [pc, #8]	; (80031b4 <OpenNNA_Free_FmapHeap+0x24>)
#endif
}
 80031ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    OpenNNA_Printf("Fmap Heap Free Success!\n");
 80031b0:	f7ff be2e 	b.w	8002e10 <OpenNNA_Printf>
 80031b4:	080090fc 	.word	0x080090fc

080031b8 <OpenNNA_Free_Network>:
/* Function :OpenNNA_Free_Network :释放网络对象的堆内存+释放输入输出特征图的堆内存(若有)
 * struct layer * pNetwork: 网络对象
*/
void OpenNNA_Free_Network(struct layer **pNetwork)
{
 80031b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //先释放静态申请的堆内存
    //(无论是静态申请堆内存还是动态申请堆内存，
    //第一层网络对象的属性里的Input_Feature_Map&Output_Feature_Map一定会被分配值)
    struct layer * Network = (struct layer *)*pNetwork;
 80031ba:	6804      	ldr	r4, [r0, #0]
{
 80031bc:	4605      	mov	r5, r0
    //跳转到第一层
    Network= Network->layer_next;
    while (0 != Network->Layer_Index) {
        if(1 != Network->Layer_Index){
            OpenNNA_Free(Network->layer_prev);//释放上一层，从1开始，0先留着(0作为遍历终止条件比较方便)
            Network->layer_prev=NULL;//为了保险把访问上一层对象的指针置NULL
 80031be:	2700      	movs	r7, #0
    OpenNNA_Free_FmapHeap(Network);
 80031c0:	4620      	mov	r0, r4
 80031c2:	f7ff ffe5 	bl	8003190 <OpenNNA_Free_FmapHeap>
    Network= Network->layer_next;
 80031c6:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
    while (0 != Network->Layer_Index) {
 80031c8:	6866      	ldr	r6, [r4, #4]
 80031ca:	b956      	cbnz	r6, 80031e2 <OpenNNA_Free_Network+0x2a>
    free(address);
 80031cc:	6820      	ldr	r0, [r4, #0]
 80031ce:	f002 fbd1 	bl	8005974 <free>
 80031d2:	4620      	mov	r0, r4
 80031d4:	f002 fbce 	bl	8005974 <free>
    }
    //最后释放最后一层和第0层
    OpenNNA_Free(Network->layer_prev);
    OpenNNA_Free(Network);
#if(DEBUG==1)
    OpenNNA_Printf("Network Free Success!\n");
 80031d8:	480a      	ldr	r0, [pc, #40]	; (8003204 <OpenNNA_Free_Network+0x4c>)
 80031da:	f7ff fe19 	bl	8002e10 <OpenNNA_Printf>
#endif
    *pNetwork=NULL;//外部Network=NULL防止野指针
 80031de:	602e      	str	r6, [r5, #0]
}
 80031e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(1 != Network->Layer_Index){
 80031e2:	2e01      	cmp	r6, #1
 80031e4:	d00b      	beq.n	80031fe <OpenNNA_Free_Network+0x46>
    free(address);
 80031e6:	6820      	ldr	r0, [r4, #0]
 80031e8:	f002 fbc4 	bl	8005974 <free>
 80031ec:	6920      	ldr	r0, [r4, #16]
            Network->layer_prev=NULL;//为了保险把访问上一层对象的指针置NULL
 80031ee:	6027      	str	r7, [r4, #0]
    free(address);
 80031f0:	f002 fbc0 	bl	8005974 <free>
 80031f4:	6960      	ldr	r0, [r4, #20]
            Network->Layer_Para_Base = NULL;
 80031f6:	6127      	str	r7, [r4, #16]
    free(address);
 80031f8:	f002 fbbc 	bl	8005974 <free>
            Network->Layer_Para_Extra = NULL;
 80031fc:	6167      	str	r7, [r4, #20]
        Network = Network->layer_next;//跳转到下一层
 80031fe:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8003200:	e7e2      	b.n	80031c8 <OpenNNA_Free_Network+0x10>
 8003202:	bf00      	nop
 8003204:	08009115 	.word	0x08009115

08003208 <OpenNNA_Demo_Example>:
#include "opennna_demo_example.h"
/*****************OpenNNA Example算子示例**********************/
/*
 * Example算子会实现输出特征图 = 输入特征图 * Weights + Bias
 */
int OpenNNA_Demo_Example() {
 8003208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800320c:	b0dd      	sub	sp, #372	; 0x174
    /*****************第1步:创建神经网络对象**********************/
    struct layer * Network = OpenNNA_CreateNetwork();
    /*****************第2步:配置网络层参数**********************/
    struct Layer_Para_base *Layer_Para_Base1 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
    struct Layer_Para_example *Layer_Para_Example1 = OpenNNA_Malloc(sizeof(Layer_Para_Example));
    Layer_Para_Base1->Input_Fmap_Channel=2;
 800320e:	2602      	movs	r6, #2
    struct layer * Network = OpenNNA_CreateNetwork();
 8003210:	f7ff fe24 	bl	8002e5c <OpenNNA_CreateNetwork>
    Layer_Para_Base1->Input_Fmap_Row=2;
    Layer_Para_Base1->Input_Fmap_Col=5;
 8003214:	2705      	movs	r7, #5
    struct layer * Network = OpenNNA_CreateNetwork();
 8003216:	900b      	str	r0, [sp, #44]	; 0x2c
    struct Layer_Para_base *Layer_Para_Base1 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 8003218:	2018      	movs	r0, #24
 800321a:	f7ff fe17 	bl	8002e4c <OpenNNA_Malloc>
 800321e:	4680      	mov	r8, r0
    struct Layer_Para_example *Layer_Para_Example1 = OpenNNA_Malloc(sizeof(Layer_Para_Example));
 8003220:	2000      	movs	r0, #0
    Layer_Para_Base3->Output_Fmap_Channel=2;
    Layer_Para_Base3->Output_Fmap_Row=2;
    Layer_Para_Base3->Output_Fmap_Col=5;
    /*****************第3步:设置神经网络输入数据和输出数据**********************/
    //Note:Demo Example的权重和偏置比较小，所以可以放在栈中
    data_t Example_Weights[2][2][5]={
 8003222:	f04f 0950 	mov.w	r9, #80	; 0x50
    struct Layer_Para_example *Layer_Para_Example1 = OpenNNA_Malloc(sizeof(Layer_Para_Example));
 8003226:	f7ff fe11 	bl	8002e4c <OpenNNA_Malloc>
 800322a:	9009      	str	r0, [sp, #36]	; 0x24
    struct Layer_Para_base *Layer_Para_Base2 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 800322c:	2018      	movs	r0, #24
    data_t Example_Weights[2][2][5]={
 800322e:	f8df a328 	ldr.w	sl, [pc, #808]	; 8003558 <OpenNNA_Demo_Example+0x350>
    Layer_Para_Base1->Output_Fmap_Channel=2;
 8003232:	e9c8 7602 	strd	r7, r6, [r8, #8]
    Layer_Para_Base1->Output_Fmap_Col=5;
 8003236:	e9c8 6704 	strd	r6, r7, [r8, #16]
    Layer_Para_Base1->Input_Fmap_Row=2;
 800323a:	e9c8 6600 	strd	r6, r6, [r8]
    struct Layer_Para_base *Layer_Para_Base2 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 800323e:	f7ff fe05 	bl	8002e4c <OpenNNA_Malloc>
 8003242:	4605      	mov	r5, r0
    struct Layer_Para_example *Layer_Para_Example2 = OpenNNA_Malloc(sizeof(Layer_Para_Example));
 8003244:	2000      	movs	r0, #0
 8003246:	f7ff fe01 	bl	8002e4c <OpenNNA_Malloc>
 800324a:	4683      	mov	fp, r0
    struct Layer_Para_base *Layer_Para_Base3 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 800324c:	2018      	movs	r0, #24
    Layer_Para_Base2->Output_Fmap_Channel=2;
 800324e:	e9c5 7602 	strd	r7, r6, [r5, #8]
    Layer_Para_Base2->Output_Fmap_Col=5;
 8003252:	e9c5 6704 	strd	r6, r7, [r5, #16]
    Layer_Para_Base2->Input_Fmap_Row=2;
 8003256:	e9c5 6600 	strd	r6, r6, [r5]
    struct Layer_Para_base *Layer_Para_Base3 = OpenNNA_Malloc(sizeof(Layer_Para_Base));
 800325a:	f7ff fdf7 	bl	8002e4c <OpenNNA_Malloc>
 800325e:	4604      	mov	r4, r0
    struct Layer_Para_example *Layer_Para_Example3 = OpenNNA_Malloc(sizeof(Layer_Para_Example));
 8003260:	2000      	movs	r0, #0
 8003262:	f7ff fdf3 	bl	8002e4c <OpenNNA_Malloc>
    data_t Example_Weights[2][2][5]={
 8003266:	464a      	mov	r2, r9
 8003268:	4651      	mov	r1, sl
    struct Layer_Para_example *Layer_Para_Example3 = OpenNNA_Malloc(sizeof(Layer_Para_Example));
 800326a:	9008      	str	r0, [sp, #32]
    Layer_Para_Base3->Output_Fmap_Channel=2;
 800326c:	e9c4 7602 	strd	r7, r6, [r4, #8]
    Layer_Para_Base3->Output_Fmap_Col=5;
 8003270:	e9c4 6704 	strd	r6, r7, [r4, #16]
    Layer_Para_Base3->Input_Fmap_Row=2;
 8003274:	e9c4 6600 	strd	r6, r6, [r4]
    data_t Example_Weights[2][2][5]={
 8003278:	ae0c      	add	r6, sp, #48	; 0x30
    {
        {2, 2, 2, 2, 2},
        {2, 2, 2, 2, 2},
        },
    };
    data_t Example_Bias[2][2][5]={
 800327a:	af20      	add	r7, sp, #128	; 0x80
    data_t Example_Weights[2][2][5]={
 800327c:	4630      	mov	r0, r6
 800327e:	f002 fb81 	bl	8005984 <memcpy>
    data_t Example_Bias[2][2][5]={
 8003282:	464a      	mov	r2, r9
 8003284:	eb0a 0109 	add.w	r1, sl, r9
 8003288:	4638      	mov	r0, r7
 800328a:	f002 fb7b 	bl	8005984 <memcpy>
            {1, 1, 1, 1, 1},
            {1, 1, 1, 1, 1},
            },
    };
    /*****************第4步:添加网络层**********************/
    OpenNNA_Add_Layer(Network, "Example", "xdd1", Layer_Para_Base1,Layer_Para_Example1, Example_Weights, Example_Bias);
 800328e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003290:	49a3      	ldr	r1, [pc, #652]	; (8003520 <OpenNNA_Demo_Example+0x318>)
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	4643      	mov	r3, r8
 8003296:	4aa3      	ldr	r2, [pc, #652]	; (8003524 <OpenNNA_Demo_Example+0x31c>)
 8003298:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800329a:	e9cd 6701 	strd	r6, r7, [sp, #4]
 800329e:	f7ff fdf9 	bl	8002e94 <OpenNNA_Add_Layer>
    OpenNNA_Add_Layer(Network, "Example", "xdd2", Layer_Para_Base2, Layer_Para_Example2,Example_Weights, Example_Bias);
 80032a2:	462b      	mov	r3, r5
 80032a4:	4aa0      	ldr	r2, [pc, #640]	; (8003528 <OpenNNA_Demo_Example+0x320>)
 80032a6:	499e      	ldr	r1, [pc, #632]	; (8003520 <OpenNNA_Demo_Example+0x318>)
 80032a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80032aa:	f8cd b000 	str.w	fp, [sp]
 80032ae:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80032b2:	f7ff fdef 	bl	8002e94 <OpenNNA_Add_Layer>
    OpenNNA_Add_Layer(Network, "Example", "xdd3", Layer_Para_Base3, Layer_Para_Example3,Example_Weights, Example_Bias);
 80032b6:	9b08      	ldr	r3, [sp, #32]
 80032b8:	4a9c      	ldr	r2, [pc, #624]	; (800352c <OpenNNA_Demo_Example+0x324>)
 80032ba:	4999      	ldr	r1, [pc, #612]	; (8003520 <OpenNNA_Demo_Example+0x318>)
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	4623      	mov	r3, r4
 80032c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80032c2:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80032c6:	f7ff fde5 	bl	8002e94 <OpenNNA_Add_Layer>
    //OpenNNA_Add_Layer(Network, "ReLU", "xdd4", NULL, NULL,NULL, NULL);
    //OpenNNA_Add_Layer(Network, "Dense", "xdd5", NULL, NULL,NULL, NULL);
    //OpenNNA_Add_Layer(Network, "Softmax", "xdd6", NULL, NULL,NULL, NULL);
    /*****************第5步:初始化神经网络**********************/
    OpenNNA_Init(Network);
 80032ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80032cc:	f7ff fe34 	bl	8002f38 <OpenNNA_Init>
    /*****************第6步:打印神经网络信息**********************/
#if(DEBUG==1)
    OpenNNA_Print_Network(Network);
 80032d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80032d2:	f7ff fe5b 	bl	8002f8c <OpenNNA_Print_Network>
#endif
    /*****************第7步:设置神经网络输入数据和输出数据**********************/
    data_t NN_Input_Fmap[2][2][5]={
 80032d6:	464a      	mov	r2, r9
 80032d8:	f10a 01a0 	add.w	r1, sl, #160	; 0xa0
 80032dc:	a834      	add	r0, sp, #208	; 0xd0
 80032de:	f002 fb51 	bl	8005984 <memcpy>
    {
        {100, 101, 102, 103, 104},
        {110, 111, 112, 113, 114},
        },
    };
    data_t NN_Output_Fmap[2][2][5]={0};
 80032e2:	464a      	mov	r2, r9
 80032e4:	2100      	movs	r1, #0
 80032e6:	a848      	add	r0, sp, #288	; 0x120
 80032e8:	f002 fb5a 	bl	80059a0 <memset>
    /*****************第8步:神经网络推理**********************/
#if(DEBUG==1)
    OpenNNA_Printf("Begin Predict!\n");
 80032ec:	4890      	ldr	r0, [pc, #576]	; (8003530 <OpenNNA_Demo_Example+0x328>)
 80032ee:	f7ff fd8f 	bl	8002e10 <OpenNNA_Printf>
#endif
    OpenNNA_Predict(Network, NN_Input_Fmap, NN_Output_Fmap);
 80032f2:	a934      	add	r1, sp, #208	; 0xd0
 80032f4:	aa48      	add	r2, sp, #288	; 0x120
 80032f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80032f8:	f7ff fef4 	bl	80030e4 <OpenNNA_Predict>
    /*****************第9步:根据推理结果进行动作**********************/
#if(DEBUG==1)
    printf("Input fmap[0][0][0] = %f, fmap[0][0][1] = %f, fmap[0][0][2] = %f, fmap[0][0][3] = %f,fmap[0][0][4] = %f\n",\
 80032fc:	ed9d 7a38 	vldr	s14, [sp, #224]	; 0xe0
 8003300:	488c      	ldr	r0, [pc, #560]	; (8003534 <OpenNNA_Demo_Example+0x32c>)
 8003302:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003306:	ed8d 7b06 	vstr	d7, [sp, #24]
 800330a:	ed9d 7a37 	vldr	s14, [sp, #220]	; 0xdc
 800330e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003312:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003316:	ed9d 7a36 	vldr	s14, [sp, #216]	; 0xd8
 800331a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800331e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003322:	ed9d 7a35 	vldr	s14, [sp, #212]	; 0xd4
 8003326:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800332a:	ed8d 7b00 	vstr	d7, [sp]
 800332e:	eddd 7a34 	vldr	s15, [sp, #208]	; 0xd0
 8003332:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003336:	ec53 2b17 	vmov	r2, r3, d7
 800333a:	f003 f85b 	bl	80063f4 <iprintf>
    NN_Input_Fmap[0][0][0], NN_Input_Fmap[0][0][1], NN_Input_Fmap[0][0][2], NN_Input_Fmap[0][0][3], NN_Input_Fmap[0][0][4]);
    printf("Input fmap[0][1][0] = %f, fmap[0][1][1] = %f, fmap[0][1][2] = %f, fmap[0][1][3] = %f,fmap[0][1][4] = %f\n",\
 800333e:	ed9d 7a3d 	vldr	s14, [sp, #244]	; 0xf4
 8003342:	487d      	ldr	r0, [pc, #500]	; (8003538 <OpenNNA_Demo_Example+0x330>)
 8003344:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003348:	ed8d 7b06 	vstr	d7, [sp, #24]
 800334c:	ed9d 7a3c 	vldr	s14, [sp, #240]	; 0xf0
 8003350:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003354:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003358:	ed9d 7a3b 	vldr	s14, [sp, #236]	; 0xec
 800335c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003360:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003364:	ed9d 7a3a 	vldr	s14, [sp, #232]	; 0xe8
 8003368:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800336c:	ed8d 7b00 	vstr	d7, [sp]
 8003370:	eddd 7a39 	vldr	s15, [sp, #228]	; 0xe4
 8003374:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003378:	ec53 2b17 	vmov	r2, r3, d7
 800337c:	f003 f83a 	bl	80063f4 <iprintf>
    NN_Input_Fmap[0][1][0], NN_Input_Fmap[0][1][1], NN_Input_Fmap[0][1][2], NN_Input_Fmap[0][1][3], NN_Input_Fmap[0][1][4]);
    printf("Input fmap[1][0][0] = %f, fmap[1][0][1] = %f, fmap[1][0][2] = %f, fmap[1][0][3] = %f,fmap[1][0][4] = %f\n",\
 8003380:	ed9d 7a42 	vldr	s14, [sp, #264]	; 0x108
 8003384:	486d      	ldr	r0, [pc, #436]	; (800353c <OpenNNA_Demo_Example+0x334>)
 8003386:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800338a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800338e:	ed9d 7a41 	vldr	s14, [sp, #260]	; 0x104
 8003392:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003396:	ed8d 7b04 	vstr	d7, [sp, #16]
 800339a:	ed9d 7a40 	vldr	s14, [sp, #256]	; 0x100
 800339e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80033a2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80033a6:	ed9d 7a3f 	vldr	s14, [sp, #252]	; 0xfc
 80033aa:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80033ae:	ed8d 7b00 	vstr	d7, [sp]
 80033b2:	eddd 7a3e 	vldr	s15, [sp, #248]	; 0xf8
 80033b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80033ba:	ec53 2b17 	vmov	r2, r3, d7
 80033be:	f003 f819 	bl	80063f4 <iprintf>
    NN_Input_Fmap[1][0][0], NN_Input_Fmap[1][0][1], NN_Input_Fmap[1][0][2], NN_Input_Fmap[1][0][3], NN_Input_Fmap[1][0][4]);
    printf("Input fmap[1][1][0] = %f, fmap[1][1][1] = %f, fmap[1][1][2] = %f, fmap[1][1][3] = %f,fmap[1][1][4] = %f\n",\
 80033c2:	ed9d 7a47 	vldr	s14, [sp, #284]	; 0x11c
 80033c6:	485e      	ldr	r0, [pc, #376]	; (8003540 <OpenNNA_Demo_Example+0x338>)
 80033c8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80033cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80033d0:	ed9d 7a46 	vldr	s14, [sp, #280]	; 0x118
 80033d4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80033d8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80033dc:	ed9d 7a45 	vldr	s14, [sp, #276]	; 0x114
 80033e0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80033e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80033e8:	ed9d 7a44 	vldr	s14, [sp, #272]	; 0x110
 80033ec:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80033f0:	ed8d 7b00 	vstr	d7, [sp]
 80033f4:	eddd 7a43 	vldr	s15, [sp, #268]	; 0x10c
 80033f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80033fc:	ec53 2b17 	vmov	r2, r3, d7
 8003400:	f002 fff8 	bl	80063f4 <iprintf>
    NN_Input_Fmap[1][1][0], NN_Input_Fmap[1][1][1], NN_Input_Fmap[1][1][2], NN_Input_Fmap[1][1][3], NN_Input_Fmap[1][1][4]);
    printf("\n\n");
 8003404:	484f      	ldr	r0, [pc, #316]	; (8003544 <OpenNNA_Demo_Example+0x33c>)
 8003406:	f003 f87b 	bl	8006500 <puts>
    printf("Output fmap[0][0][0] = %f, fmap[0][0][1] = %f, fmap[0][0][2] = %f, fmap[0][0][3] = %f,fmap[0][0][4] = %f\n",\
 800340a:	ed9d 7a4c 	vldr	s14, [sp, #304]	; 0x130
 800340e:	484e      	ldr	r0, [pc, #312]	; (8003548 <OpenNNA_Demo_Example+0x340>)
 8003410:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003414:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003418:	ed9d 7a4b 	vldr	s14, [sp, #300]	; 0x12c
 800341c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003420:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003424:	ed9d 7a4a 	vldr	s14, [sp, #296]	; 0x128
 8003428:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800342c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003430:	ed9d 7a49 	vldr	s14, [sp, #292]	; 0x124
 8003434:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003438:	ed8d 7b00 	vstr	d7, [sp]
 800343c:	eddd 7a48 	vldr	s15, [sp, #288]	; 0x120
 8003440:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003444:	ec53 2b17 	vmov	r2, r3, d7
 8003448:	f002 ffd4 	bl	80063f4 <iprintf>
    NN_Output_Fmap[0][0][0], NN_Output_Fmap[0][0][1], NN_Output_Fmap[0][0][2], NN_Output_Fmap[0][0][3], NN_Output_Fmap[0][0][4]);
    printf("Output fmap[0][1][0] = %f, fmap[0][1][1] = %f, fmap[0][1][2] = %f, fmap[0][1][3] = %f,fmap[0][1][4] = %f\n",\
 800344c:	ed9d 7a51 	vldr	s14, [sp, #324]	; 0x144
 8003450:	483e      	ldr	r0, [pc, #248]	; (800354c <OpenNNA_Demo_Example+0x344>)
 8003452:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003456:	ed8d 7b06 	vstr	d7, [sp, #24]
 800345a:	ed9d 7a50 	vldr	s14, [sp, #320]	; 0x140
 800345e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003462:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003466:	ed9d 7a4f 	vldr	s14, [sp, #316]	; 0x13c
 800346a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800346e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003472:	ed9d 7a4e 	vldr	s14, [sp, #312]	; 0x138
 8003476:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800347a:	ed8d 7b00 	vstr	d7, [sp]
 800347e:	eddd 7a4d 	vldr	s15, [sp, #308]	; 0x134
 8003482:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003486:	ec53 2b17 	vmov	r2, r3, d7
 800348a:	f002 ffb3 	bl	80063f4 <iprintf>
    NN_Output_Fmap[0][1][0], NN_Output_Fmap[0][1][1], NN_Output_Fmap[0][1][2], NN_Output_Fmap[0][1][3], NN_Output_Fmap[0][1][4]);
    printf("Output fmap[1][0][0] = %f, fmap[1][0][1] = %f, fmap[1][0][2] = %f, fmap[1][0][3] = %f,fmap[1][0][4] = %f\n",\
 800348e:	ed9d 7a56 	vldr	s14, [sp, #344]	; 0x158
 8003492:	482f      	ldr	r0, [pc, #188]	; (8003550 <OpenNNA_Demo_Example+0x348>)
 8003494:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003498:	ed8d 7b06 	vstr	d7, [sp, #24]
 800349c:	ed9d 7a55 	vldr	s14, [sp, #340]	; 0x154
 80034a0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80034a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80034a8:	ed9d 7a54 	vldr	s14, [sp, #336]	; 0x150
 80034ac:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80034b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80034b4:	ed9d 7a53 	vldr	s14, [sp, #332]	; 0x14c
 80034b8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80034bc:	ed8d 7b00 	vstr	d7, [sp]
 80034c0:	eddd 7a52 	vldr	s15, [sp, #328]	; 0x148
 80034c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034c8:	ec53 2b17 	vmov	r2, r3, d7
 80034cc:	f002 ff92 	bl	80063f4 <iprintf>
    NN_Output_Fmap[1][0][0], NN_Output_Fmap[1][0][1], NN_Output_Fmap[1][0][2], NN_Output_Fmap[1][0][3], NN_Output_Fmap[1][0][4]);
    printf("Output fmap[1][1][0] = %f, fmap[1][1][1] = %f, fmap[1][1][2] = %f, fmap[1][1][3] = %f,fmap[1][1][4] = %f\n",\
 80034d0:	ed9d 7a5b 	vldr	s14, [sp, #364]	; 0x16c
 80034d4:	481f      	ldr	r0, [pc, #124]	; (8003554 <OpenNNA_Demo_Example+0x34c>)
 80034d6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80034da:	ed8d 7b06 	vstr	d7, [sp, #24]
 80034de:	ed9d 7a5a 	vldr	s14, [sp, #360]	; 0x168
 80034e2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80034e6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80034ea:	ed9d 7a59 	vldr	s14, [sp, #356]	; 0x164
 80034ee:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80034f2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80034f6:	ed9d 7a58 	vldr	s14, [sp, #352]	; 0x160
 80034fa:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80034fe:	ed8d 7b00 	vstr	d7, [sp]
 8003502:	eddd 7a57 	vldr	s15, [sp, #348]	; 0x15c
 8003506:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800350a:	ec53 2b17 	vmov	r2, r3, d7
 800350e:	f002 ff71 	bl	80063f4 <iprintf>
    NN_Output_Fmap[1][1][0], NN_Output_Fmap[1][1][1], NN_Output_Fmap[1][1][2], NN_Output_Fmap[1][1][3], NN_Output_Fmap[1][1][4]);
#endif
    /*****************第10步:推理结束释放网络结构+申请的特征图堆内存**********************/
    OpenNNA_Free_Network(&Network);
 8003512:	a80b      	add	r0, sp, #44	; 0x2c
 8003514:	f7ff fe50 	bl	80031b8 <OpenNNA_Free_Network>
    return 0;
}
 8003518:	2000      	movs	r0, #0
 800351a:	b05d      	add	sp, #372	; 0x174
 800351c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003520:	0800912c 	.word	0x0800912c
 8003524:	0800916f 	.word	0x0800916f
 8003528:	08009174 	.word	0x08009174
 800352c:	08009179 	.word	0x08009179
 8003530:	0800917e 	.word	0x0800917e
 8003534:	0800918e 	.word	0x0800918e
 8003538:	080091f7 	.word	0x080091f7
 800353c:	08009260 	.word	0x08009260
 8003540:	080092c9 	.word	0x080092c9
 8003544:	08009052 	.word	0x08009052
 8003548:	08009332 	.word	0x08009332
 800354c:	0800939c 	.word	0x0800939c
 8003550:	08009406 	.word	0x08009406
 8003554:	08009470 	.word	0x08009470
 8003558:	08008a8c 	.word	0x08008a8c

0800355c <OpenNNA_Operator_AvgPool>:
#include "opennna_operator_avgpool.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_AvgPool(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Input_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Channel;
 800355c:	6903      	ldr	r3, [r0, #16]

    reg_t strides_col = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->strides_col;
    reg_t strides_row = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->strides_row;
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    data_t max_value=0;//在MaxPool时存储最大值,在AveragePool存储均值
 800355e:	eddf 7a43 	vldr	s15, [pc, #268]	; 800366c <OpenNNA_Operator_AvgPool+0x110>
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8003562:	68da      	ldr	r2, [r3, #12]
{
 8003564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003568:	b091      	sub	sp, #68	; 0x44
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 800356a:	920b      	str	r2, [sp, #44]	; 0x2c
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	9205      	str	r2, [sp, #20]
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8003570:	695a      	ldr	r2, [r3, #20]
 8003572:	9202      	str	r2, [sp, #8]
    reg_t kernel_col = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->kernel_col;
 8003574:	6942      	ldr	r2, [r0, #20]
 8003576:	6811      	ldr	r1, [r2, #0]
 8003578:	9106      	str	r1, [sp, #24]
    reg_t kernel_row = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->kernel_row;
 800357a:	6851      	ldr	r1, [r2, #4]
 800357c:	9107      	str	r1, [sp, #28]
    reg_t strides_col = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->strides_col;
 800357e:	6891      	ldr	r1, [r2, #8]
 8003580:	9108      	str	r1, [sp, #32]
                                max_value = ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
                            else//求累加值
                                max_value += ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
                    }
                }
                ((data_t *)Layers->Output_Feature_Map)[(i*Output_Fmap_Col*Output_Fmap_Row) + (j*Output_Fmap_Col) + k] = (max_value/(kernel_col*kernel_row));//取平均
 8003582:	e9dd 1406 	ldrd	r1, r4, [sp, #24]
 8003586:	4361      	muls	r1, r4
 8003588:	9c02      	ldr	r4, [sp, #8]
 800358a:	ee07 1a10 	vmov	s14, r1
 800358e:	9905      	ldr	r1, [sp, #20]
 8003590:	4361      	muls	r1, r4
 8003592:	9109      	str	r1, [sp, #36]	; 0x24
 8003594:	6899      	ldr	r1, [r3, #8]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	9104      	str	r1, [sp, #16]
 800359a:	434b      	muls	r3, r1
 800359c:	930f      	str	r3, [sp, #60]	; 0x3c
 800359e:	68d3      	ldr	r3, [r2, #12]
    for (int i = 0; i < Output_Fmap_Channel; ++i)//output_fmap_channel
 80035a0:	2200      	movs	r2, #0
 80035a2:	434b      	muls	r3, r1
 80035a4:	4693      	mov	fp, r2
 80035a6:	9203      	str	r2, [sp, #12]
 80035a8:	930d      	str	r3, [sp, #52]	; 0x34
 80035aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80035ac:	459b      	cmp	fp, r3
 80035ae:	db4e      	blt.n	800364e <OpenNNA_Operator_AvgPool+0xf2>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 80035b0:	b011      	add	sp, #68	; 0x44
 80035b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            if ((l == 0 && m == 0))
 80035b6:	ea55 0706 	orrs.w	r7, r5, r6
                                max_value = ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
 80035ba:	6983      	ldr	r3, [r0, #24]
                    for (int m = 0; m < kernel_col; ++m)//pool_Kernel_size_col
 80035bc:	f106 0601 	add.w	r6, r6, #1
                                max_value += ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
 80035c0:	bf14      	ite	ne
 80035c2:	4453      	addne	r3, sl
                                max_value = ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
 80035c4:	9f0a      	ldreq	r7, [sp, #40]	; 0x28
 80035c6:	f10a 0a04 	add.w	sl, sl, #4
                                max_value += ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
 80035ca:	bf15      	itete	ne
 80035cc:	edd3 6a00 	vldrne	s13, [r3]
                                max_value = ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
 80035d0:	19db      	addeq	r3, r3, r7
                                max_value += ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
 80035d2:	ee77 7aa6 	vaddne.f32	s15, s15, s13
                                max_value = ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
 80035d6:	edd3 7a00 	vldreq	s15, [r3]
                    for (int m = 0; m < kernel_col; ++m)//pool_Kernel_size_col
 80035da:	9b06      	ldr	r3, [sp, #24]
 80035dc:	429e      	cmp	r6, r3
 80035de:	dbea      	blt.n	80035b6 <OpenNNA_Operator_AvgPool+0x5a>
                for (int l = 0; l < kernel_row; ++l)//pool_Kernel_size_row
 80035e0:	9b04      	ldr	r3, [sp, #16]
 80035e2:	3501      	adds	r5, #1
 80035e4:	4499      	add	r9, r3
 80035e6:	9b07      	ldr	r3, [sp, #28]
 80035e8:	429d      	cmp	r5, r3
 80035ea:	da04      	bge.n	80035f6 <OpenNNA_Operator_AvgPool+0x9a>
 80035ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                    for (int m = 0; m < kernel_col; ++m)//pool_Kernel_size_col
 80035ee:	2600      	movs	r6, #0
 80035f0:	eb03 0a89 	add.w	sl, r3, r9, lsl #2
 80035f4:	e7f1      	b.n	80035da <OpenNNA_Operator_AvgPool+0x7e>
                ((data_t *)Layers->Output_Feature_Map)[(i*Output_Fmap_Col*Output_Fmap_Row) + (j*Output_Fmap_Col) + k] = (max_value/(kernel_col*kernel_row));//取平均
 80035f6:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80035fa:	69c3      	ldr	r3, [r0, #28]
 80035fc:	4463      	add	r3, ip
 80035fe:	f10c 0c04 	add.w	ip, ip, #4
 8003602:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8003606:	edc3 6a00 	vstr	s13, [r3]
            for (int k = 0; k < Output_Fmap_Col; ++k)//(((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 800360a:	9b01      	ldr	r3, [sp, #4]
 800360c:	3301      	adds	r3, #1
 800360e:	9301      	str	r3, [sp, #4]
 8003610:	9b08      	ldr	r3, [sp, #32]
 8003612:	4419      	add	r1, r3
 8003614:	e9dd 5301 	ldrd	r5, r3, [sp, #4]
 8003618:	429d      	cmp	r5, r3
 800361a:	da08      	bge.n	800362e <OpenNNA_Operator_AvgPool+0xd2>
 800361c:	008b      	lsls	r3, r1, #2
                                max_value = ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
 800361e:	46a1      	mov	r9, r4
                for (int l = 0; l < kernel_row; ++l)//pool_Kernel_size_row
 8003620:	2500      	movs	r5, #0
 8003622:	930c      	str	r3, [sp, #48]	; 0x30
                                max_value = ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Col * Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)];
 8003624:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003626:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800362a:	930a      	str	r3, [sp, #40]	; 0x28
 800362c:	e7db      	b.n	80035e6 <OpenNNA_Operator_AvgPool+0x8a>
        for (int j = 0; j < Output_Fmap_Row; ++j)//Output_Fmap_Row = (((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 800362e:	9b02      	ldr	r3, [sp, #8]
 8003630:	f108 0801 	add.w	r8, r8, #1
 8003634:	449e      	add	lr, r3
 8003636:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003638:	441c      	add	r4, r3
 800363a:	9b05      	ldr	r3, [sp, #20]
 800363c:	4598      	cmp	r8, r3
 800363e:	da0c      	bge.n	800365a <OpenNNA_Operator_AvgPool+0xfe>
 8003640:	00a3      	lsls	r3, r4, #2
 8003642:	2100      	movs	r1, #0
 8003644:	ea4f 0c8e 	mov.w	ip, lr, lsl #2
 8003648:	930e      	str	r3, [sp, #56]	; 0x38
            for (int k = 0; k < Output_Fmap_Col; ++k)//(((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 800364a:	9101      	str	r1, [sp, #4]
 800364c:	e7e2      	b.n	8003614 <OpenNNA_Operator_AvgPool+0xb8>
 800364e:	4614      	mov	r4, r2
 8003650:	f8dd e00c 	ldr.w	lr, [sp, #12]
        for (int j = 0; j < Output_Fmap_Row; ++j)//Output_Fmap_Row = (((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 8003654:	f04f 0800 	mov.w	r8, #0
 8003658:	e7ef      	b.n	800363a <OpenNNA_Operator_AvgPool+0xde>
    for (int i = 0; i < Output_Fmap_Channel; ++i)//output_fmap_channel
 800365a:	9b03      	ldr	r3, [sp, #12]
 800365c:	f10b 0b01 	add.w	fp, fp, #1
 8003660:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003662:	440b      	add	r3, r1
 8003664:	9303      	str	r3, [sp, #12]
 8003666:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003668:	441a      	add	r2, r3
 800366a:	e79e      	b.n	80035aa <OpenNNA_Operator_AvgPool+0x4e>
 800366c:	00000000 	.word	0x00000000

08003670 <OpenNNA_Operator_Conv2d>:
#include "opennna_operator_conv2d.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_Conv2d(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Input_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Channel;
 8003670:	6903      	ldr	r3, [r0, #16]
{
 8003672:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    reg_t Input_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Row;
    reg_t Input_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Col;
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 8003676:	691a      	ldr	r2, [r3, #16]
{
 8003678:	b09b      	sub	sp, #108	; 0x6c
    reg_t strides_col = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->strides_col;
    reg_t strides_row = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->strides_row;
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    //以下这个卷积实现思路以输出特征图为导向，当输入特征图为图像数据时，乘加次数最优
    for (int i = 0; i < filters; ++i) {//filters must = Output_Fmap_Channel
 800367a:	f04f 0e00 	mov.w	lr, #0
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 800367e:	920b      	str	r2, [sp, #44]	; 0x2c
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8003680:	695a      	ldr	r2, [r3, #20]
    for (int i = 0; i < filters; ++i) {//filters must = Output_Fmap_Channel
 8003682:	46f4      	mov	ip, lr
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8003684:	9205      	str	r2, [sp, #20]
    reg_t kernel_col = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_col;
 8003686:	6942      	ldr	r2, [r0, #20]
        for (int j = 0; j < Output_Fmap_Row; ++j) {
            for (int k = 0; k < Output_Fmap_Col; ++k) {
                //顺道填入偏置
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 8003688:	9c05      	ldr	r4, [sp, #20]
    reg_t kernel_col = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_col;
 800368a:	6811      	ldr	r1, [r2, #0]
 800368c:	9101      	str	r1, [sp, #4]
    reg_t kernel_row = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_row;
 800368e:	6851      	ldr	r1, [r2, #4]
 8003690:	910c      	str	r1, [sp, #48]	; 0x30
    reg_t kernel_channel = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_channel;
 8003692:	6891      	ldr	r1, [r2, #8]
 8003694:	910d      	str	r1, [sp, #52]	; 0x34
    reg_t filters = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->filters;
 8003696:	68d1      	ldr	r1, [r2, #12]
 8003698:	9110      	str	r1, [sp, #64]	; 0x40
    reg_t strides_col = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->strides_col;
 800369a:	6911      	ldr	r1, [r2, #16]
 800369c:	6952      	ldr	r2, [r2, #20]
 800369e:	910f      	str	r1, [sp, #60]	; 0x3c
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 80036a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80036a2:	4361      	muls	r1, r4
 80036a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80036a6:	9111      	str	r1, [sp, #68]	; 0x44
 80036a8:	9901      	ldr	r1, [sp, #4]
 80036aa:	4361      	muls	r1, r4
 80036ac:	910e      	str	r1, [sp, #56]	; 0x38
 80036ae:	e9dd 140d 	ldrd	r1, r4, [sp, #52]	; 0x34
 80036b2:	4361      	muls	r1, r4
 80036b4:	9116      	str	r1, [sp, #88]	; 0x58
 80036b6:	6899      	ldr	r1, [r3, #8]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	434a      	muls	r2, r1
 80036bc:	434b      	muls	r3, r1
 80036be:	9109      	str	r1, [sp, #36]	; 0x24
 80036c0:	9215      	str	r2, [sp, #84]	; 0x54
 80036c2:	9314      	str	r3, [sp, #80]	; 0x50
    for (int i = 0; i < filters; ++i) {//filters must = Output_Fmap_Channel
 80036c4:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 80036c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80036ca:	459c      	cmp	ip, r3
 80036cc:	f280 8086 	bge.w	80037dc <OpenNNA_Operator_Conv2d+0x16c>
 80036d0:	2700      	movs	r7, #0
 80036d2:	ea4f 038c 	mov.w	r3, ip, lsl #2
        for (int j = 0; j < Output_Fmap_Row; ++j) {
 80036d6:	46bb      	mov	fp, r7
 80036d8:	9317      	str	r3, [sp, #92]	; 0x5c
    for (int i = 0; i < filters; ++i) {//filters must = Output_Fmap_Channel
 80036da:	9708      	str	r7, [sp, #32]
 80036dc:	e06a      	b.n	80037b4 <OpenNNA_Operator_Conv2d+0x144>
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 80036de:	69c2      	ldr	r2, [r0, #28]
 80036e0:	9b07      	ldr	r3, [sp, #28]
                =\
                ((data_t *)Layers->Bias)[i];
 80036e2:	9917      	ldr	r1, [sp, #92]	; 0x5c
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 80036e4:	18d3      	adds	r3, r2, r3
 80036e6:	9302      	str	r3, [sp, #8]
                ((data_t *)Layers->Bias)[i];
 80036e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
                =\
 80036ea:	9a02      	ldr	r2, [sp, #8]
                ((data_t *)Layers->Bias)[i];
 80036ec:	440b      	add	r3, r1
 80036ee:	681b      	ldr	r3, [r3, #0]
                =\
 80036f0:	6013      	str	r3, [r2, #0]
                //一个卷积核去卷一下输入特征图
                for (int l = 0; l < kernel_channel; ++l) {
 80036f2:	2300      	movs	r3, #0
 80036f4:	4698      	mov	r8, r3
 80036f6:	4699      	mov	r9, r3
 80036f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80036fa:	4589      	cmp	r9, r1
 80036fc:	da47      	bge.n	800378e <OpenNNA_Operator_Conv2d+0x11e>
 80036fe:	eb08 0105 	add.w	r1, r8, r5
 8003702:	2600      	movs	r6, #0
 8003704:	9706      	str	r7, [sp, #24]
 8003706:	9112      	str	r1, [sp, #72]	; 0x48
 8003708:	eb03 010e 	add.w	r1, r3, lr
                    for (int m = 0; m < kernel_row; ++m) {
 800370c:	9604      	str	r6, [sp, #16]
 800370e:	9113      	str	r1, [sp, #76]	; 0x4c
 8003710:	e026      	b.n	8003760 <OpenNNA_Operator_Conv2d+0xf0>
                        for (int n = 0; n < kernel_col; ++n) {
                          //输出特征图=输入特征图*卷积核权重
                            ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
                            +=\
                            ((data_t *)Layers->Input_Feature_Map)[(n+k*strides_col)+(m+j*strides_row)*Input_Fmap_Col+l*Input_Fmap_Col*Input_Fmap_Row]\
 8003712:	6981      	ldr	r1, [r0, #24]
                        for (int n = 0; n < kernel_col; ++n) {
 8003714:	f10a 0a01 	add.w	sl, sl, #1
                            ((data_t *)Layers->Input_Feature_Map)[(n+k*strides_col)+(m+j*strides_row)*Input_Fmap_Col+l*Input_Fmap_Col*Input_Fmap_Row]\
 8003718:	4411      	add	r1, r2
 800371a:	9118      	str	r1, [sp, #96]	; 0x60
                            *\
                            ((data_t *)Layers->Weights)[n+m*kernel_col+l*kernel_col*kernel_row+i*kernel_col*kernel_row*kernel_channel];
 800371c:	6a01      	ldr	r1, [r0, #32]
 800371e:	4421      	add	r1, r4
 8003720:	9119      	str	r1, [sp, #100]	; 0x64
                            +=\
 8003722:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003724:	edd1 6a00 	vldr	s13, [r1]
 8003728:	9919      	ldr	r1, [sp, #100]	; 0x64
 800372a:	ed91 7a00 	vldr	s14, [r1]
 800372e:	9902      	ldr	r1, [sp, #8]
 8003730:	edd1 7a00 	vldr	s15, [r1]
 8003734:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003738:	edc1 7a00 	vstr	s15, [r1]
                        for (int n = 0; n < kernel_col; ++n) {
 800373c:	4611      	mov	r1, r2
 800373e:	3104      	adds	r1, #4
 8003740:	460a      	mov	r2, r1
 8003742:	4621      	mov	r1, r4
 8003744:	3104      	adds	r1, #4
 8003746:	460c      	mov	r4, r1
 8003748:	9901      	ldr	r1, [sp, #4]
 800374a:	458a      	cmp	sl, r1
 800374c:	dbe1      	blt.n	8003712 <OpenNNA_Operator_Conv2d+0xa2>
                    for (int m = 0; m < kernel_row; ++m) {
 800374e:	9904      	ldr	r1, [sp, #16]
 8003750:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8003752:	3101      	adds	r1, #1
 8003754:	9104      	str	r1, [sp, #16]
 8003756:	9906      	ldr	r1, [sp, #24]
 8003758:	4421      	add	r1, r4
 800375a:	9106      	str	r1, [sp, #24]
 800375c:	9901      	ldr	r1, [sp, #4]
 800375e:	440e      	add	r6, r1
 8003760:	9904      	ldr	r1, [sp, #16]
 8003762:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003764:	42a1      	cmp	r1, r4
 8003766:	da0b      	bge.n	8003780 <OpenNNA_Operator_Conv2d+0x110>
 8003768:	9912      	ldr	r1, [sp, #72]	; 0x48
                        for (int n = 0; n < kernel_col; ++n) {
 800376a:	f04f 0a00 	mov.w	sl, #0
 800376e:	9c06      	ldr	r4, [sp, #24]
 8003770:	190c      	adds	r4, r1, r4
 8003772:	00a1      	lsls	r1, r4, #2
 8003774:	460a      	mov	r2, r1
 8003776:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8003778:	1871      	adds	r1, r6, r1
 800377a:	0089      	lsls	r1, r1, #2
 800377c:	460c      	mov	r4, r1
 800377e:	e7e3      	b.n	8003748 <OpenNNA_Operator_Conv2d+0xd8>
                for (int l = 0; l < kernel_channel; ++l) {
 8003780:	9914      	ldr	r1, [sp, #80]	; 0x50
 8003782:	f109 0901 	add.w	r9, r9, #1
 8003786:	4488      	add	r8, r1
 8003788:	990e      	ldr	r1, [sp, #56]	; 0x38
 800378a:	440b      	add	r3, r1
 800378c:	e7b4      	b.n	80036f8 <OpenNNA_Operator_Conv2d+0x88>
            for (int k = 0; k < Output_Fmap_Col; ++k) {
 800378e:	9b03      	ldr	r3, [sp, #12]
 8003790:	3301      	adds	r3, #1
 8003792:	9303      	str	r3, [sp, #12]
 8003794:	9b07      	ldr	r3, [sp, #28]
 8003796:	3304      	adds	r3, #4
 8003798:	9307      	str	r3, [sp, #28]
 800379a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800379c:	441d      	add	r5, r3
 800379e:	9b03      	ldr	r3, [sp, #12]
 80037a0:	9a05      	ldr	r2, [sp, #20]
 80037a2:	4293      	cmp	r3, r2
 80037a4:	db9b      	blt.n	80036de <OpenNNA_Operator_Conv2d+0x6e>
        for (int j = 0; j < Output_Fmap_Row; ++j) {
 80037a6:	9b08      	ldr	r3, [sp, #32]
 80037a8:	f10b 0b01 	add.w	fp, fp, #1
 80037ac:	4413      	add	r3, r2
 80037ae:	9308      	str	r3, [sp, #32]
 80037b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80037b2:	441f      	add	r7, r3
 80037b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80037b6:	459b      	cmp	fp, r3
 80037b8:	da07      	bge.n	80037ca <OpenNNA_Operator_Conv2d+0x15a>
 80037ba:	9b08      	ldr	r3, [sp, #32]
 80037bc:	2500      	movs	r5, #0
 80037be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            for (int k = 0; k < Output_Fmap_Col; ++k) {
 80037c0:	9503      	str	r5, [sp, #12]
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	9307      	str	r3, [sp, #28]
 80037c8:	e7e9      	b.n	800379e <OpenNNA_Operator_Conv2d+0x12e>
    for (int i = 0; i < filters; ++i) {//filters must = Output_Fmap_Channel
 80037ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037cc:	f10c 0c01 	add.w	ip, ip, #1
 80037d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80037d2:	4413      	add	r3, r2
 80037d4:	930a      	str	r3, [sp, #40]	; 0x28
 80037d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80037d8:	449e      	add	lr, r3
 80037da:	e775      	b.n	80036c8 <OpenNNA_Operator_Conv2d+0x58>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 80037dc:	b01b      	add	sp, #108	; 0x6c
 80037de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080037e2 <OpenNNA_Operator_Dense>:
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Input_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Channel;
    reg_t Input_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Row;
    reg_t Input_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Col;
    //dense算子独有
    reg_t units = ((Layer_Para_Dense *)Layers->Layer_Para_Extra)->units;//神经元数量
 80037e2:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
{
 80037e6:	b5f0      	push	{r4, r5, r6, r7, lr}
    reg_t units = ((Layer_Para_Dense *)Layers->Layer_Para_Extra)->units;//神经元数量
 80037e8:	f8d3 c000 	ldr.w	ip, [r3]
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    for (reg_t i = 0; i < units; ++i)//依次计算每个神经元
 80037ec:	f04f 0e00 	mov.w	lr, #0
    {
        /*bias*/
        ((data_t *)Layers->Output_Feature_Map)[i] = ((data_t *)Layers->Bias)[i];
        for (reg_t j= 0; j < (Input_Fmap_Channel*Input_Fmap_Row*Input_Fmap_Col); ++j)
 80037f0:	e9d2 1300 	ldrd	r1, r3, [r2]
 80037f4:	6892      	ldr	r2, [r2, #8]
 80037f6:	434b      	muls	r3, r1
 80037f8:	4353      	muls	r3, r2
    for (reg_t i = 0; i < units; ++i)//依次计算每个神经元
 80037fa:	4672      	mov	r2, lr
 80037fc:	4562      	cmp	r2, ip
 80037fe:	db00      	blt.n	8003802 <OpenNNA_Operator_Dense+0x20>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 8003800:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((data_t *)Layers->Output_Feature_Map)[i] = ((data_t *)Layers->Bias)[i];
 8003802:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8003804:	ea4f 048e 	mov.w	r4, lr, lsl #2
 8003808:	69c7      	ldr	r7, [r0, #28]
 800380a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800380e:	eb07 0782 	add.w	r7, r7, r2, lsl #2
 8003812:	6809      	ldr	r1, [r1, #0]
 8003814:	6039      	str	r1, [r7, #0]
        for (reg_t j= 0; j < (Input_Fmap_Channel*Input_Fmap_Row*Input_Fmap_Col); ++j)
 8003816:	2100      	movs	r1, #0
 8003818:	428b      	cmp	r3, r1
 800381a:	dc02      	bgt.n	8003822 <OpenNNA_Operator_Dense+0x40>
    for (reg_t i = 0; i < units; ++i)//依次计算每个神经元
 800381c:	3201      	adds	r2, #1
 800381e:	449e      	add	lr, r3
 8003820:	e7ec      	b.n	80037fc <OpenNNA_Operator_Dense+0x1a>
            ((data_t *)Layers->Output_Feature_Map)[i] += ((data_t *)Layers->Input_Feature_Map)[j] * ((data_t *)Layers->Weights)[i*(Input_Fmap_Channel*Input_Fmap_Row*Input_Fmap_Col)+j];
 8003822:	6986      	ldr	r6, [r0, #24]
 8003824:	6a05      	ldr	r5, [r0, #32]
 8003826:	eb06 0681 	add.w	r6, r6, r1, lsl #2
 800382a:	edd7 7a00 	vldr	s15, [r7]
 800382e:	4425      	add	r5, r4
        for (reg_t j= 0; j < (Input_Fmap_Channel*Input_Fmap_Row*Input_Fmap_Col); ++j)
 8003830:	3101      	adds	r1, #1
            ((data_t *)Layers->Output_Feature_Map)[i] += ((data_t *)Layers->Input_Feature_Map)[j] * ((data_t *)Layers->Weights)[i*(Input_Fmap_Channel*Input_Fmap_Row*Input_Fmap_Col)+j];
 8003832:	edd6 6a00 	vldr	s13, [r6]
 8003836:	3404      	adds	r4, #4
 8003838:	ed95 7a00 	vldr	s14, [r5]
 800383c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003840:	edc7 7a00 	vstr	s15, [r7]
        for (reg_t j= 0; j < (Input_Fmap_Channel*Input_Fmap_Row*Input_Fmap_Col); ++j)
 8003844:	e7e8      	b.n	8003818 <OpenNNA_Operator_Dense+0x36>

08003846 <OpenNNA_Operator_DWConv2d>:
// Note: 深度可分离卷积= 一个逐通道卷积(提取特征)+一个逐点卷积(融合，四舍五入就是普通卷积)构成，
// 本算子实现逐通道卷积，后面再接一层普通的conv2d卷积层就可以实现dwconv2d
void OpenNNA_Operator_DWConv2d(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Input_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Channel;
 8003846:	6902      	ldr	r2, [r0, #16]
{
 8003848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    reg_t Input_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Row;
    reg_t Input_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Col;
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 800384c:	6913      	ldr	r3, [r2, #16]
{
 800384e:	b09b      	sub	sp, #108	; 0x6c
    reg_t strides_col = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->strides_col;
    reg_t strides_row = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->strides_row;
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    //以下这个卷积实现思路以输出特征图为导向，当输入特征图为图像数据时，乘加次数最优
    for (int i = 0; i < filters; ++i) {//filters must = Output_Fmap_Channel
 8003850:	f04f 0e00 	mov.w	lr, #0
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 8003854:	930b      	str	r3, [sp, #44]	; 0x2c
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8003856:	6953      	ldr	r3, [r2, #20]
    for (int i = 0; i < filters; ++i) {//filters must = Output_Fmap_Channel
 8003858:	4677      	mov	r7, lr
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 800385a:	9305      	str	r3, [sp, #20]
    reg_t kernel_col = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_col;
 800385c:	6943      	ldr	r3, [r0, #20]
        for (int j = 0; j < Output_Fmap_Row; ++j) {
            for (int k = 0; k < Output_Fmap_Col; ++k) {
                //顺道填入偏置
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 800385e:	9c05      	ldr	r4, [sp, #20]
    reg_t kernel_col = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_col;
 8003860:	6819      	ldr	r1, [r3, #0]
 8003862:	9101      	str	r1, [sp, #4]
    reg_t kernel_row = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_row;
 8003864:	6859      	ldr	r1, [r3, #4]
 8003866:	910c      	str	r1, [sp, #48]	; 0x30
    reg_t kernel_channel = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->kernel_channel;
 8003868:	6899      	ldr	r1, [r3, #8]
 800386a:	910d      	str	r1, [sp, #52]	; 0x34
    reg_t filters = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->filters;
 800386c:	68d9      	ldr	r1, [r3, #12]
 800386e:	9111      	str	r1, [sp, #68]	; 0x44
    reg_t strides_col = ((Layer_Para_Conv2d *)Layers->Layer_Para_Extra)->strides_col;
 8003870:	6919      	ldr	r1, [r3, #16]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	910f      	str	r1, [sp, #60]	; 0x3c
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 8003876:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003878:	4361      	muls	r1, r4
 800387a:	9112      	str	r1, [sp, #72]	; 0x48
 800387c:	6891      	ldr	r1, [r2, #8]
 800387e:	6852      	ldr	r2, [r2, #4]
 8003880:	910a      	str	r1, [sp, #40]	; 0x28
 8003882:	434a      	muls	r2, r1
 8003884:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003886:	9215      	str	r2, [sp, #84]	; 0x54
 8003888:	9a01      	ldr	r2, [sp, #4]
 800388a:	434a      	muls	r2, r1
 800388c:	920e      	str	r2, [sp, #56]	; 0x38
 800388e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8003892:	434a      	muls	r2, r1
 8003894:	9216      	str	r2, [sp, #88]	; 0x58
 8003896:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003898:	4353      	muls	r3, r2
 800389a:	9314      	str	r3, [sp, #80]	; 0x50
    for (int i = 0; i < filters; ++i) {//filters must = Output_Fmap_Channel
 800389c:	e9cd ee08 	strd	lr, lr, [sp, #32]
 80038a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80038a2:	429f      	cmp	r7, r3
 80038a4:	f280 8083 	bge.w	80039ae <OpenNNA_Operator_DWConv2d+0x168>
 80038a8:	00bb      	lsls	r3, r7, #2
 80038aa:	9317      	str	r3, [sp, #92]	; 0x5c
 80038ac:	2300      	movs	r3, #0
        for (int j = 0; j < Output_Fmap_Row; ++j) {
 80038ae:	469b      	mov	fp, r3
    for (int i = 0; i < filters; ++i) {//filters must = Output_Fmap_Channel
 80038b0:	9307      	str	r3, [sp, #28]
 80038b2:	e065      	b.n	8003980 <OpenNNA_Operator_DWConv2d+0x13a>
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 80038b4:	69c2      	ldr	r2, [r0, #28]
                =\
                ((data_t *)Layers->Bias)[i];
                //一个卷积核去卷一下输入特征图
                for (int l = 0; l < kernel_channel; ++l) {
 80038b6:	f04f 0c00 	mov.w	ip, #0
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 80038ba:	9906      	ldr	r1, [sp, #24]
                ((data_t *)Layers->Bias)[i];
 80038bc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
                for (int l = 0; l < kernel_channel; ++l) {
 80038be:	46e1      	mov	r9, ip
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 80038c0:	440a      	add	r2, r1
                ((data_t *)Layers->Bias)[i];
 80038c2:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80038c4:	4421      	add	r1, r4
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 80038c6:	9202      	str	r2, [sp, #8]
                ((data_t *)Layers->Bias)[i];
 80038c8:	6809      	ldr	r1, [r1, #0]
                =\
 80038ca:	6011      	str	r1, [r2, #0]
                for (int l = 0; l < kernel_channel; ++l) {
 80038cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80038ce:	1869      	adds	r1, r5, r1
 80038d0:	9110      	str	r1, [sp, #64]	; 0x40
 80038d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80038d4:	4589      	cmp	r9, r1
 80038d6:	da40      	bge.n	800395a <OpenNNA_Operator_DWConv2d+0x114>
 80038d8:	eb0c 010e 	add.w	r1, ip, lr
 80038dc:	2600      	movs	r6, #0
 80038de:	4698      	mov	r8, r3
 80038e0:	9113      	str	r1, [sp, #76]	; 0x4c
                    for (int m = 0; m < kernel_row; ++m) {
 80038e2:	9604      	str	r6, [sp, #16]
 80038e4:	e024      	b.n	8003930 <OpenNNA_Operator_DWConv2d+0xea>
                            //输出特征图=输入特征图*卷积核权重
                            ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
                            +=\
                            //dw的实现主要修改下面这一行代码中输入特征图的load逻辑(以kernel channel参数进行内存偏移访问 改为 以filter参数进行内存偏移访问)
                            // (l*Input_Fmap_Col*Input_Fmap_Row->i*Input_Fmap_Col*Input_Fmap_Row)
                            ((data_t *)Layers->Input_Feature_Map)[(n+k*strides_col)+(m+j*strides_row)*Input_Fmap_Col+i*Input_Fmap_Col*Input_Fmap_Row]\
 80038e6:	6981      	ldr	r1, [r0, #24]
                        for (int n = 0; n < kernel_col; ++n) {
 80038e8:	f10a 0a01 	add.w	sl, sl, #1
                            ((data_t *)Layers->Input_Feature_Map)[(n+k*strides_col)+(m+j*strides_row)*Input_Fmap_Col+i*Input_Fmap_Col*Input_Fmap_Row]\
 80038ec:	4411      	add	r1, r2
 80038ee:	9118      	str	r1, [sp, #96]	; 0x60
                            *\
                            ((data_t *)Layers->Weights)[n+m*kernel_col+l*kernel_col*kernel_row+i*kernel_col*kernel_row*kernel_channel];
 80038f0:	6a01      	ldr	r1, [r0, #32]
 80038f2:	4421      	add	r1, r4
 80038f4:	9119      	str	r1, [sp, #100]	; 0x64
                            +=\
 80038f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80038f8:	edd1 6a00 	vldr	s13, [r1]
 80038fc:	9919      	ldr	r1, [sp, #100]	; 0x64
 80038fe:	ed91 7a00 	vldr	s14, [r1]
 8003902:	9902      	ldr	r1, [sp, #8]
 8003904:	edd1 7a00 	vldr	s15, [r1]
 8003908:	eee6 7a87 	vfma.f32	s15, s13, s14
 800390c:	edc1 7a00 	vstr	s15, [r1]
                        for (int n = 0; n < kernel_col; ++n) {
 8003910:	4611      	mov	r1, r2
 8003912:	3104      	adds	r1, #4
 8003914:	460a      	mov	r2, r1
 8003916:	4621      	mov	r1, r4
 8003918:	3104      	adds	r1, #4
 800391a:	460c      	mov	r4, r1
 800391c:	9901      	ldr	r1, [sp, #4]
 800391e:	458a      	cmp	sl, r1
 8003920:	dbe1      	blt.n	80038e6 <OpenNNA_Operator_DWConv2d+0xa0>
                    for (int m = 0; m < kernel_row; ++m) {
 8003922:	9904      	ldr	r1, [sp, #16]
 8003924:	3101      	adds	r1, #1
 8003926:	9104      	str	r1, [sp, #16]
 8003928:	990a      	ldr	r1, [sp, #40]	; 0x28
 800392a:	4488      	add	r8, r1
 800392c:	9901      	ldr	r1, [sp, #4]
 800392e:	440e      	add	r6, r1
 8003930:	9904      	ldr	r1, [sp, #16]
 8003932:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003934:	42a1      	cmp	r1, r4
 8003936:	da0b      	bge.n	8003950 <OpenNNA_Operator_DWConv2d+0x10a>
 8003938:	9910      	ldr	r1, [sp, #64]	; 0x40
                        for (int n = 0; n < kernel_col; ++n) {
 800393a:	f04f 0a00 	mov.w	sl, #0
 800393e:	eb01 0408 	add.w	r4, r1, r8
 8003942:	00a1      	lsls	r1, r4, #2
 8003944:	460a      	mov	r2, r1
 8003946:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8003948:	1871      	adds	r1, r6, r1
 800394a:	0089      	lsls	r1, r1, #2
 800394c:	460c      	mov	r4, r1
 800394e:	e7e5      	b.n	800391c <OpenNNA_Operator_DWConv2d+0xd6>
                for (int l = 0; l < kernel_channel; ++l) {
 8003950:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003952:	f109 0901 	add.w	r9, r9, #1
 8003956:	448c      	add	ip, r1
 8003958:	e7bb      	b.n	80038d2 <OpenNNA_Operator_DWConv2d+0x8c>
            for (int k = 0; k < Output_Fmap_Col; ++k) {
 800395a:	9a03      	ldr	r2, [sp, #12]
 800395c:	3201      	adds	r2, #1
 800395e:	9203      	str	r2, [sp, #12]
 8003960:	9a06      	ldr	r2, [sp, #24]
 8003962:	3204      	adds	r2, #4
 8003964:	9206      	str	r2, [sp, #24]
 8003966:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003968:	4415      	add	r5, r2
 800396a:	9a03      	ldr	r2, [sp, #12]
 800396c:	9905      	ldr	r1, [sp, #20]
 800396e:	428a      	cmp	r2, r1
 8003970:	dba0      	blt.n	80038b4 <OpenNNA_Operator_DWConv2d+0x6e>
        for (int j = 0; j < Output_Fmap_Row; ++j) {
 8003972:	9a07      	ldr	r2, [sp, #28]
 8003974:	f10b 0b01 	add.w	fp, fp, #1
 8003978:	440a      	add	r2, r1
 800397a:	9207      	str	r2, [sp, #28]
 800397c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800397e:	4413      	add	r3, r2
 8003980:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003982:	4593      	cmp	fp, r2
 8003984:	da07      	bge.n	8003996 <OpenNNA_Operator_DWConv2d+0x150>
 8003986:	2500      	movs	r5, #0
 8003988:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
            for (int k = 0; k < Output_Fmap_Col; ++k) {
 800398c:	9503      	str	r5, [sp, #12]
 800398e:	440a      	add	r2, r1
 8003990:	0092      	lsls	r2, r2, #2
 8003992:	9206      	str	r2, [sp, #24]
 8003994:	e7e9      	b.n	800396a <OpenNNA_Operator_DWConv2d+0x124>
    for (int i = 0; i < filters; ++i) {//filters must = Output_Fmap_Channel
 8003996:	9b08      	ldr	r3, [sp, #32]
 8003998:	3701      	adds	r7, #1
 800399a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800399c:	4413      	add	r3, r2
 800399e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80039a0:	9308      	str	r3, [sp, #32]
 80039a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039a4:	4413      	add	r3, r2
 80039a6:	9309      	str	r3, [sp, #36]	; 0x24
 80039a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80039aa:	449e      	add	lr, r3
 80039ac:	e778      	b.n	80038a0 <OpenNNA_Operator_DWConv2d+0x5a>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 80039ae:	b01b      	add	sp, #108	; 0x6c
 80039b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080039b4 <OpenNNA_Operator_Example>:
#include "opennna_operator_example.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_Example(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Input_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Channel;
 80039b4:	6903      	ldr	r3, [r0, #16]
{
 80039b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    reg_t Input_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Row;
    reg_t Input_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Col;
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 80039ba:	68da      	ldr	r2, [r3, #12]
{
 80039bc:	b089      	sub	sp, #36	; 0x24
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 80039be:	e9d3 7604 	ldrd	r7, r6, [r3, #16]
    for (int i = 0; i < Output_Fmap_Channel; ++i) {
        for (int j = 0; j < Output_Fmap_Row; ++j) {
            for (int k = 0; k < Output_Fmap_Col; ++k) {
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
                =\
                ((data_t *)Layers->Input_Feature_Map)[k+Input_Fmap_Col*j+Input_Fmap_Col*Input_Fmap_Row*i]*\
 80039c2:	e9d3 3a01 	ldrd	r3, sl, [r3, #4]
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 80039c6:	9203      	str	r2, [sp, #12]
    for (int i = 0; i < Output_Fmap_Channel; ++i) {
 80039c8:	2200      	movs	r2, #0
                ((data_t *)Layers->Input_Feature_Map)[k+Input_Fmap_Col*j+Input_Fmap_Col*Input_Fmap_Row*i]*\
 80039ca:	fb03 f30a 	mul.w	r3, r3, sl
    for (int i = 0; i < Output_Fmap_Channel; ++i) {
 80039ce:	4694      	mov	ip, r2
 80039d0:	9201      	str	r2, [sp, #4]
                ((data_t *)Layers->Input_Feature_Map)[k+Input_Fmap_Col*j+Input_Fmap_Col*Input_Fmap_Row*i]*\
 80039d2:	9304      	str	r3, [sp, #16]
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 80039d4:	fb06 f307 	mul.w	r3, r6, r7
 80039d8:	9305      	str	r3, [sp, #20]
    for (int i = 0; i < Output_Fmap_Channel; ++i) {
 80039da:	9b03      	ldr	r3, [sp, #12]
 80039dc:	9901      	ldr	r1, [sp, #4]
 80039de:	4299      	cmp	r1, r3
 80039e0:	db2f      	blt.n	8003a42 <OpenNNA_Operator_Example+0x8e>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 80039e2:	b009      	add	sp, #36	; 0x24
 80039e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 80039e8:	69c5      	ldr	r5, [r0, #28]
            for (int k = 0; k < Output_Fmap_Col; ++k) {
 80039ea:	f109 0901 	add.w	r9, r9, #1
                ((data_t *)Layers->Output_Feature_Map)[k+Output_Fmap_Col*j+Output_Fmap_Col*Output_Fmap_Row*i]\
 80039ee:	440d      	add	r5, r1
 80039f0:	3104      	adds	r1, #4
 80039f2:	9502      	str	r5, [sp, #8]
                ((data_t *)Layers->Input_Feature_Map)[k+Input_Fmap_Col*j+Input_Fmap_Col*Input_Fmap_Row*i]*\
 80039f4:	6985      	ldr	r5, [r0, #24]
 80039f6:	441d      	add	r5, r3
 80039f8:	9506      	str	r5, [sp, #24]
                ((data_t *)Layers->Weights)[k+Input_Fmap_Col*j+Input_Fmap_Col*Input_Fmap_Row*i]+\
 80039fa:	6a05      	ldr	r5, [r0, #32]
 80039fc:	eb05 0b03 	add.w	fp, r5, r3
                ((data_t *)Layers->Bias)[k+Input_Fmap_Col*j+Input_Fmap_Col*Input_Fmap_Row*i];
 8003a00:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003a02:	441d      	add	r5, r3
                ((data_t *)Layers->Weights)[k+Input_Fmap_Col*j+Input_Fmap_Col*Input_Fmap_Row*i]+\
 8003a04:	ed9b 7a00 	vldr	s14, [fp]
 8003a08:	3304      	adds	r3, #4
                ((data_t *)Layers->Bias)[k+Input_Fmap_Col*j+Input_Fmap_Col*Input_Fmap_Row*i];
 8003a0a:	9507      	str	r5, [sp, #28]
                ((data_t *)Layers->Weights)[k+Input_Fmap_Col*j+Input_Fmap_Col*Input_Fmap_Row*i]+\
 8003a0c:	9d06      	ldr	r5, [sp, #24]
 8003a0e:	edd5 6a00 	vldr	s13, [r5]
 8003a12:	9d07      	ldr	r5, [sp, #28]
 8003a14:	edd5 7a00 	vldr	s15, [r5]
                =\
 8003a18:	9d02      	ldr	r5, [sp, #8]
                ((data_t *)Layers->Weights)[k+Input_Fmap_Col*j+Input_Fmap_Col*Input_Fmap_Row*i]+\
 8003a1a:	eee6 7a87 	vfma.f32	s15, s13, s14
                =\
 8003a1e:	edc5 7a00 	vstr	s15, [r5]
            for (int k = 0; k < Output_Fmap_Col; ++k) {
 8003a22:	45b1      	cmp	r9, r6
 8003a24:	dbe0      	blt.n	80039e8 <OpenNNA_Operator_Example+0x34>
        for (int j = 0; j < Output_Fmap_Row; ++j) {
 8003a26:	f108 0801 	add.w	r8, r8, #1
 8003a2a:	44d6      	add	lr, sl
 8003a2c:	4434      	add	r4, r6
 8003a2e:	45b8      	cmp	r8, r7
 8003a30:	da0b      	bge.n	8003a4a <OpenNNA_Operator_Example+0x96>
 8003a32:	eb0e 030c 	add.w	r3, lr, ip
 8003a36:	18a1      	adds	r1, r4, r2
            for (int k = 0; k < Output_Fmap_Col; ++k) {
 8003a38:	f04f 0900 	mov.w	r9, #0
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	0089      	lsls	r1, r1, #2
 8003a40:	e7ef      	b.n	8003a22 <OpenNNA_Operator_Example+0x6e>
 8003a42:	2400      	movs	r4, #0
 8003a44:	46a6      	mov	lr, r4
        for (int j = 0; j < Output_Fmap_Row; ++j) {
 8003a46:	46a0      	mov	r8, r4
 8003a48:	e7f1      	b.n	8003a2e <OpenNNA_Operator_Example+0x7a>
    for (int i = 0; i < Output_Fmap_Channel; ++i) {
 8003a4a:	9b01      	ldr	r3, [sp, #4]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	9301      	str	r3, [sp, #4]
 8003a50:	9b04      	ldr	r3, [sp, #16]
 8003a52:	449c      	add	ip, r3
 8003a54:	9b05      	ldr	r3, [sp, #20]
 8003a56:	441a      	add	r2, r3
 8003a58:	e7bf      	b.n	80039da <OpenNNA_Operator_Example+0x26>
 8003a5a:	0000      	movs	r0, r0
 8003a5c:	0000      	movs	r0, r0
	...

08003a60 <OpenNNA_Operator_LeakyReLU>:
#include "opennna_operator_leakyrelu.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_LeakyReLU(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8003a60:	6903      	ldr	r3, [r0, #16]
{
 8003a62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 8003a66:	e9d3 8e03 	ldrd	r8, lr, [r3, #12]
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8003a6a:	695c      	ldr	r4, [r3, #20]
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8003a6c:	2300      	movs	r3, #0
            {
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] > 0 ? \
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] \
                : \
                0.01*((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k];
 8003a6e:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8003ad0 <OpenNNA_Operator_LeakyReLU+0x70>
 8003a72:	fb04 f90e 	mul.w	r9, r4, lr
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8003a76:	4619      	mov	r1, r3
 8003a78:	4541      	cmp	r1, r8
 8003a7a:	db20      	blt.n	8003abe <OpenNNA_Operator_LeakyReLU+0x5e>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 8003a7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] > 0 ? \
 8003a80:	6987      	ldr	r7, [r0, #24]
            for (int k = 0; k < Output_Fmap_Col; k++)
 8003a82:	3501      	adds	r5, #1
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] > 0 ? \
 8003a84:	4417      	add	r7, r2
 8003a86:	ed97 7a00 	vldr	s14, [r7]
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8003a8a:	69c7      	ldr	r7, [r0, #28]
                : \
 8003a8c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8003a90:	4417      	add	r7, r2
 8003a92:	3204      	adds	r2, #4
                : \
 8003a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                0.01*((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k];
 8003a98:	bfde      	ittt	le
 8003a9a:	eeb7 7ac7 	vcvtle.f64.f32	d7, s14
 8003a9e:	ee27 7b06 	vmulle.f64	d7, d7, d6
                : \
 8003aa2:	eeb7 7bc7 	vcvtle.f32.f64	s14, d7
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8003aa6:	ed87 7a00 	vstr	s14, [r7]
            for (int k = 0; k < Output_Fmap_Col; k++)
 8003aaa:	42a5      	cmp	r5, r4
 8003aac:	dbe8      	blt.n	8003a80 <OpenNNA_Operator_LeakyReLU+0x20>
        for (int j = 0; j < Output_Fmap_Row; j++)
 8003aae:	f10c 0c01 	add.w	ip, ip, #1
 8003ab2:	4426      	add	r6, r4
 8003ab4:	45f4      	cmp	ip, lr
 8003ab6:	da06      	bge.n	8003ac6 <OpenNNA_Operator_LeakyReLU+0x66>
 8003ab8:	00b2      	lsls	r2, r6, #2
            for (int k = 0; k < Output_Fmap_Col; k++)
 8003aba:	2500      	movs	r5, #0
 8003abc:	e7f5      	b.n	8003aaa <OpenNNA_Operator_LeakyReLU+0x4a>
 8003abe:	461e      	mov	r6, r3
        for (int j = 0; j < Output_Fmap_Row; j++)
 8003ac0:	f04f 0c00 	mov.w	ip, #0
 8003ac4:	e7f6      	b.n	8003ab4 <OpenNNA_Operator_LeakyReLU+0x54>
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8003ac6:	3101      	adds	r1, #1
 8003ac8:	444b      	add	r3, r9
 8003aca:	e7d5      	b.n	8003a78 <OpenNNA_Operator_LeakyReLU+0x18>
 8003acc:	f3af 8000 	nop.w
 8003ad0:	47ae147b 	.word	0x47ae147b
 8003ad4:	3f847ae1 	.word	0x3f847ae1

08003ad8 <OpenNNA_Operator_MaxPool>:
#include "opennna_operator_maxpool.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_MaxPool(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Input_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Channel;
 8003ad8:	6903      	ldr	r3, [r0, #16]

    reg_t strides_col = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->strides_col;
    reg_t strides_row = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->strides_row;
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    data_t max_value=0;//在MaxPool时存储最大值,在AveragePool存储均值
 8003ada:	eddf 7a40 	vldr	s15, [pc, #256]	; 8003bdc <OpenNNA_Operator_MaxPool+0x104>
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8003ade:	68da      	ldr	r2, [r3, #12]
{
 8003ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ae4:	b091      	sub	sp, #68	; 0x44
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8003ae6:	695f      	ldr	r7, [r3, #20]
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8003ae8:	9208      	str	r2, [sp, #32]
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	9205      	str	r2, [sp, #20]
    reg_t kernel_col = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->kernel_col;
 8003aee:	6942      	ldr	r2, [r0, #20]
 8003af0:	6811      	ldr	r1, [r2, #0]
 8003af2:	9109      	str	r1, [sp, #36]	; 0x24
    reg_t kernel_row = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->kernel_row;
 8003af4:	6851      	ldr	r1, [r2, #4]
 8003af6:	910a      	str	r1, [sp, #40]	; 0x28
    reg_t strides_col = ((Layer_Para_MaxPool *)Layers->Layer_Para_Extra)->strides_col;
 8003af8:	6891      	ldr	r1, [r2, #8]
 8003afa:	9106      	str	r1, [sp, #24]
    for (int i = 0; i < Output_Fmap_Channel; ++i)//output_fmap_channel
 8003afc:	9905      	ldr	r1, [sp, #20]
 8003afe:	4379      	muls	r1, r7
 8003b00:	910c      	str	r1, [sp, #48]	; 0x30
 8003b02:	6899      	ldr	r1, [r3, #8]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	9104      	str	r1, [sp, #16]
 8003b08:	434b      	muls	r3, r1
 8003b0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8003b0c:	68d3      	ldr	r3, [r2, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	434b      	muls	r3, r1
 8003b12:	4694      	mov	ip, r2
 8003b14:	4696      	mov	lr, r2
 8003b16:	930d      	str	r3, [sp, #52]	; 0x34
 8003b18:	9b08      	ldr	r3, [sp, #32]
 8003b1a:	459e      	cmp	lr, r3
 8003b1c:	db52      	blt.n	8003bc4 <OpenNNA_Operator_MaxPool+0xec>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 8003b1e:	b011      	add	sp, #68	; 0x44
 8003b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        :\
 8003b24:	ea55 0406 	orrs.w	r4, r5, r6
                        ((data_t *)Layers->Input_Feature_Map)[(i*Input_Fmap_Col*Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)] \
 8003b28:	6983      	ldr	r3, [r0, #24]
                        :\
 8003b2a:	d114      	bne.n	8003b56 <OpenNNA_Operator_MaxPool+0x7e>
 8003b2c:	9c07      	ldr	r4, [sp, #28]
 8003b2e:	4423      	add	r3, r4
 8003b30:	edd3 7a00 	vldr	s15, [r3]
                    for (int m = 0; m < kernel_col; ++m)//pool_Kernel_size_col
 8003b34:	3601      	adds	r6, #1
 8003b36:	f10b 0b04 	add.w	fp, fp, #4
 8003b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b3c:	429e      	cmp	r6, r3
 8003b3e:	dbf1      	blt.n	8003b24 <OpenNNA_Operator_MaxPool+0x4c>
                for (int l = 0; l < kernel_row; ++l)//pool_Kernel_size_row
 8003b40:	9b04      	ldr	r3, [sp, #16]
 8003b42:	3501      	adds	r5, #1
 8003b44:	449a      	add	sl, r3
 8003b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b48:	429d      	cmp	r5, r3
 8003b4a:	da0e      	bge.n	8003b6a <OpenNNA_Operator_MaxPool+0x92>
 8003b4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                    for (int m = 0; m < kernel_col; ++m)//pool_Kernel_size_col
 8003b4e:	2600      	movs	r6, #0
 8003b50:	eb03 0b8a 	add.w	fp, r3, sl, lsl #2
 8003b54:	e7f1      	b.n	8003b3a <OpenNNA_Operator_MaxPool+0x62>
                        (((data_t *)Layers->Input_Feature_Map)[(i*Input_Fmap_Col*Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)] > max_value) ? \
 8003b56:	445b      	add	r3, fp
 8003b58:	ed93 7a00 	vldr	s14, [r3]
                       ((data_t *)Layers->Input_Feature_Map)[(i*Input_Fmap_Col*Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)] : max_value;
 8003b5c:	eeb4 7a67 	vcmp.f32	s14, s15
 8003b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b64:	fe77 7a27 	vselgt.f32	s15, s14, s15
 8003b68:	e7e4      	b.n	8003b34 <OpenNNA_Operator_MaxPool+0x5c>
                ((data_t *)Layers->Output_Feature_Map)[(i*Output_Fmap_Col*Output_Fmap_Row) + (j*Output_Fmap_Col) + k] = max_value;
 8003b6a:	69c3      	ldr	r3, [r0, #28]
            for (int k = 0; k < Output_Fmap_Col; ++k)//(((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 8003b6c:	f108 0801 	add.w	r8, r8, #1
                ((data_t *)Layers->Output_Feature_Map)[(i*Output_Fmap_Col*Output_Fmap_Row) + (j*Output_Fmap_Col) + k] = max_value;
 8003b70:	444b      	add	r3, r9
 8003b72:	f109 0904 	add.w	r9, r9, #4
 8003b76:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < Output_Fmap_Col; ++k)//(((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 8003b7a:	9b06      	ldr	r3, [sp, #24]
 8003b7c:	4419      	add	r1, r3
 8003b7e:	45b8      	cmp	r8, r7
 8003b80:	da09      	bge.n	8003b96 <OpenNNA_Operator_MaxPool+0xbe>
 8003b82:	008b      	lsls	r3, r1, #2
                        ((data_t *)Layers->Input_Feature_Map)[(i*Input_Fmap_Col*Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)] \
 8003b84:	f8dd a004 	ldr.w	sl, [sp, #4]
                for (int l = 0; l < kernel_row; ++l)//pool_Kernel_size_row
 8003b88:	2500      	movs	r5, #0
 8003b8a:	930b      	str	r3, [sp, #44]	; 0x2c
                        ((data_t *)Layers->Input_Feature_Map)[(i*Input_Fmap_Col*Input_Fmap_Row) + ((l + j * strides_row) * Input_Fmap_Col) + (m + k * strides_col)] \
 8003b8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b8e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003b92:	9307      	str	r3, [sp, #28]
 8003b94:	e7d7      	b.n	8003b46 <OpenNNA_Operator_MaxPool+0x6e>
        for (int j = 0; j < Output_Fmap_Row; ++j)//Output_Fmap_Row = (((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 8003b96:	9b03      	ldr	r3, [sp, #12]
 8003b98:	9901      	ldr	r1, [sp, #4]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	9303      	str	r3, [sp, #12]
 8003b9e:	9b02      	ldr	r3, [sp, #8]
 8003ba0:	443b      	add	r3, r7
 8003ba2:	9302      	str	r3, [sp, #8]
 8003ba4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ba6:	4419      	add	r1, r3
 8003ba8:	9101      	str	r1, [sp, #4]
 8003baa:	9b03      	ldr	r3, [sp, #12]
 8003bac:	9905      	ldr	r1, [sp, #20]
 8003bae:	428b      	cmp	r3, r1
 8003bb0:	da0d      	bge.n	8003bce <OpenNNA_Operator_MaxPool+0xf6>
 8003bb2:	9b02      	ldr	r3, [sp, #8]
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8003bba:	9b01      	ldr	r3, [sp, #4]
            for (int k = 0; k < Output_Fmap_Col; ++k)//(((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 8003bbc:	4688      	mov	r8, r1
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	930e      	str	r3, [sp, #56]	; 0x38
 8003bc2:	e7dc      	b.n	8003b7e <OpenNNA_Operator_MaxPool+0xa6>
        for (int j = 0; j < Output_Fmap_Row; ++j)//Output_Fmap_Row = (((input_fmap_size - pool_Kernel_size) / pool_Kernel_stride) + 1)
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8003bca:	9303      	str	r3, [sp, #12]
 8003bcc:	e7ed      	b.n	8003baa <OpenNNA_Operator_MaxPool+0xd2>
    for (int i = 0; i < Output_Fmap_Channel; ++i)//output_fmap_channel
 8003bce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003bd0:	f10e 0e01 	add.w	lr, lr, #1
 8003bd4:	449c      	add	ip, r3
 8003bd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003bd8:	441a      	add	r2, r3
 8003bda:	e79d      	b.n	8003b18 <OpenNNA_Operator_MaxPool+0x40>
 8003bdc:	00000000 	.word	0x00000000

08003be0 <OpenNNA_Operator_Padding>:
#include "opennna_operator_padding.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_Padding(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Input_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Channel;
 8003be0:	6902      	ldr	r2, [r0, #16]
                {
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)] = 0;
                }
                else if (j >= (Padding + Input_Fmap_Row))//底部padding
                {
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)] = 0;
 8003be2:	eddf 7a38 	vldr	s15, [pc, #224]	; 8003cc4 <OpenNNA_Operator_Padding+0xe4>
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8003be6:	68d1      	ldr	r1, [r2, #12]
{
 8003be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bec:	b089      	sub	sp, #36	; 0x24
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8003bee:	f8d2 9014 	ldr.w	r9, [r2, #20]
    for (int i = 0; i < Output_Fmap_Channel; i++)//Output_Fmap_Channel
 8003bf2:	2500      	movs	r5, #0
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8003bf4:	9104      	str	r1, [sp, #16]
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 8003bf6:	6911      	ldr	r1, [r2, #16]
    for (int i = 0; i < Output_Fmap_Channel; i++)//Output_Fmap_Channel
 8003bf8:	46aa      	mov	sl, r5
 8003bfa:	46ab      	mov	fp, r5
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 8003bfc:	9100      	str	r1, [sp, #0]
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)] = 0;
 8003bfe:	fb09 f101 	mul.w	r1, r9, r1
    reg_t Input_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Input_Fmap_Col;
 8003c02:	e9d2 3e01 	ldrd	r3, lr, [r2, #4]
    reg_t Padding = ((Layer_Para_Padding *)Layers->Layer_Para_Extra)->padding;//填充几圈0
 8003c06:	6942      	ldr	r2, [r0, #20]
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)] = 0;
 8003c08:	9107      	str	r1, [sp, #28]
    reg_t Padding = ((Layer_Para_Padding *)Layers->Layer_Para_Extra)->padding;//填充几圈0
 8003c0a:	6812      	ldr	r2, [r2, #0]
    for (int i = 0; i < Output_Fmap_Channel; i++)//Output_Fmap_Channel
 8003c0c:	fb0e f103 	mul.w	r1, lr, r3
 8003c10:	9103      	str	r1, [sp, #12]
                else if (j >= (Padding + Input_Fmap_Row))//底部padding
 8003c12:	4413      	add	r3, r2
 8003c14:	fb0e f102 	mul.w	r1, lr, r2
 8003c18:	9301      	str	r3, [sp, #4]
                /*k遍历列,左边和右边填充*/
                if (k < Padding)//左边padding
                {
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)] = 0;
                }
                else if (k >= (Padding + Input_Fmap_Col))//右边padding
 8003c1a:	eb0e 0302 	add.w	r3, lr, r2
 8003c1e:	9106      	str	r1, [sp, #24]
 8003c20:	f06f 0103 	mvn.w	r1, #3
 8003c24:	9302      	str	r3, [sp, #8]
 8003c26:	4351      	muls	r1, r2
 8003c28:	9105      	str	r1, [sp, #20]
    for (int i = 0; i < Output_Fmap_Channel; i++)//Output_Fmap_Channel
 8003c2a:	9b04      	ldr	r3, [sp, #16]
 8003c2c:	459b      	cmp	fp, r3
 8003c2e:	da45      	bge.n	8003cbc <OpenNNA_Operator_Padding+0xdc>
 8003c30:	9b06      	ldr	r3, [sp, #24]
 8003c32:	2600      	movs	r6, #0
 8003c34:	ebaa 0803 	sub.w	r8, sl, r3
        for (int j = 0; j < Output_Fmap_Row; j++)//Output_Fmap_Row 行
 8003c38:	4631      	mov	r1, r6
 8003c3a:	e02e      	b.n	8003c9a <OpenNNA_Operator_Padding+0xba>
                if ( j < Padding)//顶部padding
 8003c3c:	4291      	cmp	r1, r2
 8003c3e:	da04      	bge.n	8003c4a <OpenNNA_Operator_Padding+0x6a>
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)] = 0;
 8003c40:	69c7      	ldr	r7, [r0, #28]
 8003c42:	441f      	add	r7, r3
 8003c44:	edc7 7a00 	vstr	s15, [r7]
 8003c48:	e002      	b.n	8003c50 <OpenNNA_Operator_Padding+0x70>
                else if (j >= (Padding + Input_Fmap_Row))//底部padding
 8003c4a:	9f01      	ldr	r7, [sp, #4]
 8003c4c:	428f      	cmp	r7, r1
 8003c4e:	ddf7      	ble.n	8003c40 <OpenNNA_Operator_Padding+0x60>
                if (k < Padding)//左边padding
 8003c50:	4294      	cmp	r4, r2
 8003c52:	da04      	bge.n	8003c5e <OpenNNA_Operator_Padding+0x7e>
                {
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)] = 0;
 8003c54:	69c7      	ldr	r7, [r0, #28]
 8003c56:	441f      	add	r7, r3
 8003c58:	edc7 7a00 	vstr	s15, [r7]
 8003c5c:	e002      	b.n	8003c64 <OpenNNA_Operator_Padding+0x84>
                else if (k >= (Padding + Input_Fmap_Col))//右边padding
 8003c5e:	9f02      	ldr	r7, [sp, #8]
 8003c60:	42a7      	cmp	r7, r4
 8003c62:	ddf7      	ble.n	8003c54 <OpenNNA_Operator_Padding+0x74>
                }
                //输入fmap填充到中间
                if(j >= Padding && j < (Padding + Input_Fmap_Row) && k >= Padding && k < (Padding + Input_Fmap_Col))
 8003c64:	4291      	cmp	r1, r2
 8003c66:	db0f      	blt.n	8003c88 <OpenNNA_Operator_Padding+0xa8>
 8003c68:	9f01      	ldr	r7, [sp, #4]
 8003c6a:	428f      	cmp	r7, r1
 8003c6c:	dd0c      	ble.n	8003c88 <OpenNNA_Operator_Padding+0xa8>
 8003c6e:	4294      	cmp	r4, r2
 8003c70:	db0a      	blt.n	8003c88 <OpenNNA_Operator_Padding+0xa8>
 8003c72:	9f02      	ldr	r7, [sp, #8]
 8003c74:	42a7      	cmp	r7, r4
 8003c76:	dd07      	ble.n	8003c88 <OpenNNA_Operator_Padding+0xa8>
                    ((data_t *)Layers->Output_Feature_Map)[k+(Output_Fmap_Col*j)+(Output_Fmap_Col*Output_Fmap_Row*i)]  = ((data_t *)Layers->Input_Feature_Map)[(i * Input_Fmap_Row * Input_Fmap_Col) + ((j-Padding) * Input_Fmap_Col) + (k-Padding)];
 8003c78:	6987      	ldr	r7, [r0, #24]
 8003c7a:	4467      	add	r7, ip
 8003c7c:	ed97 7a00 	vldr	s14, [r7]
 8003c80:	69c7      	ldr	r7, [r0, #28]
 8003c82:	441f      	add	r7, r3
 8003c84:	ed87 7a00 	vstr	s14, [r7]
            for (int k = 0; k < Output_Fmap_Col; k++)//Output_Fmap_Col 列
 8003c88:	3401      	adds	r4, #1
 8003c8a:	f10c 0c04 	add.w	ip, ip, #4
 8003c8e:	3304      	adds	r3, #4
 8003c90:	454c      	cmp	r4, r9
 8003c92:	dbd3      	blt.n	8003c3c <OpenNNA_Operator_Padding+0x5c>
        for (int j = 0; j < Output_Fmap_Row; j++)//Output_Fmap_Row 行
 8003c94:	3101      	adds	r1, #1
 8003c96:	44f0      	add	r8, lr
 8003c98:	444e      	add	r6, r9
 8003c9a:	9b00      	ldr	r3, [sp, #0]
 8003c9c:	4299      	cmp	r1, r3
 8003c9e:	da06      	bge.n	8003cae <OpenNNA_Operator_Padding+0xce>
 8003ca0:	9b05      	ldr	r3, [sp, #20]
            for (int k = 0; k < Output_Fmap_Col; k++)//Output_Fmap_Col 列
 8003ca2:	2400      	movs	r4, #0
 8003ca4:	eb03 0c88 	add.w	ip, r3, r8, lsl #2
 8003ca8:	1973      	adds	r3, r6, r5
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	e7f0      	b.n	8003c90 <OpenNNA_Operator_Padding+0xb0>
    for (int i = 0; i < Output_Fmap_Channel; i++)//Output_Fmap_Channel
 8003cae:	9b03      	ldr	r3, [sp, #12]
 8003cb0:	f10b 0b01 	add.w	fp, fp, #1
 8003cb4:	449a      	add	sl, r3
 8003cb6:	9b07      	ldr	r3, [sp, #28]
 8003cb8:	441d      	add	r5, r3
 8003cba:	e7b6      	b.n	8003c2a <OpenNNA_Operator_Padding+0x4a>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 8003cbc:	b009      	add	sp, #36	; 0x24
 8003cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cc2:	bf00      	nop
 8003cc4:	00000000 	.word	0x00000000

08003cc8 <OpenNNA_Operator_ReLU>:
#include "opennna_operator_relu.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_ReLU(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8003cc8:	6903      	ldr	r3, [r0, #16]
            for (int k = 0; k < Output_Fmap_Col; k++)
            {
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] > 0 ? \
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] \
                : \
 8003cca:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003d2c <OpenNNA_Operator_ReLU+0x64>
{
 8003cce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 8003cd2:	e9d3 8e03 	ldrd	r8, lr, [r3, #12]
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8003cd6:	695c      	ldr	r4, [r3, #20]
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8003cd8:	2300      	movs	r3, #0
 8003cda:	fb04 f90e 	mul.w	r9, r4, lr
 8003cde:	4619      	mov	r1, r3
 8003ce0:	4541      	cmp	r1, r8
 8003ce2:	db1b      	blt.n	8003d1c <OpenNNA_Operator_ReLU+0x54>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 8003ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] > 0 ? \
 8003ce8:	6987      	ldr	r7, [r0, #24]
            for (int k = 0; k < Output_Fmap_Col; k++)
 8003cea:	3501      	adds	r5, #1
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] > 0 ? \
 8003cec:	4417      	add	r7, r2
 8003cee:	edd7 7a00 	vldr	s15, [r7]
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8003cf2:	69c7      	ldr	r7, [r0, #28]
                : \
 8003cf4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8003cf8:	4417      	add	r7, r2
 8003cfa:	3204      	adds	r2, #4
                : \
 8003cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d00:	fe77 7a87 	vselgt.f32	s15, s15, s14
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8003d04:	edc7 7a00 	vstr	s15, [r7]
            for (int k = 0; k < Output_Fmap_Col; k++)
 8003d08:	42a5      	cmp	r5, r4
 8003d0a:	dbed      	blt.n	8003ce8 <OpenNNA_Operator_ReLU+0x20>
        for (int j = 0; j < Output_Fmap_Row; j++)
 8003d0c:	f10c 0c01 	add.w	ip, ip, #1
 8003d10:	4426      	add	r6, r4
 8003d12:	45f4      	cmp	ip, lr
 8003d14:	da06      	bge.n	8003d24 <OpenNNA_Operator_ReLU+0x5c>
 8003d16:	00b2      	lsls	r2, r6, #2
            for (int k = 0; k < Output_Fmap_Col; k++)
 8003d18:	2500      	movs	r5, #0
 8003d1a:	e7f5      	b.n	8003d08 <OpenNNA_Operator_ReLU+0x40>
 8003d1c:	461e      	mov	r6, r3
        for (int j = 0; j < Output_Fmap_Row; j++)
 8003d1e:	f04f 0c00 	mov.w	ip, #0
 8003d22:	e7f6      	b.n	8003d12 <OpenNNA_Operator_ReLU+0x4a>
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8003d24:	3101      	adds	r1, #1
 8003d26:	444b      	add	r3, r9
 8003d28:	e7da      	b.n	8003ce0 <OpenNNA_Operator_ReLU+0x18>
 8003d2a:	bf00      	nop
 8003d2c:	00000000 	.word	0x00000000

08003d30 <OpenNNA_Operator_ReLU6>:
#include "opennna_operator_relu6.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_ReLU6(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8003d30:	6903      	ldr	r3, [r0, #16]
            for (int k = 0; k < Output_Fmap_Col; k++)
            {
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] > 6 ? \
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] \
                : \
 8003d32:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8003d36:	eddf 6a18 	vldr	s13, [pc, #96]	; 8003d98 <OpenNNA_Operator_ReLU6+0x68>
{
 8003d3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 8003d3e:	e9d3 8e03 	ldrd	r8, lr, [r3, #12]
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8003d42:	695c      	ldr	r4, [r3, #20]
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8003d44:	2300      	movs	r3, #0
 8003d46:	fb04 f90e 	mul.w	r9, r4, lr
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4541      	cmp	r1, r8
 8003d4e:	db1b      	blt.n	8003d88 <OpenNNA_Operator_ReLU6+0x58>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 8003d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] > 6 ? \
 8003d54:	6987      	ldr	r7, [r0, #24]
            for (int k = 0; k < Output_Fmap_Col; k++)
 8003d56:	3501      	adds	r5, #1
                ((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] > 6 ? \
 8003d58:	4417      	add	r7, r2
 8003d5a:	edd7 7a00 	vldr	s15, [r7]
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8003d5e:	69c7      	ldr	r7, [r0, #28]
                : \
 8003d60:	eef4 7ac7 	vcmpe.f32	s15, s14
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8003d64:	4417      	add	r7, r2
 8003d66:	3204      	adds	r2, #4
                : \
 8003d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d6c:	fe77 7aa6 	vselgt.f32	s15, s15, s13
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8003d70:	edc7 7a00 	vstr	s15, [r7]
            for (int k = 0; k < Output_Fmap_Col; k++)
 8003d74:	42a5      	cmp	r5, r4
 8003d76:	dbed      	blt.n	8003d54 <OpenNNA_Operator_ReLU6+0x24>
        for (int j = 0; j < Output_Fmap_Row; j++)
 8003d78:	f10c 0c01 	add.w	ip, ip, #1
 8003d7c:	4426      	add	r6, r4
 8003d7e:	45f4      	cmp	ip, lr
 8003d80:	da06      	bge.n	8003d90 <OpenNNA_Operator_ReLU6+0x60>
 8003d82:	00b2      	lsls	r2, r6, #2
            for (int k = 0; k < Output_Fmap_Col; k++)
 8003d84:	2500      	movs	r5, #0
 8003d86:	e7f5      	b.n	8003d74 <OpenNNA_Operator_ReLU6+0x44>
 8003d88:	461e      	mov	r6, r3
        for (int j = 0; j < Output_Fmap_Row; j++)
 8003d8a:	f04f 0c00 	mov.w	ip, #0
 8003d8e:	e7f6      	b.n	8003d7e <OpenNNA_Operator_ReLU6+0x4e>
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8003d90:	3101      	adds	r1, #1
 8003d92:	444b      	add	r3, r9
 8003d94:	e7da      	b.n	8003d4c <OpenNNA_Operator_ReLU6+0x1c>
 8003d96:	bf00      	nop
 8003d98:	00000000 	.word	0x00000000

08003d9c <OpenNNA_Operator_Softmax>:
#include "math.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_Softmax(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8003d9c:	6903      	ldr	r3, [r0, #16]
{
 8003d9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003da2:	4604      	mov	r4, r0
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8003da4:	695d      	ldr	r5, [r3, #20]
    //Softmax独有
    data_t exp_sum = 0;//exp求sum
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    //得到exp 和exp sum
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8003da6:	2700      	movs	r7, #0
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 8003da8:	e9d3 0803 	ldrd	r0, r8, [r3, #12]
{
 8003dac:	ed2d 8b02 	vpush	{d8}
 8003db0:	fb05 f108 	mul.w	r1, r5, r8
 8003db4:	b085      	sub	sp, #20
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8003db6:	46b9      	mov	r9, r7
    data_t exp_sum = 0;//exp求sum
 8003db8:	ed9f 8a30 	vldr	s16, [pc, #192]	; 8003e7c <OpenNNA_Operator_Softmax+0xe0>
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8003dbc:	4581      	cmp	r9, r0
 8003dbe:	db38      	blt.n	8003e32 <OpenNNA_Operator_Softmax+0x96>
 8003dc0:	2300      	movs	r3, #0
                exp_sum += exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]);
            }
        }
    }
    //得到softmax的概率 = 每个exp /sum
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8003dc2:	461e      	mov	r6, r3
 8003dc4:	4286      	cmp	r6, r0
 8003dc6:	db51      	blt.n	8003e6c <OpenNNA_Operator_Softmax+0xd0>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 8003dc8:	b005      	add	sp, #20
 8003dca:	ecbd 8b02 	vpop	{d8}
 8003dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]);
 8003dd2:	69a3      	ldr	r3, [r4, #24]
            for (int k = 0; k < Output_Fmap_Col; k++)
 8003dd4:	f10a 0a01 	add.w	sl, sl, #1
 8003dd8:	9201      	str	r2, [sp, #4]
                exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]);
 8003dda:	4433      	add	r3, r6
 8003ddc:	ed93 0a00 	vldr	s0, [r3]
 8003de0:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8003de4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003de8:	f004 fca6 	bl	8008738 <exp>
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8003dec:	69e3      	ldr	r3, [r4, #28]
                exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]);
 8003dee:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8003df2:	4433      	add	r3, r6
                exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]);
 8003df4:	ed83 0a00 	vstr	s0, [r3]
                exp_sum += exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]);
 8003df8:	69a3      	ldr	r3, [r4, #24]
 8003dfa:	4433      	add	r3, r6
 8003dfc:	3604      	adds	r6, #4
 8003dfe:	ed93 0a00 	vldr	s0, [r3]
 8003e02:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8003e06:	f004 fc97 	bl	8008738 <exp>
 8003e0a:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8003e0e:	9a01      	ldr	r2, [sp, #4]
 8003e10:	ee38 0b00 	vadd.f64	d0, d8, d0
 8003e14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e18:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
            for (int k = 0; k < Output_Fmap_Col; k++)
 8003e1c:	45aa      	cmp	sl, r5
 8003e1e:	dbd8      	blt.n	8003dd2 <OpenNNA_Operator_Softmax+0x36>
        for (int j = 0; j < Output_Fmap_Row; j++)
 8003e20:	3201      	adds	r2, #1
 8003e22:	44ab      	add	fp, r5
 8003e24:	4542      	cmp	r2, r8
 8003e26:	da07      	bge.n	8003e38 <OpenNNA_Operator_Softmax+0x9c>
 8003e28:	ea4f 068b 	mov.w	r6, fp, lsl #2
            for (int k = 0; k < Output_Fmap_Col; k++)
 8003e2c:	f04f 0a00 	mov.w	sl, #0
 8003e30:	e7f4      	b.n	8003e1c <OpenNNA_Operator_Softmax+0x80>
 8003e32:	46bb      	mov	fp, r7
        for (int j = 0; j < Output_Fmap_Row; j++)
 8003e34:	2200      	movs	r2, #0
 8003e36:	e7f5      	b.n	8003e24 <OpenNNA_Operator_Softmax+0x88>
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8003e38:	f109 0901 	add.w	r9, r9, #1
 8003e3c:	440f      	add	r7, r1
 8003e3e:	e7bd      	b.n	8003dbc <OpenNNA_Operator_Softmax+0x20>
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] / exp_sum;
 8003e40:	69e2      	ldr	r2, [r4, #28]
            for (int k = 0; k < Output_Fmap_Col; k++)
 8003e42:	3701      	adds	r7, #1
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] / exp_sum;
 8003e44:	4462      	add	r2, ip
 8003e46:	f10c 0c04 	add.w	ip, ip, #4
 8003e4a:	ed92 7a00 	vldr	s14, [r2]
 8003e4e:	eec7 7a08 	vdiv.f32	s15, s14, s16
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8003e52:	edc2 7a00 	vstr	s15, [r2]
            for (int k = 0; k < Output_Fmap_Col; k++)
 8003e56:	42af      	cmp	r7, r5
 8003e58:	dbf2      	blt.n	8003e40 <OpenNNA_Operator_Softmax+0xa4>
        for (int j = 0; j < Output_Fmap_Row; j++)
 8003e5a:	f109 0901 	add.w	r9, r9, #1
 8003e5e:	44ae      	add	lr, r5
 8003e60:	45c1      	cmp	r9, r8
 8003e62:	da07      	bge.n	8003e74 <OpenNNA_Operator_Softmax+0xd8>
 8003e64:	ea4f 0c8e 	mov.w	ip, lr, lsl #2
            for (int k = 0; k < Output_Fmap_Col; k++)
 8003e68:	2700      	movs	r7, #0
 8003e6a:	e7f4      	b.n	8003e56 <OpenNNA_Operator_Softmax+0xba>
 8003e6c:	469e      	mov	lr, r3
        for (int j = 0; j < Output_Fmap_Row; j++)
 8003e6e:	f04f 0900 	mov.w	r9, #0
 8003e72:	e7f5      	b.n	8003e60 <OpenNNA_Operator_Softmax+0xc4>
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8003e74:	3601      	adds	r6, #1
 8003e76:	440b      	add	r3, r1
 8003e78:	e7a4      	b.n	8003dc4 <OpenNNA_Operator_Softmax+0x28>
 8003e7a:	bf00      	nop
 8003e7c:	00000000 	.word	0x00000000

08003e80 <OpenNNA_Operator_tanh>:
#include "math.h"
//这里提供一个算子,命名规则:OpenNNA_Operator_算子名
void OpenNNA_Operator_tanh(struct layer *Layers)
{
    //通过Layer对象便可访问当前层的所有计算有关的信息
    reg_t Output_Fmap_Channel = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Channel;
 8003e80:	6903      	ldr	r3, [r0, #16]
{
 8003e82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e86:	4604      	mov	r4, r0
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
    reg_t Output_Fmap_Col = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Col;
 8003e88:	695f      	ldr	r7, [r3, #20]
#if (CHW==1)
    //在此实现CHW的内存访问逻辑
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8003e8a:	2600      	movs	r6, #0
    reg_t Output_Fmap_Row = ((Layer_Para_Base *)Layers->Layer_Para_Base)->Output_Fmap_Row;
 8003e8c:	e9d3 0203 	ldrd	r0, r2, [r3, #12]
{
 8003e90:	ed2d 8b06 	vpush	{d8-d10}
 8003e94:	fb07 f102 	mul.w	r1, r7, r2
 8003e98:	b085      	sub	sp, #20
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8003e9a:	46b3      	mov	fp, r6
 8003e9c:	4583      	cmp	fp, r0
 8003e9e:	db4f      	blt.n	8003f40 <OpenNNA_Operator_tanh+0xc0>
        }
    }
#elif (CHW==0)//HWC模式
    //在此实现HWC的内存访问逻辑
#endif
 8003ea0:	b005      	add	sp, #20
 8003ea2:	ecbd 8b06 	vpop	{d8-d10}
 8003ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                (exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]) -\
 8003eaa:	69a3      	ldr	r3, [r4, #24]
            for (int k = 0; k < Output_Fmap_Col; k++)
 8003eac:	f108 0801 	add.w	r8, r8, #1
 8003eb0:	9001      	str	r0, [sp, #4]
                (exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]) -\
 8003eb2:	442b      	add	r3, r5
 8003eb4:	ed93 0a00 	vldr	s0, [r3]
 8003eb8:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8003ebc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8003ec0:	f004 fc3a 	bl	8008738 <exp>
                exp(-((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k])) / \
 8003ec4:	69a3      	ldr	r3, [r4, #24]
                (exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]) -\
 8003ec6:	eeb0 9b40 	vmov.f64	d9, d0
                exp(-((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k])) / \
 8003eca:	442b      	add	r3, r5
 8003ecc:	ed93 0a00 	vldr	s0, [r3]
 8003ed0:	eeb1 0a40 	vneg.f32	s0, s0
 8003ed4:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8003ed8:	f004 fc2e 	bl	8008738 <exp>
                (exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]) +\
 8003edc:	69a3      	ldr	r3, [r4, #24]
                exp(-((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k])) / \
 8003ede:	eeb0 ab40 	vmov.f64	d10, d0
                (exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]) +\
 8003ee2:	442b      	add	r3, r5
 8003ee4:	ed93 0a00 	vldr	s0, [r3]
 8003ee8:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8003eec:	f004 fc24 	bl	8008738 <exp>
                exp(-((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]));
 8003ef0:	69a3      	ldr	r3, [r4, #24]
                (exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]) +\
 8003ef2:	eeb0 8b40 	vmov.f64	d8, d0
                exp(-((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]));
 8003ef6:	442b      	add	r3, r5
 8003ef8:	ed93 0a00 	vldr	s0, [r3]
 8003efc:	eeb1 0a40 	vneg.f32	s0, s0
 8003f00:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8003f04:	f004 fc18 	bl	8008738 <exp>
                (exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]) -\
 8003f08:	ee39 9b4a 	vsub.f64	d9, d9, d10
                (exp(((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k]) +\
 8003f0c:	ee38 0b00 	vadd.f64	d0, d8, d0
                ((data_t *)Layers->Output_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k] = \
 8003f10:	69e3      	ldr	r3, [r4, #28]
 8003f12:	9801      	ldr	r0, [sp, #4]
 8003f14:	442b      	add	r3, r5
 8003f16:	3504      	adds	r5, #4
                exp(-((data_t *)Layers->Input_Feature_Map)[(i * Output_Fmap_Row * Output_Fmap_Col) + (j * Output_Fmap_Col) + k])) / \
 8003f18:	ee89 7b00 	vdiv.f64	d7, d9, d0
 8003f1c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8003f20:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8003f24:	ed83 7a00 	vstr	s14, [r3]
            for (int k = 0; k < Output_Fmap_Col; k++)
 8003f28:	45b8      	cmp	r8, r7
 8003f2a:	dbbe      	blt.n	8003eaa <OpenNNA_Operator_tanh+0x2a>
        for (int j = 0; j < Output_Fmap_Row; j++)
 8003f2c:	f10a 0a01 	add.w	sl, sl, #1
 8003f30:	44b9      	add	r9, r7
 8003f32:	4592      	cmp	sl, r2
 8003f34:	da08      	bge.n	8003f48 <OpenNNA_Operator_tanh+0xc8>
 8003f36:	ea4f 0589 	mov.w	r5, r9, lsl #2
            for (int k = 0; k < Output_Fmap_Col; k++)
 8003f3a:	f04f 0800 	mov.w	r8, #0
 8003f3e:	e7f3      	b.n	8003f28 <OpenNNA_Operator_tanh+0xa8>
 8003f40:	46b1      	mov	r9, r6
        for (int j = 0; j < Output_Fmap_Row; j++)
 8003f42:	f04f 0a00 	mov.w	sl, #0
 8003f46:	e7f4      	b.n	8003f32 <OpenNNA_Operator_tanh+0xb2>
    for (int i = 0; i < Output_Fmap_Channel; i++)
 8003f48:	f10b 0b01 	add.w	fp, fp, #1
 8003f4c:	440e      	add	r6, r1
 8003f4e:	e7a5      	b.n	8003e9c <OpenNNA_Operator_tanh+0x1c>

08003f50 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f50:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f54:	b92b      	cbnz	r3, 8003f62 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f56:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <osKernelInitialize+0x20>)
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	b928      	cbnz	r0, 8003f68 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f60:	4770      	bx	lr
    stat = osErrorISR;
 8003f62:	f06f 0005 	mvn.w	r0, #5
 8003f66:	4770      	bx	lr
    } else {
      stat = osError;
 8003f68:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	24000560 	.word	0x24000560

08003f74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f74:	b510      	push	{r4, lr}
 8003f76:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f7a:	b95c      	cbnz	r4, 8003f94 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8003f7c:	4b08      	ldr	r3, [pc, #32]	; (8003fa0 <osKernelStart+0x2c>)
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	2a01      	cmp	r2, #1
 8003f82:	d10a      	bne.n	8003f9a <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f84:	4a07      	ldr	r2, [pc, #28]	; (8003fa4 <osKernelStart+0x30>)
 8003f86:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003f88:	2202      	movs	r2, #2
 8003f8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003f8c:	f000 fd7a 	bl	8004a84 <vTaskStartScheduler>
      stat = osOK;
 8003f90:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8003f92:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8003f94:	f06f 0005 	mvn.w	r0, #5
 8003f98:	e7fb      	b.n	8003f92 <osKernelStart+0x1e>
      stat = osError;
 8003f9a:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8003f9e:	e7f8      	b.n	8003f92 <osKernelStart+0x1e>
 8003fa0:	24000560 	.word	0x24000560
 8003fa4:	e000ed00 	.word	0xe000ed00

08003fa8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003faa:	4614      	mov	r4, r2
 8003fac:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003fae:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003fb0:	460b      	mov	r3, r1
  hTask = NULL;
 8003fb2:	9205      	str	r2, [sp, #20]
 8003fb4:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8003fb8:	b9d2      	cbnz	r2, 8003ff0 <osThreadNew+0x48>
 8003fba:	b1c8      	cbz	r0, 8003ff0 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8003fbc:	2c00      	cmp	r4, #0
 8003fbe:	d02f      	beq.n	8004020 <osThreadNew+0x78>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8003fc0:	69a5      	ldr	r5, [r4, #24]
 8003fc2:	2d00      	cmp	r5, #0
 8003fc4:	bf08      	it	eq
 8003fc6:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003fc8:	1e69      	subs	r1, r5, #1
 8003fca:	46ac      	mov	ip, r5
 8003fcc:	2937      	cmp	r1, #55	; 0x37
 8003fce:	d82b      	bhi.n	8004028 <osThreadNew+0x80>
 8003fd0:	6861      	ldr	r1, [r4, #4]
 8003fd2:	07c9      	lsls	r1, r1, #31
 8003fd4:	d428      	bmi.n	8004028 <osThreadNew+0x80>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8003fd6:	6966      	ldr	r6, [r4, #20]
 8003fd8:	b16e      	cbz	r6, 8003ff6 <osThreadNew+0x4e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003fda:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 8003fdc:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003fde:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 8003fe2:	b157      	cbz	r7, 8003ffa <osThreadNew+0x52>
 8003fe4:	f1be 0f5b 	cmp.w	lr, #91	; 0x5b
 8003fe8:	d902      	bls.n	8003ff0 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003fea:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003fec:	b104      	cbz	r4, 8003ff0 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003fee:	b9ee      	cbnz	r6, 800402c <osThreadNew+0x84>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003ff0:	9805      	ldr	r0, [sp, #20]
}
 8003ff2:	b007      	add	sp, #28
 8003ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8003ff6:	2280      	movs	r2, #128	; 0x80
 8003ff8:	e7f0      	b.n	8003fdc <osThreadNew+0x34>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ffa:	f1be 0f00 	cmp.w	lr, #0
 8003ffe:	d1f7      	bne.n	8003ff0 <osThreadNew+0x48>
      if (mem == 0) {
 8004000:	6924      	ldr	r4, [r4, #16]
 8004002:	2c00      	cmp	r4, #0
 8004004:	d1f4      	bne.n	8003ff0 <osThreadNew+0x48>
 8004006:	460c      	mov	r4, r1
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004008:	a905      	add	r1, sp, #20
 800400a:	b292      	uxth	r2, r2
 800400c:	e9cd c100 	strd	ip, r1, [sp]
 8004010:	4621      	mov	r1, r4
 8004012:	f000 fd0a 	bl	8004a2a <xTaskCreate>
 8004016:	2801      	cmp	r0, #1
            hTask = NULL;
 8004018:	bf1c      	itt	ne
 800401a:	2300      	movne	r3, #0
 800401c:	9305      	strne	r3, [sp, #20]
 800401e:	e7e7      	b.n	8003ff0 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;
 8004020:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8004024:	2280      	movs	r2, #128	; 0x80
 8004026:	e7ef      	b.n	8004008 <osThreadNew+0x60>
        return (NULL);
 8004028:	4610      	mov	r0, r2
 800402a:	e7e2      	b.n	8003ff2 <osThreadNew+0x4a>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800402c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8004030:	9500      	str	r5, [sp, #0]
 8004032:	f000 fcc2 	bl	80049ba <xTaskCreateStatic>
 8004036:	9005      	str	r0, [sp, #20]
 8004038:	e7da      	b.n	8003ff0 <osThreadNew+0x48>
	...

0800403c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800403c:	4b03      	ldr	r3, [pc, #12]	; (800404c <vApplicationGetIdleTaskMemory+0x10>)
 800403e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004040:	4b03      	ldr	r3, [pc, #12]	; (8004050 <vApplicationGetIdleTaskMemory+0x14>)
 8004042:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004044:	2380      	movs	r3, #128	; 0x80
 8004046:	6013      	str	r3, [r2, #0]
}
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	24000504 	.word	0x24000504
 8004050:	24000304 	.word	0x24000304

08004054 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004054:	4b03      	ldr	r3, [pc, #12]	; (8004064 <vApplicationGetTimerTaskMemory+0x10>)
 8004056:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004058:	4b03      	ldr	r3, [pc, #12]	; (8004068 <vApplicationGetTimerTaskMemory+0x14>)
 800405a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800405c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004060:	6013      	str	r3, [r2, #0]
}
 8004062:	4770      	bx	lr
 8004064:	24000964 	.word	0x24000964
 8004068:	24000564 	.word	0x24000564

0800406c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800406c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004070:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004074:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004076:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004078:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004080:	4770      	bx	lr

08004082 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004082:	2300      	movs	r3, #0
 8004084:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004086:	4770      	bx	lr

08004088 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004088:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800408a:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800408c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800408e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004094:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004096:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8004098:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800409a:	3301      	adds	r3, #1
 800409c:	6003      	str	r3, [r0, #0]
}
 800409e:	4770      	bx	lr

080040a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040a0:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80040a2:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80040a4:	1c63      	adds	r3, r4, #1
 80040a6:	d10a      	bne.n	80040be <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80040a8:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040ae:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80040b0:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80040b2:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80040b4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80040b6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80040b8:	3301      	adds	r3, #1
 80040ba:	6003      	str	r3, [r0, #0]
}
 80040bc:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80040be:	f100 0208 	add.w	r2, r0, #8
 80040c2:	4613      	mov	r3, r2
 80040c4:	6852      	ldr	r2, [r2, #4]
 80040c6:	6815      	ldr	r5, [r2, #0]
 80040c8:	42a5      	cmp	r5, r4
 80040ca:	d9fa      	bls.n	80040c2 <vListInsert+0x22>
 80040cc:	e7ed      	b.n	80040aa <vListInsert+0xa>

080040ce <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80040ce:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040d0:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 80040d4:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040d6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040d8:	6859      	ldr	r1, [r3, #4]
 80040da:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040dc:	bf08      	it	eq
 80040de:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80040e0:	2200      	movs	r2, #0
 80040e2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	3a01      	subs	r2, #1
 80040e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040ea:	6818      	ldr	r0, [r3, #0]
}
 80040ec:	4770      	bx	lr

080040ee <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80040ee:	b510      	push	{r4, lr}
 80040f0:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040f2:	f001 f9cf 	bl	8005494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80040f6:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80040f8:	f001 f9ec 	bl	80054d4 <vPortExitCritical>

	return xReturn;
}
 80040fc:	fab4 f084 	clz	r0, r4
 8004100:	0940      	lsrs	r0, r0, #5
 8004102:	bd10      	pop	{r4, pc}

08004104 <prvCopyDataToQueue>:
{
 8004104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004106:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004108:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800410a:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800410c:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800410e:	b952      	cbnz	r2, 8004126 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004110:	6807      	ldr	r7, [r0, #0]
 8004112:	bb47      	cbnz	r7, 8004166 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004114:	6880      	ldr	r0, [r0, #8]
 8004116:	f000 ff27 	bl	8004f68 <xTaskPriorityDisinherit>
 800411a:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800411c:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800411e:	3601      	adds	r6, #1
}
 8004120:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004122:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8004124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8004126:	b965      	cbnz	r5, 8004142 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004128:	6840      	ldr	r0, [r0, #4]
 800412a:	f001 fc2b 	bl	8005984 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800412e:	6863      	ldr	r3, [r4, #4]
 8004130:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004132:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004134:	68a2      	ldr	r2, [r4, #8]
 8004136:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004138:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800413a:	d3f0      	bcc.n	800411e <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800413c:	6823      	ldr	r3, [r4, #0]
 800413e:	6063      	str	r3, [r4, #4]
 8004140:	e7ed      	b.n	800411e <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004142:	68c0      	ldr	r0, [r0, #12]
 8004144:	f001 fc1e 	bl	8005984 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004148:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800414a:	68e3      	ldr	r3, [r4, #12]
 800414c:	4251      	negs	r1, r2
 800414e:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004150:	6822      	ldr	r2, [r4, #0]
 8004152:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004154:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004156:	bf3e      	ittt	cc
 8004158:	68a3      	ldrcc	r3, [r4, #8]
 800415a:	185b      	addcc	r3, r3, r1
 800415c:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800415e:	2d02      	cmp	r5, #2
 8004160:	d101      	bne.n	8004166 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004162:	b116      	cbz	r6, 800416a <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8004164:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8004166:	2500      	movs	r5, #0
 8004168:	e7d9      	b.n	800411e <prvCopyDataToQueue+0x1a>
 800416a:	4635      	mov	r5, r6
 800416c:	e7d7      	b.n	800411e <prvCopyDataToQueue+0x1a>

0800416e <prvCopyDataFromQueue>:
{
 800416e:	4603      	mov	r3, r0
 8004170:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8004174:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004176:	b162      	cbz	r2, 8004192 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004178:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800417a:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800417c:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800417e:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004180:	60dc      	str	r4, [r3, #12]
}
 8004182:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004186:	bf24      	itt	cs
 8004188:	6819      	ldrcs	r1, [r3, #0]
 800418a:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800418c:	68d9      	ldr	r1, [r3, #12]
 800418e:	f001 bbf9 	b.w	8005984 <memcpy>
}
 8004192:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004196:	4770      	bx	lr

08004198 <prvUnlockQueue>:
{
 8004198:	b570      	push	{r4, r5, r6, lr}
 800419a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800419c:	f001 f97a 	bl	8005494 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80041a0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041a4:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80041a8:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041aa:	2d00      	cmp	r5, #0
 80041ac:	dc14      	bgt.n	80041d8 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80041ae:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041b0:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 80041b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80041b8:	f001 f98c 	bl	80054d4 <vPortExitCritical>
	taskENTER_CRITICAL();
 80041bc:	f001 f96a 	bl	8005494 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80041c0:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80041c4:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041c6:	2d00      	cmp	r5, #0
 80041c8:	dc12      	bgt.n	80041f0 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80041ca:	23ff      	movs	r3, #255	; 0xff
 80041cc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80041d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80041d4:	f001 b97e 	b.w	80054d4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0e7      	beq.n	80041ae <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041de:	4630      	mov	r0, r6
 80041e0:	f000 fe20 	bl	8004e24 <xTaskRemoveFromEventList>
 80041e4:	b108      	cbz	r0, 80041ea <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80041e6:	f000 fea9 	bl	8004f3c <vTaskMissedYield>
			--cTxLock;
 80041ea:	3d01      	subs	r5, #1
 80041ec:	b26d      	sxtb	r5, r5
 80041ee:	e7dc      	b.n	80041aa <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041f0:	6923      	ldr	r3, [r4, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0e9      	beq.n	80041ca <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041f6:	4630      	mov	r0, r6
 80041f8:	f000 fe14 	bl	8004e24 <xTaskRemoveFromEventList>
 80041fc:	b108      	cbz	r0, 8004202 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80041fe:	f000 fe9d 	bl	8004f3c <vTaskMissedYield>
				--cRxLock;
 8004202:	3d01      	subs	r5, #1
 8004204:	b26d      	sxtb	r5, r5
 8004206:	e7de      	b.n	80041c6 <prvUnlockQueue+0x2e>

08004208 <xQueueGenericReset>:
{
 8004208:	b538      	push	{r3, r4, r5, lr}
 800420a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800420c:	4604      	mov	r4, r0
 800420e:	b940      	cbnz	r0, 8004222 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	e7fe      	b.n	8004220 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8004222:	f001 f937 	bl	8005494 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004226:	6822      	ldr	r2, [r4, #0]
 8004228:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800422c:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800422e:	434b      	muls	r3, r1
 8004230:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004232:	1a5b      	subs	r3, r3, r1
 8004234:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004236:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004238:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800423a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800423c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800423e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8004240:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004244:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8004248:	b9a5      	cbnz	r5, 8004274 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800424a:	6923      	ldr	r3, [r4, #16]
 800424c:	b173      	cbz	r3, 800426c <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800424e:	f104 0010 	add.w	r0, r4, #16
 8004252:	f000 fde7 	bl	8004e24 <xTaskRemoveFromEventList>
 8004256:	b148      	cbz	r0, 800426c <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8004258:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800425c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004260:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800426c:	f001 f932 	bl	80054d4 <vPortExitCritical>
}
 8004270:	2001      	movs	r0, #1
 8004272:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004274:	f104 0010 	add.w	r0, r4, #16
 8004278:	f7ff fef8 	bl	800406c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800427c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004280:	f7ff fef4 	bl	800406c <vListInitialise>
 8004284:	e7f2      	b.n	800426c <xQueueGenericReset+0x64>

08004286 <xQueueGenericCreateStatic>:
	{
 8004286:	b513      	push	{r0, r1, r4, lr}
 8004288:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800428a:	b940      	cbnz	r0, 800429e <xQueueGenericCreateStatic+0x18>
 800428c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004290:	f383 8811 	msr	BASEPRI, r3
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	e7fe      	b.n	800429c <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 800429e:	b943      	cbnz	r3, 80042b2 <xQueueGenericCreateStatic+0x2c>
 80042a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	e7fe      	b.n	80042b0 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80042b2:	b14a      	cbz	r2, 80042c8 <xQueueGenericCreateStatic+0x42>
 80042b4:	b991      	cbnz	r1, 80042dc <xQueueGenericCreateStatic+0x56>
 80042b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ba:	f383 8811 	msr	BASEPRI, r3
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f3bf 8f4f 	dsb	sy
 80042c6:	e7fe      	b.n	80042c6 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80042c8:	b141      	cbz	r1, 80042dc <xQueueGenericCreateStatic+0x56>
 80042ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	e7fe      	b.n	80042da <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80042dc:	2350      	movs	r3, #80	; 0x50
 80042de:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80042e0:	9b01      	ldr	r3, [sp, #4]
 80042e2:	2b50      	cmp	r3, #80	; 0x50
 80042e4:	d008      	beq.n	80042f8 <xQueueGenericCreateStatic+0x72>
 80042e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ea:	f383 8811 	msr	BASEPRI, r3
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	f3bf 8f4f 	dsb	sy
 80042f6:	e7fe      	b.n	80042f6 <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80042f8:	2900      	cmp	r1, #0
 80042fa:	bf08      	it	eq
 80042fc:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80042fe:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004300:	2301      	movs	r3, #1
 8004302:	6022      	str	r2, [r4, #0]
 8004304:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8004308:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800430c:	4619      	mov	r1, r3
 800430e:	4620      	mov	r0, r4
 8004310:	f7ff ff7a 	bl	8004208 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8004314:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 8004318:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800431a:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 800431e:	b002      	add	sp, #8
 8004320:	bd10      	pop	{r4, pc}

08004322 <xQueueGenericSend>:
{
 8004322:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004326:	b085      	sub	sp, #20
 8004328:	4688      	mov	r8, r1
 800432a:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800432c:	4604      	mov	r4, r0
{
 800432e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8004330:	b940      	cbnz	r0, 8004344 <xQueueGenericSend+0x22>
 8004332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	e7fe      	b.n	8004342 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004344:	b951      	cbnz	r1, 800435c <xQueueGenericSend+0x3a>
 8004346:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004348:	b143      	cbz	r3, 800435c <xQueueGenericSend+0x3a>
 800434a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	e7fe      	b.n	800435a <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800435c:	2f02      	cmp	r7, #2
 800435e:	d10b      	bne.n	8004378 <xQueueGenericSend+0x56>
 8004360:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004362:	2b01      	cmp	r3, #1
 8004364:	d008      	beq.n	8004378 <xQueueGenericSend+0x56>
 8004366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	e7fe      	b.n	8004376 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004378:	f000 fde6 	bl	8004f48 <xTaskGetSchedulerState>
 800437c:	4606      	mov	r6, r0
 800437e:	b950      	cbnz	r0, 8004396 <xQueueGenericSend+0x74>
 8004380:	9b01      	ldr	r3, [sp, #4]
 8004382:	b14b      	cbz	r3, 8004398 <xQueueGenericSend+0x76>
 8004384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	e7fe      	b.n	8004394 <xQueueGenericSend+0x72>
 8004396:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004398:	f04f 0900 	mov.w	r9, #0
 800439c:	e037      	b.n	800440e <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 800439e:	9d01      	ldr	r5, [sp, #4]
 80043a0:	b91d      	cbnz	r5, 80043aa <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 80043a2:	f001 f897 	bl	80054d4 <vPortExitCritical>
			return errQUEUE_FULL;
 80043a6:	2000      	movs	r0, #0
 80043a8:	e052      	b.n	8004450 <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 80043aa:	b916      	cbnz	r6, 80043b2 <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043ac:	a802      	add	r0, sp, #8
 80043ae:	f000 fd7d 	bl	8004eac <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80043b2:	f001 f88f 	bl	80054d4 <vPortExitCritical>
		vTaskSuspendAll();
 80043b6:	f000 fbab 	bl	8004b10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043ba:	f001 f86b 	bl	8005494 <vPortEnterCritical>
 80043be:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80043c2:	2bff      	cmp	r3, #255	; 0xff
 80043c4:	d101      	bne.n	80043ca <xQueueGenericSend+0xa8>
 80043c6:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 80043ca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80043ce:	2bff      	cmp	r3, #255	; 0xff
 80043d0:	d101      	bne.n	80043d6 <xQueueGenericSend+0xb4>
 80043d2:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 80043d6:	f001 f87d 	bl	80054d4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043da:	a901      	add	r1, sp, #4
 80043dc:	a802      	add	r0, sp, #8
 80043de:	f000 fd71 	bl	8004ec4 <xTaskCheckForTimeOut>
 80043e2:	2800      	cmp	r0, #0
 80043e4:	d14a      	bne.n	800447c <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043e6:	f001 f855 	bl	8005494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80043ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80043ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d131      	bne.n	8004456 <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80043f2:	f001 f86f 	bl	80054d4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80043f6:	9901      	ldr	r1, [sp, #4]
 80043f8:	f104 0010 	add.w	r0, r4, #16
 80043fc:	f000 fcda 	bl	8004db4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004400:	4620      	mov	r0, r4
 8004402:	f7ff fec9 	bl	8004198 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004406:	f000 fc27 	bl	8004c58 <xTaskResumeAll>
 800440a:	b360      	cbz	r0, 8004466 <xQueueGenericSend+0x144>
 800440c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800440e:	f001 f841 	bl	8005494 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004412:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004414:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004416:	429a      	cmp	r2, r3
 8004418:	d301      	bcc.n	800441e <xQueueGenericSend+0xfc>
 800441a:	2f02      	cmp	r7, #2
 800441c:	d1bf      	bne.n	800439e <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800441e:	463a      	mov	r2, r7
 8004420:	4641      	mov	r1, r8
 8004422:	4620      	mov	r0, r4
 8004424:	f7ff fe6e 	bl	8004104 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004428:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800442a:	b11b      	cbz	r3, 8004434 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800442c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004430:	f000 fcf8 	bl	8004e24 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8004434:	b148      	cbz	r0, 800444a <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 8004436:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800443a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800443e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800444a:	f001 f843 	bl	80054d4 <vPortExitCritical>
				return pdPASS;
 800444e:	2001      	movs	r0, #1
}
 8004450:	b005      	add	sp, #20
 8004452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8004456:	f001 f83d 	bl	80054d4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800445a:	4620      	mov	r0, r4
 800445c:	f7ff fe9c 	bl	8004198 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004460:	f000 fbfa 	bl	8004c58 <xTaskResumeAll>
 8004464:	e7d2      	b.n	800440c <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8004466:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800446a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800446e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004472:	f3bf 8f4f 	dsb	sy
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	e7c7      	b.n	800440c <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 800447c:	4620      	mov	r0, r4
 800447e:	f7ff fe8b 	bl	8004198 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004482:	f000 fbe9 	bl	8004c58 <xTaskResumeAll>
 8004486:	e78e      	b.n	80043a6 <xQueueGenericSend+0x84>

08004488 <xQueueGenericSendFromISR>:
{
 8004488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800448c:	4689      	mov	r9, r1
 800448e:	4690      	mov	r8, r2
 8004490:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004492:	4604      	mov	r4, r0
 8004494:	b940      	cbnz	r0, 80044a8 <xQueueGenericSendFromISR+0x20>
 8004496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	e7fe      	b.n	80044a6 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044a8:	b951      	cbnz	r1, 80044c0 <xQueueGenericSendFromISR+0x38>
 80044aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80044ac:	b143      	cbz	r3, 80044c0 <xQueueGenericSendFromISR+0x38>
 80044ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	e7fe      	b.n	80044be <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044c0:	2f02      	cmp	r7, #2
 80044c2:	d10b      	bne.n	80044dc <xQueueGenericSendFromISR+0x54>
 80044c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d008      	beq.n	80044dc <xQueueGenericSendFromISR+0x54>
 80044ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	e7fe      	b.n	80044da <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044dc:	f001 f8f0 	bl	80056c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80044e0:	f3ef 8611 	mrs	r6, BASEPRI
 80044e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80044f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d301      	bcc.n	8004500 <xQueueGenericSendFromISR+0x78>
 80044fc:	2f02      	cmp	r7, #2
 80044fe:	d123      	bne.n	8004548 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004500:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004504:	463a      	mov	r2, r7
 8004506:	4649      	mov	r1, r9
 8004508:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800450a:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800450c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800450e:	f7ff fdf9 	bl	8004104 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004512:	1c6b      	adds	r3, r5, #1
 8004514:	d113      	bne.n	800453e <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004516:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004518:	b90b      	cbnz	r3, 800451e <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 800451a:	2001      	movs	r0, #1
 800451c:	e00b      	b.n	8004536 <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800451e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004522:	f000 fc7f 	bl	8004e24 <xTaskRemoveFromEventList>
 8004526:	2800      	cmp	r0, #0
 8004528:	d0f7      	beq.n	800451a <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 800452a:	f1b8 0f00 	cmp.w	r8, #0
 800452e:	d0f4      	beq.n	800451a <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004530:	2001      	movs	r0, #1
 8004532:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004536:	f386 8811 	msr	BASEPRI, r6
}
 800453a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800453e:	3501      	adds	r5, #1
 8004540:	b26d      	sxtb	r5, r5
 8004542:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8004546:	e7e8      	b.n	800451a <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 8004548:	2000      	movs	r0, #0
 800454a:	e7f4      	b.n	8004536 <xQueueGenericSendFromISR+0xae>

0800454c <xQueueReceive>:
{
 800454c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004550:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8004552:	4604      	mov	r4, r0
{
 8004554:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004556:	b940      	cbnz	r0, 800456a <xQueueReceive+0x1e>
	__asm volatile
 8004558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455c:	f383 8811 	msr	BASEPRI, r3
 8004560:	f3bf 8f6f 	isb	sy
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	e7fe      	b.n	8004568 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800456a:	b951      	cbnz	r1, 8004582 <xQueueReceive+0x36>
 800456c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800456e:	b143      	cbz	r3, 8004582 <xQueueReceive+0x36>
 8004570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	e7fe      	b.n	8004580 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004582:	f000 fce1 	bl	8004f48 <xTaskGetSchedulerState>
 8004586:	4606      	mov	r6, r0
 8004588:	b950      	cbnz	r0, 80045a0 <xQueueReceive+0x54>
 800458a:	9b01      	ldr	r3, [sp, #4]
 800458c:	b14b      	cbz	r3, 80045a2 <xQueueReceive+0x56>
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	e7fe      	b.n	800459e <xQueueReceive+0x52>
 80045a0:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80045a2:	f04f 0800 	mov.w	r8, #0
 80045a6:	e03d      	b.n	8004624 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 80045a8:	9d01      	ldr	r5, [sp, #4]
 80045aa:	b91d      	cbnz	r5, 80045b4 <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 80045ac:	f000 ff92 	bl	80054d4 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80045b0:	2000      	movs	r0, #0
 80045b2:	e056      	b.n	8004662 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 80045b4:	b916      	cbnz	r6, 80045bc <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045b6:	a802      	add	r0, sp, #8
 80045b8:	f000 fc78 	bl	8004eac <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80045bc:	f000 ff8a 	bl	80054d4 <vPortExitCritical>
		vTaskSuspendAll();
 80045c0:	f000 faa6 	bl	8004b10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045c4:	f000 ff66 	bl	8005494 <vPortEnterCritical>
 80045c8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80045cc:	2bff      	cmp	r3, #255	; 0xff
 80045ce:	d101      	bne.n	80045d4 <xQueueReceive+0x88>
 80045d0:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 80045d4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80045d8:	2bff      	cmp	r3, #255	; 0xff
 80045da:	d101      	bne.n	80045e0 <xQueueReceive+0x94>
 80045dc:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 80045e0:	f000 ff78 	bl	80054d4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045e4:	a901      	add	r1, sp, #4
 80045e6:	a802      	add	r0, sp, #8
 80045e8:	f000 fc6c 	bl	8004ec4 <xTaskCheckForTimeOut>
 80045ec:	2800      	cmp	r0, #0
 80045ee:	d141      	bne.n	8004674 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045f0:	4620      	mov	r0, r4
 80045f2:	f7ff fd7c 	bl	80040ee <prvIsQueueEmpty>
 80045f6:	b3b8      	cbz	r0, 8004668 <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045f8:	9901      	ldr	r1, [sp, #4]
 80045fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80045fe:	f000 fbd9 	bl	8004db4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004602:	4620      	mov	r0, r4
 8004604:	f7ff fdc8 	bl	8004198 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004608:	f000 fb26 	bl	8004c58 <xTaskResumeAll>
 800460c:	b948      	cbnz	r0, 8004622 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 800460e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004616:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004624:	f000 ff36 	bl	8005494 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004628:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800462a:	2d00      	cmp	r5, #0
 800462c:	d0bc      	beq.n	80045a8 <xQueueReceive+0x5c>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800462e:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004630:	4639      	mov	r1, r7
 8004632:	4620      	mov	r0, r4
 8004634:	f7ff fd9b 	bl	800416e <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004638:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800463a:	6923      	ldr	r3, [r4, #16]
 800463c:	b173      	cbz	r3, 800465c <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800463e:	f104 0010 	add.w	r0, r4, #16
 8004642:	f000 fbef 	bl	8004e24 <xTaskRemoveFromEventList>
 8004646:	b148      	cbz	r0, 800465c <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 8004648:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800464c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004650:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800465c:	f000 ff3a 	bl	80054d4 <vPortExitCritical>
				return pdPASS;
 8004660:	2001      	movs	r0, #1
}
 8004662:	b004      	add	sp, #16
 8004664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8004668:	4620      	mov	r0, r4
 800466a:	f7ff fd95 	bl	8004198 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800466e:	f000 faf3 	bl	8004c58 <xTaskResumeAll>
 8004672:	e7d6      	b.n	8004622 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 8004674:	4620      	mov	r0, r4
 8004676:	f7ff fd8f 	bl	8004198 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800467a:	f000 faed 	bl	8004c58 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800467e:	4620      	mov	r0, r4
 8004680:	f7ff fd35 	bl	80040ee <prvIsQueueEmpty>
 8004684:	2800      	cmp	r0, #0
 8004686:	d0cc      	beq.n	8004622 <xQueueReceive+0xd6>
 8004688:	e792      	b.n	80045b0 <xQueueReceive+0x64>
	...

0800468c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800468c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800468e:	4a07      	ldr	r2, [pc, #28]	; (80046ac <vQueueAddToRegistry+0x20>)
	{
 8004690:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004692:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8004696:	b92c      	cbnz	r4, 80046a4 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004698:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800469c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80046a0:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80046a2:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046a4:	3301      	adds	r3, #1
 80046a6:	2b08      	cmp	r3, #8
 80046a8:	d1f3      	bne.n	8004692 <vQueueAddToRegistry+0x6>
 80046aa:	e7fa      	b.n	80046a2 <vQueueAddToRegistry+0x16>
 80046ac:	240009c0 	.word	0x240009c0

080046b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046b0:	b570      	push	{r4, r5, r6, lr}
 80046b2:	4604      	mov	r4, r0
 80046b4:	460d      	mov	r5, r1
 80046b6:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80046b8:	f000 feec 	bl	8005494 <vPortEnterCritical>
 80046bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80046c0:	2bff      	cmp	r3, #255	; 0xff
 80046c2:	d102      	bne.n	80046ca <vQueueWaitForMessageRestricted+0x1a>
 80046c4:	2300      	movs	r3, #0
 80046c6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80046ca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80046ce:	2bff      	cmp	r3, #255	; 0xff
 80046d0:	d102      	bne.n	80046d8 <vQueueWaitForMessageRestricted+0x28>
 80046d2:	2300      	movs	r3, #0
 80046d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046d8:	f000 fefc 	bl	80054d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80046dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046de:	b92b      	cbnz	r3, 80046ec <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80046e0:	4632      	mov	r2, r6
 80046e2:	4629      	mov	r1, r5
 80046e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80046e8:	f000 fb7e 	bl	8004de8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80046ec:	4620      	mov	r0, r4
	}
 80046ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80046f2:	f7ff bd51 	b.w	8004198 <prvUnlockQueue>
	...

080046f8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80046f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046fc:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80046fe:	f000 fec9 	bl	8005494 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004702:	4b2f      	ldr	r3, [pc, #188]	; (80047c0 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8004704:	4e2f      	ldr	r6, [pc, #188]	; (80047c4 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	4f2f      	ldr	r7, [pc, #188]	; (80047c8 <prvAddNewTaskToReadyList+0xd0>)
 800470a:	3201      	adds	r2, #1
 800470c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800470e:	6835      	ldr	r5, [r6, #0]
 8004710:	2d00      	cmp	r5, #0
 8004712:	d14a      	bne.n	80047aa <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004714:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d11f      	bne.n	800475c <prvAddNewTaskToReadyList+0x64>
 800471c:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800471e:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004720:	4640      	mov	r0, r8
 8004722:	f7ff fca3 	bl	800406c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004726:	f108 0814 	add.w	r8, r8, #20
 800472a:	2d38      	cmp	r5, #56	; 0x38
 800472c:	d1f7      	bne.n	800471e <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800472e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80047f0 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8004732:	4d26      	ldr	r5, [pc, #152]	; (80047cc <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 8004734:	4640      	mov	r0, r8
 8004736:	f7ff fc99 	bl	800406c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800473a:	4628      	mov	r0, r5
 800473c:	f7ff fc96 	bl	800406c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004740:	4823      	ldr	r0, [pc, #140]	; (80047d0 <prvAddNewTaskToReadyList+0xd8>)
 8004742:	f7ff fc93 	bl	800406c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004746:	4823      	ldr	r0, [pc, #140]	; (80047d4 <prvAddNewTaskToReadyList+0xdc>)
 8004748:	f7ff fc90 	bl	800406c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800474c:	4822      	ldr	r0, [pc, #136]	; (80047d8 <prvAddNewTaskToReadyList+0xe0>)
 800474e:	f7ff fc8d 	bl	800406c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004752:	4b22      	ldr	r3, [pc, #136]	; (80047dc <prvAddNewTaskToReadyList+0xe4>)
 8004754:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004758:	4b21      	ldr	r3, [pc, #132]	; (80047e0 <prvAddNewTaskToReadyList+0xe8>)
 800475a:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800475c:	4a21      	ldr	r2, [pc, #132]	; (80047e4 <prvAddNewTaskToReadyList+0xec>)
 800475e:	6813      	ldr	r3, [r2, #0]
 8004760:	3301      	adds	r3, #1
 8004762:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004764:	4a20      	ldr	r2, [pc, #128]	; (80047e8 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004766:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8004768:	6811      	ldr	r1, [r2, #0]
 800476a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800476c:	428b      	cmp	r3, r1
 800476e:	d900      	bls.n	8004772 <prvAddNewTaskToReadyList+0x7a>
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	2014      	movs	r0, #20
 8004774:	1d21      	adds	r1, r4, #4
 8004776:	fb00 7003 	mla	r0, r0, r3, r7
 800477a:	f7ff fc85 	bl	8004088 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800477e:	f000 fea9 	bl	80054d4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004782:	4b1a      	ldr	r3, [pc, #104]	; (80047ec <prvAddNewTaskToReadyList+0xf4>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	b173      	cbz	r3, 80047a6 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004788:	6833      	ldr	r3, [r6, #0]
 800478a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800478c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800478e:	429a      	cmp	r2, r3
 8004790:	d209      	bcs.n	80047a6 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8004792:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800479a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	f3bf 8f6f 	isb	sy
}
 80047a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80047aa:	4b10      	ldr	r3, [pc, #64]	; (80047ec <prvAddNewTaskToReadyList+0xf4>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1d4      	bne.n	800475c <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80047b2:	6833      	ldr	r3, [r6, #0]
 80047b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d8cf      	bhi.n	800475c <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 80047bc:	6034      	str	r4, [r6, #0]
 80047be:	e7cd      	b.n	800475c <prvAddNewTaskToReadyList+0x64>
 80047c0:	24000e6c 	.word	0x24000e6c
 80047c4:	24000a00 	.word	0x24000a00
 80047c8:	24000a0c 	.word	0x24000a0c
 80047cc:	24000e94 	.word	0x24000e94
 80047d0:	24000eb4 	.word	0x24000eb4
 80047d4:	24000ee0 	.word	0x24000ee0
 80047d8:	24000ecc 	.word	0x24000ecc
 80047dc:	24000a04 	.word	0x24000a04
 80047e0:	24000a08 	.word	0x24000a08
 80047e4:	24000e78 	.word	0x24000e78
 80047e8:	24000e7c 	.word	0x24000e7c
 80047ec:	24000ec8 	.word	0x24000ec8
 80047f0:	24000e80 	.word	0x24000e80

080047f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047f6:	4b15      	ldr	r3, [pc, #84]	; (800484c <prvAddCurrentTaskToDelayedList+0x58>)
{
 80047f8:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047fa:	4e15      	ldr	r6, [pc, #84]	; (8004850 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 80047fc:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 80047fe:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004800:	6830      	ldr	r0, [r6, #0]
 8004802:	3004      	adds	r0, #4
 8004804:	f7ff fc63 	bl	80040ce <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004808:	1c63      	adds	r3, r4, #1
 800480a:	d107      	bne.n	800481c <prvAddCurrentTaskToDelayedList+0x28>
 800480c:	b137      	cbz	r7, 800481c <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800480e:	6831      	ldr	r1, [r6, #0]
 8004810:	4810      	ldr	r0, [pc, #64]	; (8004854 <prvAddCurrentTaskToDelayedList+0x60>)
 8004812:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004814:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004818:	f7ff bc36 	b.w	8004088 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800481c:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800481e:	6833      	ldr	r3, [r6, #0]
 8004820:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004822:	d307      	bcc.n	8004834 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004824:	4b0c      	ldr	r3, [pc, #48]	; (8004858 <prvAddCurrentTaskToDelayedList+0x64>)
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	6831      	ldr	r1, [r6, #0]
}
 800482a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800482e:	3104      	adds	r1, #4
 8004830:	f7ff bc36 	b.w	80040a0 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004834:	4b09      	ldr	r3, [pc, #36]	; (800485c <prvAddCurrentTaskToDelayedList+0x68>)
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	6831      	ldr	r1, [r6, #0]
 800483a:	3104      	adds	r1, #4
 800483c:	f7ff fc30 	bl	80040a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004840:	4b07      	ldr	r3, [pc, #28]	; (8004860 <prvAddCurrentTaskToDelayedList+0x6c>)
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	42a2      	cmp	r2, r4
 8004846:	d900      	bls.n	800484a <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8004848:	601c      	str	r4, [r3, #0]
}
 800484a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800484c:	24000ef4 	.word	0x24000ef4
 8004850:	24000a00 	.word	0x24000a00
 8004854:	24000ecc 	.word	0x24000ecc
 8004858:	24000a08 	.word	0x24000a08
 800485c:	24000a04 	.word	0x24000a04
 8004860:	24000ea8 	.word	0x24000ea8

08004864 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004864:	4a06      	ldr	r2, [pc, #24]	; (8004880 <prvResetNextTaskUnblockTime+0x1c>)
 8004866:	6813      	ldr	r3, [r2, #0]
 8004868:	6819      	ldr	r1, [r3, #0]
 800486a:	4b06      	ldr	r3, [pc, #24]	; (8004884 <prvResetNextTaskUnblockTime+0x20>)
 800486c:	b919      	cbnz	r1, 8004876 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800486e:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004872:	601a      	str	r2, [r3, #0]
}
 8004874:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004876:	6812      	ldr	r2, [r2, #0]
 8004878:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800487a:	68d2      	ldr	r2, [r2, #12]
 800487c:	6852      	ldr	r2, [r2, #4]
 800487e:	e7f8      	b.n	8004872 <prvResetNextTaskUnblockTime+0xe>
 8004880:	24000a04 	.word	0x24000a04
 8004884:	24000ea8 	.word	0x24000ea8

08004888 <prvDeleteTCB>:
	{
 8004888:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800488a:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
	{
 800488e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004890:	b93b      	cbnz	r3, 80048a2 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8004892:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8004894:	f000 fffe 	bl	8005894 <vPortFree>
				vPortFree( pxTCB );
 8004898:	4620      	mov	r0, r4
	}
 800489a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800489e:	f000 bff9 	b.w	8005894 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d0f9      	beq.n	800489a <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d008      	beq.n	80048bc <prvDeleteTCB+0x34>
 80048aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ae:	f383 8811 	msr	BASEPRI, r3
 80048b2:	f3bf 8f6f 	isb	sy
 80048b6:	f3bf 8f4f 	dsb	sy
 80048ba:	e7fe      	b.n	80048ba <prvDeleteTCB+0x32>
	}
 80048bc:	bd10      	pop	{r4, pc}
	...

080048c0 <prvIdleTask>:
{
 80048c0:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048c2:	4c13      	ldr	r4, [pc, #76]	; (8004910 <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048c4:	4f13      	ldr	r7, [pc, #76]	; (8004914 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 80048c6:	4d14      	ldr	r5, [pc, #80]	; (8004918 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	b973      	cbnz	r3, 80048ea <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048cc:	4b13      	ldr	r3, [pc, #76]	; (800491c <prvIdleTask+0x5c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d9f8      	bls.n	80048c6 <prvIdleTask+0x6>
				taskYIELD();
 80048d4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80048d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	e7ed      	b.n	80048c6 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 80048ea:	f000 fdd3 	bl	8005494 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048f2:	1d30      	adds	r0, r6, #4
 80048f4:	f7ff fbeb 	bl	80040ce <uxListRemove>
				--uxCurrentNumberOfTasks;
 80048f8:	682b      	ldr	r3, [r5, #0]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	3b01      	subs	r3, #1
 8004902:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8004904:	f000 fde6 	bl	80054d4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8004908:	4630      	mov	r0, r6
 800490a:	f7ff ffbd 	bl	8004888 <prvDeleteTCB>
 800490e:	e7db      	b.n	80048c8 <prvIdleTask+0x8>
 8004910:	24000e70 	.word	0x24000e70
 8004914:	24000ee0 	.word	0x24000ee0
 8004918:	24000e6c 	.word	0x24000e6c
 800491c:	24000a0c 	.word	0x24000a0c

08004920 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004924:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004928:	4606      	mov	r6, r0
 800492a:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800492c:	21a5      	movs	r1, #165	; 0xa5
 800492e:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004930:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004932:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004936:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800493a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800493c:	f001 f830 	bl	80059a0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004940:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004942:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004944:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 8004948:	b3a5      	cbz	r5, 80049b4 <prvInitialiseNewTask.constprop.0+0x94>
 800494a:	1e6b      	subs	r3, r5, #1
 800494c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8004950:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004952:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8004956:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800495a:	b108      	cbz	r0, 8004960 <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800495c:	42ab      	cmp	r3, r5
 800495e:	d1f8      	bne.n	8004952 <prvInitialiseNewTask.constprop.0+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004960:	2300      	movs	r3, #0
 8004962:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004966:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8004968:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800496c:	1d20      	adds	r0, r4, #4
 800496e:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8004970:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 8004974:	bf28      	it	cs
 8004976:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8004978:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800497a:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800497c:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004980:	f7ff fb7f 	bl	8004082 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004984:	f104 0018 	add.w	r0, r4, #24
 8004988:	f7ff fb7b 	bl	8004082 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800498c:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004990:	463a      	mov	r2, r7
 8004992:	4631      	mov	r1, r6
 8004994:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004996:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004998:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800499a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800499c:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049a0:	f000 fd4e 	bl	8005440 <pxPortInitialiseStack>
 80049a4:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80049a6:	f1b8 0f00 	cmp.w	r8, #0
 80049aa:	d001      	beq.n	80049b0 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80049ac:	f8c8 4000 	str.w	r4, [r8]
}
 80049b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80049b4:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 80049b8:	e7d5      	b.n	8004966 <prvInitialiseNewTask.constprop.0+0x46>

080049ba <xTaskCreateStatic>:
	{
 80049ba:	b570      	push	{r4, r5, r6, lr}
 80049bc:	b086      	sub	sp, #24
 80049be:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80049c2:	b945      	cbnz	r5, 80049d6 <xTaskCreateStatic+0x1c>
 80049c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	e7fe      	b.n	80049d4 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80049d6:	b944      	cbnz	r4, 80049ea <xTaskCreateStatic+0x30>
 80049d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	e7fe      	b.n	80049e8 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80049ea:	265c      	movs	r6, #92	; 0x5c
 80049ec:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80049ee:	9e05      	ldr	r6, [sp, #20]
 80049f0:	2e5c      	cmp	r6, #92	; 0x5c
 80049f2:	d008      	beq.n	8004a06 <xTaskCreateStatic+0x4c>
 80049f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	e7fe      	b.n	8004a04 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a06:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a08:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a0a:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a0c:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a10:	ad04      	add	r5, sp, #16
 8004a12:	9402      	str	r4, [sp, #8]
 8004a14:	9501      	str	r5, [sp, #4]
 8004a16:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004a18:	9500      	str	r5, [sp, #0]
 8004a1a:	f7ff ff81 	bl	8004920 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f7ff fe6a 	bl	80046f8 <prvAddNewTaskToReadyList>
	}
 8004a24:	9804      	ldr	r0, [sp, #16]
 8004a26:	b006      	add	sp, #24
 8004a28:	bd70      	pop	{r4, r5, r6, pc}

08004a2a <xTaskCreate>:
	{
 8004a2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a2e:	4607      	mov	r7, r0
 8004a30:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a32:	0090      	lsls	r0, r2, #2
	{
 8004a34:	4688      	mov	r8, r1
 8004a36:	4616      	mov	r6, r2
 8004a38:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a3a:	f000 fe93 	bl	8005764 <pvPortMalloc>
			if( pxStack != NULL )
 8004a3e:	4605      	mov	r5, r0
 8004a40:	b1e8      	cbz	r0, 8004a7e <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a42:	205c      	movs	r0, #92	; 0x5c
 8004a44:	f000 fe8e 	bl	8005764 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004a48:	4604      	mov	r4, r0
 8004a4a:	b1a8      	cbz	r0, 8004a78 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a4c:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8004a4e:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a50:	4632      	mov	r2, r6
 8004a52:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a54:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a5a:	9002      	str	r0, [sp, #8]
 8004a5c:	4638      	mov	r0, r7
 8004a5e:	9301      	str	r3, [sp, #4]
 8004a60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	464b      	mov	r3, r9
 8004a66:	f7ff ff5b 	bl	8004920 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	f7ff fe44 	bl	80046f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a70:	2001      	movs	r0, #1
	}
 8004a72:	b005      	add	sp, #20
 8004a74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8004a78:	4628      	mov	r0, r5
 8004a7a:	f000 ff0b 	bl	8005894 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a7e:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8004a82:	e7f6      	b.n	8004a72 <xTaskCreate+0x48>

08004a84 <vTaskStartScheduler>:
{
 8004a84:	b510      	push	{r4, lr}
 8004a86:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a88:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a8a:	aa07      	add	r2, sp, #28
 8004a8c:	a906      	add	r1, sp, #24
 8004a8e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a90:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a94:	f7ff fad2 	bl	800403c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a98:	9b05      	ldr	r3, [sp, #20]
 8004a9a:	9a07      	ldr	r2, [sp, #28]
 8004a9c:	9302      	str	r3, [sp, #8]
 8004a9e:	9b06      	ldr	r3, [sp, #24]
 8004aa0:	4916      	ldr	r1, [pc, #88]	; (8004afc <vTaskStartScheduler+0x78>)
 8004aa2:	4817      	ldr	r0, [pc, #92]	; (8004b00 <vTaskStartScheduler+0x7c>)
 8004aa4:	e9cd 4300 	strd	r4, r3, [sp]
 8004aa8:	4623      	mov	r3, r4
 8004aaa:	f7ff ff86 	bl	80049ba <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8004aae:	b318      	cbz	r0, 8004af8 <vTaskStartScheduler+0x74>
			xReturn = xTimerCreateTimerTask();
 8004ab0:	f000 faf0 	bl	8005094 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8004ab4:	2801      	cmp	r0, #1
 8004ab6:	d114      	bne.n	8004ae2 <vTaskStartScheduler+0x5e>
 8004ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ac8:	4b0e      	ldr	r3, [pc, #56]	; (8004b04 <vTaskStartScheduler+0x80>)
 8004aca:	f04f 32ff 	mov.w	r2, #4294967295
 8004ace:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ad0:	4b0d      	ldr	r3, [pc, #52]	; (8004b08 <vTaskStartScheduler+0x84>)
 8004ad2:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ad4:	4b0d      	ldr	r3, [pc, #52]	; (8004b0c <vTaskStartScheduler+0x88>)
 8004ad6:	601c      	str	r4, [r3, #0]
}
 8004ad8:	b008      	add	sp, #32
 8004ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8004ade:	f000 bd69 	b.w	80055b4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ae2:	3001      	adds	r0, #1
 8004ae4:	d108      	bne.n	8004af8 <vTaskStartScheduler+0x74>
 8004ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aea:	f383 8811 	msr	BASEPRI, r3
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	e7fe      	b.n	8004af6 <vTaskStartScheduler+0x72>
}
 8004af8:	b008      	add	sp, #32
 8004afa:	bd10      	pop	{r4, pc}
 8004afc:	080094da 	.word	0x080094da
 8004b00:	080048c1 	.word	0x080048c1
 8004b04:	24000ea8 	.word	0x24000ea8
 8004b08:	24000ec8 	.word	0x24000ec8
 8004b0c:	24000ef4 	.word	0x24000ef4

08004b10 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004b10:	4a02      	ldr	r2, [pc, #8]	; (8004b1c <vTaskSuspendAll+0xc>)
 8004b12:	6813      	ldr	r3, [r2, #0]
 8004b14:	3301      	adds	r3, #1
 8004b16:	6013      	str	r3, [r2, #0]
}
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	24000e74 	.word	0x24000e74

08004b20 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004b20:	4b01      	ldr	r3, [pc, #4]	; (8004b28 <xTaskGetTickCount+0x8>)
 8004b22:	6818      	ldr	r0, [r3, #0]
}
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	24000ef4 	.word	0x24000ef4

08004b2c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b2c:	4b3f      	ldr	r3, [pc, #252]	; (8004c2c <xTaskIncrementTick+0x100>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
{
 8004b30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d172      	bne.n	8004c1e <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b38:	4b3d      	ldr	r3, [pc, #244]	; (8004c30 <xTaskIncrementTick+0x104>)
 8004b3a:	681d      	ldr	r5, [r3, #0]
 8004b3c:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8004b3e:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b40:	b9bd      	cbnz	r5, 8004b72 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8004b42:	4b3c      	ldr	r3, [pc, #240]	; (8004c34 <xTaskIncrementTick+0x108>)
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	6812      	ldr	r2, [r2, #0]
 8004b48:	b142      	cbz	r2, 8004b5c <xTaskIncrementTick+0x30>
 8004b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	e7fe      	b.n	8004b5a <xTaskIncrementTick+0x2e>
 8004b5c:	4a36      	ldr	r2, [pc, #216]	; (8004c38 <xTaskIncrementTick+0x10c>)
 8004b5e:	6819      	ldr	r1, [r3, #0]
 8004b60:	6810      	ldr	r0, [r2, #0]
 8004b62:	6018      	str	r0, [r3, #0]
 8004b64:	6011      	str	r1, [r2, #0]
 8004b66:	4a35      	ldr	r2, [pc, #212]	; (8004c3c <xTaskIncrementTick+0x110>)
 8004b68:	6813      	ldr	r3, [r2, #0]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	f7ff fe79 	bl	8004864 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b72:	4e33      	ldr	r6, [pc, #204]	; (8004c40 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 8004b74:	2400      	movs	r4, #0
 8004b76:	4f33      	ldr	r7, [pc, #204]	; (8004c44 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b78:	6833      	ldr	r3, [r6, #0]
 8004b7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8004c50 <xTaskIncrementTick+0x124>
 8004b7e:	429d      	cmp	r5, r3
 8004b80:	d211      	bcs.n	8004ba6 <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b82:	f8d8 3000 	ldr.w	r3, [r8]
 8004b86:	2214      	movs	r2, #20
 8004b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8a:	4353      	muls	r3, r2
 8004b8c:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8004b8e:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 8004b90:	4b2d      	ldr	r3, [pc, #180]	; (8004c48 <xTaskIncrementTick+0x11c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 8004b94:	bf28      	it	cs
 8004b96:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	bf18      	it	ne
 8004b9c:	2401      	movne	r4, #1
}
 8004b9e:	4620      	mov	r0, r4
 8004ba0:	b003      	add	sp, #12
 8004ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ba6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8004c34 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 8004baa:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8004c54 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bae:	f8d9 3000 	ldr.w	r3, [r9]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	b91b      	cbnz	r3, 8004bbe <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bba:	6033      	str	r3, [r6, #0]
					break;
 8004bbc:	e7e1      	b.n	8004b82 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bbe:	f8d9 3000 	ldr.w	r3, [r9]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004bc8:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8004bcc:	4295      	cmp	r5, r2
 8004bce:	d201      	bcs.n	8004bd4 <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 8004bd0:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004bd2:	e7d6      	b.n	8004b82 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bd4:	f10b 0104 	add.w	r1, fp, #4
 8004bd8:	4608      	mov	r0, r1
 8004bda:	9101      	str	r1, [sp, #4]
 8004bdc:	f7ff fa77 	bl	80040ce <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004be0:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8004be4:	9901      	ldr	r1, [sp, #4]
 8004be6:	b122      	cbz	r2, 8004bf2 <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004be8:	f10b 0018 	add.w	r0, fp, #24
 8004bec:	f7ff fa6f 	bl	80040ce <uxListRemove>
 8004bf0:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8004bf2:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8004bf6:	f8da 2000 	ldr.w	r2, [sl]
 8004bfa:	4290      	cmp	r0, r2
 8004bfc:	d901      	bls.n	8004c02 <xTaskIncrementTick+0xd6>
 8004bfe:	f8ca 0000 	str.w	r0, [sl]
 8004c02:	2314      	movs	r3, #20
 8004c04:	fb03 7000 	mla	r0, r3, r0, r7
 8004c08:	f7ff fa3e 	bl	8004088 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c0c:	f8d8 1000 	ldr.w	r1, [r8]
 8004c10:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8004c14:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8004c16:	429a      	cmp	r2, r3
 8004c18:	bf28      	it	cs
 8004c1a:	2401      	movcs	r4, #1
 8004c1c:	e7c7      	b.n	8004bae <xTaskIncrementTick+0x82>
		++xPendedTicks;
 8004c1e:	4a0b      	ldr	r2, [pc, #44]	; (8004c4c <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 8004c20:	2400      	movs	r4, #0
		++xPendedTicks;
 8004c22:	6813      	ldr	r3, [r2, #0]
 8004c24:	3301      	adds	r3, #1
 8004c26:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 8004c28:	e7b9      	b.n	8004b9e <xTaskIncrementTick+0x72>
 8004c2a:	bf00      	nop
 8004c2c:	24000e74 	.word	0x24000e74
 8004c30:	24000ef4 	.word	0x24000ef4
 8004c34:	24000a04 	.word	0x24000a04
 8004c38:	24000a08 	.word	0x24000a08
 8004c3c:	24000eac 	.word	0x24000eac
 8004c40:	24000ea8 	.word	0x24000ea8
 8004c44:	24000a0c 	.word	0x24000a0c
 8004c48:	24000ef8 	.word	0x24000ef8
 8004c4c:	24000eb0 	.word	0x24000eb0
 8004c50:	24000a00 	.word	0x24000a00
 8004c54:	24000e7c 	.word	0x24000e7c

08004c58 <xTaskResumeAll>:
{
 8004c58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 8004c5a:	4c31      	ldr	r4, [pc, #196]	; (8004d20 <xTaskResumeAll+0xc8>)
 8004c5c:	6823      	ldr	r3, [r4, #0]
 8004c5e:	b943      	cbnz	r3, 8004c72 <xTaskResumeAll+0x1a>
 8004c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	e7fe      	b.n	8004c70 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8004c72:	f000 fc0f 	bl	8005494 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c7c:	6824      	ldr	r4, [r4, #0]
 8004c7e:	b12c      	cbz	r4, 8004c8c <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 8004c80:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004c82:	f000 fc27 	bl	80054d4 <vPortExitCritical>
}
 8004c86:	4620      	mov	r0, r4
 8004c88:	b003      	add	sp, #12
 8004c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c8c:	4b25      	ldr	r3, [pc, #148]	; (8004d24 <xTaskResumeAll+0xcc>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0f5      	beq.n	8004c80 <xTaskResumeAll+0x28>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c94:	4d24      	ldr	r5, [pc, #144]	; (8004d28 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8004c96:	4e25      	ldr	r6, [pc, #148]	; (8004d2c <xTaskResumeAll+0xd4>)
 8004c98:	4f25      	ldr	r7, [pc, #148]	; (8004d30 <xTaskResumeAll+0xd8>)
 8004c9a:	e01e      	b.n	8004cda <xTaskResumeAll+0x82>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c9c:	68eb      	ldr	r3, [r5, #12]
 8004c9e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ca0:	f104 0018 	add.w	r0, r4, #24
 8004ca4:	f7ff fa13 	bl	80040ce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ca8:	1d21      	adds	r1, r4, #4
 8004caa:	4608      	mov	r0, r1
 8004cac:	9101      	str	r1, [sp, #4]
 8004cae:	f7ff fa0e 	bl	80040ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004cb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004cb4:	6832      	ldr	r2, [r6, #0]
 8004cb6:	9901      	ldr	r1, [sp, #4]
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d900      	bls.n	8004cbe <xTaskResumeAll+0x66>
 8004cbc:	6033      	str	r3, [r6, #0]
 8004cbe:	2014      	movs	r0, #20
 8004cc0:	fb00 7003 	mla	r0, r0, r3, r7
 8004cc4:	f7ff f9e0 	bl	8004088 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cc8:	4b1a      	ldr	r3, [pc, #104]	; (8004d34 <xTaskResumeAll+0xdc>)
 8004cca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d302      	bcc.n	8004cda <xTaskResumeAll+0x82>
						xYieldPending = pdTRUE;
 8004cd4:	4b18      	ldr	r3, [pc, #96]	; (8004d38 <xTaskResumeAll+0xe0>)
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cda:	682b      	ldr	r3, [r5, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1dd      	bne.n	8004c9c <xTaskResumeAll+0x44>
				if( pxTCB != NULL )
 8004ce0:	b10c      	cbz	r4, 8004ce6 <xTaskResumeAll+0x8e>
					prvResetNextTaskUnblockTime();
 8004ce2:	f7ff fdbf 	bl	8004864 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ce6:	4d15      	ldr	r5, [pc, #84]	; (8004d3c <xTaskResumeAll+0xe4>)
 8004ce8:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8004cea:	b144      	cbz	r4, 8004cfe <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8004cec:	4e12      	ldr	r6, [pc, #72]	; (8004d38 <xTaskResumeAll+0xe0>)
 8004cee:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8004cf0:	f7ff ff1c 	bl	8004b2c <xTaskIncrementTick>
 8004cf4:	b100      	cbz	r0, 8004cf8 <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 8004cf6:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004cf8:	3c01      	subs	r4, #1
 8004cfa:	d1f9      	bne.n	8004cf0 <xTaskResumeAll+0x98>
						xPendedTicks = 0;
 8004cfc:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8004cfe:	4b0e      	ldr	r3, [pc, #56]	; (8004d38 <xTaskResumeAll+0xe0>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d0bc      	beq.n	8004c80 <xTaskResumeAll+0x28>
					taskYIELD_IF_USING_PREEMPTION();
 8004d06:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d0e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004d1a:	2401      	movs	r4, #1
 8004d1c:	e7b1      	b.n	8004c82 <xTaskResumeAll+0x2a>
 8004d1e:	bf00      	nop
 8004d20:	24000e74 	.word	0x24000e74
 8004d24:	24000e6c 	.word	0x24000e6c
 8004d28:	24000eb4 	.word	0x24000eb4
 8004d2c:	24000e7c 	.word	0x24000e7c
 8004d30:	24000a0c 	.word	0x24000a0c
 8004d34:	24000a00 	.word	0x24000a00
 8004d38:	24000ef8 	.word	0x24000ef8
 8004d3c:	24000eb0 	.word	0x24000eb0

08004d40 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d40:	4b17      	ldr	r3, [pc, #92]	; (8004da0 <vTaskSwitchContext+0x60>)
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	4b17      	ldr	r3, [pc, #92]	; (8004da4 <vTaskSwitchContext+0x64>)
{
 8004d46:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d48:	b112      	cbz	r2, 8004d50 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
}
 8004d4e:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d50:	4d15      	ldr	r5, [pc, #84]	; (8004da8 <vTaskSwitchContext+0x68>)
 8004d52:	2614      	movs	r6, #20
		xYieldPending = pdFALSE;
 8004d54:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d56:	4915      	ldr	r1, [pc, #84]	; (8004dac <vTaskSwitchContext+0x6c>)
 8004d58:	682a      	ldr	r2, [r5, #0]
 8004d5a:	fb06 f302 	mul.w	r3, r6, r2
 8004d5e:	58cc      	ldr	r4, [r1, r3]
 8004d60:	18c8      	adds	r0, r1, r3
 8004d62:	b18c      	cbz	r4, 8004d88 <vTaskSwitchContext+0x48>
 8004d64:	6844      	ldr	r4, [r0, #4]
 8004d66:	3308      	adds	r3, #8
 8004d68:	6864      	ldr	r4, [r4, #4]
 8004d6a:	440b      	add	r3, r1
 8004d6c:	429c      	cmp	r4, r3
 8004d6e:	6044      	str	r4, [r0, #4]
 8004d70:	bf04      	itt	eq
 8004d72:	6863      	ldreq	r3, [r4, #4]
 8004d74:	6043      	streq	r3, [r0, #4]
 8004d76:	2314      	movs	r3, #20
 8004d78:	fb03 1102 	mla	r1, r3, r2, r1
 8004d7c:	684b      	ldr	r3, [r1, #4]
 8004d7e:	68d9      	ldr	r1, [r3, #12]
 8004d80:	4b0b      	ldr	r3, [pc, #44]	; (8004db0 <vTaskSwitchContext+0x70>)
 8004d82:	6019      	str	r1, [r3, #0]
 8004d84:	602a      	str	r2, [r5, #0]
}
 8004d86:	e7e2      	b.n	8004d4e <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d88:	b942      	cbnz	r2, 8004d9c <vTaskSwitchContext+0x5c>
 8004d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	e7fe      	b.n	8004d9a <vTaskSwitchContext+0x5a>
 8004d9c:	3a01      	subs	r2, #1
 8004d9e:	e7dc      	b.n	8004d5a <vTaskSwitchContext+0x1a>
 8004da0:	24000e74 	.word	0x24000e74
 8004da4:	24000ef8 	.word	0x24000ef8
 8004da8:	24000e7c 	.word	0x24000e7c
 8004dac:	24000a0c 	.word	0x24000a0c
 8004db0:	24000a00 	.word	0x24000a00

08004db4 <vTaskPlaceOnEventList>:
{
 8004db4:	b510      	push	{r4, lr}
 8004db6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8004db8:	b940      	cbnz	r0, 8004dcc <vTaskPlaceOnEventList+0x18>
 8004dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbe:	f383 8811 	msr	BASEPRI, r3
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	e7fe      	b.n	8004dca <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004dcc:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <vTaskPlaceOnEventList+0x30>)
 8004dce:	6819      	ldr	r1, [r3, #0]
 8004dd0:	3118      	adds	r1, #24
 8004dd2:	f7ff f965 	bl	80040a0 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	2101      	movs	r1, #1
}
 8004dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004dde:	f7ff bd09 	b.w	80047f4 <prvAddCurrentTaskToDelayedList>
 8004de2:	bf00      	nop
 8004de4:	24000a00 	.word	0x24000a00

08004de8 <vTaskPlaceOnEventListRestricted>:
	{
 8004de8:	b538      	push	{r3, r4, r5, lr}
 8004dea:	460d      	mov	r5, r1
 8004dec:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8004dee:	b940      	cbnz	r0, 8004e02 <vTaskPlaceOnEventListRestricted+0x1a>
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	e7fe      	b.n	8004e00 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e02:	4b07      	ldr	r3, [pc, #28]	; (8004e20 <vTaskPlaceOnEventListRestricted+0x38>)
 8004e04:	6819      	ldr	r1, [r3, #0]
 8004e06:	3118      	adds	r1, #24
 8004e08:	f7ff f93e 	bl	8004088 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8004e0c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e0e:	4621      	mov	r1, r4
 8004e10:	bf0c      	ite	eq
 8004e12:	4628      	moveq	r0, r5
 8004e14:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8004e18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e1c:	f7ff bcea 	b.w	80047f4 <prvAddCurrentTaskToDelayedList>
 8004e20:	24000a00 	.word	0x24000a00

08004e24 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e24:	68c3      	ldr	r3, [r0, #12]
{
 8004e26:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e28:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8004e2a:	b944      	cbnz	r4, 8004e3e <xTaskRemoveFromEventList+0x1a>
 8004e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	e7fe      	b.n	8004e3c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e3e:	f104 0118 	add.w	r1, r4, #24
 8004e42:	4608      	mov	r0, r1
 8004e44:	9101      	str	r1, [sp, #4]
 8004e46:	f7ff f942 	bl	80040ce <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e4a:	4b12      	ldr	r3, [pc, #72]	; (8004e94 <xTaskRemoveFromEventList+0x70>)
 8004e4c:	9901      	ldr	r1, [sp, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	b9e3      	cbnz	r3, 8004e8c <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e52:	1d21      	adds	r1, r4, #4
 8004e54:	4608      	mov	r0, r1
 8004e56:	9101      	str	r1, [sp, #4]
 8004e58:	f7ff f939 	bl	80040ce <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e5c:	4a0e      	ldr	r2, [pc, #56]	; (8004e98 <xTaskRemoveFromEventList+0x74>)
 8004e5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e60:	6810      	ldr	r0, [r2, #0]
 8004e62:	9901      	ldr	r1, [sp, #4]
 8004e64:	4283      	cmp	r3, r0
 8004e66:	d900      	bls.n	8004e6a <xTaskRemoveFromEventList+0x46>
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	4a0c      	ldr	r2, [pc, #48]	; (8004e9c <xTaskRemoveFromEventList+0x78>)
 8004e6c:	2014      	movs	r0, #20
 8004e6e:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004e72:	f7ff f909 	bl	8004088 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e76:	4b0a      	ldr	r3, [pc, #40]	; (8004ea0 <xTaskRemoveFromEventList+0x7c>)
 8004e78:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d906      	bls.n	8004e90 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 8004e82:	2001      	movs	r0, #1
 8004e84:	4b07      	ldr	r3, [pc, #28]	; (8004ea4 <xTaskRemoveFromEventList+0x80>)
 8004e86:	6018      	str	r0, [r3, #0]
}
 8004e88:	b002      	add	sp, #8
 8004e8a:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004e8c:	4806      	ldr	r0, [pc, #24]	; (8004ea8 <xTaskRemoveFromEventList+0x84>)
 8004e8e:	e7f0      	b.n	8004e72 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 8004e90:	2000      	movs	r0, #0
	return xReturn;
 8004e92:	e7f9      	b.n	8004e88 <xTaskRemoveFromEventList+0x64>
 8004e94:	24000e74 	.word	0x24000e74
 8004e98:	24000e7c 	.word	0x24000e7c
 8004e9c:	24000a0c 	.word	0x24000a0c
 8004ea0:	24000a00 	.word	0x24000a00
 8004ea4:	24000ef8 	.word	0x24000ef8
 8004ea8:	24000eb4 	.word	0x24000eb4

08004eac <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004eac:	4b03      	ldr	r3, [pc, #12]	; (8004ebc <vTaskInternalSetTimeOutState+0x10>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004eb2:	4b03      	ldr	r3, [pc, #12]	; (8004ec0 <vTaskInternalSetTimeOutState+0x14>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6043      	str	r3, [r0, #4]
}
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	24000eac 	.word	0x24000eac
 8004ec0:	24000ef4 	.word	0x24000ef4

08004ec4 <xTaskCheckForTimeOut>:
{
 8004ec4:	b570      	push	{r4, r5, r6, lr}
 8004ec6:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8004ec8:	4605      	mov	r5, r0
 8004eca:	b940      	cbnz	r0, 8004ede <xTaskCheckForTimeOut+0x1a>
 8004ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	e7fe      	b.n	8004edc <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8004ede:	b941      	cbnz	r1, 8004ef2 <xTaskCheckForTimeOut+0x2e>
 8004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	e7fe      	b.n	8004ef0 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8004ef2:	f000 facf 	bl	8005494 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8004ef6:	4b0f      	ldr	r3, [pc, #60]	; (8004f34 <xTaskCheckForTimeOut+0x70>)
 8004ef8:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	d010      	beq.n	8004f22 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f00:	480d      	ldr	r0, [pc, #52]	; (8004f38 <xTaskCheckForTimeOut+0x74>)
 8004f02:	682e      	ldr	r6, [r5, #0]
 8004f04:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f06:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f08:	4286      	cmp	r6, r0
 8004f0a:	d001      	beq.n	8004f10 <xTaskCheckForTimeOut+0x4c>
 8004f0c:	428a      	cmp	r2, r1
 8004f0e:	d90f      	bls.n	8004f30 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f10:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f12:	4283      	cmp	r3, r0
 8004f14:	d90a      	bls.n	8004f2c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8004f16:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004f18:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8004f1a:	4413      	add	r3, r2
 8004f1c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004f1e:	f7ff ffc5 	bl	8004eac <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8004f22:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004f24:	f000 fad6 	bl	80054d4 <vPortExitCritical>
}
 8004f28:	4620      	mov	r0, r4
 8004f2a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8004f30:	2401      	movs	r4, #1
 8004f32:	e7f7      	b.n	8004f24 <xTaskCheckForTimeOut+0x60>
 8004f34:	24000ef4 	.word	0x24000ef4
 8004f38:	24000eac 	.word	0x24000eac

08004f3c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8004f3c:	4b01      	ldr	r3, [pc, #4]	; (8004f44 <vTaskMissedYield+0x8>)
 8004f3e:	2201      	movs	r2, #1
 8004f40:	601a      	str	r2, [r3, #0]
}
 8004f42:	4770      	bx	lr
 8004f44:	24000ef8 	.word	0x24000ef8

08004f48 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004f48:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <xTaskGetSchedulerState+0x18>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	b133      	cbz	r3, 8004f5c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f4e:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <xTaskGetSchedulerState+0x1c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	bf0c      	ite	eq
 8004f56:	2002      	moveq	r0, #2
 8004f58:	2000      	movne	r0, #0
 8004f5a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f5c:	2001      	movs	r0, #1
	}
 8004f5e:	4770      	bx	lr
 8004f60:	24000ec8 	.word	0x24000ec8
 8004f64:	24000e74 	.word	0x24000e74

08004f68 <xTaskPriorityDisinherit>:
	{
 8004f68:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 8004f6a:	b910      	cbnz	r0, 8004f72 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8004f6c:	2000      	movs	r0, #0
	}
 8004f6e:	b002      	add	sp, #8
 8004f70:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8004f72:	4b1c      	ldr	r3, [pc, #112]	; (8004fe4 <xTaskPriorityDisinherit+0x7c>)
 8004f74:	681c      	ldr	r4, [r3, #0]
 8004f76:	4284      	cmp	r4, r0
 8004f78:	d008      	beq.n	8004f8c <xTaskPriorityDisinherit+0x24>
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	e7fe      	b.n	8004f8a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f8c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004f8e:	b943      	cbnz	r3, 8004fa2 <xTaskPriorityDisinherit+0x3a>
 8004f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	e7fe      	b.n	8004fa0 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fa2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8004fa4:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fa6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8004fa8:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004faa:	4291      	cmp	r1, r2
 8004fac:	d0de      	beq.n	8004f6c <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1dc      	bne.n	8004f6c <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fb2:	1d21      	adds	r1, r4, #4
 8004fb4:	4608      	mov	r0, r1
 8004fb6:	9101      	str	r1, [sp, #4]
 8004fb8:	f7ff f889 	bl	80040ce <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004fbc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8004fbe:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fc0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004fc4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fc6:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004fc8:	4a07      	ldr	r2, [pc, #28]	; (8004fe8 <xTaskPriorityDisinherit+0x80>)
 8004fca:	6810      	ldr	r0, [r2, #0]
 8004fcc:	4283      	cmp	r3, r0
 8004fce:	d900      	bls.n	8004fd2 <xTaskPriorityDisinherit+0x6a>
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	4a06      	ldr	r2, [pc, #24]	; (8004fec <xTaskPriorityDisinherit+0x84>)
 8004fd4:	2014      	movs	r0, #20
 8004fd6:	fb00 2003 	mla	r0, r0, r3, r2
 8004fda:	f7ff f855 	bl	8004088 <vListInsertEnd>
					xReturn = pdTRUE;
 8004fde:	2001      	movs	r0, #1
		return xReturn;
 8004fe0:	e7c5      	b.n	8004f6e <xTaskPriorityDisinherit+0x6>
 8004fe2:	bf00      	nop
 8004fe4:	24000a00 	.word	0x24000a00
 8004fe8:	24000e7c 	.word	0x24000e7c
 8004fec:	24000a0c 	.word	0x24000a0c

08004ff0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8004ff2:	4c11      	ldr	r4, [pc, #68]	; (8005038 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8004ff4:	f000 fa4e 	bl	8005494 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8004ff8:	6825      	ldr	r5, [r4, #0]
 8004ffa:	b9bd      	cbnz	r5, 800502c <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ffc:	4f0f      	ldr	r7, [pc, #60]	; (800503c <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8004ffe:	4e10      	ldr	r6, [pc, #64]	; (8005040 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8005000:	4638      	mov	r0, r7
 8005002:	f7ff f833 	bl	800406c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005006:	4630      	mov	r0, r6
 8005008:	f7ff f830 	bl	800406c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800500c:	4b0d      	ldr	r3, [pc, #52]	; (8005044 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800500e:	4a0e      	ldr	r2, [pc, #56]	; (8005048 <prvCheckForValidListAndQueue+0x58>)
 8005010:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8005012:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005014:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8005016:	4b0d      	ldr	r3, [pc, #52]	; (800504c <prvCheckForValidListAndQueue+0x5c>)
 8005018:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800501a:	4b0d      	ldr	r3, [pc, #52]	; (8005050 <prvCheckForValidListAndQueue+0x60>)
 800501c:	9500      	str	r5, [sp, #0]
 800501e:	f7ff f932 	bl	8004286 <xQueueGenericCreateStatic>
 8005022:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005024:	b110      	cbz	r0, 800502c <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005026:	490b      	ldr	r1, [pc, #44]	; (8005054 <prvCheckForValidListAndQueue+0x64>)
 8005028:	f7ff fb30 	bl	800468c <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800502c:	b003      	add	sp, #12
 800502e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8005032:	f000 ba4f 	b.w	80054d4 <vPortExitCritical>
 8005036:	bf00      	nop
 8005038:	24001020 	.word	0x24001020
 800503c:	24000fa4 	.word	0x24000fa4
 8005040:	24000fb8 	.word	0x24000fb8
 8005044:	24000efc 	.word	0x24000efc
 8005048:	24000f04 	.word	0x24000f04
 800504c:	24000f00 	.word	0x24000f00
 8005050:	24000fd0 	.word	0x24000fd0
 8005054:	080094df 	.word	0x080094df

08005058 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8005058:	4291      	cmp	r1, r2
{
 800505a:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800505c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800505e:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8005060:	d80a      	bhi.n	8005078 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005062:	1ad2      	subs	r2, r2, r3
 8005064:	6983      	ldr	r3, [r0, #24]
 8005066:	429a      	cmp	r2, r3
 8005068:	d20d      	bcs.n	8005086 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800506a:	1d01      	adds	r1, r0, #4
 800506c:	4b07      	ldr	r3, [pc, #28]	; (800508c <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800506e:	6818      	ldr	r0, [r3, #0]
 8005070:	f7ff f816 	bl	80040a0 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8005074:	2000      	movs	r0, #0
}
 8005076:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005078:	429a      	cmp	r2, r3
 800507a:	d201      	bcs.n	8005080 <prvInsertTimerInActiveList+0x28>
 800507c:	4299      	cmp	r1, r3
 800507e:	d202      	bcs.n	8005086 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005080:	1d01      	adds	r1, r0, #4
 8005082:	4b03      	ldr	r3, [pc, #12]	; (8005090 <prvInsertTimerInActiveList+0x38>)
 8005084:	e7f3      	b.n	800506e <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8005086:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8005088:	e7f5      	b.n	8005076 <prvInsertTimerInActiveList+0x1e>
 800508a:	bf00      	nop
 800508c:	24000f00 	.word	0x24000f00
 8005090:	24000efc 	.word	0x24000efc

08005094 <xTimerCreateTimerTask>:
{
 8005094:	b510      	push	{r4, lr}
 8005096:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8005098:	f7ff ffaa 	bl	8004ff0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800509c:	4b12      	ldr	r3, [pc, #72]	; (80050e8 <xTimerCreateTimerTask+0x54>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	b1b3      	cbz	r3, 80050d0 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80050a2:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80050a4:	aa07      	add	r2, sp, #28
 80050a6:	a906      	add	r1, sp, #24
 80050a8:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80050aa:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80050ae:	f7fe ffd1 	bl	8004054 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80050b2:	9b05      	ldr	r3, [sp, #20]
 80050b4:	9a07      	ldr	r2, [sp, #28]
 80050b6:	9302      	str	r3, [sp, #8]
 80050b8:	9b06      	ldr	r3, [sp, #24]
 80050ba:	490c      	ldr	r1, [pc, #48]	; (80050ec <xTimerCreateTimerTask+0x58>)
 80050bc:	9301      	str	r3, [sp, #4]
 80050be:	2302      	movs	r3, #2
 80050c0:	480b      	ldr	r0, [pc, #44]	; (80050f0 <xTimerCreateTimerTask+0x5c>)
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	4623      	mov	r3, r4
 80050c6:	f7ff fc78 	bl	80049ba <xTaskCreateStatic>
 80050ca:	4b0a      	ldr	r3, [pc, #40]	; (80050f4 <xTimerCreateTimerTask+0x60>)
 80050cc:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80050ce:	b940      	cbnz	r0, 80050e2 <xTimerCreateTimerTask+0x4e>
 80050d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80050e0:	e7fe      	b.n	80050e0 <xTimerCreateTimerTask+0x4c>
}
 80050e2:	2001      	movs	r0, #1
 80050e4:	b008      	add	sp, #32
 80050e6:	bd10      	pop	{r4, pc}
 80050e8:	24001020 	.word	0x24001020
 80050ec:	080094e4 	.word	0x080094e4
 80050f0:	080051f9 	.word	0x080051f9
 80050f4:	24001024 	.word	0x24001024

080050f8 <xTimerGenericCommand>:
{
 80050f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80050fa:	4616      	mov	r6, r2
	configASSERT( xTimer );
 80050fc:	4604      	mov	r4, r0
{
 80050fe:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8005100:	b940      	cbnz	r0, 8005114 <xTimerGenericCommand+0x1c>
 8005102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	e7fe      	b.n	8005112 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8005114:	4d0c      	ldr	r5, [pc, #48]	; (8005148 <xTimerGenericCommand+0x50>)
 8005116:	6828      	ldr	r0, [r5, #0]
 8005118:	b178      	cbz	r0, 800513a <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800511a:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800511c:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800511e:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005122:	dc0c      	bgt.n	800513e <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005124:	f7ff ff10 	bl	8004f48 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005128:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800512a:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800512c:	4669      	mov	r1, sp
 800512e:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005130:	bf0c      	ite	eq
 8005132:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005134:	461a      	movne	r2, r3
 8005136:	f7ff f8f4 	bl	8004322 <xQueueGenericSend>
}
 800513a:	b004      	add	sp, #16
 800513c:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800513e:	2300      	movs	r3, #0
 8005140:	4669      	mov	r1, sp
 8005142:	f7ff f9a1 	bl	8004488 <xQueueGenericSendFromISR>
 8005146:	e7f8      	b.n	800513a <xTimerGenericCommand+0x42>
 8005148:	24001020 	.word	0x24001020

0800514c <prvSampleTimeNow>:
{
 800514c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8005150:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80051f4 <prvSampleTimeNow+0xa8>
{
 8005154:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8005156:	f7ff fce3 	bl	8004b20 <xTaskGetTickCount>
 800515a:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800515c:	f8d8 3000 	ldr.w	r3, [r8]
 8005160:	4283      	cmp	r3, r0
 8005162:	d940      	bls.n	80051e6 <prvSampleTimeNow+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005164:	4f21      	ldr	r7, [pc, #132]	; (80051ec <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005166:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	b95a      	cbnz	r2, 8005188 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8005170:	4a1f      	ldr	r2, [pc, #124]	; (80051f0 <prvSampleTimeNow+0xa4>)
 8005172:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005174:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8005176:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 8005178:	6039      	str	r1, [r7, #0]
}
 800517a:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 800517c:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800517e:	f8c8 5000 	str.w	r5, [r8]
}
 8005182:	b004      	add	sp, #16
 8005184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005188:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800518a:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800518c:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005190:	1d21      	adds	r1, r4, #4
 8005192:	4608      	mov	r0, r1
 8005194:	9103      	str	r1, [sp, #12]
 8005196:	f7fe ff9a 	bl	80040ce <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800519a:	6a23      	ldr	r3, [r4, #32]
 800519c:	4620      	mov	r0, r4
 800519e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80051a0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80051a4:	9903      	ldr	r1, [sp, #12]
 80051a6:	f013 0f04 	tst.w	r3, #4
 80051aa:	d0de      	beq.n	800516a <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80051ac:	69a3      	ldr	r3, [r4, #24]
 80051ae:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 80051b0:	459a      	cmp	sl, r3
 80051b2:	d205      	bcs.n	80051c0 <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051b4:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80051b6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051b8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051ba:	f7fe ff71 	bl	80040a0 <vListInsert>
 80051be:	e7d4      	b.n	800516a <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051c0:	2300      	movs	r3, #0
 80051c2:	4652      	mov	r2, sl
 80051c4:	4620      	mov	r0, r4
 80051c6:	f8cd 9000 	str.w	r9, [sp]
 80051ca:	4619      	mov	r1, r3
 80051cc:	f7ff ff94 	bl	80050f8 <xTimerGenericCommand>
				configASSERT( xResult );
 80051d0:	2800      	cmp	r0, #0
 80051d2:	d1ca      	bne.n	800516a <prvSampleTimeNow+0x1e>
 80051d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	e7fe      	b.n	80051e4 <prvSampleTimeNow+0x98>
		*pxTimerListsWereSwitched = pdFALSE;
 80051e6:	2300      	movs	r3, #0
 80051e8:	e7c7      	b.n	800517a <prvSampleTimeNow+0x2e>
 80051ea:	bf00      	nop
 80051ec:	24000efc 	.word	0x24000efc
 80051f0:	24000f00 	.word	0x24000f00
 80051f4:	24000fcc 	.word	0x24000fcc

080051f8 <prvTimerTask>:
{
 80051f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80051fc:	4d6e      	ldr	r5, [pc, #440]	; (80053b8 <prvTimerTask+0x1c0>)
{
 80051fe:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005200:	4e6e      	ldr	r6, [pc, #440]	; (80053bc <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005202:	682b      	ldr	r3, [r5, #0]
 8005204:	f8d3 8000 	ldr.w	r8, [r3]
 8005208:	f1b8 0f00 	cmp.w	r8, #0
 800520c:	d035      	beq.n	800527a <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800520e:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005210:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005212:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8005216:	f7ff fc7b 	bl	8004b10 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800521a:	a804      	add	r0, sp, #16
 800521c:	f7ff ff96 	bl	800514c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8005220:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005222:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8005224:	2b00      	cmp	r3, #0
 8005226:	d169      	bne.n	80052fc <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005228:	2c00      	cmp	r4, #0
 800522a:	d14c      	bne.n	80052c6 <prvTimerTask+0xce>
 800522c:	4540      	cmp	r0, r8
 800522e:	d350      	bcc.n	80052d2 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 8005230:	f7ff fd12 	bl	8004c58 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005234:	682b      	ldr	r3, [r5, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800523a:	1d38      	adds	r0, r7, #4
 800523c:	f7fe ff47 	bl	80040ce <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005240:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005244:	0758      	lsls	r0, r3, #29
 8005246:	d51a      	bpl.n	800527e <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005248:	69b9      	ldr	r1, [r7, #24]
 800524a:	4643      	mov	r3, r8
 800524c:	464a      	mov	r2, r9
 800524e:	4638      	mov	r0, r7
 8005250:	4441      	add	r1, r8
 8005252:	f7ff ff01 	bl	8005058 <prvInsertTimerInActiveList>
 8005256:	b1b0      	cbz	r0, 8005286 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005258:	4623      	mov	r3, r4
 800525a:	4642      	mov	r2, r8
 800525c:	4621      	mov	r1, r4
 800525e:	4638      	mov	r0, r7
 8005260:	9400      	str	r4, [sp, #0]
 8005262:	f7ff ff49 	bl	80050f8 <xTimerGenericCommand>
			configASSERT( xResult );
 8005266:	b970      	cbnz	r0, 8005286 <prvTimerTask+0x8e>
 8005268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	e7fe      	b.n	8005278 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800527a:	2401      	movs	r4, #1
 800527c:	e7cb      	b.n	8005216 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800527e:	f023 0301 	bic.w	r3, r3, #1
 8005282:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	4638      	mov	r0, r7
 800528a:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800528c:	2200      	movs	r2, #0
 800528e:	a904      	add	r1, sp, #16
 8005290:	6830      	ldr	r0, [r6, #0]
 8005292:	f7ff f95b 	bl	800454c <xQueueReceive>
 8005296:	2800      	cmp	r0, #0
 8005298:	d0b3      	beq.n	8005202 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800529a:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800529c:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800529e:	2b00      	cmp	r3, #0
 80052a0:	db2f      	blt.n	8005302 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80052a2:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80052a4:	6963      	ldr	r3, [r4, #20]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d132      	bne.n	8005310 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052aa:	a803      	add	r0, sp, #12
 80052ac:	f7ff ff4e 	bl	800514c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80052b0:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052b2:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 80052b4:	2b09      	cmp	r3, #9
 80052b6:	d8e9      	bhi.n	800528c <prvTimerTask+0x94>
 80052b8:	e8df f003 	tbb	[pc, r3]
 80052bc:	572e2e2e 	.word	0x572e2e2e
 80052c0:	2e2e765e 	.word	0x2e2e765e
 80052c4:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80052c6:	4b3e      	ldr	r3, [pc, #248]	; (80053c0 <prvTimerTask+0x1c8>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681c      	ldr	r4, [r3, #0]
 80052cc:	fab4 f484 	clz	r4, r4
 80052d0:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80052d2:	4622      	mov	r2, r4
 80052d4:	eba8 0109 	sub.w	r1, r8, r9
 80052d8:	6830      	ldr	r0, [r6, #0]
 80052da:	f7ff f9e9 	bl	80046b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80052de:	f7ff fcbb 	bl	8004c58 <xTaskResumeAll>
 80052e2:	2800      	cmp	r0, #0
 80052e4:	d1d2      	bne.n	800528c <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 80052e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80052ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ee:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	e7c7      	b.n	800528c <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 80052fc:	f7ff fcac 	bl	8004c58 <xTaskResumeAll>
}
 8005300:	e7c4      	b.n	800528c <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005302:	9b05      	ldr	r3, [sp, #20]
 8005304:	9907      	ldr	r1, [sp, #28]
 8005306:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005308:	9b04      	ldr	r3, [sp, #16]
 800530a:	2b00      	cmp	r3, #0
 800530c:	dbbe      	blt.n	800528c <prvTimerTask+0x94>
 800530e:	e7c8      	b.n	80052a2 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005310:	1d20      	adds	r0, r4, #4
 8005312:	f7fe fedc 	bl	80040ce <uxListRemove>
 8005316:	e7c8      	b.n	80052aa <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005318:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800531c:	4620      	mov	r0, r4
 800531e:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005320:	f043 0301 	orr.w	r3, r3, #1
 8005324:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005328:	9b05      	ldr	r3, [sp, #20]
 800532a:	4419      	add	r1, r3
 800532c:	f7ff fe94 	bl	8005058 <prvInsertTimerInActiveList>
 8005330:	2800      	cmp	r0, #0
 8005332:	d0ab      	beq.n	800528c <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005334:	6a23      	ldr	r3, [r4, #32]
 8005336:	4620      	mov	r0, r4
 8005338:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800533a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800533e:	0759      	lsls	r1, r3, #29
 8005340:	d5a4      	bpl.n	800528c <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005342:	69a2      	ldr	r2, [r4, #24]
 8005344:	2300      	movs	r3, #0
 8005346:	9905      	ldr	r1, [sp, #20]
 8005348:	4620      	mov	r0, r4
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	440a      	add	r2, r1
 800534e:	4619      	mov	r1, r3
 8005350:	f7ff fed2 	bl	80050f8 <xTimerGenericCommand>
							configASSERT( xResult );
 8005354:	2800      	cmp	r0, #0
 8005356:	d199      	bne.n	800528c <prvTimerTask+0x94>
 8005358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	e7fe      	b.n	8005368 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800536a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800536e:	f023 0301 	bic.w	r3, r3, #1
 8005372:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8005376:	e789      	b.n	800528c <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005378:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800537c:	f043 0301 	orr.w	r3, r3, #1
 8005380:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005384:	9905      	ldr	r1, [sp, #20]
 8005386:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005388:	b941      	cbnz	r1, 800539c <prvTimerTask+0x1a4>
 800538a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	e7fe      	b.n	800539a <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800539c:	4603      	mov	r3, r0
 800539e:	4401      	add	r1, r0
 80053a0:	4620      	mov	r0, r4
 80053a2:	f7ff fe59 	bl	8005058 <prvInsertTimerInActiveList>
					break;
 80053a6:	e771      	b.n	800528c <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80053a8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80053ac:	079a      	lsls	r2, r3, #30
 80053ae:	d4de      	bmi.n	800536e <prvTimerTask+0x176>
							vPortFree( pxTimer );
 80053b0:	4620      	mov	r0, r4
 80053b2:	f000 fa6f 	bl	8005894 <vPortFree>
 80053b6:	e769      	b.n	800528c <prvTimerTask+0x94>
 80053b8:	24000efc 	.word	0x24000efc
 80053bc:	24001020 	.word	0x24001020
 80053c0:	24000f00 	.word	0x24000f00

080053c4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80053c4:	4808      	ldr	r0, [pc, #32]	; (80053e8 <prvPortStartFirstTask+0x24>)
 80053c6:	6800      	ldr	r0, [r0, #0]
 80053c8:	6800      	ldr	r0, [r0, #0]
 80053ca:	f380 8808 	msr	MSP, r0
 80053ce:	f04f 0000 	mov.w	r0, #0
 80053d2:	f380 8814 	msr	CONTROL, r0
 80053d6:	b662      	cpsie	i
 80053d8:	b661      	cpsie	f
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	df00      	svc	0
 80053e4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80053e6:	0000      	.short	0x0000
 80053e8:	e000ed08 	.word	0xe000ed08

080053ec <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80053ec:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80053fc <vPortEnableVFP+0x10>
 80053f0:	6801      	ldr	r1, [r0, #0]
 80053f2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80053f6:	6001      	str	r1, [r0, #0]
 80053f8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80053fa:	0000      	.short	0x0000
 80053fc:	e000ed88 	.word	0xe000ed88

08005400 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8005400:	2300      	movs	r3, #0
{
 8005402:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8005404:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8005406:	4b0d      	ldr	r3, [pc, #52]	; (800543c <prvTaskExitError+0x3c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3301      	adds	r3, #1
 800540c:	d008      	beq.n	8005420 <prvTaskExitError+0x20>
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	e7fe      	b.n	800541e <prvTaskExitError+0x1e>
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8005430:	9b01      	ldr	r3, [sp, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0fc      	beq.n	8005430 <prvTaskExitError+0x30>
}
 8005436:	b002      	add	sp, #8
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	24000070 	.word	0x24000070

08005440 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005440:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005444:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005448:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800544c:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800544e:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005450:	4b03      	ldr	r3, [pc, #12]	; (8005460 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005452:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005454:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005456:	f06f 0302 	mvn.w	r3, #2
 800545a:	6203      	str	r3, [r0, #32]
}
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	08005401 	.word	0x08005401
	...

08005470 <SVC_Handler>:
	__asm volatile (
 8005470:	4b07      	ldr	r3, [pc, #28]	; (8005490 <pxCurrentTCBConst2>)
 8005472:	6819      	ldr	r1, [r3, #0]
 8005474:	6808      	ldr	r0, [r1, #0]
 8005476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800547a:	f380 8809 	msr	PSP, r0
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f04f 0000 	mov.w	r0, #0
 8005486:	f380 8811 	msr	BASEPRI, r0
 800548a:	4770      	bx	lr
 800548c:	f3af 8000 	nop.w

08005490 <pxCurrentTCBConst2>:
 8005490:	24000a00 	.word	0x24000a00

08005494 <vPortEnterCritical>:
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80054a4:	4a0a      	ldr	r2, [pc, #40]	; (80054d0 <vPortEnterCritical+0x3c>)
 80054a6:	6813      	ldr	r3, [r2, #0]
 80054a8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80054aa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80054ac:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80054ae:	d10e      	bne.n	80054ce <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80054b0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80054b4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	b143      	cbz	r3, 80054ce <vPortEnterCritical+0x3a>
 80054bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c0:	f383 8811 	msr	BASEPRI, r3
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	e7fe      	b.n	80054cc <vPortEnterCritical+0x38>
}
 80054ce:	4770      	bx	lr
 80054d0:	24000070 	.word	0x24000070

080054d4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80054d4:	4a08      	ldr	r2, [pc, #32]	; (80054f8 <vPortExitCritical+0x24>)
 80054d6:	6813      	ldr	r3, [r2, #0]
 80054d8:	b943      	cbnz	r3, 80054ec <vPortExitCritical+0x18>
 80054da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	e7fe      	b.n	80054ea <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80054ec:	3b01      	subs	r3, #1
 80054ee:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054f0:	b90b      	cbnz	r3, 80054f6 <vPortExitCritical+0x22>
	__asm volatile
 80054f2:	f383 8811 	msr	BASEPRI, r3
}
 80054f6:	4770      	bx	lr
 80054f8:	24000070 	.word	0x24000070
 80054fc:	00000000 	.word	0x00000000

08005500 <PendSV_Handler>:
	__asm volatile
 8005500:	f3ef 8009 	mrs	r0, PSP
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	4b15      	ldr	r3, [pc, #84]	; (8005560 <pxCurrentTCBConst>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	f01e 0f10 	tst.w	lr, #16
 8005510:	bf08      	it	eq
 8005512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800551a:	6010      	str	r0, [r2, #0]
 800551c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005520:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005524:	f380 8811 	msr	BASEPRI, r0
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f7ff fc06 	bl	8004d40 <vTaskSwitchContext>
 8005534:	f04f 0000 	mov.w	r0, #0
 8005538:	f380 8811 	msr	BASEPRI, r0
 800553c:	bc09      	pop	{r0, r3}
 800553e:	6819      	ldr	r1, [r3, #0]
 8005540:	6808      	ldr	r0, [r1, #0]
 8005542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005546:	f01e 0f10 	tst.w	lr, #16
 800554a:	bf08      	it	eq
 800554c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005550:	f380 8809 	msr	PSP, r0
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	f3af 8000 	nop.w

08005560 <pxCurrentTCBConst>:
 8005560:	24000a00 	.word	0x24000a00

08005564 <xPortSysTickHandler>:
{
 8005564:	b508      	push	{r3, lr}
	__asm volatile
 8005566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8005576:	f7ff fad9 	bl	8004b2c <xTaskIncrementTick>
 800557a:	b128      	cbz	r0, 8005588 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800557c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005584:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8005588:	2300      	movs	r3, #0
 800558a:	f383 8811 	msr	BASEPRI, r3
}
 800558e:	bd08      	pop	{r3, pc}

08005590 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005590:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8005594:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005596:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800559a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800559c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800559e:	4b04      	ldr	r3, [pc, #16]	; (80055b0 <vPortSetupTimerInterrupt+0x20>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80055a6:	3b01      	subs	r3, #1
 80055a8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055aa:	2307      	movs	r3, #7
 80055ac:	6113      	str	r3, [r2, #16]
}
 80055ae:	4770      	bx	lr
 80055b0:	24000000 	.word	0x24000000

080055b4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80055b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 80055b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80055ba:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 80055be:	4a3a      	ldr	r2, [pc, #232]	; (80056a8 <xPortStartScheduler+0xf4>)
 80055c0:	4291      	cmp	r1, r2
 80055c2:	d108      	bne.n	80055d6 <xPortStartScheduler+0x22>
	__asm volatile
 80055c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	e7fe      	b.n	80055d4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80055d6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80055da:	4b34      	ldr	r3, [pc, #208]	; (80056ac <xPortStartScheduler+0xf8>)
 80055dc:	429a      	cmp	r2, r3
 80055de:	d108      	bne.n	80055f2 <xPortStartScheduler+0x3e>
 80055e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	e7fe      	b.n	80055f0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80055f2:	4b2f      	ldr	r3, [pc, #188]	; (80056b0 <xPortStartScheduler+0xfc>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055f4:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80055f6:	781a      	ldrb	r2, [r3, #0]
 80055f8:	b2d2      	uxtb	r2, r2
 80055fa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80055fc:	22ff      	movs	r2, #255	; 0xff
 80055fe:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005600:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005602:	4a2c      	ldr	r2, [pc, #176]	; (80056b4 <xPortStartScheduler+0x100>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005604:	b2db      	uxtb	r3, r3
 8005606:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800560a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800560e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005612:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005614:	2307      	movs	r3, #7
 8005616:	4a28      	ldr	r2, [pc, #160]	; (80056b8 <xPortStartScheduler+0x104>)
 8005618:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800561a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800561e:	1e5c      	subs	r4, r3, #1
 8005620:	0600      	lsls	r0, r0, #24
 8005622:	d40c      	bmi.n	800563e <xPortStartScheduler+0x8a>
 8005624:	b111      	cbz	r1, 800562c <xPortStartScheduler+0x78>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005626:	2b03      	cmp	r3, #3
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	d011      	beq.n	8005650 <xPortStartScheduler+0x9c>
 800562c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005630:	f383 8811 	msr	BASEPRI, r3
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	e7fe      	b.n	800563c <xPortStartScheduler+0x88>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800563e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005642:	2101      	movs	r1, #1
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	b2db      	uxtb	r3, r3
 8005648:	f88d 3003 	strb.w	r3, [sp, #3]
 800564c:	4623      	mov	r3, r4
 800564e:	e7e4      	b.n	800561a <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005650:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005654:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8005658:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800565a:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800565c:	9b01      	ldr	r3, [sp, #4]
 800565e:	4a14      	ldr	r2, [pc, #80]	; (80056b0 <xPortStartScheduler+0xfc>)
 8005660:	b2db      	uxtb	r3, r3
 8005662:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005664:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8005668:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800566c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005670:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8005674:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005678:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800567c:	f7ff ff88 	bl	8005590 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005680:	4b0e      	ldr	r3, [pc, #56]	; (80056bc <xPortStartScheduler+0x108>)
 8005682:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8005684:	f7ff feb2 	bl	80053ec <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005688:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800568c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005690:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8005694:	f7ff fe96 	bl	80053c4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8005698:	f7ff fb52 	bl	8004d40 <vTaskSwitchContext>
}
 800569c:	4628      	mov	r0, r5
	prvTaskExitError();
 800569e:	f7ff feaf 	bl	8005400 <prvTaskExitError>
}
 80056a2:	b003      	add	sp, #12
 80056a4:	bd30      	pop	{r4, r5, pc}
 80056a6:	bf00      	nop
 80056a8:	410fc271 	.word	0x410fc271
 80056ac:	410fc270 	.word	0x410fc270
 80056b0:	e000e400 	.word	0xe000e400
 80056b4:	24001028 	.word	0x24001028
 80056b8:	2400102c 	.word	0x2400102c
 80056bc:	24000070 	.word	0x24000070

080056c0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80056c0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80056c4:	2b0f      	cmp	r3, #15
 80056c6:	d90e      	bls.n	80056e6 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80056c8:	4a11      	ldr	r2, [pc, #68]	; (8005710 <vPortValidateInterruptPriority+0x50>)
 80056ca:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80056cc:	4a11      	ldr	r2, [pc, #68]	; (8005714 <vPortValidateInterruptPriority+0x54>)
 80056ce:	7812      	ldrb	r2, [r2, #0]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d908      	bls.n	80056e6 <vPortValidateInterruptPriority+0x26>
 80056d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d8:	f383 8811 	msr	BASEPRI, r3
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	e7fe      	b.n	80056e4 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80056e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80056ea:	4a0b      	ldr	r2, [pc, #44]	; (8005718 <vPortValidateInterruptPriority+0x58>)
 80056ec:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80056f0:	6812      	ldr	r2, [r2, #0]
 80056f2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d908      	bls.n	800570c <vPortValidateInterruptPriority+0x4c>
 80056fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	e7fe      	b.n	800570a <vPortValidateInterruptPriority+0x4a>
	}
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	e000e3f0 	.word	0xe000e3f0
 8005714:	24001028 	.word	0x24001028
 8005718:	2400102c 	.word	0x2400102c

0800571c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800571c:	4b0f      	ldr	r3, [pc, #60]	; (800575c <prvInsertBlockIntoFreeList+0x40>)
{
 800571e:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005720:	461a      	mov	r2, r3
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4283      	cmp	r3, r0
 8005726:	d3fb      	bcc.n	8005720 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005728:	6854      	ldr	r4, [r2, #4]
 800572a:	1911      	adds	r1, r2, r4
 800572c:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800572e:	bf01      	itttt	eq
 8005730:	6841      	ldreq	r1, [r0, #4]
 8005732:	4610      	moveq	r0, r2
 8005734:	1909      	addeq	r1, r1, r4
 8005736:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005738:	6844      	ldr	r4, [r0, #4]
 800573a:	1901      	adds	r1, r0, r4
 800573c:	428b      	cmp	r3, r1
 800573e:	d107      	bne.n	8005750 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005740:	4907      	ldr	r1, [pc, #28]	; (8005760 <prvInsertBlockIntoFreeList+0x44>)
 8005742:	6809      	ldr	r1, [r1, #0]
 8005744:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005746:	bf1f      	itttt	ne
 8005748:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800574a:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800574c:	1909      	addne	r1, r1, r4
 800574e:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005750:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005752:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005754:	bf18      	it	ne
 8005756:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005758:	bd10      	pop	{r4, pc}
 800575a:	bf00      	nop
 800575c:	240fb048 	.word	0x240fb048
 8005760:	24001030 	.word	0x24001030

08005764 <pvPortMalloc>:
{
 8005764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005768:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800576a:	f7ff f9d1 	bl	8004b10 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800576e:	4842      	ldr	r0, [pc, #264]	; (8005878 <pvPortMalloc+0x114>)
 8005770:	4d42      	ldr	r5, [pc, #264]	; (800587c <pvPortMalloc+0x118>)
 8005772:	6803      	ldr	r3, [r0, #0]
 8005774:	bb0b      	cbnz	r3, 80057ba <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8005776:	4942      	ldr	r1, [pc, #264]	; (8005880 <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005778:	074e      	lsls	r6, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800577a:	4e42      	ldr	r6, [pc, #264]	; (8005884 <pvPortMalloc+0x120>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800577c:	bf1b      	ittet	ne
 800577e:	1dcb      	addne	r3, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005780:	f501 227a 	addne.w	r2, r1, #1024000	; 0xfa000
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005784:	f44f 227a 	moveq.w	r2, #1024000	; 0xfa000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005788:	f023 0307 	bicne.w	r3, r3, #7
 800578c:	bf1c      	itt	ne
 800578e:	4619      	movne	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005790:	1ad2      	subne	r2, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 8005792:	2300      	movs	r3, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005794:	440a      	add	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005796:	6031      	str	r1, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005798:	6073      	str	r3, [r6, #4]
	uxAddress -= xHeapStructSize;
 800579a:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800579c:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 80057a0:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057a4:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 80057a6:	6002      	str	r2, [r0, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057a8:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057ac:	4a36      	ldr	r2, [pc, #216]	; (8005888 <pvPortMalloc+0x124>)
 80057ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057b0:	4a36      	ldr	r2, [pc, #216]	; (800588c <pvPortMalloc+0x128>)
 80057b2:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80057b8:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057ba:	682f      	ldr	r7, [r5, #0]
 80057bc:	4227      	tst	r7, r4
 80057be:	d155      	bne.n	800586c <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 80057c0:	2c00      	cmp	r4, #0
 80057c2:	d046      	beq.n	8005852 <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 80057c4:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057c8:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057ca:	bf1c      	itt	ne
 80057cc:	f023 0307 	bicne.w	r3, r3, #7
 80057d0:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d04a      	beq.n	800586c <pvPortMalloc+0x108>
 80057d6:	4c2d      	ldr	r4, [pc, #180]	; (800588c <pvPortMalloc+0x128>)
 80057d8:	6826      	ldr	r6, [r4, #0]
 80057da:	429e      	cmp	r6, r3
 80057dc:	d346      	bcc.n	800586c <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 80057de:	4a29      	ldr	r2, [pc, #164]	; (8005884 <pvPortMalloc+0x120>)
 80057e0:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057e2:	6869      	ldr	r1, [r5, #4]
 80057e4:	4299      	cmp	r1, r3
 80057e6:	d204      	bcs.n	80057f2 <pvPortMalloc+0x8e>
 80057e8:	f8d5 c000 	ldr.w	ip, [r5]
 80057ec:	f1bc 0f00 	cmp.w	ip, #0
 80057f0:	d115      	bne.n	800581e <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 80057f2:	6800      	ldr	r0, [r0, #0]
 80057f4:	42a8      	cmp	r0, r5
 80057f6:	d039      	beq.n	800586c <pvPortMalloc+0x108>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057f8:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057fa:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057fc:	f8d2 8000 	ldr.w	r8, [r2]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005800:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005802:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005804:	d912      	bls.n	800582c <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005806:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005808:	0742      	lsls	r2, r0, #29
 800580a:	d00b      	beq.n	8005824 <pvPortMalloc+0xc0>
 800580c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005810:	f383 8811 	msr	BASEPRI, r3
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	e7fe      	b.n	800581c <pvPortMalloc+0xb8>
 800581e:	462a      	mov	r2, r5
 8005820:	4665      	mov	r5, ip
 8005822:	e7de      	b.n	80057e2 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005824:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005826:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005828:	f7ff ff78 	bl	800571c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800582c:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800582e:	4916      	ldr	r1, [pc, #88]	; (8005888 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005830:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005832:	431f      	orrs	r7, r3
					xNumberOfSuccessfulAllocations++;
 8005834:	4a16      	ldr	r2, [pc, #88]	; (8005890 <pvPortMalloc+0x12c>)
					pxBlock->pxNextFreeBlock = NULL;
 8005836:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005838:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800583a:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800583c:	6813      	ldr	r3, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800583e:	4286      	cmp	r6, r0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005840:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005842:	f108 0408 	add.w	r4, r8, #8
					xNumberOfSuccessfulAllocations++;
 8005846:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800584a:	bf38      	it	cc
 800584c:	600e      	strcc	r6, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800584e:	606f      	str	r7, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 8005850:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 8005852:	f7ff fa01 	bl	8004c58 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005856:	0763      	lsls	r3, r4, #29
 8005858:	d00a      	beq.n	8005870 <pvPortMalloc+0x10c>
 800585a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	e7fe      	b.n	800586a <pvPortMalloc+0x106>
void *pvReturn = NULL;
 800586c:	2400      	movs	r4, #0
 800586e:	e7f0      	b.n	8005852 <pvPortMalloc+0xee>
}
 8005870:	4620      	mov	r0, r4
 8005872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005876:	bf00      	nop
 8005878:	24001030 	.word	0x24001030
 800587c:	240fb034 	.word	0x240fb034
 8005880:	24001034 	.word	0x24001034
 8005884:	240fb048 	.word	0x240fb048
 8005888:	240fb03c 	.word	0x240fb03c
 800588c:	240fb038 	.word	0x240fb038
 8005890:	240fb040 	.word	0x240fb040

08005894 <vPortFree>:
{
 8005894:	b510      	push	{r4, lr}
	if( pv != NULL )
 8005896:	4604      	mov	r4, r0
 8005898:	b390      	cbz	r0, 8005900 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800589a:	4a1a      	ldr	r2, [pc, #104]	; (8005904 <vPortFree+0x70>)
 800589c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80058a0:	6812      	ldr	r2, [r2, #0]
 80058a2:	4213      	tst	r3, r2
 80058a4:	d108      	bne.n	80058b8 <vPortFree+0x24>
 80058a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058aa:	f383 8811 	msr	BASEPRI, r3
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	e7fe      	b.n	80058b6 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80058b8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80058bc:	b141      	cbz	r1, 80058d0 <vPortFree+0x3c>
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	e7fe      	b.n	80058ce <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80058d0:	ea23 0302 	bic.w	r3, r3, r2
 80058d4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80058d8:	f7ff f91a 	bl	8004b10 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80058dc:	4a0a      	ldr	r2, [pc, #40]	; (8005908 <vPortFree+0x74>)
 80058de:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058e2:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80058e6:	6811      	ldr	r1, [r2, #0]
 80058e8:	440b      	add	r3, r1
 80058ea:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058ec:	f7ff ff16 	bl	800571c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80058f0:	4a06      	ldr	r2, [pc, #24]	; (800590c <vPortFree+0x78>)
 80058f2:	6813      	ldr	r3, [r2, #0]
 80058f4:	3301      	adds	r3, #1
}
 80058f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 80058fa:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 80058fc:	f7ff b9ac 	b.w	8004c58 <xTaskResumeAll>
}
 8005900:	bd10      	pop	{r4, pc}
 8005902:	bf00      	nop
 8005904:	240fb034 	.word	0x240fb034
 8005908:	240fb038 	.word	0x240fb038
 800590c:	240fb044 	.word	0x240fb044

08005910 <__errno>:
 8005910:	4b01      	ldr	r3, [pc, #4]	; (8005918 <__errno+0x8>)
 8005912:	6818      	ldr	r0, [r3, #0]
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	24000074 	.word	0x24000074

0800591c <__libc_init_array>:
 800591c:	b570      	push	{r4, r5, r6, lr}
 800591e:	4d0d      	ldr	r5, [pc, #52]	; (8005954 <__libc_init_array+0x38>)
 8005920:	4c0d      	ldr	r4, [pc, #52]	; (8005958 <__libc_init_array+0x3c>)
 8005922:	1b64      	subs	r4, r4, r5
 8005924:	10a4      	asrs	r4, r4, #2
 8005926:	2600      	movs	r6, #0
 8005928:	42a6      	cmp	r6, r4
 800592a:	d109      	bne.n	8005940 <__libc_init_array+0x24>
 800592c:	4d0b      	ldr	r5, [pc, #44]	; (800595c <__libc_init_array+0x40>)
 800592e:	4c0c      	ldr	r4, [pc, #48]	; (8005960 <__libc_init_array+0x44>)
 8005930:	f003 f822 	bl	8008978 <_init>
 8005934:	1b64      	subs	r4, r4, r5
 8005936:	10a4      	asrs	r4, r4, #2
 8005938:	2600      	movs	r6, #0
 800593a:	42a6      	cmp	r6, r4
 800593c:	d105      	bne.n	800594a <__libc_init_array+0x2e>
 800593e:	bd70      	pop	{r4, r5, r6, pc}
 8005940:	f855 3b04 	ldr.w	r3, [r5], #4
 8005944:	4798      	blx	r3
 8005946:	3601      	adds	r6, #1
 8005948:	e7ee      	b.n	8005928 <__libc_init_array+0xc>
 800594a:	f855 3b04 	ldr.w	r3, [r5], #4
 800594e:	4798      	blx	r3
 8005950:	3601      	adds	r6, #1
 8005952:	e7f2      	b.n	800593a <__libc_init_array+0x1e>
 8005954:	0800a140 	.word	0x0800a140
 8005958:	0800a140 	.word	0x0800a140
 800595c:	0800a140 	.word	0x0800a140
 8005960:	0800a144 	.word	0x0800a144

08005964 <malloc>:
 8005964:	4b02      	ldr	r3, [pc, #8]	; (8005970 <malloc+0xc>)
 8005966:	4601      	mov	r1, r0
 8005968:	6818      	ldr	r0, [r3, #0]
 800596a:	f000 b88d 	b.w	8005a88 <_malloc_r>
 800596e:	bf00      	nop
 8005970:	24000074 	.word	0x24000074

08005974 <free>:
 8005974:	4b02      	ldr	r3, [pc, #8]	; (8005980 <free+0xc>)
 8005976:	4601      	mov	r1, r0
 8005978:	6818      	ldr	r0, [r3, #0]
 800597a:	f000 b819 	b.w	80059b0 <_free_r>
 800597e:	bf00      	nop
 8005980:	24000074 	.word	0x24000074

08005984 <memcpy>:
 8005984:	440a      	add	r2, r1
 8005986:	4291      	cmp	r1, r2
 8005988:	f100 33ff 	add.w	r3, r0, #4294967295
 800598c:	d100      	bne.n	8005990 <memcpy+0xc>
 800598e:	4770      	bx	lr
 8005990:	b510      	push	{r4, lr}
 8005992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800599a:	4291      	cmp	r1, r2
 800599c:	d1f9      	bne.n	8005992 <memcpy+0xe>
 800599e:	bd10      	pop	{r4, pc}

080059a0 <memset>:
 80059a0:	4402      	add	r2, r0
 80059a2:	4603      	mov	r3, r0
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d100      	bne.n	80059aa <memset+0xa>
 80059a8:	4770      	bx	lr
 80059aa:	f803 1b01 	strb.w	r1, [r3], #1
 80059ae:	e7f9      	b.n	80059a4 <memset+0x4>

080059b0 <_free_r>:
 80059b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059b2:	2900      	cmp	r1, #0
 80059b4:	d044      	beq.n	8005a40 <_free_r+0x90>
 80059b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059ba:	9001      	str	r0, [sp, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f1a1 0404 	sub.w	r4, r1, #4
 80059c2:	bfb8      	it	lt
 80059c4:	18e4      	addlt	r4, r4, r3
 80059c6:	f001 fec1 	bl	800774c <__malloc_lock>
 80059ca:	4a1e      	ldr	r2, [pc, #120]	; (8005a44 <_free_r+0x94>)
 80059cc:	9801      	ldr	r0, [sp, #4]
 80059ce:	6813      	ldr	r3, [r2, #0]
 80059d0:	b933      	cbnz	r3, 80059e0 <_free_r+0x30>
 80059d2:	6063      	str	r3, [r4, #4]
 80059d4:	6014      	str	r4, [r2, #0]
 80059d6:	b003      	add	sp, #12
 80059d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059dc:	f001 bebc 	b.w	8007758 <__malloc_unlock>
 80059e0:	42a3      	cmp	r3, r4
 80059e2:	d908      	bls.n	80059f6 <_free_r+0x46>
 80059e4:	6825      	ldr	r5, [r4, #0]
 80059e6:	1961      	adds	r1, r4, r5
 80059e8:	428b      	cmp	r3, r1
 80059ea:	bf01      	itttt	eq
 80059ec:	6819      	ldreq	r1, [r3, #0]
 80059ee:	685b      	ldreq	r3, [r3, #4]
 80059f0:	1949      	addeq	r1, r1, r5
 80059f2:	6021      	streq	r1, [r4, #0]
 80059f4:	e7ed      	b.n	80059d2 <_free_r+0x22>
 80059f6:	461a      	mov	r2, r3
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	b10b      	cbz	r3, 8005a00 <_free_r+0x50>
 80059fc:	42a3      	cmp	r3, r4
 80059fe:	d9fa      	bls.n	80059f6 <_free_r+0x46>
 8005a00:	6811      	ldr	r1, [r2, #0]
 8005a02:	1855      	adds	r5, r2, r1
 8005a04:	42a5      	cmp	r5, r4
 8005a06:	d10b      	bne.n	8005a20 <_free_r+0x70>
 8005a08:	6824      	ldr	r4, [r4, #0]
 8005a0a:	4421      	add	r1, r4
 8005a0c:	1854      	adds	r4, r2, r1
 8005a0e:	42a3      	cmp	r3, r4
 8005a10:	6011      	str	r1, [r2, #0]
 8005a12:	d1e0      	bne.n	80059d6 <_free_r+0x26>
 8005a14:	681c      	ldr	r4, [r3, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	6053      	str	r3, [r2, #4]
 8005a1a:	4421      	add	r1, r4
 8005a1c:	6011      	str	r1, [r2, #0]
 8005a1e:	e7da      	b.n	80059d6 <_free_r+0x26>
 8005a20:	d902      	bls.n	8005a28 <_free_r+0x78>
 8005a22:	230c      	movs	r3, #12
 8005a24:	6003      	str	r3, [r0, #0]
 8005a26:	e7d6      	b.n	80059d6 <_free_r+0x26>
 8005a28:	6825      	ldr	r5, [r4, #0]
 8005a2a:	1961      	adds	r1, r4, r5
 8005a2c:	428b      	cmp	r3, r1
 8005a2e:	bf04      	itt	eq
 8005a30:	6819      	ldreq	r1, [r3, #0]
 8005a32:	685b      	ldreq	r3, [r3, #4]
 8005a34:	6063      	str	r3, [r4, #4]
 8005a36:	bf04      	itt	eq
 8005a38:	1949      	addeq	r1, r1, r5
 8005a3a:	6021      	streq	r1, [r4, #0]
 8005a3c:	6054      	str	r4, [r2, #4]
 8005a3e:	e7ca      	b.n	80059d6 <_free_r+0x26>
 8005a40:	b003      	add	sp, #12
 8005a42:	bd30      	pop	{r4, r5, pc}
 8005a44:	240fb050 	.word	0x240fb050

08005a48 <sbrk_aligned>:
 8005a48:	b570      	push	{r4, r5, r6, lr}
 8005a4a:	4e0e      	ldr	r6, [pc, #56]	; (8005a84 <sbrk_aligned+0x3c>)
 8005a4c:	460c      	mov	r4, r1
 8005a4e:	6831      	ldr	r1, [r6, #0]
 8005a50:	4605      	mov	r5, r0
 8005a52:	b911      	cbnz	r1, 8005a5a <sbrk_aligned+0x12>
 8005a54:	f000 fd5c 	bl	8006510 <_sbrk_r>
 8005a58:	6030      	str	r0, [r6, #0]
 8005a5a:	4621      	mov	r1, r4
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	f000 fd57 	bl	8006510 <_sbrk_r>
 8005a62:	1c43      	adds	r3, r0, #1
 8005a64:	d00a      	beq.n	8005a7c <sbrk_aligned+0x34>
 8005a66:	1cc4      	adds	r4, r0, #3
 8005a68:	f024 0403 	bic.w	r4, r4, #3
 8005a6c:	42a0      	cmp	r0, r4
 8005a6e:	d007      	beq.n	8005a80 <sbrk_aligned+0x38>
 8005a70:	1a21      	subs	r1, r4, r0
 8005a72:	4628      	mov	r0, r5
 8005a74:	f000 fd4c 	bl	8006510 <_sbrk_r>
 8005a78:	3001      	adds	r0, #1
 8005a7a:	d101      	bne.n	8005a80 <sbrk_aligned+0x38>
 8005a7c:	f04f 34ff 	mov.w	r4, #4294967295
 8005a80:	4620      	mov	r0, r4
 8005a82:	bd70      	pop	{r4, r5, r6, pc}
 8005a84:	240fb054 	.word	0x240fb054

08005a88 <_malloc_r>:
 8005a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a8c:	1ccd      	adds	r5, r1, #3
 8005a8e:	f025 0503 	bic.w	r5, r5, #3
 8005a92:	3508      	adds	r5, #8
 8005a94:	2d0c      	cmp	r5, #12
 8005a96:	bf38      	it	cc
 8005a98:	250c      	movcc	r5, #12
 8005a9a:	2d00      	cmp	r5, #0
 8005a9c:	4607      	mov	r7, r0
 8005a9e:	db01      	blt.n	8005aa4 <_malloc_r+0x1c>
 8005aa0:	42a9      	cmp	r1, r5
 8005aa2:	d905      	bls.n	8005ab0 <_malloc_r+0x28>
 8005aa4:	230c      	movs	r3, #12
 8005aa6:	603b      	str	r3, [r7, #0]
 8005aa8:	2600      	movs	r6, #0
 8005aaa:	4630      	mov	r0, r6
 8005aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ab0:	4e2e      	ldr	r6, [pc, #184]	; (8005b6c <_malloc_r+0xe4>)
 8005ab2:	f001 fe4b 	bl	800774c <__malloc_lock>
 8005ab6:	6833      	ldr	r3, [r6, #0]
 8005ab8:	461c      	mov	r4, r3
 8005aba:	bb34      	cbnz	r4, 8005b0a <_malloc_r+0x82>
 8005abc:	4629      	mov	r1, r5
 8005abe:	4638      	mov	r0, r7
 8005ac0:	f7ff ffc2 	bl	8005a48 <sbrk_aligned>
 8005ac4:	1c43      	adds	r3, r0, #1
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	d14d      	bne.n	8005b66 <_malloc_r+0xde>
 8005aca:	6834      	ldr	r4, [r6, #0]
 8005acc:	4626      	mov	r6, r4
 8005ace:	2e00      	cmp	r6, #0
 8005ad0:	d140      	bne.n	8005b54 <_malloc_r+0xcc>
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	4631      	mov	r1, r6
 8005ad6:	4638      	mov	r0, r7
 8005ad8:	eb04 0803 	add.w	r8, r4, r3
 8005adc:	f000 fd18 	bl	8006510 <_sbrk_r>
 8005ae0:	4580      	cmp	r8, r0
 8005ae2:	d13a      	bne.n	8005b5a <_malloc_r+0xd2>
 8005ae4:	6821      	ldr	r1, [r4, #0]
 8005ae6:	3503      	adds	r5, #3
 8005ae8:	1a6d      	subs	r5, r5, r1
 8005aea:	f025 0503 	bic.w	r5, r5, #3
 8005aee:	3508      	adds	r5, #8
 8005af0:	2d0c      	cmp	r5, #12
 8005af2:	bf38      	it	cc
 8005af4:	250c      	movcc	r5, #12
 8005af6:	4629      	mov	r1, r5
 8005af8:	4638      	mov	r0, r7
 8005afa:	f7ff ffa5 	bl	8005a48 <sbrk_aligned>
 8005afe:	3001      	adds	r0, #1
 8005b00:	d02b      	beq.n	8005b5a <_malloc_r+0xd2>
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	442b      	add	r3, r5
 8005b06:	6023      	str	r3, [r4, #0]
 8005b08:	e00e      	b.n	8005b28 <_malloc_r+0xa0>
 8005b0a:	6822      	ldr	r2, [r4, #0]
 8005b0c:	1b52      	subs	r2, r2, r5
 8005b0e:	d41e      	bmi.n	8005b4e <_malloc_r+0xc6>
 8005b10:	2a0b      	cmp	r2, #11
 8005b12:	d916      	bls.n	8005b42 <_malloc_r+0xba>
 8005b14:	1961      	adds	r1, r4, r5
 8005b16:	42a3      	cmp	r3, r4
 8005b18:	6025      	str	r5, [r4, #0]
 8005b1a:	bf18      	it	ne
 8005b1c:	6059      	strne	r1, [r3, #4]
 8005b1e:	6863      	ldr	r3, [r4, #4]
 8005b20:	bf08      	it	eq
 8005b22:	6031      	streq	r1, [r6, #0]
 8005b24:	5162      	str	r2, [r4, r5]
 8005b26:	604b      	str	r3, [r1, #4]
 8005b28:	4638      	mov	r0, r7
 8005b2a:	f104 060b 	add.w	r6, r4, #11
 8005b2e:	f001 fe13 	bl	8007758 <__malloc_unlock>
 8005b32:	f026 0607 	bic.w	r6, r6, #7
 8005b36:	1d23      	adds	r3, r4, #4
 8005b38:	1af2      	subs	r2, r6, r3
 8005b3a:	d0b6      	beq.n	8005aaa <_malloc_r+0x22>
 8005b3c:	1b9b      	subs	r3, r3, r6
 8005b3e:	50a3      	str	r3, [r4, r2]
 8005b40:	e7b3      	b.n	8005aaa <_malloc_r+0x22>
 8005b42:	6862      	ldr	r2, [r4, #4]
 8005b44:	42a3      	cmp	r3, r4
 8005b46:	bf0c      	ite	eq
 8005b48:	6032      	streq	r2, [r6, #0]
 8005b4a:	605a      	strne	r2, [r3, #4]
 8005b4c:	e7ec      	b.n	8005b28 <_malloc_r+0xa0>
 8005b4e:	4623      	mov	r3, r4
 8005b50:	6864      	ldr	r4, [r4, #4]
 8005b52:	e7b2      	b.n	8005aba <_malloc_r+0x32>
 8005b54:	4634      	mov	r4, r6
 8005b56:	6876      	ldr	r6, [r6, #4]
 8005b58:	e7b9      	b.n	8005ace <_malloc_r+0x46>
 8005b5a:	230c      	movs	r3, #12
 8005b5c:	603b      	str	r3, [r7, #0]
 8005b5e:	4638      	mov	r0, r7
 8005b60:	f001 fdfa 	bl	8007758 <__malloc_unlock>
 8005b64:	e7a1      	b.n	8005aaa <_malloc_r+0x22>
 8005b66:	6025      	str	r5, [r4, #0]
 8005b68:	e7de      	b.n	8005b28 <_malloc_r+0xa0>
 8005b6a:	bf00      	nop
 8005b6c:	240fb050 	.word	0x240fb050

08005b70 <__cvt>:
 8005b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b72:	ed2d 8b02 	vpush	{d8}
 8005b76:	eeb0 8b40 	vmov.f64	d8, d0
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	4617      	mov	r7, r2
 8005b7e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005b80:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005b82:	ee18 2a90 	vmov	r2, s17
 8005b86:	f025 0520 	bic.w	r5, r5, #32
 8005b8a:	2a00      	cmp	r2, #0
 8005b8c:	bfb6      	itet	lt
 8005b8e:	222d      	movlt	r2, #45	; 0x2d
 8005b90:	2200      	movge	r2, #0
 8005b92:	eeb1 8b40 	vneglt.f64	d8, d0
 8005b96:	2d46      	cmp	r5, #70	; 0x46
 8005b98:	460c      	mov	r4, r1
 8005b9a:	701a      	strb	r2, [r3, #0]
 8005b9c:	d004      	beq.n	8005ba8 <__cvt+0x38>
 8005b9e:	2d45      	cmp	r5, #69	; 0x45
 8005ba0:	d100      	bne.n	8005ba4 <__cvt+0x34>
 8005ba2:	3401      	adds	r4, #1
 8005ba4:	2102      	movs	r1, #2
 8005ba6:	e000      	b.n	8005baa <__cvt+0x3a>
 8005ba8:	2103      	movs	r1, #3
 8005baa:	ab03      	add	r3, sp, #12
 8005bac:	9301      	str	r3, [sp, #4]
 8005bae:	ab02      	add	r3, sp, #8
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	4622      	mov	r2, r4
 8005bb4:	4633      	mov	r3, r6
 8005bb6:	eeb0 0b48 	vmov.f64	d0, d8
 8005bba:	f000 fe35 	bl	8006828 <_dtoa_r>
 8005bbe:	2d47      	cmp	r5, #71	; 0x47
 8005bc0:	d101      	bne.n	8005bc6 <__cvt+0x56>
 8005bc2:	07fb      	lsls	r3, r7, #31
 8005bc4:	d51a      	bpl.n	8005bfc <__cvt+0x8c>
 8005bc6:	2d46      	cmp	r5, #70	; 0x46
 8005bc8:	eb00 0204 	add.w	r2, r0, r4
 8005bcc:	d10c      	bne.n	8005be8 <__cvt+0x78>
 8005bce:	7803      	ldrb	r3, [r0, #0]
 8005bd0:	2b30      	cmp	r3, #48	; 0x30
 8005bd2:	d107      	bne.n	8005be4 <__cvt+0x74>
 8005bd4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bdc:	bf1c      	itt	ne
 8005bde:	f1c4 0401 	rsbne	r4, r4, #1
 8005be2:	6034      	strne	r4, [r6, #0]
 8005be4:	6833      	ldr	r3, [r6, #0]
 8005be6:	441a      	add	r2, r3
 8005be8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bf0:	bf08      	it	eq
 8005bf2:	9203      	streq	r2, [sp, #12]
 8005bf4:	2130      	movs	r1, #48	; 0x30
 8005bf6:	9b03      	ldr	r3, [sp, #12]
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d307      	bcc.n	8005c0c <__cvt+0x9c>
 8005bfc:	9b03      	ldr	r3, [sp, #12]
 8005bfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c00:	1a1b      	subs	r3, r3, r0
 8005c02:	6013      	str	r3, [r2, #0]
 8005c04:	b005      	add	sp, #20
 8005c06:	ecbd 8b02 	vpop	{d8}
 8005c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c0c:	1c5c      	adds	r4, r3, #1
 8005c0e:	9403      	str	r4, [sp, #12]
 8005c10:	7019      	strb	r1, [r3, #0]
 8005c12:	e7f0      	b.n	8005bf6 <__cvt+0x86>

08005c14 <__exponent>:
 8005c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c16:	4603      	mov	r3, r0
 8005c18:	2900      	cmp	r1, #0
 8005c1a:	bfb8      	it	lt
 8005c1c:	4249      	neglt	r1, r1
 8005c1e:	f803 2b02 	strb.w	r2, [r3], #2
 8005c22:	bfb4      	ite	lt
 8005c24:	222d      	movlt	r2, #45	; 0x2d
 8005c26:	222b      	movge	r2, #43	; 0x2b
 8005c28:	2909      	cmp	r1, #9
 8005c2a:	7042      	strb	r2, [r0, #1]
 8005c2c:	dd2a      	ble.n	8005c84 <__exponent+0x70>
 8005c2e:	f10d 0407 	add.w	r4, sp, #7
 8005c32:	46a4      	mov	ip, r4
 8005c34:	270a      	movs	r7, #10
 8005c36:	46a6      	mov	lr, r4
 8005c38:	460a      	mov	r2, r1
 8005c3a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005c3e:	fb07 1516 	mls	r5, r7, r6, r1
 8005c42:	3530      	adds	r5, #48	; 0x30
 8005c44:	2a63      	cmp	r2, #99	; 0x63
 8005c46:	f104 34ff 	add.w	r4, r4, #4294967295
 8005c4a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005c4e:	4631      	mov	r1, r6
 8005c50:	dcf1      	bgt.n	8005c36 <__exponent+0x22>
 8005c52:	3130      	adds	r1, #48	; 0x30
 8005c54:	f1ae 0502 	sub.w	r5, lr, #2
 8005c58:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005c5c:	1c44      	adds	r4, r0, #1
 8005c5e:	4629      	mov	r1, r5
 8005c60:	4561      	cmp	r1, ip
 8005c62:	d30a      	bcc.n	8005c7a <__exponent+0x66>
 8005c64:	f10d 0209 	add.w	r2, sp, #9
 8005c68:	eba2 020e 	sub.w	r2, r2, lr
 8005c6c:	4565      	cmp	r5, ip
 8005c6e:	bf88      	it	hi
 8005c70:	2200      	movhi	r2, #0
 8005c72:	4413      	add	r3, r2
 8005c74:	1a18      	subs	r0, r3, r0
 8005c76:	b003      	add	sp, #12
 8005c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c7e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005c82:	e7ed      	b.n	8005c60 <__exponent+0x4c>
 8005c84:	2330      	movs	r3, #48	; 0x30
 8005c86:	3130      	adds	r1, #48	; 0x30
 8005c88:	7083      	strb	r3, [r0, #2]
 8005c8a:	70c1      	strb	r1, [r0, #3]
 8005c8c:	1d03      	adds	r3, r0, #4
 8005c8e:	e7f1      	b.n	8005c74 <__exponent+0x60>

08005c90 <_printf_float>:
 8005c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c94:	b08b      	sub	sp, #44	; 0x2c
 8005c96:	460c      	mov	r4, r1
 8005c98:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8005c9c:	4616      	mov	r6, r2
 8005c9e:	461f      	mov	r7, r3
 8005ca0:	4605      	mov	r5, r0
 8005ca2:	f001 fce7 	bl	8007674 <_localeconv_r>
 8005ca6:	f8d0 b000 	ldr.w	fp, [r0]
 8005caa:	4658      	mov	r0, fp
 8005cac:	f7fa fb2a 	bl	8000304 <strlen>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	9308      	str	r3, [sp, #32]
 8005cb4:	f8d8 3000 	ldr.w	r3, [r8]
 8005cb8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005cbc:	6822      	ldr	r2, [r4, #0]
 8005cbe:	3307      	adds	r3, #7
 8005cc0:	f023 0307 	bic.w	r3, r3, #7
 8005cc4:	f103 0108 	add.w	r1, r3, #8
 8005cc8:	f8c8 1000 	str.w	r1, [r8]
 8005ccc:	4682      	mov	sl, r0
 8005cce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cd2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8005cd6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8005f38 <_printf_float+0x2a8>
 8005cda:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8005cde:	eeb0 6bc0 	vabs.f64	d6, d0
 8005ce2:	eeb4 6b47 	vcmp.f64	d6, d7
 8005ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cea:	dd24      	ble.n	8005d36 <_printf_float+0xa6>
 8005cec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cf4:	d502      	bpl.n	8005cfc <_printf_float+0x6c>
 8005cf6:	232d      	movs	r3, #45	; 0x2d
 8005cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cfc:	4b90      	ldr	r3, [pc, #576]	; (8005f40 <_printf_float+0x2b0>)
 8005cfe:	4891      	ldr	r0, [pc, #580]	; (8005f44 <_printf_float+0x2b4>)
 8005d00:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005d04:	bf94      	ite	ls
 8005d06:	4698      	movls	r8, r3
 8005d08:	4680      	movhi	r8, r0
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	6123      	str	r3, [r4, #16]
 8005d0e:	f022 0204 	bic.w	r2, r2, #4
 8005d12:	2300      	movs	r3, #0
 8005d14:	6022      	str	r2, [r4, #0]
 8005d16:	9304      	str	r3, [sp, #16]
 8005d18:	9700      	str	r7, [sp, #0]
 8005d1a:	4633      	mov	r3, r6
 8005d1c:	aa09      	add	r2, sp, #36	; 0x24
 8005d1e:	4621      	mov	r1, r4
 8005d20:	4628      	mov	r0, r5
 8005d22:	f000 f9d3 	bl	80060cc <_printf_common>
 8005d26:	3001      	adds	r0, #1
 8005d28:	f040 808a 	bne.w	8005e40 <_printf_float+0x1b0>
 8005d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d30:	b00b      	add	sp, #44	; 0x2c
 8005d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d36:	eeb4 0b40 	vcmp.f64	d0, d0
 8005d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d3e:	d709      	bvc.n	8005d54 <_printf_float+0xc4>
 8005d40:	ee10 3a90 	vmov	r3, s1
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	bfbc      	itt	lt
 8005d48:	232d      	movlt	r3, #45	; 0x2d
 8005d4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d4e:	487e      	ldr	r0, [pc, #504]	; (8005f48 <_printf_float+0x2b8>)
 8005d50:	4b7e      	ldr	r3, [pc, #504]	; (8005f4c <_printf_float+0x2bc>)
 8005d52:	e7d5      	b.n	8005d00 <_printf_float+0x70>
 8005d54:	6863      	ldr	r3, [r4, #4]
 8005d56:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005d5a:	9104      	str	r1, [sp, #16]
 8005d5c:	1c59      	adds	r1, r3, #1
 8005d5e:	d13c      	bne.n	8005dda <_printf_float+0x14a>
 8005d60:	2306      	movs	r3, #6
 8005d62:	6063      	str	r3, [r4, #4]
 8005d64:	2300      	movs	r3, #0
 8005d66:	9303      	str	r3, [sp, #12]
 8005d68:	ab08      	add	r3, sp, #32
 8005d6a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005d6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d72:	ab07      	add	r3, sp, #28
 8005d74:	6861      	ldr	r1, [r4, #4]
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	6022      	str	r2, [r4, #0]
 8005d7a:	f10d 031b 	add.w	r3, sp, #27
 8005d7e:	4628      	mov	r0, r5
 8005d80:	f7ff fef6 	bl	8005b70 <__cvt>
 8005d84:	9b04      	ldr	r3, [sp, #16]
 8005d86:	9907      	ldr	r1, [sp, #28]
 8005d88:	2b47      	cmp	r3, #71	; 0x47
 8005d8a:	4680      	mov	r8, r0
 8005d8c:	d108      	bne.n	8005da0 <_printf_float+0x110>
 8005d8e:	1cc8      	adds	r0, r1, #3
 8005d90:	db02      	blt.n	8005d98 <_printf_float+0x108>
 8005d92:	6863      	ldr	r3, [r4, #4]
 8005d94:	4299      	cmp	r1, r3
 8005d96:	dd41      	ble.n	8005e1c <_printf_float+0x18c>
 8005d98:	f1a9 0902 	sub.w	r9, r9, #2
 8005d9c:	fa5f f989 	uxtb.w	r9, r9
 8005da0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005da4:	d820      	bhi.n	8005de8 <_printf_float+0x158>
 8005da6:	3901      	subs	r1, #1
 8005da8:	464a      	mov	r2, r9
 8005daa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005dae:	9107      	str	r1, [sp, #28]
 8005db0:	f7ff ff30 	bl	8005c14 <__exponent>
 8005db4:	9a08      	ldr	r2, [sp, #32]
 8005db6:	9004      	str	r0, [sp, #16]
 8005db8:	1813      	adds	r3, r2, r0
 8005dba:	2a01      	cmp	r2, #1
 8005dbc:	6123      	str	r3, [r4, #16]
 8005dbe:	dc02      	bgt.n	8005dc6 <_printf_float+0x136>
 8005dc0:	6822      	ldr	r2, [r4, #0]
 8005dc2:	07d2      	lsls	r2, r2, #31
 8005dc4:	d501      	bpl.n	8005dca <_printf_float+0x13a>
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	6123      	str	r3, [r4, #16]
 8005dca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d0a2      	beq.n	8005d18 <_printf_float+0x88>
 8005dd2:	232d      	movs	r3, #45	; 0x2d
 8005dd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dd8:	e79e      	b.n	8005d18 <_printf_float+0x88>
 8005dda:	9904      	ldr	r1, [sp, #16]
 8005ddc:	2947      	cmp	r1, #71	; 0x47
 8005dde:	d1c1      	bne.n	8005d64 <_printf_float+0xd4>
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1bf      	bne.n	8005d64 <_printf_float+0xd4>
 8005de4:	2301      	movs	r3, #1
 8005de6:	e7bc      	b.n	8005d62 <_printf_float+0xd2>
 8005de8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005dec:	d118      	bne.n	8005e20 <_printf_float+0x190>
 8005dee:	2900      	cmp	r1, #0
 8005df0:	6863      	ldr	r3, [r4, #4]
 8005df2:	dd0b      	ble.n	8005e0c <_printf_float+0x17c>
 8005df4:	6121      	str	r1, [r4, #16]
 8005df6:	b913      	cbnz	r3, 8005dfe <_printf_float+0x16e>
 8005df8:	6822      	ldr	r2, [r4, #0]
 8005dfa:	07d0      	lsls	r0, r2, #31
 8005dfc:	d502      	bpl.n	8005e04 <_printf_float+0x174>
 8005dfe:	3301      	adds	r3, #1
 8005e00:	440b      	add	r3, r1
 8005e02:	6123      	str	r3, [r4, #16]
 8005e04:	2300      	movs	r3, #0
 8005e06:	65a1      	str	r1, [r4, #88]	; 0x58
 8005e08:	9304      	str	r3, [sp, #16]
 8005e0a:	e7de      	b.n	8005dca <_printf_float+0x13a>
 8005e0c:	b913      	cbnz	r3, 8005e14 <_printf_float+0x184>
 8005e0e:	6822      	ldr	r2, [r4, #0]
 8005e10:	07d2      	lsls	r2, r2, #31
 8005e12:	d501      	bpl.n	8005e18 <_printf_float+0x188>
 8005e14:	3302      	adds	r3, #2
 8005e16:	e7f4      	b.n	8005e02 <_printf_float+0x172>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e7f2      	b.n	8005e02 <_printf_float+0x172>
 8005e1c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005e20:	9b08      	ldr	r3, [sp, #32]
 8005e22:	4299      	cmp	r1, r3
 8005e24:	db05      	blt.n	8005e32 <_printf_float+0x1a2>
 8005e26:	6823      	ldr	r3, [r4, #0]
 8005e28:	6121      	str	r1, [r4, #16]
 8005e2a:	07d8      	lsls	r0, r3, #31
 8005e2c:	d5ea      	bpl.n	8005e04 <_printf_float+0x174>
 8005e2e:	1c4b      	adds	r3, r1, #1
 8005e30:	e7e7      	b.n	8005e02 <_printf_float+0x172>
 8005e32:	2900      	cmp	r1, #0
 8005e34:	bfd4      	ite	le
 8005e36:	f1c1 0202 	rsble	r2, r1, #2
 8005e3a:	2201      	movgt	r2, #1
 8005e3c:	4413      	add	r3, r2
 8005e3e:	e7e0      	b.n	8005e02 <_printf_float+0x172>
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	055a      	lsls	r2, r3, #21
 8005e44:	d407      	bmi.n	8005e56 <_printf_float+0x1c6>
 8005e46:	6923      	ldr	r3, [r4, #16]
 8005e48:	4642      	mov	r2, r8
 8005e4a:	4631      	mov	r1, r6
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	47b8      	blx	r7
 8005e50:	3001      	adds	r0, #1
 8005e52:	d12a      	bne.n	8005eaa <_printf_float+0x21a>
 8005e54:	e76a      	b.n	8005d2c <_printf_float+0x9c>
 8005e56:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005e5a:	f240 80e2 	bls.w	8006022 <_printf_float+0x392>
 8005e5e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005e62:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e6a:	d133      	bne.n	8005ed4 <_printf_float+0x244>
 8005e6c:	4a38      	ldr	r2, [pc, #224]	; (8005f50 <_printf_float+0x2c0>)
 8005e6e:	2301      	movs	r3, #1
 8005e70:	4631      	mov	r1, r6
 8005e72:	4628      	mov	r0, r5
 8005e74:	47b8      	blx	r7
 8005e76:	3001      	adds	r0, #1
 8005e78:	f43f af58 	beq.w	8005d2c <_printf_float+0x9c>
 8005e7c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	db02      	blt.n	8005e8a <_printf_float+0x1fa>
 8005e84:	6823      	ldr	r3, [r4, #0]
 8005e86:	07d8      	lsls	r0, r3, #31
 8005e88:	d50f      	bpl.n	8005eaa <_printf_float+0x21a>
 8005e8a:	4653      	mov	r3, sl
 8005e8c:	465a      	mov	r2, fp
 8005e8e:	4631      	mov	r1, r6
 8005e90:	4628      	mov	r0, r5
 8005e92:	47b8      	blx	r7
 8005e94:	3001      	adds	r0, #1
 8005e96:	f43f af49 	beq.w	8005d2c <_printf_float+0x9c>
 8005e9a:	f04f 0800 	mov.w	r8, #0
 8005e9e:	f104 091a 	add.w	r9, r4, #26
 8005ea2:	9b08      	ldr	r3, [sp, #32]
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	4543      	cmp	r3, r8
 8005ea8:	dc09      	bgt.n	8005ebe <_printf_float+0x22e>
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	079b      	lsls	r3, r3, #30
 8005eae:	f100 8108 	bmi.w	80060c2 <_printf_float+0x432>
 8005eb2:	68e0      	ldr	r0, [r4, #12]
 8005eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eb6:	4298      	cmp	r0, r3
 8005eb8:	bfb8      	it	lt
 8005eba:	4618      	movlt	r0, r3
 8005ebc:	e738      	b.n	8005d30 <_printf_float+0xa0>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	464a      	mov	r2, r9
 8005ec2:	4631      	mov	r1, r6
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	47b8      	blx	r7
 8005ec8:	3001      	adds	r0, #1
 8005eca:	f43f af2f 	beq.w	8005d2c <_printf_float+0x9c>
 8005ece:	f108 0801 	add.w	r8, r8, #1
 8005ed2:	e7e6      	b.n	8005ea2 <_printf_float+0x212>
 8005ed4:	9b07      	ldr	r3, [sp, #28]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	dc3c      	bgt.n	8005f54 <_printf_float+0x2c4>
 8005eda:	4a1d      	ldr	r2, [pc, #116]	; (8005f50 <_printf_float+0x2c0>)
 8005edc:	2301      	movs	r3, #1
 8005ede:	4631      	mov	r1, r6
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	47b8      	blx	r7
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	f43f af21 	beq.w	8005d2c <_printf_float+0x9c>
 8005eea:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	d102      	bne.n	8005ef8 <_printf_float+0x268>
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	07d9      	lsls	r1, r3, #31
 8005ef6:	d5d8      	bpl.n	8005eaa <_printf_float+0x21a>
 8005ef8:	4653      	mov	r3, sl
 8005efa:	465a      	mov	r2, fp
 8005efc:	4631      	mov	r1, r6
 8005efe:	4628      	mov	r0, r5
 8005f00:	47b8      	blx	r7
 8005f02:	3001      	adds	r0, #1
 8005f04:	f43f af12 	beq.w	8005d2c <_printf_float+0x9c>
 8005f08:	f04f 0900 	mov.w	r9, #0
 8005f0c:	f104 0a1a 	add.w	sl, r4, #26
 8005f10:	9b07      	ldr	r3, [sp, #28]
 8005f12:	425b      	negs	r3, r3
 8005f14:	454b      	cmp	r3, r9
 8005f16:	dc01      	bgt.n	8005f1c <_printf_float+0x28c>
 8005f18:	9b08      	ldr	r3, [sp, #32]
 8005f1a:	e795      	b.n	8005e48 <_printf_float+0x1b8>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	4652      	mov	r2, sl
 8005f20:	4631      	mov	r1, r6
 8005f22:	4628      	mov	r0, r5
 8005f24:	47b8      	blx	r7
 8005f26:	3001      	adds	r0, #1
 8005f28:	f43f af00 	beq.w	8005d2c <_printf_float+0x9c>
 8005f2c:	f109 0901 	add.w	r9, r9, #1
 8005f30:	e7ee      	b.n	8005f10 <_printf_float+0x280>
 8005f32:	bf00      	nop
 8005f34:	f3af 8000 	nop.w
 8005f38:	ffffffff 	.word	0xffffffff
 8005f3c:	7fefffff 	.word	0x7fefffff
 8005f40:	080094f0 	.word	0x080094f0
 8005f44:	080094f4 	.word	0x080094f4
 8005f48:	080094fc 	.word	0x080094fc
 8005f4c:	080094f8 	.word	0x080094f8
 8005f50:	08009500 	.word	0x08009500
 8005f54:	9a08      	ldr	r2, [sp, #32]
 8005f56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	bfa8      	it	ge
 8005f5c:	461a      	movge	r2, r3
 8005f5e:	2a00      	cmp	r2, #0
 8005f60:	4691      	mov	r9, r2
 8005f62:	dc38      	bgt.n	8005fd6 <_printf_float+0x346>
 8005f64:	2300      	movs	r3, #0
 8005f66:	9305      	str	r3, [sp, #20]
 8005f68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f6c:	f104 021a 	add.w	r2, r4, #26
 8005f70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f72:	9905      	ldr	r1, [sp, #20]
 8005f74:	9304      	str	r3, [sp, #16]
 8005f76:	eba3 0309 	sub.w	r3, r3, r9
 8005f7a:	428b      	cmp	r3, r1
 8005f7c:	dc33      	bgt.n	8005fe6 <_printf_float+0x356>
 8005f7e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	db3c      	blt.n	8006000 <_printf_float+0x370>
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	07da      	lsls	r2, r3, #31
 8005f8a:	d439      	bmi.n	8006000 <_printf_float+0x370>
 8005f8c:	9b08      	ldr	r3, [sp, #32]
 8005f8e:	9a04      	ldr	r2, [sp, #16]
 8005f90:	9907      	ldr	r1, [sp, #28]
 8005f92:	1a9a      	subs	r2, r3, r2
 8005f94:	eba3 0901 	sub.w	r9, r3, r1
 8005f98:	4591      	cmp	r9, r2
 8005f9a:	bfa8      	it	ge
 8005f9c:	4691      	movge	r9, r2
 8005f9e:	f1b9 0f00 	cmp.w	r9, #0
 8005fa2:	dc35      	bgt.n	8006010 <_printf_float+0x380>
 8005fa4:	f04f 0800 	mov.w	r8, #0
 8005fa8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fac:	f104 0a1a 	add.w	sl, r4, #26
 8005fb0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005fb4:	1a9b      	subs	r3, r3, r2
 8005fb6:	eba3 0309 	sub.w	r3, r3, r9
 8005fba:	4543      	cmp	r3, r8
 8005fbc:	f77f af75 	ble.w	8005eaa <_printf_float+0x21a>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	4652      	mov	r2, sl
 8005fc4:	4631      	mov	r1, r6
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	47b8      	blx	r7
 8005fca:	3001      	adds	r0, #1
 8005fcc:	f43f aeae 	beq.w	8005d2c <_printf_float+0x9c>
 8005fd0:	f108 0801 	add.w	r8, r8, #1
 8005fd4:	e7ec      	b.n	8005fb0 <_printf_float+0x320>
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	4631      	mov	r1, r6
 8005fda:	4642      	mov	r2, r8
 8005fdc:	4628      	mov	r0, r5
 8005fde:	47b8      	blx	r7
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	d1bf      	bne.n	8005f64 <_printf_float+0x2d4>
 8005fe4:	e6a2      	b.n	8005d2c <_printf_float+0x9c>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	4631      	mov	r1, r6
 8005fea:	4628      	mov	r0, r5
 8005fec:	9204      	str	r2, [sp, #16]
 8005fee:	47b8      	blx	r7
 8005ff0:	3001      	adds	r0, #1
 8005ff2:	f43f ae9b 	beq.w	8005d2c <_printf_float+0x9c>
 8005ff6:	9b05      	ldr	r3, [sp, #20]
 8005ff8:	9a04      	ldr	r2, [sp, #16]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	9305      	str	r3, [sp, #20]
 8005ffe:	e7b7      	b.n	8005f70 <_printf_float+0x2e0>
 8006000:	4653      	mov	r3, sl
 8006002:	465a      	mov	r2, fp
 8006004:	4631      	mov	r1, r6
 8006006:	4628      	mov	r0, r5
 8006008:	47b8      	blx	r7
 800600a:	3001      	adds	r0, #1
 800600c:	d1be      	bne.n	8005f8c <_printf_float+0x2fc>
 800600e:	e68d      	b.n	8005d2c <_printf_float+0x9c>
 8006010:	9a04      	ldr	r2, [sp, #16]
 8006012:	464b      	mov	r3, r9
 8006014:	4442      	add	r2, r8
 8006016:	4631      	mov	r1, r6
 8006018:	4628      	mov	r0, r5
 800601a:	47b8      	blx	r7
 800601c:	3001      	adds	r0, #1
 800601e:	d1c1      	bne.n	8005fa4 <_printf_float+0x314>
 8006020:	e684      	b.n	8005d2c <_printf_float+0x9c>
 8006022:	9a08      	ldr	r2, [sp, #32]
 8006024:	2a01      	cmp	r2, #1
 8006026:	dc01      	bgt.n	800602c <_printf_float+0x39c>
 8006028:	07db      	lsls	r3, r3, #31
 800602a:	d537      	bpl.n	800609c <_printf_float+0x40c>
 800602c:	2301      	movs	r3, #1
 800602e:	4642      	mov	r2, r8
 8006030:	4631      	mov	r1, r6
 8006032:	4628      	mov	r0, r5
 8006034:	47b8      	blx	r7
 8006036:	3001      	adds	r0, #1
 8006038:	f43f ae78 	beq.w	8005d2c <_printf_float+0x9c>
 800603c:	4653      	mov	r3, sl
 800603e:	465a      	mov	r2, fp
 8006040:	4631      	mov	r1, r6
 8006042:	4628      	mov	r0, r5
 8006044:	47b8      	blx	r7
 8006046:	3001      	adds	r0, #1
 8006048:	f43f ae70 	beq.w	8005d2c <_printf_float+0x9c>
 800604c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006050:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006058:	d01b      	beq.n	8006092 <_printf_float+0x402>
 800605a:	9b08      	ldr	r3, [sp, #32]
 800605c:	f108 0201 	add.w	r2, r8, #1
 8006060:	3b01      	subs	r3, #1
 8006062:	4631      	mov	r1, r6
 8006064:	4628      	mov	r0, r5
 8006066:	47b8      	blx	r7
 8006068:	3001      	adds	r0, #1
 800606a:	d10e      	bne.n	800608a <_printf_float+0x3fa>
 800606c:	e65e      	b.n	8005d2c <_printf_float+0x9c>
 800606e:	2301      	movs	r3, #1
 8006070:	464a      	mov	r2, r9
 8006072:	4631      	mov	r1, r6
 8006074:	4628      	mov	r0, r5
 8006076:	47b8      	blx	r7
 8006078:	3001      	adds	r0, #1
 800607a:	f43f ae57 	beq.w	8005d2c <_printf_float+0x9c>
 800607e:	f108 0801 	add.w	r8, r8, #1
 8006082:	9b08      	ldr	r3, [sp, #32]
 8006084:	3b01      	subs	r3, #1
 8006086:	4543      	cmp	r3, r8
 8006088:	dcf1      	bgt.n	800606e <_printf_float+0x3de>
 800608a:	9b04      	ldr	r3, [sp, #16]
 800608c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006090:	e6db      	b.n	8005e4a <_printf_float+0x1ba>
 8006092:	f04f 0800 	mov.w	r8, #0
 8006096:	f104 091a 	add.w	r9, r4, #26
 800609a:	e7f2      	b.n	8006082 <_printf_float+0x3f2>
 800609c:	2301      	movs	r3, #1
 800609e:	4642      	mov	r2, r8
 80060a0:	e7df      	b.n	8006062 <_printf_float+0x3d2>
 80060a2:	2301      	movs	r3, #1
 80060a4:	464a      	mov	r2, r9
 80060a6:	4631      	mov	r1, r6
 80060a8:	4628      	mov	r0, r5
 80060aa:	47b8      	blx	r7
 80060ac:	3001      	adds	r0, #1
 80060ae:	f43f ae3d 	beq.w	8005d2c <_printf_float+0x9c>
 80060b2:	f108 0801 	add.w	r8, r8, #1
 80060b6:	68e3      	ldr	r3, [r4, #12]
 80060b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060ba:	1a5b      	subs	r3, r3, r1
 80060bc:	4543      	cmp	r3, r8
 80060be:	dcf0      	bgt.n	80060a2 <_printf_float+0x412>
 80060c0:	e6f7      	b.n	8005eb2 <_printf_float+0x222>
 80060c2:	f04f 0800 	mov.w	r8, #0
 80060c6:	f104 0919 	add.w	r9, r4, #25
 80060ca:	e7f4      	b.n	80060b6 <_printf_float+0x426>

080060cc <_printf_common>:
 80060cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060d0:	4616      	mov	r6, r2
 80060d2:	4699      	mov	r9, r3
 80060d4:	688a      	ldr	r2, [r1, #8]
 80060d6:	690b      	ldr	r3, [r1, #16]
 80060d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060dc:	4293      	cmp	r3, r2
 80060de:	bfb8      	it	lt
 80060e0:	4613      	movlt	r3, r2
 80060e2:	6033      	str	r3, [r6, #0]
 80060e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060e8:	4607      	mov	r7, r0
 80060ea:	460c      	mov	r4, r1
 80060ec:	b10a      	cbz	r2, 80060f2 <_printf_common+0x26>
 80060ee:	3301      	adds	r3, #1
 80060f0:	6033      	str	r3, [r6, #0]
 80060f2:	6823      	ldr	r3, [r4, #0]
 80060f4:	0699      	lsls	r1, r3, #26
 80060f6:	bf42      	ittt	mi
 80060f8:	6833      	ldrmi	r3, [r6, #0]
 80060fa:	3302      	addmi	r3, #2
 80060fc:	6033      	strmi	r3, [r6, #0]
 80060fe:	6825      	ldr	r5, [r4, #0]
 8006100:	f015 0506 	ands.w	r5, r5, #6
 8006104:	d106      	bne.n	8006114 <_printf_common+0x48>
 8006106:	f104 0a19 	add.w	sl, r4, #25
 800610a:	68e3      	ldr	r3, [r4, #12]
 800610c:	6832      	ldr	r2, [r6, #0]
 800610e:	1a9b      	subs	r3, r3, r2
 8006110:	42ab      	cmp	r3, r5
 8006112:	dc26      	bgt.n	8006162 <_printf_common+0x96>
 8006114:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006118:	1e13      	subs	r3, r2, #0
 800611a:	6822      	ldr	r2, [r4, #0]
 800611c:	bf18      	it	ne
 800611e:	2301      	movne	r3, #1
 8006120:	0692      	lsls	r2, r2, #26
 8006122:	d42b      	bmi.n	800617c <_printf_common+0xb0>
 8006124:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006128:	4649      	mov	r1, r9
 800612a:	4638      	mov	r0, r7
 800612c:	47c0      	blx	r8
 800612e:	3001      	adds	r0, #1
 8006130:	d01e      	beq.n	8006170 <_printf_common+0xa4>
 8006132:	6823      	ldr	r3, [r4, #0]
 8006134:	68e5      	ldr	r5, [r4, #12]
 8006136:	6832      	ldr	r2, [r6, #0]
 8006138:	f003 0306 	and.w	r3, r3, #6
 800613c:	2b04      	cmp	r3, #4
 800613e:	bf08      	it	eq
 8006140:	1aad      	subeq	r5, r5, r2
 8006142:	68a3      	ldr	r3, [r4, #8]
 8006144:	6922      	ldr	r2, [r4, #16]
 8006146:	bf0c      	ite	eq
 8006148:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800614c:	2500      	movne	r5, #0
 800614e:	4293      	cmp	r3, r2
 8006150:	bfc4      	itt	gt
 8006152:	1a9b      	subgt	r3, r3, r2
 8006154:	18ed      	addgt	r5, r5, r3
 8006156:	2600      	movs	r6, #0
 8006158:	341a      	adds	r4, #26
 800615a:	42b5      	cmp	r5, r6
 800615c:	d11a      	bne.n	8006194 <_printf_common+0xc8>
 800615e:	2000      	movs	r0, #0
 8006160:	e008      	b.n	8006174 <_printf_common+0xa8>
 8006162:	2301      	movs	r3, #1
 8006164:	4652      	mov	r2, sl
 8006166:	4649      	mov	r1, r9
 8006168:	4638      	mov	r0, r7
 800616a:	47c0      	blx	r8
 800616c:	3001      	adds	r0, #1
 800616e:	d103      	bne.n	8006178 <_printf_common+0xac>
 8006170:	f04f 30ff 	mov.w	r0, #4294967295
 8006174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006178:	3501      	adds	r5, #1
 800617a:	e7c6      	b.n	800610a <_printf_common+0x3e>
 800617c:	18e1      	adds	r1, r4, r3
 800617e:	1c5a      	adds	r2, r3, #1
 8006180:	2030      	movs	r0, #48	; 0x30
 8006182:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006186:	4422      	add	r2, r4
 8006188:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800618c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006190:	3302      	adds	r3, #2
 8006192:	e7c7      	b.n	8006124 <_printf_common+0x58>
 8006194:	2301      	movs	r3, #1
 8006196:	4622      	mov	r2, r4
 8006198:	4649      	mov	r1, r9
 800619a:	4638      	mov	r0, r7
 800619c:	47c0      	blx	r8
 800619e:	3001      	adds	r0, #1
 80061a0:	d0e6      	beq.n	8006170 <_printf_common+0xa4>
 80061a2:	3601      	adds	r6, #1
 80061a4:	e7d9      	b.n	800615a <_printf_common+0x8e>
	...

080061a8 <_printf_i>:
 80061a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061ac:	7e0f      	ldrb	r7, [r1, #24]
 80061ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061b0:	2f78      	cmp	r7, #120	; 0x78
 80061b2:	4691      	mov	r9, r2
 80061b4:	4680      	mov	r8, r0
 80061b6:	460c      	mov	r4, r1
 80061b8:	469a      	mov	sl, r3
 80061ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061be:	d807      	bhi.n	80061d0 <_printf_i+0x28>
 80061c0:	2f62      	cmp	r7, #98	; 0x62
 80061c2:	d80a      	bhi.n	80061da <_printf_i+0x32>
 80061c4:	2f00      	cmp	r7, #0
 80061c6:	f000 80d8 	beq.w	800637a <_printf_i+0x1d2>
 80061ca:	2f58      	cmp	r7, #88	; 0x58
 80061cc:	f000 80a3 	beq.w	8006316 <_printf_i+0x16e>
 80061d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061d8:	e03a      	b.n	8006250 <_printf_i+0xa8>
 80061da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061de:	2b15      	cmp	r3, #21
 80061e0:	d8f6      	bhi.n	80061d0 <_printf_i+0x28>
 80061e2:	a101      	add	r1, pc, #4	; (adr r1, 80061e8 <_printf_i+0x40>)
 80061e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061e8:	08006241 	.word	0x08006241
 80061ec:	08006255 	.word	0x08006255
 80061f0:	080061d1 	.word	0x080061d1
 80061f4:	080061d1 	.word	0x080061d1
 80061f8:	080061d1 	.word	0x080061d1
 80061fc:	080061d1 	.word	0x080061d1
 8006200:	08006255 	.word	0x08006255
 8006204:	080061d1 	.word	0x080061d1
 8006208:	080061d1 	.word	0x080061d1
 800620c:	080061d1 	.word	0x080061d1
 8006210:	080061d1 	.word	0x080061d1
 8006214:	08006361 	.word	0x08006361
 8006218:	08006285 	.word	0x08006285
 800621c:	08006343 	.word	0x08006343
 8006220:	080061d1 	.word	0x080061d1
 8006224:	080061d1 	.word	0x080061d1
 8006228:	08006383 	.word	0x08006383
 800622c:	080061d1 	.word	0x080061d1
 8006230:	08006285 	.word	0x08006285
 8006234:	080061d1 	.word	0x080061d1
 8006238:	080061d1 	.word	0x080061d1
 800623c:	0800634b 	.word	0x0800634b
 8006240:	682b      	ldr	r3, [r5, #0]
 8006242:	1d1a      	adds	r2, r3, #4
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	602a      	str	r2, [r5, #0]
 8006248:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800624c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006250:	2301      	movs	r3, #1
 8006252:	e0a3      	b.n	800639c <_printf_i+0x1f4>
 8006254:	6820      	ldr	r0, [r4, #0]
 8006256:	6829      	ldr	r1, [r5, #0]
 8006258:	0606      	lsls	r6, r0, #24
 800625a:	f101 0304 	add.w	r3, r1, #4
 800625e:	d50a      	bpl.n	8006276 <_printf_i+0xce>
 8006260:	680e      	ldr	r6, [r1, #0]
 8006262:	602b      	str	r3, [r5, #0]
 8006264:	2e00      	cmp	r6, #0
 8006266:	da03      	bge.n	8006270 <_printf_i+0xc8>
 8006268:	232d      	movs	r3, #45	; 0x2d
 800626a:	4276      	negs	r6, r6
 800626c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006270:	485e      	ldr	r0, [pc, #376]	; (80063ec <_printf_i+0x244>)
 8006272:	230a      	movs	r3, #10
 8006274:	e019      	b.n	80062aa <_printf_i+0x102>
 8006276:	680e      	ldr	r6, [r1, #0]
 8006278:	602b      	str	r3, [r5, #0]
 800627a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800627e:	bf18      	it	ne
 8006280:	b236      	sxthne	r6, r6
 8006282:	e7ef      	b.n	8006264 <_printf_i+0xbc>
 8006284:	682b      	ldr	r3, [r5, #0]
 8006286:	6820      	ldr	r0, [r4, #0]
 8006288:	1d19      	adds	r1, r3, #4
 800628a:	6029      	str	r1, [r5, #0]
 800628c:	0601      	lsls	r1, r0, #24
 800628e:	d501      	bpl.n	8006294 <_printf_i+0xec>
 8006290:	681e      	ldr	r6, [r3, #0]
 8006292:	e002      	b.n	800629a <_printf_i+0xf2>
 8006294:	0646      	lsls	r6, r0, #25
 8006296:	d5fb      	bpl.n	8006290 <_printf_i+0xe8>
 8006298:	881e      	ldrh	r6, [r3, #0]
 800629a:	4854      	ldr	r0, [pc, #336]	; (80063ec <_printf_i+0x244>)
 800629c:	2f6f      	cmp	r7, #111	; 0x6f
 800629e:	bf0c      	ite	eq
 80062a0:	2308      	moveq	r3, #8
 80062a2:	230a      	movne	r3, #10
 80062a4:	2100      	movs	r1, #0
 80062a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062aa:	6865      	ldr	r5, [r4, #4]
 80062ac:	60a5      	str	r5, [r4, #8]
 80062ae:	2d00      	cmp	r5, #0
 80062b0:	bfa2      	ittt	ge
 80062b2:	6821      	ldrge	r1, [r4, #0]
 80062b4:	f021 0104 	bicge.w	r1, r1, #4
 80062b8:	6021      	strge	r1, [r4, #0]
 80062ba:	b90e      	cbnz	r6, 80062c0 <_printf_i+0x118>
 80062bc:	2d00      	cmp	r5, #0
 80062be:	d04d      	beq.n	800635c <_printf_i+0x1b4>
 80062c0:	4615      	mov	r5, r2
 80062c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80062c6:	fb03 6711 	mls	r7, r3, r1, r6
 80062ca:	5dc7      	ldrb	r7, [r0, r7]
 80062cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062d0:	4637      	mov	r7, r6
 80062d2:	42bb      	cmp	r3, r7
 80062d4:	460e      	mov	r6, r1
 80062d6:	d9f4      	bls.n	80062c2 <_printf_i+0x11a>
 80062d8:	2b08      	cmp	r3, #8
 80062da:	d10b      	bne.n	80062f4 <_printf_i+0x14c>
 80062dc:	6823      	ldr	r3, [r4, #0]
 80062de:	07de      	lsls	r6, r3, #31
 80062e0:	d508      	bpl.n	80062f4 <_printf_i+0x14c>
 80062e2:	6923      	ldr	r3, [r4, #16]
 80062e4:	6861      	ldr	r1, [r4, #4]
 80062e6:	4299      	cmp	r1, r3
 80062e8:	bfde      	ittt	le
 80062ea:	2330      	movle	r3, #48	; 0x30
 80062ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062f4:	1b52      	subs	r2, r2, r5
 80062f6:	6122      	str	r2, [r4, #16]
 80062f8:	f8cd a000 	str.w	sl, [sp]
 80062fc:	464b      	mov	r3, r9
 80062fe:	aa03      	add	r2, sp, #12
 8006300:	4621      	mov	r1, r4
 8006302:	4640      	mov	r0, r8
 8006304:	f7ff fee2 	bl	80060cc <_printf_common>
 8006308:	3001      	adds	r0, #1
 800630a:	d14c      	bne.n	80063a6 <_printf_i+0x1fe>
 800630c:	f04f 30ff 	mov.w	r0, #4294967295
 8006310:	b004      	add	sp, #16
 8006312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006316:	4835      	ldr	r0, [pc, #212]	; (80063ec <_printf_i+0x244>)
 8006318:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800631c:	6829      	ldr	r1, [r5, #0]
 800631e:	6823      	ldr	r3, [r4, #0]
 8006320:	f851 6b04 	ldr.w	r6, [r1], #4
 8006324:	6029      	str	r1, [r5, #0]
 8006326:	061d      	lsls	r5, r3, #24
 8006328:	d514      	bpl.n	8006354 <_printf_i+0x1ac>
 800632a:	07df      	lsls	r7, r3, #31
 800632c:	bf44      	itt	mi
 800632e:	f043 0320 	orrmi.w	r3, r3, #32
 8006332:	6023      	strmi	r3, [r4, #0]
 8006334:	b91e      	cbnz	r6, 800633e <_printf_i+0x196>
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	f023 0320 	bic.w	r3, r3, #32
 800633c:	6023      	str	r3, [r4, #0]
 800633e:	2310      	movs	r3, #16
 8006340:	e7b0      	b.n	80062a4 <_printf_i+0xfc>
 8006342:	6823      	ldr	r3, [r4, #0]
 8006344:	f043 0320 	orr.w	r3, r3, #32
 8006348:	6023      	str	r3, [r4, #0]
 800634a:	2378      	movs	r3, #120	; 0x78
 800634c:	4828      	ldr	r0, [pc, #160]	; (80063f0 <_printf_i+0x248>)
 800634e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006352:	e7e3      	b.n	800631c <_printf_i+0x174>
 8006354:	0659      	lsls	r1, r3, #25
 8006356:	bf48      	it	mi
 8006358:	b2b6      	uxthmi	r6, r6
 800635a:	e7e6      	b.n	800632a <_printf_i+0x182>
 800635c:	4615      	mov	r5, r2
 800635e:	e7bb      	b.n	80062d8 <_printf_i+0x130>
 8006360:	682b      	ldr	r3, [r5, #0]
 8006362:	6826      	ldr	r6, [r4, #0]
 8006364:	6961      	ldr	r1, [r4, #20]
 8006366:	1d18      	adds	r0, r3, #4
 8006368:	6028      	str	r0, [r5, #0]
 800636a:	0635      	lsls	r5, r6, #24
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	d501      	bpl.n	8006374 <_printf_i+0x1cc>
 8006370:	6019      	str	r1, [r3, #0]
 8006372:	e002      	b.n	800637a <_printf_i+0x1d2>
 8006374:	0670      	lsls	r0, r6, #25
 8006376:	d5fb      	bpl.n	8006370 <_printf_i+0x1c8>
 8006378:	8019      	strh	r1, [r3, #0]
 800637a:	2300      	movs	r3, #0
 800637c:	6123      	str	r3, [r4, #16]
 800637e:	4615      	mov	r5, r2
 8006380:	e7ba      	b.n	80062f8 <_printf_i+0x150>
 8006382:	682b      	ldr	r3, [r5, #0]
 8006384:	1d1a      	adds	r2, r3, #4
 8006386:	602a      	str	r2, [r5, #0]
 8006388:	681d      	ldr	r5, [r3, #0]
 800638a:	6862      	ldr	r2, [r4, #4]
 800638c:	2100      	movs	r1, #0
 800638e:	4628      	mov	r0, r5
 8006390:	f7f9 ffc6 	bl	8000320 <memchr>
 8006394:	b108      	cbz	r0, 800639a <_printf_i+0x1f2>
 8006396:	1b40      	subs	r0, r0, r5
 8006398:	6060      	str	r0, [r4, #4]
 800639a:	6863      	ldr	r3, [r4, #4]
 800639c:	6123      	str	r3, [r4, #16]
 800639e:	2300      	movs	r3, #0
 80063a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063a4:	e7a8      	b.n	80062f8 <_printf_i+0x150>
 80063a6:	6923      	ldr	r3, [r4, #16]
 80063a8:	462a      	mov	r2, r5
 80063aa:	4649      	mov	r1, r9
 80063ac:	4640      	mov	r0, r8
 80063ae:	47d0      	blx	sl
 80063b0:	3001      	adds	r0, #1
 80063b2:	d0ab      	beq.n	800630c <_printf_i+0x164>
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	079b      	lsls	r3, r3, #30
 80063b8:	d413      	bmi.n	80063e2 <_printf_i+0x23a>
 80063ba:	68e0      	ldr	r0, [r4, #12]
 80063bc:	9b03      	ldr	r3, [sp, #12]
 80063be:	4298      	cmp	r0, r3
 80063c0:	bfb8      	it	lt
 80063c2:	4618      	movlt	r0, r3
 80063c4:	e7a4      	b.n	8006310 <_printf_i+0x168>
 80063c6:	2301      	movs	r3, #1
 80063c8:	4632      	mov	r2, r6
 80063ca:	4649      	mov	r1, r9
 80063cc:	4640      	mov	r0, r8
 80063ce:	47d0      	blx	sl
 80063d0:	3001      	adds	r0, #1
 80063d2:	d09b      	beq.n	800630c <_printf_i+0x164>
 80063d4:	3501      	adds	r5, #1
 80063d6:	68e3      	ldr	r3, [r4, #12]
 80063d8:	9903      	ldr	r1, [sp, #12]
 80063da:	1a5b      	subs	r3, r3, r1
 80063dc:	42ab      	cmp	r3, r5
 80063de:	dcf2      	bgt.n	80063c6 <_printf_i+0x21e>
 80063e0:	e7eb      	b.n	80063ba <_printf_i+0x212>
 80063e2:	2500      	movs	r5, #0
 80063e4:	f104 0619 	add.w	r6, r4, #25
 80063e8:	e7f5      	b.n	80063d6 <_printf_i+0x22e>
 80063ea:	bf00      	nop
 80063ec:	08009502 	.word	0x08009502
 80063f0:	08009513 	.word	0x08009513

080063f4 <iprintf>:
 80063f4:	b40f      	push	{r0, r1, r2, r3}
 80063f6:	4b0a      	ldr	r3, [pc, #40]	; (8006420 <iprintf+0x2c>)
 80063f8:	b513      	push	{r0, r1, r4, lr}
 80063fa:	681c      	ldr	r4, [r3, #0]
 80063fc:	b124      	cbz	r4, 8006408 <iprintf+0x14>
 80063fe:	69a3      	ldr	r3, [r4, #24]
 8006400:	b913      	cbnz	r3, 8006408 <iprintf+0x14>
 8006402:	4620      	mov	r0, r4
 8006404:	f001 f898 	bl	8007538 <__sinit>
 8006408:	ab05      	add	r3, sp, #20
 800640a:	9a04      	ldr	r2, [sp, #16]
 800640c:	68a1      	ldr	r1, [r4, #8]
 800640e:	9301      	str	r3, [sp, #4]
 8006410:	4620      	mov	r0, r4
 8006412:	f001 fec7 	bl	80081a4 <_vfiprintf_r>
 8006416:	b002      	add	sp, #8
 8006418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800641c:	b004      	add	sp, #16
 800641e:	4770      	bx	lr
 8006420:	24000074 	.word	0x24000074

08006424 <_puts_r>:
 8006424:	b570      	push	{r4, r5, r6, lr}
 8006426:	460e      	mov	r6, r1
 8006428:	4605      	mov	r5, r0
 800642a:	b118      	cbz	r0, 8006434 <_puts_r+0x10>
 800642c:	6983      	ldr	r3, [r0, #24]
 800642e:	b90b      	cbnz	r3, 8006434 <_puts_r+0x10>
 8006430:	f001 f882 	bl	8007538 <__sinit>
 8006434:	69ab      	ldr	r3, [r5, #24]
 8006436:	68ac      	ldr	r4, [r5, #8]
 8006438:	b913      	cbnz	r3, 8006440 <_puts_r+0x1c>
 800643a:	4628      	mov	r0, r5
 800643c:	f001 f87c 	bl	8007538 <__sinit>
 8006440:	4b2c      	ldr	r3, [pc, #176]	; (80064f4 <_puts_r+0xd0>)
 8006442:	429c      	cmp	r4, r3
 8006444:	d120      	bne.n	8006488 <_puts_r+0x64>
 8006446:	686c      	ldr	r4, [r5, #4]
 8006448:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800644a:	07db      	lsls	r3, r3, #31
 800644c:	d405      	bmi.n	800645a <_puts_r+0x36>
 800644e:	89a3      	ldrh	r3, [r4, #12]
 8006450:	0598      	lsls	r0, r3, #22
 8006452:	d402      	bmi.n	800645a <_puts_r+0x36>
 8006454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006456:	f001 f912 	bl	800767e <__retarget_lock_acquire_recursive>
 800645a:	89a3      	ldrh	r3, [r4, #12]
 800645c:	0719      	lsls	r1, r3, #28
 800645e:	d51d      	bpl.n	800649c <_puts_r+0x78>
 8006460:	6923      	ldr	r3, [r4, #16]
 8006462:	b1db      	cbz	r3, 800649c <_puts_r+0x78>
 8006464:	3e01      	subs	r6, #1
 8006466:	68a3      	ldr	r3, [r4, #8]
 8006468:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800646c:	3b01      	subs	r3, #1
 800646e:	60a3      	str	r3, [r4, #8]
 8006470:	bb39      	cbnz	r1, 80064c2 <_puts_r+0x9e>
 8006472:	2b00      	cmp	r3, #0
 8006474:	da38      	bge.n	80064e8 <_puts_r+0xc4>
 8006476:	4622      	mov	r2, r4
 8006478:	210a      	movs	r1, #10
 800647a:	4628      	mov	r0, r5
 800647c:	f000 f888 	bl	8006590 <__swbuf_r>
 8006480:	3001      	adds	r0, #1
 8006482:	d011      	beq.n	80064a8 <_puts_r+0x84>
 8006484:	250a      	movs	r5, #10
 8006486:	e011      	b.n	80064ac <_puts_r+0x88>
 8006488:	4b1b      	ldr	r3, [pc, #108]	; (80064f8 <_puts_r+0xd4>)
 800648a:	429c      	cmp	r4, r3
 800648c:	d101      	bne.n	8006492 <_puts_r+0x6e>
 800648e:	68ac      	ldr	r4, [r5, #8]
 8006490:	e7da      	b.n	8006448 <_puts_r+0x24>
 8006492:	4b1a      	ldr	r3, [pc, #104]	; (80064fc <_puts_r+0xd8>)
 8006494:	429c      	cmp	r4, r3
 8006496:	bf08      	it	eq
 8006498:	68ec      	ldreq	r4, [r5, #12]
 800649a:	e7d5      	b.n	8006448 <_puts_r+0x24>
 800649c:	4621      	mov	r1, r4
 800649e:	4628      	mov	r0, r5
 80064a0:	f000 f8c8 	bl	8006634 <__swsetup_r>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	d0dd      	beq.n	8006464 <_puts_r+0x40>
 80064a8:	f04f 35ff 	mov.w	r5, #4294967295
 80064ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064ae:	07da      	lsls	r2, r3, #31
 80064b0:	d405      	bmi.n	80064be <_puts_r+0x9a>
 80064b2:	89a3      	ldrh	r3, [r4, #12]
 80064b4:	059b      	lsls	r3, r3, #22
 80064b6:	d402      	bmi.n	80064be <_puts_r+0x9a>
 80064b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064ba:	f001 f8e1 	bl	8007680 <__retarget_lock_release_recursive>
 80064be:	4628      	mov	r0, r5
 80064c0:	bd70      	pop	{r4, r5, r6, pc}
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	da04      	bge.n	80064d0 <_puts_r+0xac>
 80064c6:	69a2      	ldr	r2, [r4, #24]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	dc06      	bgt.n	80064da <_puts_r+0xb6>
 80064cc:	290a      	cmp	r1, #10
 80064ce:	d004      	beq.n	80064da <_puts_r+0xb6>
 80064d0:	6823      	ldr	r3, [r4, #0]
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	6022      	str	r2, [r4, #0]
 80064d6:	7019      	strb	r1, [r3, #0]
 80064d8:	e7c5      	b.n	8006466 <_puts_r+0x42>
 80064da:	4622      	mov	r2, r4
 80064dc:	4628      	mov	r0, r5
 80064de:	f000 f857 	bl	8006590 <__swbuf_r>
 80064e2:	3001      	adds	r0, #1
 80064e4:	d1bf      	bne.n	8006466 <_puts_r+0x42>
 80064e6:	e7df      	b.n	80064a8 <_puts_r+0x84>
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	250a      	movs	r5, #10
 80064ec:	1c5a      	adds	r2, r3, #1
 80064ee:	6022      	str	r2, [r4, #0]
 80064f0:	701d      	strb	r5, [r3, #0]
 80064f2:	e7db      	b.n	80064ac <_puts_r+0x88>
 80064f4:	080095d4 	.word	0x080095d4
 80064f8:	080095f4 	.word	0x080095f4
 80064fc:	080095b4 	.word	0x080095b4

08006500 <puts>:
 8006500:	4b02      	ldr	r3, [pc, #8]	; (800650c <puts+0xc>)
 8006502:	4601      	mov	r1, r0
 8006504:	6818      	ldr	r0, [r3, #0]
 8006506:	f7ff bf8d 	b.w	8006424 <_puts_r>
 800650a:	bf00      	nop
 800650c:	24000074 	.word	0x24000074

08006510 <_sbrk_r>:
 8006510:	b538      	push	{r3, r4, r5, lr}
 8006512:	4d06      	ldr	r5, [pc, #24]	; (800652c <_sbrk_r+0x1c>)
 8006514:	2300      	movs	r3, #0
 8006516:	4604      	mov	r4, r0
 8006518:	4608      	mov	r0, r1
 800651a:	602b      	str	r3, [r5, #0]
 800651c:	f7fa faf8 	bl	8000b10 <_sbrk>
 8006520:	1c43      	adds	r3, r0, #1
 8006522:	d102      	bne.n	800652a <_sbrk_r+0x1a>
 8006524:	682b      	ldr	r3, [r5, #0]
 8006526:	b103      	cbz	r3, 800652a <_sbrk_r+0x1a>
 8006528:	6023      	str	r3, [r4, #0]
 800652a:	bd38      	pop	{r3, r4, r5, pc}
 800652c:	240fb05c 	.word	0x240fb05c

08006530 <siprintf>:
 8006530:	b40e      	push	{r1, r2, r3}
 8006532:	b500      	push	{lr}
 8006534:	b09c      	sub	sp, #112	; 0x70
 8006536:	ab1d      	add	r3, sp, #116	; 0x74
 8006538:	9002      	str	r0, [sp, #8]
 800653a:	9006      	str	r0, [sp, #24]
 800653c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006540:	4809      	ldr	r0, [pc, #36]	; (8006568 <siprintf+0x38>)
 8006542:	9107      	str	r1, [sp, #28]
 8006544:	9104      	str	r1, [sp, #16]
 8006546:	4909      	ldr	r1, [pc, #36]	; (800656c <siprintf+0x3c>)
 8006548:	f853 2b04 	ldr.w	r2, [r3], #4
 800654c:	9105      	str	r1, [sp, #20]
 800654e:	6800      	ldr	r0, [r0, #0]
 8006550:	9301      	str	r3, [sp, #4]
 8006552:	a902      	add	r1, sp, #8
 8006554:	f001 fcfc 	bl	8007f50 <_svfiprintf_r>
 8006558:	9b02      	ldr	r3, [sp, #8]
 800655a:	2200      	movs	r2, #0
 800655c:	701a      	strb	r2, [r3, #0]
 800655e:	b01c      	add	sp, #112	; 0x70
 8006560:	f85d eb04 	ldr.w	lr, [sp], #4
 8006564:	b003      	add	sp, #12
 8006566:	4770      	bx	lr
 8006568:	24000074 	.word	0x24000074
 800656c:	ffff0208 	.word	0xffff0208

08006570 <strcat>:
 8006570:	b510      	push	{r4, lr}
 8006572:	4602      	mov	r2, r0
 8006574:	7814      	ldrb	r4, [r2, #0]
 8006576:	4613      	mov	r3, r2
 8006578:	3201      	adds	r2, #1
 800657a:	2c00      	cmp	r4, #0
 800657c:	d1fa      	bne.n	8006574 <strcat+0x4>
 800657e:	3b01      	subs	r3, #1
 8006580:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006584:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006588:	2a00      	cmp	r2, #0
 800658a:	d1f9      	bne.n	8006580 <strcat+0x10>
 800658c:	bd10      	pop	{r4, pc}
	...

08006590 <__swbuf_r>:
 8006590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006592:	460e      	mov	r6, r1
 8006594:	4614      	mov	r4, r2
 8006596:	4605      	mov	r5, r0
 8006598:	b118      	cbz	r0, 80065a2 <__swbuf_r+0x12>
 800659a:	6983      	ldr	r3, [r0, #24]
 800659c:	b90b      	cbnz	r3, 80065a2 <__swbuf_r+0x12>
 800659e:	f000 ffcb 	bl	8007538 <__sinit>
 80065a2:	4b21      	ldr	r3, [pc, #132]	; (8006628 <__swbuf_r+0x98>)
 80065a4:	429c      	cmp	r4, r3
 80065a6:	d12b      	bne.n	8006600 <__swbuf_r+0x70>
 80065a8:	686c      	ldr	r4, [r5, #4]
 80065aa:	69a3      	ldr	r3, [r4, #24]
 80065ac:	60a3      	str	r3, [r4, #8]
 80065ae:	89a3      	ldrh	r3, [r4, #12]
 80065b0:	071a      	lsls	r2, r3, #28
 80065b2:	d52f      	bpl.n	8006614 <__swbuf_r+0x84>
 80065b4:	6923      	ldr	r3, [r4, #16]
 80065b6:	b36b      	cbz	r3, 8006614 <__swbuf_r+0x84>
 80065b8:	6923      	ldr	r3, [r4, #16]
 80065ba:	6820      	ldr	r0, [r4, #0]
 80065bc:	1ac0      	subs	r0, r0, r3
 80065be:	6963      	ldr	r3, [r4, #20]
 80065c0:	b2f6      	uxtb	r6, r6
 80065c2:	4283      	cmp	r3, r0
 80065c4:	4637      	mov	r7, r6
 80065c6:	dc04      	bgt.n	80065d2 <__swbuf_r+0x42>
 80065c8:	4621      	mov	r1, r4
 80065ca:	4628      	mov	r0, r5
 80065cc:	f000 ff20 	bl	8007410 <_fflush_r>
 80065d0:	bb30      	cbnz	r0, 8006620 <__swbuf_r+0x90>
 80065d2:	68a3      	ldr	r3, [r4, #8]
 80065d4:	3b01      	subs	r3, #1
 80065d6:	60a3      	str	r3, [r4, #8]
 80065d8:	6823      	ldr	r3, [r4, #0]
 80065da:	1c5a      	adds	r2, r3, #1
 80065dc:	6022      	str	r2, [r4, #0]
 80065de:	701e      	strb	r6, [r3, #0]
 80065e0:	6963      	ldr	r3, [r4, #20]
 80065e2:	3001      	adds	r0, #1
 80065e4:	4283      	cmp	r3, r0
 80065e6:	d004      	beq.n	80065f2 <__swbuf_r+0x62>
 80065e8:	89a3      	ldrh	r3, [r4, #12]
 80065ea:	07db      	lsls	r3, r3, #31
 80065ec:	d506      	bpl.n	80065fc <__swbuf_r+0x6c>
 80065ee:	2e0a      	cmp	r6, #10
 80065f0:	d104      	bne.n	80065fc <__swbuf_r+0x6c>
 80065f2:	4621      	mov	r1, r4
 80065f4:	4628      	mov	r0, r5
 80065f6:	f000 ff0b 	bl	8007410 <_fflush_r>
 80065fa:	b988      	cbnz	r0, 8006620 <__swbuf_r+0x90>
 80065fc:	4638      	mov	r0, r7
 80065fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006600:	4b0a      	ldr	r3, [pc, #40]	; (800662c <__swbuf_r+0x9c>)
 8006602:	429c      	cmp	r4, r3
 8006604:	d101      	bne.n	800660a <__swbuf_r+0x7a>
 8006606:	68ac      	ldr	r4, [r5, #8]
 8006608:	e7cf      	b.n	80065aa <__swbuf_r+0x1a>
 800660a:	4b09      	ldr	r3, [pc, #36]	; (8006630 <__swbuf_r+0xa0>)
 800660c:	429c      	cmp	r4, r3
 800660e:	bf08      	it	eq
 8006610:	68ec      	ldreq	r4, [r5, #12]
 8006612:	e7ca      	b.n	80065aa <__swbuf_r+0x1a>
 8006614:	4621      	mov	r1, r4
 8006616:	4628      	mov	r0, r5
 8006618:	f000 f80c 	bl	8006634 <__swsetup_r>
 800661c:	2800      	cmp	r0, #0
 800661e:	d0cb      	beq.n	80065b8 <__swbuf_r+0x28>
 8006620:	f04f 37ff 	mov.w	r7, #4294967295
 8006624:	e7ea      	b.n	80065fc <__swbuf_r+0x6c>
 8006626:	bf00      	nop
 8006628:	080095d4 	.word	0x080095d4
 800662c:	080095f4 	.word	0x080095f4
 8006630:	080095b4 	.word	0x080095b4

08006634 <__swsetup_r>:
 8006634:	4b32      	ldr	r3, [pc, #200]	; (8006700 <__swsetup_r+0xcc>)
 8006636:	b570      	push	{r4, r5, r6, lr}
 8006638:	681d      	ldr	r5, [r3, #0]
 800663a:	4606      	mov	r6, r0
 800663c:	460c      	mov	r4, r1
 800663e:	b125      	cbz	r5, 800664a <__swsetup_r+0x16>
 8006640:	69ab      	ldr	r3, [r5, #24]
 8006642:	b913      	cbnz	r3, 800664a <__swsetup_r+0x16>
 8006644:	4628      	mov	r0, r5
 8006646:	f000 ff77 	bl	8007538 <__sinit>
 800664a:	4b2e      	ldr	r3, [pc, #184]	; (8006704 <__swsetup_r+0xd0>)
 800664c:	429c      	cmp	r4, r3
 800664e:	d10f      	bne.n	8006670 <__swsetup_r+0x3c>
 8006650:	686c      	ldr	r4, [r5, #4]
 8006652:	89a3      	ldrh	r3, [r4, #12]
 8006654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006658:	0719      	lsls	r1, r3, #28
 800665a:	d42c      	bmi.n	80066b6 <__swsetup_r+0x82>
 800665c:	06dd      	lsls	r5, r3, #27
 800665e:	d411      	bmi.n	8006684 <__swsetup_r+0x50>
 8006660:	2309      	movs	r3, #9
 8006662:	6033      	str	r3, [r6, #0]
 8006664:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006668:	81a3      	strh	r3, [r4, #12]
 800666a:	f04f 30ff 	mov.w	r0, #4294967295
 800666e:	e03e      	b.n	80066ee <__swsetup_r+0xba>
 8006670:	4b25      	ldr	r3, [pc, #148]	; (8006708 <__swsetup_r+0xd4>)
 8006672:	429c      	cmp	r4, r3
 8006674:	d101      	bne.n	800667a <__swsetup_r+0x46>
 8006676:	68ac      	ldr	r4, [r5, #8]
 8006678:	e7eb      	b.n	8006652 <__swsetup_r+0x1e>
 800667a:	4b24      	ldr	r3, [pc, #144]	; (800670c <__swsetup_r+0xd8>)
 800667c:	429c      	cmp	r4, r3
 800667e:	bf08      	it	eq
 8006680:	68ec      	ldreq	r4, [r5, #12]
 8006682:	e7e6      	b.n	8006652 <__swsetup_r+0x1e>
 8006684:	0758      	lsls	r0, r3, #29
 8006686:	d512      	bpl.n	80066ae <__swsetup_r+0x7a>
 8006688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800668a:	b141      	cbz	r1, 800669e <__swsetup_r+0x6a>
 800668c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006690:	4299      	cmp	r1, r3
 8006692:	d002      	beq.n	800669a <__swsetup_r+0x66>
 8006694:	4630      	mov	r0, r6
 8006696:	f7ff f98b 	bl	80059b0 <_free_r>
 800669a:	2300      	movs	r3, #0
 800669c:	6363      	str	r3, [r4, #52]	; 0x34
 800669e:	89a3      	ldrh	r3, [r4, #12]
 80066a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80066a4:	81a3      	strh	r3, [r4, #12]
 80066a6:	2300      	movs	r3, #0
 80066a8:	6063      	str	r3, [r4, #4]
 80066aa:	6923      	ldr	r3, [r4, #16]
 80066ac:	6023      	str	r3, [r4, #0]
 80066ae:	89a3      	ldrh	r3, [r4, #12]
 80066b0:	f043 0308 	orr.w	r3, r3, #8
 80066b4:	81a3      	strh	r3, [r4, #12]
 80066b6:	6923      	ldr	r3, [r4, #16]
 80066b8:	b94b      	cbnz	r3, 80066ce <__swsetup_r+0x9a>
 80066ba:	89a3      	ldrh	r3, [r4, #12]
 80066bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066c4:	d003      	beq.n	80066ce <__swsetup_r+0x9a>
 80066c6:	4621      	mov	r1, r4
 80066c8:	4630      	mov	r0, r6
 80066ca:	f000 ffff 	bl	80076cc <__smakebuf_r>
 80066ce:	89a0      	ldrh	r0, [r4, #12]
 80066d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066d4:	f010 0301 	ands.w	r3, r0, #1
 80066d8:	d00a      	beq.n	80066f0 <__swsetup_r+0xbc>
 80066da:	2300      	movs	r3, #0
 80066dc:	60a3      	str	r3, [r4, #8]
 80066de:	6963      	ldr	r3, [r4, #20]
 80066e0:	425b      	negs	r3, r3
 80066e2:	61a3      	str	r3, [r4, #24]
 80066e4:	6923      	ldr	r3, [r4, #16]
 80066e6:	b943      	cbnz	r3, 80066fa <__swsetup_r+0xc6>
 80066e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80066ec:	d1ba      	bne.n	8006664 <__swsetup_r+0x30>
 80066ee:	bd70      	pop	{r4, r5, r6, pc}
 80066f0:	0781      	lsls	r1, r0, #30
 80066f2:	bf58      	it	pl
 80066f4:	6963      	ldrpl	r3, [r4, #20]
 80066f6:	60a3      	str	r3, [r4, #8]
 80066f8:	e7f4      	b.n	80066e4 <__swsetup_r+0xb0>
 80066fa:	2000      	movs	r0, #0
 80066fc:	e7f7      	b.n	80066ee <__swsetup_r+0xba>
 80066fe:	bf00      	nop
 8006700:	24000074 	.word	0x24000074
 8006704:	080095d4 	.word	0x080095d4
 8006708:	080095f4 	.word	0x080095f4
 800670c:	080095b4 	.word	0x080095b4

08006710 <quorem>:
 8006710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006714:	6903      	ldr	r3, [r0, #16]
 8006716:	690c      	ldr	r4, [r1, #16]
 8006718:	42a3      	cmp	r3, r4
 800671a:	4607      	mov	r7, r0
 800671c:	f2c0 8081 	blt.w	8006822 <quorem+0x112>
 8006720:	3c01      	subs	r4, #1
 8006722:	f101 0814 	add.w	r8, r1, #20
 8006726:	f100 0514 	add.w	r5, r0, #20
 800672a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800672e:	9301      	str	r3, [sp, #4]
 8006730:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006734:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006738:	3301      	adds	r3, #1
 800673a:	429a      	cmp	r2, r3
 800673c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006740:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006744:	fbb2 f6f3 	udiv	r6, r2, r3
 8006748:	d331      	bcc.n	80067ae <quorem+0x9e>
 800674a:	f04f 0e00 	mov.w	lr, #0
 800674e:	4640      	mov	r0, r8
 8006750:	46ac      	mov	ip, r5
 8006752:	46f2      	mov	sl, lr
 8006754:	f850 2b04 	ldr.w	r2, [r0], #4
 8006758:	b293      	uxth	r3, r2
 800675a:	fb06 e303 	mla	r3, r6, r3, lr
 800675e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006762:	b29b      	uxth	r3, r3
 8006764:	ebaa 0303 	sub.w	r3, sl, r3
 8006768:	f8dc a000 	ldr.w	sl, [ip]
 800676c:	0c12      	lsrs	r2, r2, #16
 800676e:	fa13 f38a 	uxtah	r3, r3, sl
 8006772:	fb06 e202 	mla	r2, r6, r2, lr
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	9b00      	ldr	r3, [sp, #0]
 800677a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800677e:	b292      	uxth	r2, r2
 8006780:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006784:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006788:	f8bd 3000 	ldrh.w	r3, [sp]
 800678c:	4581      	cmp	r9, r0
 800678e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006792:	f84c 3b04 	str.w	r3, [ip], #4
 8006796:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800679a:	d2db      	bcs.n	8006754 <quorem+0x44>
 800679c:	f855 300b 	ldr.w	r3, [r5, fp]
 80067a0:	b92b      	cbnz	r3, 80067ae <quorem+0x9e>
 80067a2:	9b01      	ldr	r3, [sp, #4]
 80067a4:	3b04      	subs	r3, #4
 80067a6:	429d      	cmp	r5, r3
 80067a8:	461a      	mov	r2, r3
 80067aa:	d32e      	bcc.n	800680a <quorem+0xfa>
 80067ac:	613c      	str	r4, [r7, #16]
 80067ae:	4638      	mov	r0, r7
 80067b0:	f001 fa5a 	bl	8007c68 <__mcmp>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	db24      	blt.n	8006802 <quorem+0xf2>
 80067b8:	3601      	adds	r6, #1
 80067ba:	4628      	mov	r0, r5
 80067bc:	f04f 0c00 	mov.w	ip, #0
 80067c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80067c4:	f8d0 e000 	ldr.w	lr, [r0]
 80067c8:	b293      	uxth	r3, r2
 80067ca:	ebac 0303 	sub.w	r3, ip, r3
 80067ce:	0c12      	lsrs	r2, r2, #16
 80067d0:	fa13 f38e 	uxtah	r3, r3, lr
 80067d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80067d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067dc:	b29b      	uxth	r3, r3
 80067de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067e2:	45c1      	cmp	r9, r8
 80067e4:	f840 3b04 	str.w	r3, [r0], #4
 80067e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80067ec:	d2e8      	bcs.n	80067c0 <quorem+0xb0>
 80067ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067f6:	b922      	cbnz	r2, 8006802 <quorem+0xf2>
 80067f8:	3b04      	subs	r3, #4
 80067fa:	429d      	cmp	r5, r3
 80067fc:	461a      	mov	r2, r3
 80067fe:	d30a      	bcc.n	8006816 <quorem+0x106>
 8006800:	613c      	str	r4, [r7, #16]
 8006802:	4630      	mov	r0, r6
 8006804:	b003      	add	sp, #12
 8006806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800680a:	6812      	ldr	r2, [r2, #0]
 800680c:	3b04      	subs	r3, #4
 800680e:	2a00      	cmp	r2, #0
 8006810:	d1cc      	bne.n	80067ac <quorem+0x9c>
 8006812:	3c01      	subs	r4, #1
 8006814:	e7c7      	b.n	80067a6 <quorem+0x96>
 8006816:	6812      	ldr	r2, [r2, #0]
 8006818:	3b04      	subs	r3, #4
 800681a:	2a00      	cmp	r2, #0
 800681c:	d1f0      	bne.n	8006800 <quorem+0xf0>
 800681e:	3c01      	subs	r4, #1
 8006820:	e7eb      	b.n	80067fa <quorem+0xea>
 8006822:	2000      	movs	r0, #0
 8006824:	e7ee      	b.n	8006804 <quorem+0xf4>
	...

08006828 <_dtoa_r>:
 8006828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682c:	ed2d 8b02 	vpush	{d8}
 8006830:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006832:	b091      	sub	sp, #68	; 0x44
 8006834:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006838:	ec59 8b10 	vmov	r8, r9, d0
 800683c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800683e:	9106      	str	r1, [sp, #24]
 8006840:	4606      	mov	r6, r0
 8006842:	9208      	str	r2, [sp, #32]
 8006844:	930c      	str	r3, [sp, #48]	; 0x30
 8006846:	b975      	cbnz	r5, 8006866 <_dtoa_r+0x3e>
 8006848:	2010      	movs	r0, #16
 800684a:	f7ff f88b 	bl	8005964 <malloc>
 800684e:	4602      	mov	r2, r0
 8006850:	6270      	str	r0, [r6, #36]	; 0x24
 8006852:	b920      	cbnz	r0, 800685e <_dtoa_r+0x36>
 8006854:	4baa      	ldr	r3, [pc, #680]	; (8006b00 <_dtoa_r+0x2d8>)
 8006856:	21ea      	movs	r1, #234	; 0xea
 8006858:	48aa      	ldr	r0, [pc, #680]	; (8006b04 <_dtoa_r+0x2dc>)
 800685a:	f001 fe29 	bl	80084b0 <__assert_func>
 800685e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006862:	6005      	str	r5, [r0, #0]
 8006864:	60c5      	str	r5, [r0, #12]
 8006866:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006868:	6819      	ldr	r1, [r3, #0]
 800686a:	b151      	cbz	r1, 8006882 <_dtoa_r+0x5a>
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	604a      	str	r2, [r1, #4]
 8006870:	2301      	movs	r3, #1
 8006872:	4093      	lsls	r3, r2
 8006874:	608b      	str	r3, [r1, #8]
 8006876:	4630      	mov	r0, r6
 8006878:	f000 ffb4 	bl	80077e4 <_Bfree>
 800687c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800687e:	2200      	movs	r2, #0
 8006880:	601a      	str	r2, [r3, #0]
 8006882:	f1b9 0300 	subs.w	r3, r9, #0
 8006886:	bfbb      	ittet	lt
 8006888:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800688c:	9303      	strlt	r3, [sp, #12]
 800688e:	2300      	movge	r3, #0
 8006890:	2201      	movlt	r2, #1
 8006892:	bfac      	ite	ge
 8006894:	6023      	strge	r3, [r4, #0]
 8006896:	6022      	strlt	r2, [r4, #0]
 8006898:	4b9b      	ldr	r3, [pc, #620]	; (8006b08 <_dtoa_r+0x2e0>)
 800689a:	9c03      	ldr	r4, [sp, #12]
 800689c:	43a3      	bics	r3, r4
 800689e:	d11c      	bne.n	80068da <_dtoa_r+0xb2>
 80068a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80068a6:	6013      	str	r3, [r2, #0]
 80068a8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80068ac:	ea53 0308 	orrs.w	r3, r3, r8
 80068b0:	f000 84fd 	beq.w	80072ae <_dtoa_r+0xa86>
 80068b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80068b6:	b963      	cbnz	r3, 80068d2 <_dtoa_r+0xaa>
 80068b8:	4b94      	ldr	r3, [pc, #592]	; (8006b0c <_dtoa_r+0x2e4>)
 80068ba:	e01f      	b.n	80068fc <_dtoa_r+0xd4>
 80068bc:	4b94      	ldr	r3, [pc, #592]	; (8006b10 <_dtoa_r+0x2e8>)
 80068be:	9301      	str	r3, [sp, #4]
 80068c0:	3308      	adds	r3, #8
 80068c2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	9801      	ldr	r0, [sp, #4]
 80068c8:	b011      	add	sp, #68	; 0x44
 80068ca:	ecbd 8b02 	vpop	{d8}
 80068ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068d2:	4b8e      	ldr	r3, [pc, #568]	; (8006b0c <_dtoa_r+0x2e4>)
 80068d4:	9301      	str	r3, [sp, #4]
 80068d6:	3303      	adds	r3, #3
 80068d8:	e7f3      	b.n	80068c2 <_dtoa_r+0x9a>
 80068da:	ed9d 8b02 	vldr	d8, [sp, #8]
 80068de:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80068e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e6:	d10b      	bne.n	8006900 <_dtoa_r+0xd8>
 80068e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068ea:	2301      	movs	r3, #1
 80068ec:	6013      	str	r3, [r2, #0]
 80068ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 84d9 	beq.w	80072a8 <_dtoa_r+0xa80>
 80068f6:	4887      	ldr	r0, [pc, #540]	; (8006b14 <_dtoa_r+0x2ec>)
 80068f8:	6018      	str	r0, [r3, #0]
 80068fa:	1e43      	subs	r3, r0, #1
 80068fc:	9301      	str	r3, [sp, #4]
 80068fe:	e7e2      	b.n	80068c6 <_dtoa_r+0x9e>
 8006900:	a90f      	add	r1, sp, #60	; 0x3c
 8006902:	aa0e      	add	r2, sp, #56	; 0x38
 8006904:	4630      	mov	r0, r6
 8006906:	eeb0 0b48 	vmov.f64	d0, d8
 800690a:	f001 fa53 	bl	8007db4 <__d2b>
 800690e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8006912:	4605      	mov	r5, r0
 8006914:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006916:	2900      	cmp	r1, #0
 8006918:	d046      	beq.n	80069a8 <_dtoa_r+0x180>
 800691a:	ee18 4a90 	vmov	r4, s17
 800691e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006922:	ec53 2b18 	vmov	r2, r3, d8
 8006926:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800692a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800692e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006932:	2400      	movs	r4, #0
 8006934:	ec43 2b16 	vmov	d6, r2, r3
 8006938:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800693c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8006ae8 <_dtoa_r+0x2c0>
 8006940:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006944:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8006af0 <_dtoa_r+0x2c8>
 8006948:	eea7 6b05 	vfma.f64	d6, d7, d5
 800694c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8006af8 <_dtoa_r+0x2d0>
 8006950:	ee07 1a90 	vmov	s15, r1
 8006954:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006958:	eeb0 7b46 	vmov.f64	d7, d6
 800695c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8006960:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8006964:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800696c:	ee16 ba90 	vmov	fp, s13
 8006970:	940a      	str	r4, [sp, #40]	; 0x28
 8006972:	d508      	bpl.n	8006986 <_dtoa_r+0x15e>
 8006974:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006978:	eeb4 6b47 	vcmp.f64	d6, d7
 800697c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006980:	bf18      	it	ne
 8006982:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8006986:	f1bb 0f16 	cmp.w	fp, #22
 800698a:	d82f      	bhi.n	80069ec <_dtoa_r+0x1c4>
 800698c:	4b62      	ldr	r3, [pc, #392]	; (8006b18 <_dtoa_r+0x2f0>)
 800698e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006992:	ed93 7b00 	vldr	d7, [r3]
 8006996:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800699a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800699e:	d501      	bpl.n	80069a4 <_dtoa_r+0x17c>
 80069a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80069a4:	2300      	movs	r3, #0
 80069a6:	e022      	b.n	80069ee <_dtoa_r+0x1c6>
 80069a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80069aa:	4401      	add	r1, r0
 80069ac:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80069b0:	2b20      	cmp	r3, #32
 80069b2:	bfc1      	itttt	gt
 80069b4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80069b8:	fa04 f303 	lslgt.w	r3, r4, r3
 80069bc:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80069c0:	fa28 f804 	lsrgt.w	r8, r8, r4
 80069c4:	bfd6      	itet	le
 80069c6:	f1c3 0320 	rsble	r3, r3, #32
 80069ca:	ea43 0808 	orrgt.w	r8, r3, r8
 80069ce:	fa08 f803 	lslle.w	r8, r8, r3
 80069d2:	ee07 8a90 	vmov	s15, r8
 80069d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80069da:	3901      	subs	r1, #1
 80069dc:	ee17 4a90 	vmov	r4, s15
 80069e0:	ec53 2b17 	vmov	r2, r3, d7
 80069e4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80069e8:	2401      	movs	r4, #1
 80069ea:	e7a3      	b.n	8006934 <_dtoa_r+0x10c>
 80069ec:	2301      	movs	r3, #1
 80069ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80069f0:	1a43      	subs	r3, r0, r1
 80069f2:	1e5a      	subs	r2, r3, #1
 80069f4:	bf45      	ittet	mi
 80069f6:	f1c3 0301 	rsbmi	r3, r3, #1
 80069fa:	9304      	strmi	r3, [sp, #16]
 80069fc:	2300      	movpl	r3, #0
 80069fe:	2300      	movmi	r3, #0
 8006a00:	9205      	str	r2, [sp, #20]
 8006a02:	bf54      	ite	pl
 8006a04:	9304      	strpl	r3, [sp, #16]
 8006a06:	9305      	strmi	r3, [sp, #20]
 8006a08:	f1bb 0f00 	cmp.w	fp, #0
 8006a0c:	db18      	blt.n	8006a40 <_dtoa_r+0x218>
 8006a0e:	9b05      	ldr	r3, [sp, #20]
 8006a10:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8006a14:	445b      	add	r3, fp
 8006a16:	9305      	str	r3, [sp, #20]
 8006a18:	2300      	movs	r3, #0
 8006a1a:	9a06      	ldr	r2, [sp, #24]
 8006a1c:	2a09      	cmp	r2, #9
 8006a1e:	d849      	bhi.n	8006ab4 <_dtoa_r+0x28c>
 8006a20:	2a05      	cmp	r2, #5
 8006a22:	bfc4      	itt	gt
 8006a24:	3a04      	subgt	r2, #4
 8006a26:	9206      	strgt	r2, [sp, #24]
 8006a28:	9a06      	ldr	r2, [sp, #24]
 8006a2a:	f1a2 0202 	sub.w	r2, r2, #2
 8006a2e:	bfcc      	ite	gt
 8006a30:	2400      	movgt	r4, #0
 8006a32:	2401      	movle	r4, #1
 8006a34:	2a03      	cmp	r2, #3
 8006a36:	d848      	bhi.n	8006aca <_dtoa_r+0x2a2>
 8006a38:	e8df f002 	tbb	[pc, r2]
 8006a3c:	3a2c2e0b 	.word	0x3a2c2e0b
 8006a40:	9b04      	ldr	r3, [sp, #16]
 8006a42:	2200      	movs	r2, #0
 8006a44:	eba3 030b 	sub.w	r3, r3, fp
 8006a48:	9304      	str	r3, [sp, #16]
 8006a4a:	9209      	str	r2, [sp, #36]	; 0x24
 8006a4c:	f1cb 0300 	rsb	r3, fp, #0
 8006a50:	e7e3      	b.n	8006a1a <_dtoa_r+0x1f2>
 8006a52:	2200      	movs	r2, #0
 8006a54:	9207      	str	r2, [sp, #28]
 8006a56:	9a08      	ldr	r2, [sp, #32]
 8006a58:	2a00      	cmp	r2, #0
 8006a5a:	dc39      	bgt.n	8006ad0 <_dtoa_r+0x2a8>
 8006a5c:	f04f 0a01 	mov.w	sl, #1
 8006a60:	46d1      	mov	r9, sl
 8006a62:	4652      	mov	r2, sl
 8006a64:	f8cd a020 	str.w	sl, [sp, #32]
 8006a68:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	6079      	str	r1, [r7, #4]
 8006a6e:	2004      	movs	r0, #4
 8006a70:	f100 0c14 	add.w	ip, r0, #20
 8006a74:	4594      	cmp	ip, r2
 8006a76:	6879      	ldr	r1, [r7, #4]
 8006a78:	d92f      	bls.n	8006ada <_dtoa_r+0x2b2>
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	930d      	str	r3, [sp, #52]	; 0x34
 8006a7e:	f000 fe71 	bl	8007764 <_Balloc>
 8006a82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a84:	9001      	str	r0, [sp, #4]
 8006a86:	4602      	mov	r2, r0
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	d149      	bne.n	8006b20 <_dtoa_r+0x2f8>
 8006a8c:	4b23      	ldr	r3, [pc, #140]	; (8006b1c <_dtoa_r+0x2f4>)
 8006a8e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006a92:	e6e1      	b.n	8006858 <_dtoa_r+0x30>
 8006a94:	2201      	movs	r2, #1
 8006a96:	e7dd      	b.n	8006a54 <_dtoa_r+0x22c>
 8006a98:	2200      	movs	r2, #0
 8006a9a:	9207      	str	r2, [sp, #28]
 8006a9c:	9a08      	ldr	r2, [sp, #32]
 8006a9e:	eb0b 0a02 	add.w	sl, fp, r2
 8006aa2:	f10a 0901 	add.w	r9, sl, #1
 8006aa6:	464a      	mov	r2, r9
 8006aa8:	2a01      	cmp	r2, #1
 8006aaa:	bfb8      	it	lt
 8006aac:	2201      	movlt	r2, #1
 8006aae:	e7db      	b.n	8006a68 <_dtoa_r+0x240>
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	e7f2      	b.n	8006a9a <_dtoa_r+0x272>
 8006ab4:	2401      	movs	r4, #1
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8006abc:	f04f 3aff 	mov.w	sl, #4294967295
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	46d1      	mov	r9, sl
 8006ac4:	2212      	movs	r2, #18
 8006ac6:	9108      	str	r1, [sp, #32]
 8006ac8:	e7ce      	b.n	8006a68 <_dtoa_r+0x240>
 8006aca:	2201      	movs	r2, #1
 8006acc:	9207      	str	r2, [sp, #28]
 8006ace:	e7f5      	b.n	8006abc <_dtoa_r+0x294>
 8006ad0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006ad4:	46d1      	mov	r9, sl
 8006ad6:	4652      	mov	r2, sl
 8006ad8:	e7c6      	b.n	8006a68 <_dtoa_r+0x240>
 8006ada:	3101      	adds	r1, #1
 8006adc:	6079      	str	r1, [r7, #4]
 8006ade:	0040      	lsls	r0, r0, #1
 8006ae0:	e7c6      	b.n	8006a70 <_dtoa_r+0x248>
 8006ae2:	bf00      	nop
 8006ae4:	f3af 8000 	nop.w
 8006ae8:	636f4361 	.word	0x636f4361
 8006aec:	3fd287a7 	.word	0x3fd287a7
 8006af0:	8b60c8b3 	.word	0x8b60c8b3
 8006af4:	3fc68a28 	.word	0x3fc68a28
 8006af8:	509f79fb 	.word	0x509f79fb
 8006afc:	3fd34413 	.word	0x3fd34413
 8006b00:	08009531 	.word	0x08009531
 8006b04:	08009548 	.word	0x08009548
 8006b08:	7ff00000 	.word	0x7ff00000
 8006b0c:	0800952d 	.word	0x0800952d
 8006b10:	08009524 	.word	0x08009524
 8006b14:	08009501 	.word	0x08009501
 8006b18:	08009698 	.word	0x08009698
 8006b1c:	080095a3 	.word	0x080095a3
 8006b20:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8006b22:	9901      	ldr	r1, [sp, #4]
 8006b24:	6011      	str	r1, [r2, #0]
 8006b26:	f1b9 0f0e 	cmp.w	r9, #14
 8006b2a:	d86c      	bhi.n	8006c06 <_dtoa_r+0x3de>
 8006b2c:	2c00      	cmp	r4, #0
 8006b2e:	d06a      	beq.n	8006c06 <_dtoa_r+0x3de>
 8006b30:	f1bb 0f00 	cmp.w	fp, #0
 8006b34:	f340 80a0 	ble.w	8006c78 <_dtoa_r+0x450>
 8006b38:	49c1      	ldr	r1, [pc, #772]	; (8006e40 <_dtoa_r+0x618>)
 8006b3a:	f00b 020f 	and.w	r2, fp, #15
 8006b3e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8006b42:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006b46:	ed92 7b00 	vldr	d7, [r2]
 8006b4a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8006b4e:	f000 8087 	beq.w	8006c60 <_dtoa_r+0x438>
 8006b52:	4abc      	ldr	r2, [pc, #752]	; (8006e44 <_dtoa_r+0x61c>)
 8006b54:	ed92 6b08 	vldr	d6, [r2, #32]
 8006b58:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8006b5c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006b60:	f001 010f 	and.w	r1, r1, #15
 8006b64:	2203      	movs	r2, #3
 8006b66:	48b7      	ldr	r0, [pc, #732]	; (8006e44 <_dtoa_r+0x61c>)
 8006b68:	2900      	cmp	r1, #0
 8006b6a:	d17b      	bne.n	8006c64 <_dtoa_r+0x43c>
 8006b6c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006b70:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006b74:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006b78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b7a:	2900      	cmp	r1, #0
 8006b7c:	f000 80a2 	beq.w	8006cc4 <_dtoa_r+0x49c>
 8006b80:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006b84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b88:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b90:	f140 8098 	bpl.w	8006cc4 <_dtoa_r+0x49c>
 8006b94:	f1b9 0f00 	cmp.w	r9, #0
 8006b98:	f000 8094 	beq.w	8006cc4 <_dtoa_r+0x49c>
 8006b9c:	f1ba 0f00 	cmp.w	sl, #0
 8006ba0:	dd2f      	ble.n	8006c02 <_dtoa_r+0x3da>
 8006ba2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006ba6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006baa:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006bae:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006bb2:	3201      	adds	r2, #1
 8006bb4:	4650      	mov	r0, sl
 8006bb6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006bba:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8006bbe:	ee07 2a90 	vmov	s15, r2
 8006bc2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006bc6:	eea7 5b06 	vfma.f64	d5, d7, d6
 8006bca:	ee15 4a90 	vmov	r4, s11
 8006bce:	ec52 1b15 	vmov	r1, r2, d5
 8006bd2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	d177      	bne.n	8006cca <_dtoa_r+0x4a2>
 8006bda:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006bde:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006be2:	ec42 1b17 	vmov	d7, r1, r2
 8006be6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bee:	f300 8263 	bgt.w	80070b8 <_dtoa_r+0x890>
 8006bf2:	eeb1 7b47 	vneg.f64	d7, d7
 8006bf6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bfe:	f100 8258 	bmi.w	80070b2 <_dtoa_r+0x88a>
 8006c02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006c06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c08:	2a00      	cmp	r2, #0
 8006c0a:	f2c0 811d 	blt.w	8006e48 <_dtoa_r+0x620>
 8006c0e:	f1bb 0f0e 	cmp.w	fp, #14
 8006c12:	f300 8119 	bgt.w	8006e48 <_dtoa_r+0x620>
 8006c16:	4b8a      	ldr	r3, [pc, #552]	; (8006e40 <_dtoa_r+0x618>)
 8006c18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006c1c:	ed93 6b00 	vldr	d6, [r3]
 8006c20:	9b08      	ldr	r3, [sp, #32]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f280 80b7 	bge.w	8006d96 <_dtoa_r+0x56e>
 8006c28:	f1b9 0f00 	cmp.w	r9, #0
 8006c2c:	f300 80b3 	bgt.w	8006d96 <_dtoa_r+0x56e>
 8006c30:	f040 823f 	bne.w	80070b2 <_dtoa_r+0x88a>
 8006c34:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006c38:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006c3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c40:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c48:	464c      	mov	r4, r9
 8006c4a:	464f      	mov	r7, r9
 8006c4c:	f280 8215 	bge.w	800707a <_dtoa_r+0x852>
 8006c50:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006c54:	2331      	movs	r3, #49	; 0x31
 8006c56:	f808 3b01 	strb.w	r3, [r8], #1
 8006c5a:	f10b 0b01 	add.w	fp, fp, #1
 8006c5e:	e211      	b.n	8007084 <_dtoa_r+0x85c>
 8006c60:	2202      	movs	r2, #2
 8006c62:	e780      	b.n	8006b66 <_dtoa_r+0x33e>
 8006c64:	07cc      	lsls	r4, r1, #31
 8006c66:	d504      	bpl.n	8006c72 <_dtoa_r+0x44a>
 8006c68:	ed90 6b00 	vldr	d6, [r0]
 8006c6c:	3201      	adds	r2, #1
 8006c6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006c72:	1049      	asrs	r1, r1, #1
 8006c74:	3008      	adds	r0, #8
 8006c76:	e777      	b.n	8006b68 <_dtoa_r+0x340>
 8006c78:	d022      	beq.n	8006cc0 <_dtoa_r+0x498>
 8006c7a:	f1cb 0100 	rsb	r1, fp, #0
 8006c7e:	4a70      	ldr	r2, [pc, #448]	; (8006e40 <_dtoa_r+0x618>)
 8006c80:	f001 000f 	and.w	r0, r1, #15
 8006c84:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006c88:	ed92 7b00 	vldr	d7, [r2]
 8006c8c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006c90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006c94:	486b      	ldr	r0, [pc, #428]	; (8006e44 <_dtoa_r+0x61c>)
 8006c96:	1109      	asrs	r1, r1, #4
 8006c98:	2400      	movs	r4, #0
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	b929      	cbnz	r1, 8006caa <_dtoa_r+0x482>
 8006c9e:	2c00      	cmp	r4, #0
 8006ca0:	f43f af6a 	beq.w	8006b78 <_dtoa_r+0x350>
 8006ca4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006ca8:	e766      	b.n	8006b78 <_dtoa_r+0x350>
 8006caa:	07cf      	lsls	r7, r1, #31
 8006cac:	d505      	bpl.n	8006cba <_dtoa_r+0x492>
 8006cae:	ed90 6b00 	vldr	d6, [r0]
 8006cb2:	3201      	adds	r2, #1
 8006cb4:	2401      	movs	r4, #1
 8006cb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006cba:	1049      	asrs	r1, r1, #1
 8006cbc:	3008      	adds	r0, #8
 8006cbe:	e7ed      	b.n	8006c9c <_dtoa_r+0x474>
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	e759      	b.n	8006b78 <_dtoa_r+0x350>
 8006cc4:	465f      	mov	r7, fp
 8006cc6:	4648      	mov	r0, r9
 8006cc8:	e775      	b.n	8006bb6 <_dtoa_r+0x38e>
 8006cca:	ec42 1b17 	vmov	d7, r1, r2
 8006cce:	4a5c      	ldr	r2, [pc, #368]	; (8006e40 <_dtoa_r+0x618>)
 8006cd0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006cd4:	ed12 4b02 	vldr	d4, [r2, #-8]
 8006cd8:	9a01      	ldr	r2, [sp, #4]
 8006cda:	1814      	adds	r4, r2, r0
 8006cdc:	9a07      	ldr	r2, [sp, #28]
 8006cde:	b352      	cbz	r2, 8006d36 <_dtoa_r+0x50e>
 8006ce0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8006ce4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8006ce8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006cec:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8006cf0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006cf4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006cf8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006cfc:	ee14 2a90 	vmov	r2, s9
 8006d00:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006d04:	3230      	adds	r2, #48	; 0x30
 8006d06:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006d0a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d12:	f808 2b01 	strb.w	r2, [r8], #1
 8006d16:	d439      	bmi.n	8006d8c <_dtoa_r+0x564>
 8006d18:	ee32 5b46 	vsub.f64	d5, d2, d6
 8006d1c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8006d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d24:	d472      	bmi.n	8006e0c <_dtoa_r+0x5e4>
 8006d26:	45a0      	cmp	r8, r4
 8006d28:	f43f af6b 	beq.w	8006c02 <_dtoa_r+0x3da>
 8006d2c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8006d30:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006d34:	e7e0      	b.n	8006cf8 <_dtoa_r+0x4d0>
 8006d36:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006d3a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006d3e:	4621      	mov	r1, r4
 8006d40:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006d44:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006d48:	ee14 2a90 	vmov	r2, s9
 8006d4c:	3230      	adds	r2, #48	; 0x30
 8006d4e:	f808 2b01 	strb.w	r2, [r8], #1
 8006d52:	45a0      	cmp	r8, r4
 8006d54:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006d58:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006d5c:	d118      	bne.n	8006d90 <_dtoa_r+0x568>
 8006d5e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006d62:	ee37 4b05 	vadd.f64	d4, d7, d5
 8006d66:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8006d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d6e:	dc4d      	bgt.n	8006e0c <_dtoa_r+0x5e4>
 8006d70:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006d74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d7c:	f57f af41 	bpl.w	8006c02 <_dtoa_r+0x3da>
 8006d80:	4688      	mov	r8, r1
 8006d82:	3901      	subs	r1, #1
 8006d84:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8006d88:	2b30      	cmp	r3, #48	; 0x30
 8006d8a:	d0f9      	beq.n	8006d80 <_dtoa_r+0x558>
 8006d8c:	46bb      	mov	fp, r7
 8006d8e:	e02a      	b.n	8006de6 <_dtoa_r+0x5be>
 8006d90:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006d94:	e7d6      	b.n	8006d44 <_dtoa_r+0x51c>
 8006d96:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d9a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8006d9e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006da2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8006da6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8006daa:	ee15 3a10 	vmov	r3, s10
 8006dae:	3330      	adds	r3, #48	; 0x30
 8006db0:	f808 3b01 	strb.w	r3, [r8], #1
 8006db4:	9b01      	ldr	r3, [sp, #4]
 8006db6:	eba8 0303 	sub.w	r3, r8, r3
 8006dba:	4599      	cmp	r9, r3
 8006dbc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006dc0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8006dc4:	d133      	bne.n	8006e2e <_dtoa_r+0x606>
 8006dc6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006dca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dd2:	dc1a      	bgt.n	8006e0a <_dtoa_r+0x5e2>
 8006dd4:	eeb4 7b46 	vcmp.f64	d7, d6
 8006dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ddc:	d103      	bne.n	8006de6 <_dtoa_r+0x5be>
 8006dde:	ee15 3a10 	vmov	r3, s10
 8006de2:	07d9      	lsls	r1, r3, #31
 8006de4:	d411      	bmi.n	8006e0a <_dtoa_r+0x5e2>
 8006de6:	4629      	mov	r1, r5
 8006de8:	4630      	mov	r0, r6
 8006dea:	f000 fcfb 	bl	80077e4 <_Bfree>
 8006dee:	2300      	movs	r3, #0
 8006df0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006df2:	f888 3000 	strb.w	r3, [r8]
 8006df6:	f10b 0301 	add.w	r3, fp, #1
 8006dfa:	6013      	str	r3, [r2, #0]
 8006dfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f43f ad61 	beq.w	80068c6 <_dtoa_r+0x9e>
 8006e04:	f8c3 8000 	str.w	r8, [r3]
 8006e08:	e55d      	b.n	80068c6 <_dtoa_r+0x9e>
 8006e0a:	465f      	mov	r7, fp
 8006e0c:	4643      	mov	r3, r8
 8006e0e:	4698      	mov	r8, r3
 8006e10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e14:	2a39      	cmp	r2, #57	; 0x39
 8006e16:	d106      	bne.n	8006e26 <_dtoa_r+0x5fe>
 8006e18:	9a01      	ldr	r2, [sp, #4]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d1f7      	bne.n	8006e0e <_dtoa_r+0x5e6>
 8006e1e:	9901      	ldr	r1, [sp, #4]
 8006e20:	2230      	movs	r2, #48	; 0x30
 8006e22:	3701      	adds	r7, #1
 8006e24:	700a      	strb	r2, [r1, #0]
 8006e26:	781a      	ldrb	r2, [r3, #0]
 8006e28:	3201      	adds	r2, #1
 8006e2a:	701a      	strb	r2, [r3, #0]
 8006e2c:	e7ae      	b.n	8006d8c <_dtoa_r+0x564>
 8006e2e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006e32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e3a:	d1b2      	bne.n	8006da2 <_dtoa_r+0x57a>
 8006e3c:	e7d3      	b.n	8006de6 <_dtoa_r+0x5be>
 8006e3e:	bf00      	nop
 8006e40:	08009698 	.word	0x08009698
 8006e44:	08009670 	.word	0x08009670
 8006e48:	9907      	ldr	r1, [sp, #28]
 8006e4a:	2900      	cmp	r1, #0
 8006e4c:	f000 80d0 	beq.w	8006ff0 <_dtoa_r+0x7c8>
 8006e50:	9906      	ldr	r1, [sp, #24]
 8006e52:	2901      	cmp	r1, #1
 8006e54:	f300 80b4 	bgt.w	8006fc0 <_dtoa_r+0x798>
 8006e58:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e5a:	2900      	cmp	r1, #0
 8006e5c:	f000 80ac 	beq.w	8006fb8 <_dtoa_r+0x790>
 8006e60:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006e64:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006e68:	461c      	mov	r4, r3
 8006e6a:	930a      	str	r3, [sp, #40]	; 0x28
 8006e6c:	9b04      	ldr	r3, [sp, #16]
 8006e6e:	4413      	add	r3, r2
 8006e70:	9304      	str	r3, [sp, #16]
 8006e72:	9b05      	ldr	r3, [sp, #20]
 8006e74:	2101      	movs	r1, #1
 8006e76:	4413      	add	r3, r2
 8006e78:	4630      	mov	r0, r6
 8006e7a:	9305      	str	r3, [sp, #20]
 8006e7c:	f000 fd6a 	bl	8007954 <__i2b>
 8006e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e82:	4607      	mov	r7, r0
 8006e84:	f1b8 0f00 	cmp.w	r8, #0
 8006e88:	dd0d      	ble.n	8006ea6 <_dtoa_r+0x67e>
 8006e8a:	9a05      	ldr	r2, [sp, #20]
 8006e8c:	2a00      	cmp	r2, #0
 8006e8e:	dd0a      	ble.n	8006ea6 <_dtoa_r+0x67e>
 8006e90:	4542      	cmp	r2, r8
 8006e92:	9904      	ldr	r1, [sp, #16]
 8006e94:	bfa8      	it	ge
 8006e96:	4642      	movge	r2, r8
 8006e98:	1a89      	subs	r1, r1, r2
 8006e9a:	9104      	str	r1, [sp, #16]
 8006e9c:	9905      	ldr	r1, [sp, #20]
 8006e9e:	eba8 0802 	sub.w	r8, r8, r2
 8006ea2:	1a8a      	subs	r2, r1, r2
 8006ea4:	9205      	str	r2, [sp, #20]
 8006ea6:	b303      	cbz	r3, 8006eea <_dtoa_r+0x6c2>
 8006ea8:	9a07      	ldr	r2, [sp, #28]
 8006eaa:	2a00      	cmp	r2, #0
 8006eac:	f000 80a5 	beq.w	8006ffa <_dtoa_r+0x7d2>
 8006eb0:	2c00      	cmp	r4, #0
 8006eb2:	dd13      	ble.n	8006edc <_dtoa_r+0x6b4>
 8006eb4:	4639      	mov	r1, r7
 8006eb6:	4622      	mov	r2, r4
 8006eb8:	4630      	mov	r0, r6
 8006eba:	930d      	str	r3, [sp, #52]	; 0x34
 8006ebc:	f000 fe0a 	bl	8007ad4 <__pow5mult>
 8006ec0:	462a      	mov	r2, r5
 8006ec2:	4601      	mov	r1, r0
 8006ec4:	4607      	mov	r7, r0
 8006ec6:	4630      	mov	r0, r6
 8006ec8:	f000 fd5a 	bl	8007980 <__multiply>
 8006ecc:	4629      	mov	r1, r5
 8006ece:	900a      	str	r0, [sp, #40]	; 0x28
 8006ed0:	4630      	mov	r0, r6
 8006ed2:	f000 fc87 	bl	80077e4 <_Bfree>
 8006ed6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ed8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006eda:	4615      	mov	r5, r2
 8006edc:	1b1a      	subs	r2, r3, r4
 8006ede:	d004      	beq.n	8006eea <_dtoa_r+0x6c2>
 8006ee0:	4629      	mov	r1, r5
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	f000 fdf6 	bl	8007ad4 <__pow5mult>
 8006ee8:	4605      	mov	r5, r0
 8006eea:	2101      	movs	r1, #1
 8006eec:	4630      	mov	r0, r6
 8006eee:	f000 fd31 	bl	8007954 <__i2b>
 8006ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	f340 8081 	ble.w	8006ffe <_dtoa_r+0x7d6>
 8006efc:	461a      	mov	r2, r3
 8006efe:	4601      	mov	r1, r0
 8006f00:	4630      	mov	r0, r6
 8006f02:	f000 fde7 	bl	8007ad4 <__pow5mult>
 8006f06:	9b06      	ldr	r3, [sp, #24]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	dd7a      	ble.n	8007004 <_dtoa_r+0x7dc>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	930a      	str	r3, [sp, #40]	; 0x28
 8006f12:	6922      	ldr	r2, [r4, #16]
 8006f14:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006f18:	6910      	ldr	r0, [r2, #16]
 8006f1a:	f000 fccb 	bl	80078b4 <__hi0bits>
 8006f1e:	f1c0 0020 	rsb	r0, r0, #32
 8006f22:	9b05      	ldr	r3, [sp, #20]
 8006f24:	4418      	add	r0, r3
 8006f26:	f010 001f 	ands.w	r0, r0, #31
 8006f2a:	f000 808c 	beq.w	8007046 <_dtoa_r+0x81e>
 8006f2e:	f1c0 0220 	rsb	r2, r0, #32
 8006f32:	2a04      	cmp	r2, #4
 8006f34:	f340 8085 	ble.w	8007042 <_dtoa_r+0x81a>
 8006f38:	f1c0 001c 	rsb	r0, r0, #28
 8006f3c:	9b04      	ldr	r3, [sp, #16]
 8006f3e:	4403      	add	r3, r0
 8006f40:	9304      	str	r3, [sp, #16]
 8006f42:	9b05      	ldr	r3, [sp, #20]
 8006f44:	4403      	add	r3, r0
 8006f46:	4480      	add	r8, r0
 8006f48:	9305      	str	r3, [sp, #20]
 8006f4a:	9b04      	ldr	r3, [sp, #16]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	dd05      	ble.n	8006f5c <_dtoa_r+0x734>
 8006f50:	4629      	mov	r1, r5
 8006f52:	461a      	mov	r2, r3
 8006f54:	4630      	mov	r0, r6
 8006f56:	f000 fe17 	bl	8007b88 <__lshift>
 8006f5a:	4605      	mov	r5, r0
 8006f5c:	9b05      	ldr	r3, [sp, #20]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	dd05      	ble.n	8006f6e <_dtoa_r+0x746>
 8006f62:	4621      	mov	r1, r4
 8006f64:	461a      	mov	r2, r3
 8006f66:	4630      	mov	r0, r6
 8006f68:	f000 fe0e 	bl	8007b88 <__lshift>
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d06a      	beq.n	800704a <_dtoa_r+0x822>
 8006f74:	4621      	mov	r1, r4
 8006f76:	4628      	mov	r0, r5
 8006f78:	f000 fe76 	bl	8007c68 <__mcmp>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	da64      	bge.n	800704a <_dtoa_r+0x822>
 8006f80:	2300      	movs	r3, #0
 8006f82:	4629      	mov	r1, r5
 8006f84:	220a      	movs	r2, #10
 8006f86:	4630      	mov	r0, r6
 8006f88:	f000 fc4e 	bl	8007828 <__multadd>
 8006f8c:	9b07      	ldr	r3, [sp, #28]
 8006f8e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006f92:	4605      	mov	r5, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 8191 	beq.w	80072bc <_dtoa_r+0xa94>
 8006f9a:	4639      	mov	r1, r7
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	220a      	movs	r2, #10
 8006fa0:	4630      	mov	r0, r6
 8006fa2:	f000 fc41 	bl	8007828 <__multadd>
 8006fa6:	f1ba 0f00 	cmp.w	sl, #0
 8006faa:	4607      	mov	r7, r0
 8006fac:	f300 808d 	bgt.w	80070ca <_dtoa_r+0x8a2>
 8006fb0:	9b06      	ldr	r3, [sp, #24]
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	dc50      	bgt.n	8007058 <_dtoa_r+0x830>
 8006fb6:	e088      	b.n	80070ca <_dtoa_r+0x8a2>
 8006fb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006fbe:	e751      	b.n	8006e64 <_dtoa_r+0x63c>
 8006fc0:	f109 34ff 	add.w	r4, r9, #4294967295
 8006fc4:	42a3      	cmp	r3, r4
 8006fc6:	bfbf      	itttt	lt
 8006fc8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8006fca:	1ae3      	sublt	r3, r4, r3
 8006fcc:	18d2      	addlt	r2, r2, r3
 8006fce:	9209      	strlt	r2, [sp, #36]	; 0x24
 8006fd0:	bfb6      	itet	lt
 8006fd2:	4623      	movlt	r3, r4
 8006fd4:	1b1c      	subge	r4, r3, r4
 8006fd6:	2400      	movlt	r4, #0
 8006fd8:	f1b9 0f00 	cmp.w	r9, #0
 8006fdc:	bfb5      	itete	lt
 8006fde:	9a04      	ldrlt	r2, [sp, #16]
 8006fe0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8006fe4:	eba2 0809 	sublt.w	r8, r2, r9
 8006fe8:	464a      	movge	r2, r9
 8006fea:	bfb8      	it	lt
 8006fec:	2200      	movlt	r2, #0
 8006fee:	e73c      	b.n	8006e6a <_dtoa_r+0x642>
 8006ff0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006ff4:	9f07      	ldr	r7, [sp, #28]
 8006ff6:	461c      	mov	r4, r3
 8006ff8:	e744      	b.n	8006e84 <_dtoa_r+0x65c>
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	e770      	b.n	8006ee0 <_dtoa_r+0x6b8>
 8006ffe:	9b06      	ldr	r3, [sp, #24]
 8007000:	2b01      	cmp	r3, #1
 8007002:	dc18      	bgt.n	8007036 <_dtoa_r+0x80e>
 8007004:	9b02      	ldr	r3, [sp, #8]
 8007006:	b9b3      	cbnz	r3, 8007036 <_dtoa_r+0x80e>
 8007008:	9b03      	ldr	r3, [sp, #12]
 800700a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800700e:	b9a2      	cbnz	r2, 800703a <_dtoa_r+0x812>
 8007010:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007014:	0d12      	lsrs	r2, r2, #20
 8007016:	0512      	lsls	r2, r2, #20
 8007018:	b18a      	cbz	r2, 800703e <_dtoa_r+0x816>
 800701a:	9b04      	ldr	r3, [sp, #16]
 800701c:	3301      	adds	r3, #1
 800701e:	9304      	str	r3, [sp, #16]
 8007020:	9b05      	ldr	r3, [sp, #20]
 8007022:	3301      	adds	r3, #1
 8007024:	9305      	str	r3, [sp, #20]
 8007026:	2301      	movs	r3, #1
 8007028:	930a      	str	r3, [sp, #40]	; 0x28
 800702a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800702c:	2b00      	cmp	r3, #0
 800702e:	f47f af70 	bne.w	8006f12 <_dtoa_r+0x6ea>
 8007032:	2001      	movs	r0, #1
 8007034:	e775      	b.n	8006f22 <_dtoa_r+0x6fa>
 8007036:	2300      	movs	r3, #0
 8007038:	e7f6      	b.n	8007028 <_dtoa_r+0x800>
 800703a:	9b02      	ldr	r3, [sp, #8]
 800703c:	e7f4      	b.n	8007028 <_dtoa_r+0x800>
 800703e:	920a      	str	r2, [sp, #40]	; 0x28
 8007040:	e7f3      	b.n	800702a <_dtoa_r+0x802>
 8007042:	d082      	beq.n	8006f4a <_dtoa_r+0x722>
 8007044:	4610      	mov	r0, r2
 8007046:	301c      	adds	r0, #28
 8007048:	e778      	b.n	8006f3c <_dtoa_r+0x714>
 800704a:	f1b9 0f00 	cmp.w	r9, #0
 800704e:	dc37      	bgt.n	80070c0 <_dtoa_r+0x898>
 8007050:	9b06      	ldr	r3, [sp, #24]
 8007052:	2b02      	cmp	r3, #2
 8007054:	dd34      	ble.n	80070c0 <_dtoa_r+0x898>
 8007056:	46ca      	mov	sl, r9
 8007058:	f1ba 0f00 	cmp.w	sl, #0
 800705c:	d10d      	bne.n	800707a <_dtoa_r+0x852>
 800705e:	4621      	mov	r1, r4
 8007060:	4653      	mov	r3, sl
 8007062:	2205      	movs	r2, #5
 8007064:	4630      	mov	r0, r6
 8007066:	f000 fbdf 	bl	8007828 <__multadd>
 800706a:	4601      	mov	r1, r0
 800706c:	4604      	mov	r4, r0
 800706e:	4628      	mov	r0, r5
 8007070:	f000 fdfa 	bl	8007c68 <__mcmp>
 8007074:	2800      	cmp	r0, #0
 8007076:	f73f adeb 	bgt.w	8006c50 <_dtoa_r+0x428>
 800707a:	9b08      	ldr	r3, [sp, #32]
 800707c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007080:	ea6f 0b03 	mvn.w	fp, r3
 8007084:	f04f 0900 	mov.w	r9, #0
 8007088:	4621      	mov	r1, r4
 800708a:	4630      	mov	r0, r6
 800708c:	f000 fbaa 	bl	80077e4 <_Bfree>
 8007090:	2f00      	cmp	r7, #0
 8007092:	f43f aea8 	beq.w	8006de6 <_dtoa_r+0x5be>
 8007096:	f1b9 0f00 	cmp.w	r9, #0
 800709a:	d005      	beq.n	80070a8 <_dtoa_r+0x880>
 800709c:	45b9      	cmp	r9, r7
 800709e:	d003      	beq.n	80070a8 <_dtoa_r+0x880>
 80070a0:	4649      	mov	r1, r9
 80070a2:	4630      	mov	r0, r6
 80070a4:	f000 fb9e 	bl	80077e4 <_Bfree>
 80070a8:	4639      	mov	r1, r7
 80070aa:	4630      	mov	r0, r6
 80070ac:	f000 fb9a 	bl	80077e4 <_Bfree>
 80070b0:	e699      	b.n	8006de6 <_dtoa_r+0x5be>
 80070b2:	2400      	movs	r4, #0
 80070b4:	4627      	mov	r7, r4
 80070b6:	e7e0      	b.n	800707a <_dtoa_r+0x852>
 80070b8:	46bb      	mov	fp, r7
 80070ba:	4604      	mov	r4, r0
 80070bc:	4607      	mov	r7, r0
 80070be:	e5c7      	b.n	8006c50 <_dtoa_r+0x428>
 80070c0:	9b07      	ldr	r3, [sp, #28]
 80070c2:	46ca      	mov	sl, r9
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 8100 	beq.w	80072ca <_dtoa_r+0xaa2>
 80070ca:	f1b8 0f00 	cmp.w	r8, #0
 80070ce:	dd05      	ble.n	80070dc <_dtoa_r+0x8b4>
 80070d0:	4639      	mov	r1, r7
 80070d2:	4642      	mov	r2, r8
 80070d4:	4630      	mov	r0, r6
 80070d6:	f000 fd57 	bl	8007b88 <__lshift>
 80070da:	4607      	mov	r7, r0
 80070dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d05d      	beq.n	800719e <_dtoa_r+0x976>
 80070e2:	6879      	ldr	r1, [r7, #4]
 80070e4:	4630      	mov	r0, r6
 80070e6:	f000 fb3d 	bl	8007764 <_Balloc>
 80070ea:	4680      	mov	r8, r0
 80070ec:	b928      	cbnz	r0, 80070fa <_dtoa_r+0x8d2>
 80070ee:	4b82      	ldr	r3, [pc, #520]	; (80072f8 <_dtoa_r+0xad0>)
 80070f0:	4602      	mov	r2, r0
 80070f2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80070f6:	f7ff bbaf 	b.w	8006858 <_dtoa_r+0x30>
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	3202      	adds	r2, #2
 80070fe:	0092      	lsls	r2, r2, #2
 8007100:	f107 010c 	add.w	r1, r7, #12
 8007104:	300c      	adds	r0, #12
 8007106:	f7fe fc3d 	bl	8005984 <memcpy>
 800710a:	2201      	movs	r2, #1
 800710c:	4641      	mov	r1, r8
 800710e:	4630      	mov	r0, r6
 8007110:	f000 fd3a 	bl	8007b88 <__lshift>
 8007114:	9b01      	ldr	r3, [sp, #4]
 8007116:	3301      	adds	r3, #1
 8007118:	9304      	str	r3, [sp, #16]
 800711a:	9b01      	ldr	r3, [sp, #4]
 800711c:	4453      	add	r3, sl
 800711e:	9308      	str	r3, [sp, #32]
 8007120:	9b02      	ldr	r3, [sp, #8]
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	46b9      	mov	r9, r7
 8007128:	9307      	str	r3, [sp, #28]
 800712a:	4607      	mov	r7, r0
 800712c:	9b04      	ldr	r3, [sp, #16]
 800712e:	4621      	mov	r1, r4
 8007130:	3b01      	subs	r3, #1
 8007132:	4628      	mov	r0, r5
 8007134:	9302      	str	r3, [sp, #8]
 8007136:	f7ff faeb 	bl	8006710 <quorem>
 800713a:	4603      	mov	r3, r0
 800713c:	3330      	adds	r3, #48	; 0x30
 800713e:	9005      	str	r0, [sp, #20]
 8007140:	4649      	mov	r1, r9
 8007142:	4628      	mov	r0, r5
 8007144:	9309      	str	r3, [sp, #36]	; 0x24
 8007146:	f000 fd8f 	bl	8007c68 <__mcmp>
 800714a:	463a      	mov	r2, r7
 800714c:	4682      	mov	sl, r0
 800714e:	4621      	mov	r1, r4
 8007150:	4630      	mov	r0, r6
 8007152:	f000 fda5 	bl	8007ca0 <__mdiff>
 8007156:	68c2      	ldr	r2, [r0, #12]
 8007158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800715a:	4680      	mov	r8, r0
 800715c:	bb0a      	cbnz	r2, 80071a2 <_dtoa_r+0x97a>
 800715e:	4601      	mov	r1, r0
 8007160:	4628      	mov	r0, r5
 8007162:	f000 fd81 	bl	8007c68 <__mcmp>
 8007166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007168:	4602      	mov	r2, r0
 800716a:	4641      	mov	r1, r8
 800716c:	4630      	mov	r0, r6
 800716e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8007172:	f000 fb37 	bl	80077e4 <_Bfree>
 8007176:	9b06      	ldr	r3, [sp, #24]
 8007178:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800717a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800717e:	ea43 0102 	orr.w	r1, r3, r2
 8007182:	9b07      	ldr	r3, [sp, #28]
 8007184:	430b      	orrs	r3, r1
 8007186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007188:	d10d      	bne.n	80071a6 <_dtoa_r+0x97e>
 800718a:	2b39      	cmp	r3, #57	; 0x39
 800718c:	d029      	beq.n	80071e2 <_dtoa_r+0x9ba>
 800718e:	f1ba 0f00 	cmp.w	sl, #0
 8007192:	dd01      	ble.n	8007198 <_dtoa_r+0x970>
 8007194:	9b05      	ldr	r3, [sp, #20]
 8007196:	3331      	adds	r3, #49	; 0x31
 8007198:	9a02      	ldr	r2, [sp, #8]
 800719a:	7013      	strb	r3, [r2, #0]
 800719c:	e774      	b.n	8007088 <_dtoa_r+0x860>
 800719e:	4638      	mov	r0, r7
 80071a0:	e7b8      	b.n	8007114 <_dtoa_r+0x8ec>
 80071a2:	2201      	movs	r2, #1
 80071a4:	e7e1      	b.n	800716a <_dtoa_r+0x942>
 80071a6:	f1ba 0f00 	cmp.w	sl, #0
 80071aa:	db06      	blt.n	80071ba <_dtoa_r+0x992>
 80071ac:	9906      	ldr	r1, [sp, #24]
 80071ae:	ea41 0a0a 	orr.w	sl, r1, sl
 80071b2:	9907      	ldr	r1, [sp, #28]
 80071b4:	ea5a 0101 	orrs.w	r1, sl, r1
 80071b8:	d120      	bne.n	80071fc <_dtoa_r+0x9d4>
 80071ba:	2a00      	cmp	r2, #0
 80071bc:	ddec      	ble.n	8007198 <_dtoa_r+0x970>
 80071be:	4629      	mov	r1, r5
 80071c0:	2201      	movs	r2, #1
 80071c2:	4630      	mov	r0, r6
 80071c4:	9304      	str	r3, [sp, #16]
 80071c6:	f000 fcdf 	bl	8007b88 <__lshift>
 80071ca:	4621      	mov	r1, r4
 80071cc:	4605      	mov	r5, r0
 80071ce:	f000 fd4b 	bl	8007c68 <__mcmp>
 80071d2:	2800      	cmp	r0, #0
 80071d4:	9b04      	ldr	r3, [sp, #16]
 80071d6:	dc02      	bgt.n	80071de <_dtoa_r+0x9b6>
 80071d8:	d1de      	bne.n	8007198 <_dtoa_r+0x970>
 80071da:	07da      	lsls	r2, r3, #31
 80071dc:	d5dc      	bpl.n	8007198 <_dtoa_r+0x970>
 80071de:	2b39      	cmp	r3, #57	; 0x39
 80071e0:	d1d8      	bne.n	8007194 <_dtoa_r+0x96c>
 80071e2:	9a02      	ldr	r2, [sp, #8]
 80071e4:	2339      	movs	r3, #57	; 0x39
 80071e6:	7013      	strb	r3, [r2, #0]
 80071e8:	4643      	mov	r3, r8
 80071ea:	4698      	mov	r8, r3
 80071ec:	3b01      	subs	r3, #1
 80071ee:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80071f2:	2a39      	cmp	r2, #57	; 0x39
 80071f4:	d051      	beq.n	800729a <_dtoa_r+0xa72>
 80071f6:	3201      	adds	r2, #1
 80071f8:	701a      	strb	r2, [r3, #0]
 80071fa:	e745      	b.n	8007088 <_dtoa_r+0x860>
 80071fc:	2a00      	cmp	r2, #0
 80071fe:	dd03      	ble.n	8007208 <_dtoa_r+0x9e0>
 8007200:	2b39      	cmp	r3, #57	; 0x39
 8007202:	d0ee      	beq.n	80071e2 <_dtoa_r+0x9ba>
 8007204:	3301      	adds	r3, #1
 8007206:	e7c7      	b.n	8007198 <_dtoa_r+0x970>
 8007208:	9a04      	ldr	r2, [sp, #16]
 800720a:	9908      	ldr	r1, [sp, #32]
 800720c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007210:	428a      	cmp	r2, r1
 8007212:	d02b      	beq.n	800726c <_dtoa_r+0xa44>
 8007214:	4629      	mov	r1, r5
 8007216:	2300      	movs	r3, #0
 8007218:	220a      	movs	r2, #10
 800721a:	4630      	mov	r0, r6
 800721c:	f000 fb04 	bl	8007828 <__multadd>
 8007220:	45b9      	cmp	r9, r7
 8007222:	4605      	mov	r5, r0
 8007224:	f04f 0300 	mov.w	r3, #0
 8007228:	f04f 020a 	mov.w	r2, #10
 800722c:	4649      	mov	r1, r9
 800722e:	4630      	mov	r0, r6
 8007230:	d107      	bne.n	8007242 <_dtoa_r+0xa1a>
 8007232:	f000 faf9 	bl	8007828 <__multadd>
 8007236:	4681      	mov	r9, r0
 8007238:	4607      	mov	r7, r0
 800723a:	9b04      	ldr	r3, [sp, #16]
 800723c:	3301      	adds	r3, #1
 800723e:	9304      	str	r3, [sp, #16]
 8007240:	e774      	b.n	800712c <_dtoa_r+0x904>
 8007242:	f000 faf1 	bl	8007828 <__multadd>
 8007246:	4639      	mov	r1, r7
 8007248:	4681      	mov	r9, r0
 800724a:	2300      	movs	r3, #0
 800724c:	220a      	movs	r2, #10
 800724e:	4630      	mov	r0, r6
 8007250:	f000 faea 	bl	8007828 <__multadd>
 8007254:	4607      	mov	r7, r0
 8007256:	e7f0      	b.n	800723a <_dtoa_r+0xa12>
 8007258:	f1ba 0f00 	cmp.w	sl, #0
 800725c:	9a01      	ldr	r2, [sp, #4]
 800725e:	bfcc      	ite	gt
 8007260:	46d0      	movgt	r8, sl
 8007262:	f04f 0801 	movle.w	r8, #1
 8007266:	4490      	add	r8, r2
 8007268:	f04f 0900 	mov.w	r9, #0
 800726c:	4629      	mov	r1, r5
 800726e:	2201      	movs	r2, #1
 8007270:	4630      	mov	r0, r6
 8007272:	9302      	str	r3, [sp, #8]
 8007274:	f000 fc88 	bl	8007b88 <__lshift>
 8007278:	4621      	mov	r1, r4
 800727a:	4605      	mov	r5, r0
 800727c:	f000 fcf4 	bl	8007c68 <__mcmp>
 8007280:	2800      	cmp	r0, #0
 8007282:	dcb1      	bgt.n	80071e8 <_dtoa_r+0x9c0>
 8007284:	d102      	bne.n	800728c <_dtoa_r+0xa64>
 8007286:	9b02      	ldr	r3, [sp, #8]
 8007288:	07db      	lsls	r3, r3, #31
 800728a:	d4ad      	bmi.n	80071e8 <_dtoa_r+0x9c0>
 800728c:	4643      	mov	r3, r8
 800728e:	4698      	mov	r8, r3
 8007290:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007294:	2a30      	cmp	r2, #48	; 0x30
 8007296:	d0fa      	beq.n	800728e <_dtoa_r+0xa66>
 8007298:	e6f6      	b.n	8007088 <_dtoa_r+0x860>
 800729a:	9a01      	ldr	r2, [sp, #4]
 800729c:	429a      	cmp	r2, r3
 800729e:	d1a4      	bne.n	80071ea <_dtoa_r+0x9c2>
 80072a0:	f10b 0b01 	add.w	fp, fp, #1
 80072a4:	2331      	movs	r3, #49	; 0x31
 80072a6:	e778      	b.n	800719a <_dtoa_r+0x972>
 80072a8:	4b14      	ldr	r3, [pc, #80]	; (80072fc <_dtoa_r+0xad4>)
 80072aa:	f7ff bb27 	b.w	80068fc <_dtoa_r+0xd4>
 80072ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f47f ab03 	bne.w	80068bc <_dtoa_r+0x94>
 80072b6:	4b12      	ldr	r3, [pc, #72]	; (8007300 <_dtoa_r+0xad8>)
 80072b8:	f7ff bb20 	b.w	80068fc <_dtoa_r+0xd4>
 80072bc:	f1ba 0f00 	cmp.w	sl, #0
 80072c0:	dc03      	bgt.n	80072ca <_dtoa_r+0xaa2>
 80072c2:	9b06      	ldr	r3, [sp, #24]
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	f73f aec7 	bgt.w	8007058 <_dtoa_r+0x830>
 80072ca:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80072ce:	4621      	mov	r1, r4
 80072d0:	4628      	mov	r0, r5
 80072d2:	f7ff fa1d 	bl	8006710 <quorem>
 80072d6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80072da:	f808 3b01 	strb.w	r3, [r8], #1
 80072de:	9a01      	ldr	r2, [sp, #4]
 80072e0:	eba8 0202 	sub.w	r2, r8, r2
 80072e4:	4592      	cmp	sl, r2
 80072e6:	ddb7      	ble.n	8007258 <_dtoa_r+0xa30>
 80072e8:	4629      	mov	r1, r5
 80072ea:	2300      	movs	r3, #0
 80072ec:	220a      	movs	r2, #10
 80072ee:	4630      	mov	r0, r6
 80072f0:	f000 fa9a 	bl	8007828 <__multadd>
 80072f4:	4605      	mov	r5, r0
 80072f6:	e7ea      	b.n	80072ce <_dtoa_r+0xaa6>
 80072f8:	080095a3 	.word	0x080095a3
 80072fc:	08009500 	.word	0x08009500
 8007300:	08009524 	.word	0x08009524

08007304 <__sflush_r>:
 8007304:	898a      	ldrh	r2, [r1, #12]
 8007306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800730a:	4605      	mov	r5, r0
 800730c:	0710      	lsls	r0, r2, #28
 800730e:	460c      	mov	r4, r1
 8007310:	d458      	bmi.n	80073c4 <__sflush_r+0xc0>
 8007312:	684b      	ldr	r3, [r1, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	dc05      	bgt.n	8007324 <__sflush_r+0x20>
 8007318:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800731a:	2b00      	cmp	r3, #0
 800731c:	dc02      	bgt.n	8007324 <__sflush_r+0x20>
 800731e:	2000      	movs	r0, #0
 8007320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007324:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007326:	2e00      	cmp	r6, #0
 8007328:	d0f9      	beq.n	800731e <__sflush_r+0x1a>
 800732a:	2300      	movs	r3, #0
 800732c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007330:	682f      	ldr	r7, [r5, #0]
 8007332:	602b      	str	r3, [r5, #0]
 8007334:	d032      	beq.n	800739c <__sflush_r+0x98>
 8007336:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007338:	89a3      	ldrh	r3, [r4, #12]
 800733a:	075a      	lsls	r2, r3, #29
 800733c:	d505      	bpl.n	800734a <__sflush_r+0x46>
 800733e:	6863      	ldr	r3, [r4, #4]
 8007340:	1ac0      	subs	r0, r0, r3
 8007342:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007344:	b10b      	cbz	r3, 800734a <__sflush_r+0x46>
 8007346:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007348:	1ac0      	subs	r0, r0, r3
 800734a:	2300      	movs	r3, #0
 800734c:	4602      	mov	r2, r0
 800734e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007350:	6a21      	ldr	r1, [r4, #32]
 8007352:	4628      	mov	r0, r5
 8007354:	47b0      	blx	r6
 8007356:	1c43      	adds	r3, r0, #1
 8007358:	89a3      	ldrh	r3, [r4, #12]
 800735a:	d106      	bne.n	800736a <__sflush_r+0x66>
 800735c:	6829      	ldr	r1, [r5, #0]
 800735e:	291d      	cmp	r1, #29
 8007360:	d82c      	bhi.n	80073bc <__sflush_r+0xb8>
 8007362:	4a2a      	ldr	r2, [pc, #168]	; (800740c <__sflush_r+0x108>)
 8007364:	40ca      	lsrs	r2, r1
 8007366:	07d6      	lsls	r6, r2, #31
 8007368:	d528      	bpl.n	80073bc <__sflush_r+0xb8>
 800736a:	2200      	movs	r2, #0
 800736c:	6062      	str	r2, [r4, #4]
 800736e:	04d9      	lsls	r1, r3, #19
 8007370:	6922      	ldr	r2, [r4, #16]
 8007372:	6022      	str	r2, [r4, #0]
 8007374:	d504      	bpl.n	8007380 <__sflush_r+0x7c>
 8007376:	1c42      	adds	r2, r0, #1
 8007378:	d101      	bne.n	800737e <__sflush_r+0x7a>
 800737a:	682b      	ldr	r3, [r5, #0]
 800737c:	b903      	cbnz	r3, 8007380 <__sflush_r+0x7c>
 800737e:	6560      	str	r0, [r4, #84]	; 0x54
 8007380:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007382:	602f      	str	r7, [r5, #0]
 8007384:	2900      	cmp	r1, #0
 8007386:	d0ca      	beq.n	800731e <__sflush_r+0x1a>
 8007388:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800738c:	4299      	cmp	r1, r3
 800738e:	d002      	beq.n	8007396 <__sflush_r+0x92>
 8007390:	4628      	mov	r0, r5
 8007392:	f7fe fb0d 	bl	80059b0 <_free_r>
 8007396:	2000      	movs	r0, #0
 8007398:	6360      	str	r0, [r4, #52]	; 0x34
 800739a:	e7c1      	b.n	8007320 <__sflush_r+0x1c>
 800739c:	6a21      	ldr	r1, [r4, #32]
 800739e:	2301      	movs	r3, #1
 80073a0:	4628      	mov	r0, r5
 80073a2:	47b0      	blx	r6
 80073a4:	1c41      	adds	r1, r0, #1
 80073a6:	d1c7      	bne.n	8007338 <__sflush_r+0x34>
 80073a8:	682b      	ldr	r3, [r5, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d0c4      	beq.n	8007338 <__sflush_r+0x34>
 80073ae:	2b1d      	cmp	r3, #29
 80073b0:	d001      	beq.n	80073b6 <__sflush_r+0xb2>
 80073b2:	2b16      	cmp	r3, #22
 80073b4:	d101      	bne.n	80073ba <__sflush_r+0xb6>
 80073b6:	602f      	str	r7, [r5, #0]
 80073b8:	e7b1      	b.n	800731e <__sflush_r+0x1a>
 80073ba:	89a3      	ldrh	r3, [r4, #12]
 80073bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073c0:	81a3      	strh	r3, [r4, #12]
 80073c2:	e7ad      	b.n	8007320 <__sflush_r+0x1c>
 80073c4:	690f      	ldr	r7, [r1, #16]
 80073c6:	2f00      	cmp	r7, #0
 80073c8:	d0a9      	beq.n	800731e <__sflush_r+0x1a>
 80073ca:	0793      	lsls	r3, r2, #30
 80073cc:	680e      	ldr	r6, [r1, #0]
 80073ce:	bf08      	it	eq
 80073d0:	694b      	ldreq	r3, [r1, #20]
 80073d2:	600f      	str	r7, [r1, #0]
 80073d4:	bf18      	it	ne
 80073d6:	2300      	movne	r3, #0
 80073d8:	eba6 0807 	sub.w	r8, r6, r7
 80073dc:	608b      	str	r3, [r1, #8]
 80073de:	f1b8 0f00 	cmp.w	r8, #0
 80073e2:	dd9c      	ble.n	800731e <__sflush_r+0x1a>
 80073e4:	6a21      	ldr	r1, [r4, #32]
 80073e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80073e8:	4643      	mov	r3, r8
 80073ea:	463a      	mov	r2, r7
 80073ec:	4628      	mov	r0, r5
 80073ee:	47b0      	blx	r6
 80073f0:	2800      	cmp	r0, #0
 80073f2:	dc06      	bgt.n	8007402 <__sflush_r+0xfe>
 80073f4:	89a3      	ldrh	r3, [r4, #12]
 80073f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073fa:	81a3      	strh	r3, [r4, #12]
 80073fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007400:	e78e      	b.n	8007320 <__sflush_r+0x1c>
 8007402:	4407      	add	r7, r0
 8007404:	eba8 0800 	sub.w	r8, r8, r0
 8007408:	e7e9      	b.n	80073de <__sflush_r+0xda>
 800740a:	bf00      	nop
 800740c:	20400001 	.word	0x20400001

08007410 <_fflush_r>:
 8007410:	b538      	push	{r3, r4, r5, lr}
 8007412:	690b      	ldr	r3, [r1, #16]
 8007414:	4605      	mov	r5, r0
 8007416:	460c      	mov	r4, r1
 8007418:	b913      	cbnz	r3, 8007420 <_fflush_r+0x10>
 800741a:	2500      	movs	r5, #0
 800741c:	4628      	mov	r0, r5
 800741e:	bd38      	pop	{r3, r4, r5, pc}
 8007420:	b118      	cbz	r0, 800742a <_fflush_r+0x1a>
 8007422:	6983      	ldr	r3, [r0, #24]
 8007424:	b90b      	cbnz	r3, 800742a <_fflush_r+0x1a>
 8007426:	f000 f887 	bl	8007538 <__sinit>
 800742a:	4b14      	ldr	r3, [pc, #80]	; (800747c <_fflush_r+0x6c>)
 800742c:	429c      	cmp	r4, r3
 800742e:	d11b      	bne.n	8007468 <_fflush_r+0x58>
 8007430:	686c      	ldr	r4, [r5, #4]
 8007432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d0ef      	beq.n	800741a <_fflush_r+0xa>
 800743a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800743c:	07d0      	lsls	r0, r2, #31
 800743e:	d404      	bmi.n	800744a <_fflush_r+0x3a>
 8007440:	0599      	lsls	r1, r3, #22
 8007442:	d402      	bmi.n	800744a <_fflush_r+0x3a>
 8007444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007446:	f000 f91a 	bl	800767e <__retarget_lock_acquire_recursive>
 800744a:	4628      	mov	r0, r5
 800744c:	4621      	mov	r1, r4
 800744e:	f7ff ff59 	bl	8007304 <__sflush_r>
 8007452:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007454:	07da      	lsls	r2, r3, #31
 8007456:	4605      	mov	r5, r0
 8007458:	d4e0      	bmi.n	800741c <_fflush_r+0xc>
 800745a:	89a3      	ldrh	r3, [r4, #12]
 800745c:	059b      	lsls	r3, r3, #22
 800745e:	d4dd      	bmi.n	800741c <_fflush_r+0xc>
 8007460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007462:	f000 f90d 	bl	8007680 <__retarget_lock_release_recursive>
 8007466:	e7d9      	b.n	800741c <_fflush_r+0xc>
 8007468:	4b05      	ldr	r3, [pc, #20]	; (8007480 <_fflush_r+0x70>)
 800746a:	429c      	cmp	r4, r3
 800746c:	d101      	bne.n	8007472 <_fflush_r+0x62>
 800746e:	68ac      	ldr	r4, [r5, #8]
 8007470:	e7df      	b.n	8007432 <_fflush_r+0x22>
 8007472:	4b04      	ldr	r3, [pc, #16]	; (8007484 <_fflush_r+0x74>)
 8007474:	429c      	cmp	r4, r3
 8007476:	bf08      	it	eq
 8007478:	68ec      	ldreq	r4, [r5, #12]
 800747a:	e7da      	b.n	8007432 <_fflush_r+0x22>
 800747c:	080095d4 	.word	0x080095d4
 8007480:	080095f4 	.word	0x080095f4
 8007484:	080095b4 	.word	0x080095b4

08007488 <std>:
 8007488:	2300      	movs	r3, #0
 800748a:	b510      	push	{r4, lr}
 800748c:	4604      	mov	r4, r0
 800748e:	e9c0 3300 	strd	r3, r3, [r0]
 8007492:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007496:	6083      	str	r3, [r0, #8]
 8007498:	8181      	strh	r1, [r0, #12]
 800749a:	6643      	str	r3, [r0, #100]	; 0x64
 800749c:	81c2      	strh	r2, [r0, #14]
 800749e:	6183      	str	r3, [r0, #24]
 80074a0:	4619      	mov	r1, r3
 80074a2:	2208      	movs	r2, #8
 80074a4:	305c      	adds	r0, #92	; 0x5c
 80074a6:	f7fe fa7b 	bl	80059a0 <memset>
 80074aa:	4b05      	ldr	r3, [pc, #20]	; (80074c0 <std+0x38>)
 80074ac:	6263      	str	r3, [r4, #36]	; 0x24
 80074ae:	4b05      	ldr	r3, [pc, #20]	; (80074c4 <std+0x3c>)
 80074b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80074b2:	4b05      	ldr	r3, [pc, #20]	; (80074c8 <std+0x40>)
 80074b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80074b6:	4b05      	ldr	r3, [pc, #20]	; (80074cc <std+0x44>)
 80074b8:	6224      	str	r4, [r4, #32]
 80074ba:	6323      	str	r3, [r4, #48]	; 0x30
 80074bc:	bd10      	pop	{r4, pc}
 80074be:	bf00      	nop
 80074c0:	08008405 	.word	0x08008405
 80074c4:	08008427 	.word	0x08008427
 80074c8:	0800845f 	.word	0x0800845f
 80074cc:	08008483 	.word	0x08008483

080074d0 <_cleanup_r>:
 80074d0:	4901      	ldr	r1, [pc, #4]	; (80074d8 <_cleanup_r+0x8>)
 80074d2:	f000 b8af 	b.w	8007634 <_fwalk_reent>
 80074d6:	bf00      	nop
 80074d8:	08007411 	.word	0x08007411

080074dc <__sfmoreglue>:
 80074dc:	b570      	push	{r4, r5, r6, lr}
 80074de:	2268      	movs	r2, #104	; 0x68
 80074e0:	1e4d      	subs	r5, r1, #1
 80074e2:	4355      	muls	r5, r2
 80074e4:	460e      	mov	r6, r1
 80074e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80074ea:	f7fe facd 	bl	8005a88 <_malloc_r>
 80074ee:	4604      	mov	r4, r0
 80074f0:	b140      	cbz	r0, 8007504 <__sfmoreglue+0x28>
 80074f2:	2100      	movs	r1, #0
 80074f4:	e9c0 1600 	strd	r1, r6, [r0]
 80074f8:	300c      	adds	r0, #12
 80074fa:	60a0      	str	r0, [r4, #8]
 80074fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007500:	f7fe fa4e 	bl	80059a0 <memset>
 8007504:	4620      	mov	r0, r4
 8007506:	bd70      	pop	{r4, r5, r6, pc}

08007508 <__sfp_lock_acquire>:
 8007508:	4801      	ldr	r0, [pc, #4]	; (8007510 <__sfp_lock_acquire+0x8>)
 800750a:	f000 b8b8 	b.w	800767e <__retarget_lock_acquire_recursive>
 800750e:	bf00      	nop
 8007510:	240fb059 	.word	0x240fb059

08007514 <__sfp_lock_release>:
 8007514:	4801      	ldr	r0, [pc, #4]	; (800751c <__sfp_lock_release+0x8>)
 8007516:	f000 b8b3 	b.w	8007680 <__retarget_lock_release_recursive>
 800751a:	bf00      	nop
 800751c:	240fb059 	.word	0x240fb059

08007520 <__sinit_lock_acquire>:
 8007520:	4801      	ldr	r0, [pc, #4]	; (8007528 <__sinit_lock_acquire+0x8>)
 8007522:	f000 b8ac 	b.w	800767e <__retarget_lock_acquire_recursive>
 8007526:	bf00      	nop
 8007528:	240fb05a 	.word	0x240fb05a

0800752c <__sinit_lock_release>:
 800752c:	4801      	ldr	r0, [pc, #4]	; (8007534 <__sinit_lock_release+0x8>)
 800752e:	f000 b8a7 	b.w	8007680 <__retarget_lock_release_recursive>
 8007532:	bf00      	nop
 8007534:	240fb05a 	.word	0x240fb05a

08007538 <__sinit>:
 8007538:	b510      	push	{r4, lr}
 800753a:	4604      	mov	r4, r0
 800753c:	f7ff fff0 	bl	8007520 <__sinit_lock_acquire>
 8007540:	69a3      	ldr	r3, [r4, #24]
 8007542:	b11b      	cbz	r3, 800754c <__sinit+0x14>
 8007544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007548:	f7ff bff0 	b.w	800752c <__sinit_lock_release>
 800754c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007550:	6523      	str	r3, [r4, #80]	; 0x50
 8007552:	4b13      	ldr	r3, [pc, #76]	; (80075a0 <__sinit+0x68>)
 8007554:	4a13      	ldr	r2, [pc, #76]	; (80075a4 <__sinit+0x6c>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	62a2      	str	r2, [r4, #40]	; 0x28
 800755a:	42a3      	cmp	r3, r4
 800755c:	bf04      	itt	eq
 800755e:	2301      	moveq	r3, #1
 8007560:	61a3      	streq	r3, [r4, #24]
 8007562:	4620      	mov	r0, r4
 8007564:	f000 f820 	bl	80075a8 <__sfp>
 8007568:	6060      	str	r0, [r4, #4]
 800756a:	4620      	mov	r0, r4
 800756c:	f000 f81c 	bl	80075a8 <__sfp>
 8007570:	60a0      	str	r0, [r4, #8]
 8007572:	4620      	mov	r0, r4
 8007574:	f000 f818 	bl	80075a8 <__sfp>
 8007578:	2200      	movs	r2, #0
 800757a:	60e0      	str	r0, [r4, #12]
 800757c:	2104      	movs	r1, #4
 800757e:	6860      	ldr	r0, [r4, #4]
 8007580:	f7ff ff82 	bl	8007488 <std>
 8007584:	68a0      	ldr	r0, [r4, #8]
 8007586:	2201      	movs	r2, #1
 8007588:	2109      	movs	r1, #9
 800758a:	f7ff ff7d 	bl	8007488 <std>
 800758e:	68e0      	ldr	r0, [r4, #12]
 8007590:	2202      	movs	r2, #2
 8007592:	2112      	movs	r1, #18
 8007594:	f7ff ff78 	bl	8007488 <std>
 8007598:	2301      	movs	r3, #1
 800759a:	61a3      	str	r3, [r4, #24]
 800759c:	e7d2      	b.n	8007544 <__sinit+0xc>
 800759e:	bf00      	nop
 80075a0:	080094ec 	.word	0x080094ec
 80075a4:	080074d1 	.word	0x080074d1

080075a8 <__sfp>:
 80075a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075aa:	4607      	mov	r7, r0
 80075ac:	f7ff ffac 	bl	8007508 <__sfp_lock_acquire>
 80075b0:	4b1e      	ldr	r3, [pc, #120]	; (800762c <__sfp+0x84>)
 80075b2:	681e      	ldr	r6, [r3, #0]
 80075b4:	69b3      	ldr	r3, [r6, #24]
 80075b6:	b913      	cbnz	r3, 80075be <__sfp+0x16>
 80075b8:	4630      	mov	r0, r6
 80075ba:	f7ff ffbd 	bl	8007538 <__sinit>
 80075be:	3648      	adds	r6, #72	; 0x48
 80075c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80075c4:	3b01      	subs	r3, #1
 80075c6:	d503      	bpl.n	80075d0 <__sfp+0x28>
 80075c8:	6833      	ldr	r3, [r6, #0]
 80075ca:	b30b      	cbz	r3, 8007610 <__sfp+0x68>
 80075cc:	6836      	ldr	r6, [r6, #0]
 80075ce:	e7f7      	b.n	80075c0 <__sfp+0x18>
 80075d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80075d4:	b9d5      	cbnz	r5, 800760c <__sfp+0x64>
 80075d6:	4b16      	ldr	r3, [pc, #88]	; (8007630 <__sfp+0x88>)
 80075d8:	60e3      	str	r3, [r4, #12]
 80075da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80075de:	6665      	str	r5, [r4, #100]	; 0x64
 80075e0:	f000 f84c 	bl	800767c <__retarget_lock_init_recursive>
 80075e4:	f7ff ff96 	bl	8007514 <__sfp_lock_release>
 80075e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80075ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80075f0:	6025      	str	r5, [r4, #0]
 80075f2:	61a5      	str	r5, [r4, #24]
 80075f4:	2208      	movs	r2, #8
 80075f6:	4629      	mov	r1, r5
 80075f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80075fc:	f7fe f9d0 	bl	80059a0 <memset>
 8007600:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007604:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007608:	4620      	mov	r0, r4
 800760a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800760c:	3468      	adds	r4, #104	; 0x68
 800760e:	e7d9      	b.n	80075c4 <__sfp+0x1c>
 8007610:	2104      	movs	r1, #4
 8007612:	4638      	mov	r0, r7
 8007614:	f7ff ff62 	bl	80074dc <__sfmoreglue>
 8007618:	4604      	mov	r4, r0
 800761a:	6030      	str	r0, [r6, #0]
 800761c:	2800      	cmp	r0, #0
 800761e:	d1d5      	bne.n	80075cc <__sfp+0x24>
 8007620:	f7ff ff78 	bl	8007514 <__sfp_lock_release>
 8007624:	230c      	movs	r3, #12
 8007626:	603b      	str	r3, [r7, #0]
 8007628:	e7ee      	b.n	8007608 <__sfp+0x60>
 800762a:	bf00      	nop
 800762c:	080094ec 	.word	0x080094ec
 8007630:	ffff0001 	.word	0xffff0001

08007634 <_fwalk_reent>:
 8007634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007638:	4606      	mov	r6, r0
 800763a:	4688      	mov	r8, r1
 800763c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007640:	2700      	movs	r7, #0
 8007642:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007646:	f1b9 0901 	subs.w	r9, r9, #1
 800764a:	d505      	bpl.n	8007658 <_fwalk_reent+0x24>
 800764c:	6824      	ldr	r4, [r4, #0]
 800764e:	2c00      	cmp	r4, #0
 8007650:	d1f7      	bne.n	8007642 <_fwalk_reent+0xe>
 8007652:	4638      	mov	r0, r7
 8007654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007658:	89ab      	ldrh	r3, [r5, #12]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d907      	bls.n	800766e <_fwalk_reent+0x3a>
 800765e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007662:	3301      	adds	r3, #1
 8007664:	d003      	beq.n	800766e <_fwalk_reent+0x3a>
 8007666:	4629      	mov	r1, r5
 8007668:	4630      	mov	r0, r6
 800766a:	47c0      	blx	r8
 800766c:	4307      	orrs	r7, r0
 800766e:	3568      	adds	r5, #104	; 0x68
 8007670:	e7e9      	b.n	8007646 <_fwalk_reent+0x12>
	...

08007674 <_localeconv_r>:
 8007674:	4800      	ldr	r0, [pc, #0]	; (8007678 <_localeconv_r+0x4>)
 8007676:	4770      	bx	lr
 8007678:	240001c8 	.word	0x240001c8

0800767c <__retarget_lock_init_recursive>:
 800767c:	4770      	bx	lr

0800767e <__retarget_lock_acquire_recursive>:
 800767e:	4770      	bx	lr

08007680 <__retarget_lock_release_recursive>:
 8007680:	4770      	bx	lr

08007682 <__swhatbuf_r>:
 8007682:	b570      	push	{r4, r5, r6, lr}
 8007684:	460e      	mov	r6, r1
 8007686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800768a:	2900      	cmp	r1, #0
 800768c:	b096      	sub	sp, #88	; 0x58
 800768e:	4614      	mov	r4, r2
 8007690:	461d      	mov	r5, r3
 8007692:	da08      	bge.n	80076a6 <__swhatbuf_r+0x24>
 8007694:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	602a      	str	r2, [r5, #0]
 800769c:	061a      	lsls	r2, r3, #24
 800769e:	d410      	bmi.n	80076c2 <__swhatbuf_r+0x40>
 80076a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076a4:	e00e      	b.n	80076c4 <__swhatbuf_r+0x42>
 80076a6:	466a      	mov	r2, sp
 80076a8:	f000 ff42 	bl	8008530 <_fstat_r>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	dbf1      	blt.n	8007694 <__swhatbuf_r+0x12>
 80076b0:	9a01      	ldr	r2, [sp, #4]
 80076b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80076b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80076ba:	425a      	negs	r2, r3
 80076bc:	415a      	adcs	r2, r3
 80076be:	602a      	str	r2, [r5, #0]
 80076c0:	e7ee      	b.n	80076a0 <__swhatbuf_r+0x1e>
 80076c2:	2340      	movs	r3, #64	; 0x40
 80076c4:	2000      	movs	r0, #0
 80076c6:	6023      	str	r3, [r4, #0]
 80076c8:	b016      	add	sp, #88	; 0x58
 80076ca:	bd70      	pop	{r4, r5, r6, pc}

080076cc <__smakebuf_r>:
 80076cc:	898b      	ldrh	r3, [r1, #12]
 80076ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076d0:	079d      	lsls	r5, r3, #30
 80076d2:	4606      	mov	r6, r0
 80076d4:	460c      	mov	r4, r1
 80076d6:	d507      	bpl.n	80076e8 <__smakebuf_r+0x1c>
 80076d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80076dc:	6023      	str	r3, [r4, #0]
 80076de:	6123      	str	r3, [r4, #16]
 80076e0:	2301      	movs	r3, #1
 80076e2:	6163      	str	r3, [r4, #20]
 80076e4:	b002      	add	sp, #8
 80076e6:	bd70      	pop	{r4, r5, r6, pc}
 80076e8:	ab01      	add	r3, sp, #4
 80076ea:	466a      	mov	r2, sp
 80076ec:	f7ff ffc9 	bl	8007682 <__swhatbuf_r>
 80076f0:	9900      	ldr	r1, [sp, #0]
 80076f2:	4605      	mov	r5, r0
 80076f4:	4630      	mov	r0, r6
 80076f6:	f7fe f9c7 	bl	8005a88 <_malloc_r>
 80076fa:	b948      	cbnz	r0, 8007710 <__smakebuf_r+0x44>
 80076fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007700:	059a      	lsls	r2, r3, #22
 8007702:	d4ef      	bmi.n	80076e4 <__smakebuf_r+0x18>
 8007704:	f023 0303 	bic.w	r3, r3, #3
 8007708:	f043 0302 	orr.w	r3, r3, #2
 800770c:	81a3      	strh	r3, [r4, #12]
 800770e:	e7e3      	b.n	80076d8 <__smakebuf_r+0xc>
 8007710:	4b0d      	ldr	r3, [pc, #52]	; (8007748 <__smakebuf_r+0x7c>)
 8007712:	62b3      	str	r3, [r6, #40]	; 0x28
 8007714:	89a3      	ldrh	r3, [r4, #12]
 8007716:	6020      	str	r0, [r4, #0]
 8007718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800771c:	81a3      	strh	r3, [r4, #12]
 800771e:	9b00      	ldr	r3, [sp, #0]
 8007720:	6163      	str	r3, [r4, #20]
 8007722:	9b01      	ldr	r3, [sp, #4]
 8007724:	6120      	str	r0, [r4, #16]
 8007726:	b15b      	cbz	r3, 8007740 <__smakebuf_r+0x74>
 8007728:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800772c:	4630      	mov	r0, r6
 800772e:	f000 ff11 	bl	8008554 <_isatty_r>
 8007732:	b128      	cbz	r0, 8007740 <__smakebuf_r+0x74>
 8007734:	89a3      	ldrh	r3, [r4, #12]
 8007736:	f023 0303 	bic.w	r3, r3, #3
 800773a:	f043 0301 	orr.w	r3, r3, #1
 800773e:	81a3      	strh	r3, [r4, #12]
 8007740:	89a0      	ldrh	r0, [r4, #12]
 8007742:	4305      	orrs	r5, r0
 8007744:	81a5      	strh	r5, [r4, #12]
 8007746:	e7cd      	b.n	80076e4 <__smakebuf_r+0x18>
 8007748:	080074d1 	.word	0x080074d1

0800774c <__malloc_lock>:
 800774c:	4801      	ldr	r0, [pc, #4]	; (8007754 <__malloc_lock+0x8>)
 800774e:	f7ff bf96 	b.w	800767e <__retarget_lock_acquire_recursive>
 8007752:	bf00      	nop
 8007754:	240fb058 	.word	0x240fb058

08007758 <__malloc_unlock>:
 8007758:	4801      	ldr	r0, [pc, #4]	; (8007760 <__malloc_unlock+0x8>)
 800775a:	f7ff bf91 	b.w	8007680 <__retarget_lock_release_recursive>
 800775e:	bf00      	nop
 8007760:	240fb058 	.word	0x240fb058

08007764 <_Balloc>:
 8007764:	b570      	push	{r4, r5, r6, lr}
 8007766:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007768:	4604      	mov	r4, r0
 800776a:	460d      	mov	r5, r1
 800776c:	b976      	cbnz	r6, 800778c <_Balloc+0x28>
 800776e:	2010      	movs	r0, #16
 8007770:	f7fe f8f8 	bl	8005964 <malloc>
 8007774:	4602      	mov	r2, r0
 8007776:	6260      	str	r0, [r4, #36]	; 0x24
 8007778:	b920      	cbnz	r0, 8007784 <_Balloc+0x20>
 800777a:	4b18      	ldr	r3, [pc, #96]	; (80077dc <_Balloc+0x78>)
 800777c:	4818      	ldr	r0, [pc, #96]	; (80077e0 <_Balloc+0x7c>)
 800777e:	2166      	movs	r1, #102	; 0x66
 8007780:	f000 fe96 	bl	80084b0 <__assert_func>
 8007784:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007788:	6006      	str	r6, [r0, #0]
 800778a:	60c6      	str	r6, [r0, #12]
 800778c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800778e:	68f3      	ldr	r3, [r6, #12]
 8007790:	b183      	cbz	r3, 80077b4 <_Balloc+0x50>
 8007792:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800779a:	b9b8      	cbnz	r0, 80077cc <_Balloc+0x68>
 800779c:	2101      	movs	r1, #1
 800779e:	fa01 f605 	lsl.w	r6, r1, r5
 80077a2:	1d72      	adds	r2, r6, #5
 80077a4:	0092      	lsls	r2, r2, #2
 80077a6:	4620      	mov	r0, r4
 80077a8:	f000 fb60 	bl	8007e6c <_calloc_r>
 80077ac:	b160      	cbz	r0, 80077c8 <_Balloc+0x64>
 80077ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077b2:	e00e      	b.n	80077d2 <_Balloc+0x6e>
 80077b4:	2221      	movs	r2, #33	; 0x21
 80077b6:	2104      	movs	r1, #4
 80077b8:	4620      	mov	r0, r4
 80077ba:	f000 fb57 	bl	8007e6c <_calloc_r>
 80077be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077c0:	60f0      	str	r0, [r6, #12]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1e4      	bne.n	8007792 <_Balloc+0x2e>
 80077c8:	2000      	movs	r0, #0
 80077ca:	bd70      	pop	{r4, r5, r6, pc}
 80077cc:	6802      	ldr	r2, [r0, #0]
 80077ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077d2:	2300      	movs	r3, #0
 80077d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077d8:	e7f7      	b.n	80077ca <_Balloc+0x66>
 80077da:	bf00      	nop
 80077dc:	08009531 	.word	0x08009531
 80077e0:	08009614 	.word	0x08009614

080077e4 <_Bfree>:
 80077e4:	b570      	push	{r4, r5, r6, lr}
 80077e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80077e8:	4605      	mov	r5, r0
 80077ea:	460c      	mov	r4, r1
 80077ec:	b976      	cbnz	r6, 800780c <_Bfree+0x28>
 80077ee:	2010      	movs	r0, #16
 80077f0:	f7fe f8b8 	bl	8005964 <malloc>
 80077f4:	4602      	mov	r2, r0
 80077f6:	6268      	str	r0, [r5, #36]	; 0x24
 80077f8:	b920      	cbnz	r0, 8007804 <_Bfree+0x20>
 80077fa:	4b09      	ldr	r3, [pc, #36]	; (8007820 <_Bfree+0x3c>)
 80077fc:	4809      	ldr	r0, [pc, #36]	; (8007824 <_Bfree+0x40>)
 80077fe:	218a      	movs	r1, #138	; 0x8a
 8007800:	f000 fe56 	bl	80084b0 <__assert_func>
 8007804:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007808:	6006      	str	r6, [r0, #0]
 800780a:	60c6      	str	r6, [r0, #12]
 800780c:	b13c      	cbz	r4, 800781e <_Bfree+0x3a>
 800780e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007810:	6862      	ldr	r2, [r4, #4]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007818:	6021      	str	r1, [r4, #0]
 800781a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800781e:	bd70      	pop	{r4, r5, r6, pc}
 8007820:	08009531 	.word	0x08009531
 8007824:	08009614 	.word	0x08009614

08007828 <__multadd>:
 8007828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800782c:	690d      	ldr	r5, [r1, #16]
 800782e:	4607      	mov	r7, r0
 8007830:	460c      	mov	r4, r1
 8007832:	461e      	mov	r6, r3
 8007834:	f101 0c14 	add.w	ip, r1, #20
 8007838:	2000      	movs	r0, #0
 800783a:	f8dc 3000 	ldr.w	r3, [ip]
 800783e:	b299      	uxth	r1, r3
 8007840:	fb02 6101 	mla	r1, r2, r1, r6
 8007844:	0c1e      	lsrs	r6, r3, #16
 8007846:	0c0b      	lsrs	r3, r1, #16
 8007848:	fb02 3306 	mla	r3, r2, r6, r3
 800784c:	b289      	uxth	r1, r1
 800784e:	3001      	adds	r0, #1
 8007850:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007854:	4285      	cmp	r5, r0
 8007856:	f84c 1b04 	str.w	r1, [ip], #4
 800785a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800785e:	dcec      	bgt.n	800783a <__multadd+0x12>
 8007860:	b30e      	cbz	r6, 80078a6 <__multadd+0x7e>
 8007862:	68a3      	ldr	r3, [r4, #8]
 8007864:	42ab      	cmp	r3, r5
 8007866:	dc19      	bgt.n	800789c <__multadd+0x74>
 8007868:	6861      	ldr	r1, [r4, #4]
 800786a:	4638      	mov	r0, r7
 800786c:	3101      	adds	r1, #1
 800786e:	f7ff ff79 	bl	8007764 <_Balloc>
 8007872:	4680      	mov	r8, r0
 8007874:	b928      	cbnz	r0, 8007882 <__multadd+0x5a>
 8007876:	4602      	mov	r2, r0
 8007878:	4b0c      	ldr	r3, [pc, #48]	; (80078ac <__multadd+0x84>)
 800787a:	480d      	ldr	r0, [pc, #52]	; (80078b0 <__multadd+0x88>)
 800787c:	21b5      	movs	r1, #181	; 0xb5
 800787e:	f000 fe17 	bl	80084b0 <__assert_func>
 8007882:	6922      	ldr	r2, [r4, #16]
 8007884:	3202      	adds	r2, #2
 8007886:	f104 010c 	add.w	r1, r4, #12
 800788a:	0092      	lsls	r2, r2, #2
 800788c:	300c      	adds	r0, #12
 800788e:	f7fe f879 	bl	8005984 <memcpy>
 8007892:	4621      	mov	r1, r4
 8007894:	4638      	mov	r0, r7
 8007896:	f7ff ffa5 	bl	80077e4 <_Bfree>
 800789a:	4644      	mov	r4, r8
 800789c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078a0:	3501      	adds	r5, #1
 80078a2:	615e      	str	r6, [r3, #20]
 80078a4:	6125      	str	r5, [r4, #16]
 80078a6:	4620      	mov	r0, r4
 80078a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078ac:	080095a3 	.word	0x080095a3
 80078b0:	08009614 	.word	0x08009614

080078b4 <__hi0bits>:
 80078b4:	0c03      	lsrs	r3, r0, #16
 80078b6:	041b      	lsls	r3, r3, #16
 80078b8:	b9d3      	cbnz	r3, 80078f0 <__hi0bits+0x3c>
 80078ba:	0400      	lsls	r0, r0, #16
 80078bc:	2310      	movs	r3, #16
 80078be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80078c2:	bf04      	itt	eq
 80078c4:	0200      	lsleq	r0, r0, #8
 80078c6:	3308      	addeq	r3, #8
 80078c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80078cc:	bf04      	itt	eq
 80078ce:	0100      	lsleq	r0, r0, #4
 80078d0:	3304      	addeq	r3, #4
 80078d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80078d6:	bf04      	itt	eq
 80078d8:	0080      	lsleq	r0, r0, #2
 80078da:	3302      	addeq	r3, #2
 80078dc:	2800      	cmp	r0, #0
 80078de:	db05      	blt.n	80078ec <__hi0bits+0x38>
 80078e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80078e4:	f103 0301 	add.w	r3, r3, #1
 80078e8:	bf08      	it	eq
 80078ea:	2320      	moveq	r3, #32
 80078ec:	4618      	mov	r0, r3
 80078ee:	4770      	bx	lr
 80078f0:	2300      	movs	r3, #0
 80078f2:	e7e4      	b.n	80078be <__hi0bits+0xa>

080078f4 <__lo0bits>:
 80078f4:	6803      	ldr	r3, [r0, #0]
 80078f6:	f013 0207 	ands.w	r2, r3, #7
 80078fa:	4601      	mov	r1, r0
 80078fc:	d00b      	beq.n	8007916 <__lo0bits+0x22>
 80078fe:	07da      	lsls	r2, r3, #31
 8007900:	d423      	bmi.n	800794a <__lo0bits+0x56>
 8007902:	0798      	lsls	r0, r3, #30
 8007904:	bf49      	itett	mi
 8007906:	085b      	lsrmi	r3, r3, #1
 8007908:	089b      	lsrpl	r3, r3, #2
 800790a:	2001      	movmi	r0, #1
 800790c:	600b      	strmi	r3, [r1, #0]
 800790e:	bf5c      	itt	pl
 8007910:	600b      	strpl	r3, [r1, #0]
 8007912:	2002      	movpl	r0, #2
 8007914:	4770      	bx	lr
 8007916:	b298      	uxth	r0, r3
 8007918:	b9a8      	cbnz	r0, 8007946 <__lo0bits+0x52>
 800791a:	0c1b      	lsrs	r3, r3, #16
 800791c:	2010      	movs	r0, #16
 800791e:	b2da      	uxtb	r2, r3
 8007920:	b90a      	cbnz	r2, 8007926 <__lo0bits+0x32>
 8007922:	3008      	adds	r0, #8
 8007924:	0a1b      	lsrs	r3, r3, #8
 8007926:	071a      	lsls	r2, r3, #28
 8007928:	bf04      	itt	eq
 800792a:	091b      	lsreq	r3, r3, #4
 800792c:	3004      	addeq	r0, #4
 800792e:	079a      	lsls	r2, r3, #30
 8007930:	bf04      	itt	eq
 8007932:	089b      	lsreq	r3, r3, #2
 8007934:	3002      	addeq	r0, #2
 8007936:	07da      	lsls	r2, r3, #31
 8007938:	d403      	bmi.n	8007942 <__lo0bits+0x4e>
 800793a:	085b      	lsrs	r3, r3, #1
 800793c:	f100 0001 	add.w	r0, r0, #1
 8007940:	d005      	beq.n	800794e <__lo0bits+0x5a>
 8007942:	600b      	str	r3, [r1, #0]
 8007944:	4770      	bx	lr
 8007946:	4610      	mov	r0, r2
 8007948:	e7e9      	b.n	800791e <__lo0bits+0x2a>
 800794a:	2000      	movs	r0, #0
 800794c:	4770      	bx	lr
 800794e:	2020      	movs	r0, #32
 8007950:	4770      	bx	lr
	...

08007954 <__i2b>:
 8007954:	b510      	push	{r4, lr}
 8007956:	460c      	mov	r4, r1
 8007958:	2101      	movs	r1, #1
 800795a:	f7ff ff03 	bl	8007764 <_Balloc>
 800795e:	4602      	mov	r2, r0
 8007960:	b928      	cbnz	r0, 800796e <__i2b+0x1a>
 8007962:	4b05      	ldr	r3, [pc, #20]	; (8007978 <__i2b+0x24>)
 8007964:	4805      	ldr	r0, [pc, #20]	; (800797c <__i2b+0x28>)
 8007966:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800796a:	f000 fda1 	bl	80084b0 <__assert_func>
 800796e:	2301      	movs	r3, #1
 8007970:	6144      	str	r4, [r0, #20]
 8007972:	6103      	str	r3, [r0, #16]
 8007974:	bd10      	pop	{r4, pc}
 8007976:	bf00      	nop
 8007978:	080095a3 	.word	0x080095a3
 800797c:	08009614 	.word	0x08009614

08007980 <__multiply>:
 8007980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007984:	4691      	mov	r9, r2
 8007986:	690a      	ldr	r2, [r1, #16]
 8007988:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800798c:	429a      	cmp	r2, r3
 800798e:	bfb8      	it	lt
 8007990:	460b      	movlt	r3, r1
 8007992:	460c      	mov	r4, r1
 8007994:	bfbc      	itt	lt
 8007996:	464c      	movlt	r4, r9
 8007998:	4699      	movlt	r9, r3
 800799a:	6927      	ldr	r7, [r4, #16]
 800799c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80079a0:	68a3      	ldr	r3, [r4, #8]
 80079a2:	6861      	ldr	r1, [r4, #4]
 80079a4:	eb07 060a 	add.w	r6, r7, sl
 80079a8:	42b3      	cmp	r3, r6
 80079aa:	b085      	sub	sp, #20
 80079ac:	bfb8      	it	lt
 80079ae:	3101      	addlt	r1, #1
 80079b0:	f7ff fed8 	bl	8007764 <_Balloc>
 80079b4:	b930      	cbnz	r0, 80079c4 <__multiply+0x44>
 80079b6:	4602      	mov	r2, r0
 80079b8:	4b44      	ldr	r3, [pc, #272]	; (8007acc <__multiply+0x14c>)
 80079ba:	4845      	ldr	r0, [pc, #276]	; (8007ad0 <__multiply+0x150>)
 80079bc:	f240 115d 	movw	r1, #349	; 0x15d
 80079c0:	f000 fd76 	bl	80084b0 <__assert_func>
 80079c4:	f100 0514 	add.w	r5, r0, #20
 80079c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80079cc:	462b      	mov	r3, r5
 80079ce:	2200      	movs	r2, #0
 80079d0:	4543      	cmp	r3, r8
 80079d2:	d321      	bcc.n	8007a18 <__multiply+0x98>
 80079d4:	f104 0314 	add.w	r3, r4, #20
 80079d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80079dc:	f109 0314 	add.w	r3, r9, #20
 80079e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80079e4:	9202      	str	r2, [sp, #8]
 80079e6:	1b3a      	subs	r2, r7, r4
 80079e8:	3a15      	subs	r2, #21
 80079ea:	f022 0203 	bic.w	r2, r2, #3
 80079ee:	3204      	adds	r2, #4
 80079f0:	f104 0115 	add.w	r1, r4, #21
 80079f4:	428f      	cmp	r7, r1
 80079f6:	bf38      	it	cc
 80079f8:	2204      	movcc	r2, #4
 80079fa:	9201      	str	r2, [sp, #4]
 80079fc:	9a02      	ldr	r2, [sp, #8]
 80079fe:	9303      	str	r3, [sp, #12]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d80c      	bhi.n	8007a1e <__multiply+0x9e>
 8007a04:	2e00      	cmp	r6, #0
 8007a06:	dd03      	ble.n	8007a10 <__multiply+0x90>
 8007a08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d05a      	beq.n	8007ac6 <__multiply+0x146>
 8007a10:	6106      	str	r6, [r0, #16]
 8007a12:	b005      	add	sp, #20
 8007a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a18:	f843 2b04 	str.w	r2, [r3], #4
 8007a1c:	e7d8      	b.n	80079d0 <__multiply+0x50>
 8007a1e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a22:	f1ba 0f00 	cmp.w	sl, #0
 8007a26:	d024      	beq.n	8007a72 <__multiply+0xf2>
 8007a28:	f104 0e14 	add.w	lr, r4, #20
 8007a2c:	46a9      	mov	r9, r5
 8007a2e:	f04f 0c00 	mov.w	ip, #0
 8007a32:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a36:	f8d9 1000 	ldr.w	r1, [r9]
 8007a3a:	fa1f fb82 	uxth.w	fp, r2
 8007a3e:	b289      	uxth	r1, r1
 8007a40:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a44:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007a48:	f8d9 2000 	ldr.w	r2, [r9]
 8007a4c:	4461      	add	r1, ip
 8007a4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a52:	fb0a c20b 	mla	r2, sl, fp, ip
 8007a56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a5a:	b289      	uxth	r1, r1
 8007a5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a60:	4577      	cmp	r7, lr
 8007a62:	f849 1b04 	str.w	r1, [r9], #4
 8007a66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a6a:	d8e2      	bhi.n	8007a32 <__multiply+0xb2>
 8007a6c:	9a01      	ldr	r2, [sp, #4]
 8007a6e:	f845 c002 	str.w	ip, [r5, r2]
 8007a72:	9a03      	ldr	r2, [sp, #12]
 8007a74:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a78:	3304      	adds	r3, #4
 8007a7a:	f1b9 0f00 	cmp.w	r9, #0
 8007a7e:	d020      	beq.n	8007ac2 <__multiply+0x142>
 8007a80:	6829      	ldr	r1, [r5, #0]
 8007a82:	f104 0c14 	add.w	ip, r4, #20
 8007a86:	46ae      	mov	lr, r5
 8007a88:	f04f 0a00 	mov.w	sl, #0
 8007a8c:	f8bc b000 	ldrh.w	fp, [ip]
 8007a90:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007a94:	fb09 220b 	mla	r2, r9, fp, r2
 8007a98:	4492      	add	sl, r2
 8007a9a:	b289      	uxth	r1, r1
 8007a9c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007aa0:	f84e 1b04 	str.w	r1, [lr], #4
 8007aa4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007aa8:	f8be 1000 	ldrh.w	r1, [lr]
 8007aac:	0c12      	lsrs	r2, r2, #16
 8007aae:	fb09 1102 	mla	r1, r9, r2, r1
 8007ab2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007ab6:	4567      	cmp	r7, ip
 8007ab8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007abc:	d8e6      	bhi.n	8007a8c <__multiply+0x10c>
 8007abe:	9a01      	ldr	r2, [sp, #4]
 8007ac0:	50a9      	str	r1, [r5, r2]
 8007ac2:	3504      	adds	r5, #4
 8007ac4:	e79a      	b.n	80079fc <__multiply+0x7c>
 8007ac6:	3e01      	subs	r6, #1
 8007ac8:	e79c      	b.n	8007a04 <__multiply+0x84>
 8007aca:	bf00      	nop
 8007acc:	080095a3 	.word	0x080095a3
 8007ad0:	08009614 	.word	0x08009614

08007ad4 <__pow5mult>:
 8007ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ad8:	4615      	mov	r5, r2
 8007ada:	f012 0203 	ands.w	r2, r2, #3
 8007ade:	4606      	mov	r6, r0
 8007ae0:	460f      	mov	r7, r1
 8007ae2:	d007      	beq.n	8007af4 <__pow5mult+0x20>
 8007ae4:	4c25      	ldr	r4, [pc, #148]	; (8007b7c <__pow5mult+0xa8>)
 8007ae6:	3a01      	subs	r2, #1
 8007ae8:	2300      	movs	r3, #0
 8007aea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007aee:	f7ff fe9b 	bl	8007828 <__multadd>
 8007af2:	4607      	mov	r7, r0
 8007af4:	10ad      	asrs	r5, r5, #2
 8007af6:	d03d      	beq.n	8007b74 <__pow5mult+0xa0>
 8007af8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007afa:	b97c      	cbnz	r4, 8007b1c <__pow5mult+0x48>
 8007afc:	2010      	movs	r0, #16
 8007afe:	f7fd ff31 	bl	8005964 <malloc>
 8007b02:	4602      	mov	r2, r0
 8007b04:	6270      	str	r0, [r6, #36]	; 0x24
 8007b06:	b928      	cbnz	r0, 8007b14 <__pow5mult+0x40>
 8007b08:	4b1d      	ldr	r3, [pc, #116]	; (8007b80 <__pow5mult+0xac>)
 8007b0a:	481e      	ldr	r0, [pc, #120]	; (8007b84 <__pow5mult+0xb0>)
 8007b0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007b10:	f000 fcce 	bl	80084b0 <__assert_func>
 8007b14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b18:	6004      	str	r4, [r0, #0]
 8007b1a:	60c4      	str	r4, [r0, #12]
 8007b1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007b20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b24:	b94c      	cbnz	r4, 8007b3a <__pow5mult+0x66>
 8007b26:	f240 2171 	movw	r1, #625	; 0x271
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	f7ff ff12 	bl	8007954 <__i2b>
 8007b30:	2300      	movs	r3, #0
 8007b32:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b36:	4604      	mov	r4, r0
 8007b38:	6003      	str	r3, [r0, #0]
 8007b3a:	f04f 0900 	mov.w	r9, #0
 8007b3e:	07eb      	lsls	r3, r5, #31
 8007b40:	d50a      	bpl.n	8007b58 <__pow5mult+0x84>
 8007b42:	4639      	mov	r1, r7
 8007b44:	4622      	mov	r2, r4
 8007b46:	4630      	mov	r0, r6
 8007b48:	f7ff ff1a 	bl	8007980 <__multiply>
 8007b4c:	4639      	mov	r1, r7
 8007b4e:	4680      	mov	r8, r0
 8007b50:	4630      	mov	r0, r6
 8007b52:	f7ff fe47 	bl	80077e4 <_Bfree>
 8007b56:	4647      	mov	r7, r8
 8007b58:	106d      	asrs	r5, r5, #1
 8007b5a:	d00b      	beq.n	8007b74 <__pow5mult+0xa0>
 8007b5c:	6820      	ldr	r0, [r4, #0]
 8007b5e:	b938      	cbnz	r0, 8007b70 <__pow5mult+0x9c>
 8007b60:	4622      	mov	r2, r4
 8007b62:	4621      	mov	r1, r4
 8007b64:	4630      	mov	r0, r6
 8007b66:	f7ff ff0b 	bl	8007980 <__multiply>
 8007b6a:	6020      	str	r0, [r4, #0]
 8007b6c:	f8c0 9000 	str.w	r9, [r0]
 8007b70:	4604      	mov	r4, r0
 8007b72:	e7e4      	b.n	8007b3e <__pow5mult+0x6a>
 8007b74:	4638      	mov	r0, r7
 8007b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b7a:	bf00      	nop
 8007b7c:	08009760 	.word	0x08009760
 8007b80:	08009531 	.word	0x08009531
 8007b84:	08009614 	.word	0x08009614

08007b88 <__lshift>:
 8007b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b8c:	460c      	mov	r4, r1
 8007b8e:	6849      	ldr	r1, [r1, #4]
 8007b90:	6923      	ldr	r3, [r4, #16]
 8007b92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b96:	68a3      	ldr	r3, [r4, #8]
 8007b98:	4607      	mov	r7, r0
 8007b9a:	4691      	mov	r9, r2
 8007b9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ba0:	f108 0601 	add.w	r6, r8, #1
 8007ba4:	42b3      	cmp	r3, r6
 8007ba6:	db0b      	blt.n	8007bc0 <__lshift+0x38>
 8007ba8:	4638      	mov	r0, r7
 8007baa:	f7ff fddb 	bl	8007764 <_Balloc>
 8007bae:	4605      	mov	r5, r0
 8007bb0:	b948      	cbnz	r0, 8007bc6 <__lshift+0x3e>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	4b2a      	ldr	r3, [pc, #168]	; (8007c60 <__lshift+0xd8>)
 8007bb6:	482b      	ldr	r0, [pc, #172]	; (8007c64 <__lshift+0xdc>)
 8007bb8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007bbc:	f000 fc78 	bl	80084b0 <__assert_func>
 8007bc0:	3101      	adds	r1, #1
 8007bc2:	005b      	lsls	r3, r3, #1
 8007bc4:	e7ee      	b.n	8007ba4 <__lshift+0x1c>
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	f100 0114 	add.w	r1, r0, #20
 8007bcc:	f100 0210 	add.w	r2, r0, #16
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	4553      	cmp	r3, sl
 8007bd4:	db37      	blt.n	8007c46 <__lshift+0xbe>
 8007bd6:	6920      	ldr	r0, [r4, #16]
 8007bd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007bdc:	f104 0314 	add.w	r3, r4, #20
 8007be0:	f019 091f 	ands.w	r9, r9, #31
 8007be4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007be8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007bec:	d02f      	beq.n	8007c4e <__lshift+0xc6>
 8007bee:	f1c9 0e20 	rsb	lr, r9, #32
 8007bf2:	468a      	mov	sl, r1
 8007bf4:	f04f 0c00 	mov.w	ip, #0
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	fa02 f209 	lsl.w	r2, r2, r9
 8007bfe:	ea42 020c 	orr.w	r2, r2, ip
 8007c02:	f84a 2b04 	str.w	r2, [sl], #4
 8007c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c0a:	4298      	cmp	r0, r3
 8007c0c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007c10:	d8f2      	bhi.n	8007bf8 <__lshift+0x70>
 8007c12:	1b03      	subs	r3, r0, r4
 8007c14:	3b15      	subs	r3, #21
 8007c16:	f023 0303 	bic.w	r3, r3, #3
 8007c1a:	3304      	adds	r3, #4
 8007c1c:	f104 0215 	add.w	r2, r4, #21
 8007c20:	4290      	cmp	r0, r2
 8007c22:	bf38      	it	cc
 8007c24:	2304      	movcc	r3, #4
 8007c26:	f841 c003 	str.w	ip, [r1, r3]
 8007c2a:	f1bc 0f00 	cmp.w	ip, #0
 8007c2e:	d001      	beq.n	8007c34 <__lshift+0xac>
 8007c30:	f108 0602 	add.w	r6, r8, #2
 8007c34:	3e01      	subs	r6, #1
 8007c36:	4638      	mov	r0, r7
 8007c38:	612e      	str	r6, [r5, #16]
 8007c3a:	4621      	mov	r1, r4
 8007c3c:	f7ff fdd2 	bl	80077e4 <_Bfree>
 8007c40:	4628      	mov	r0, r5
 8007c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c46:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	e7c1      	b.n	8007bd2 <__lshift+0x4a>
 8007c4e:	3904      	subs	r1, #4
 8007c50:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c54:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c58:	4298      	cmp	r0, r3
 8007c5a:	d8f9      	bhi.n	8007c50 <__lshift+0xc8>
 8007c5c:	e7ea      	b.n	8007c34 <__lshift+0xac>
 8007c5e:	bf00      	nop
 8007c60:	080095a3 	.word	0x080095a3
 8007c64:	08009614 	.word	0x08009614

08007c68 <__mcmp>:
 8007c68:	b530      	push	{r4, r5, lr}
 8007c6a:	6902      	ldr	r2, [r0, #16]
 8007c6c:	690c      	ldr	r4, [r1, #16]
 8007c6e:	1b12      	subs	r2, r2, r4
 8007c70:	d10e      	bne.n	8007c90 <__mcmp+0x28>
 8007c72:	f100 0314 	add.w	r3, r0, #20
 8007c76:	3114      	adds	r1, #20
 8007c78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007c7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007c80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007c84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007c88:	42a5      	cmp	r5, r4
 8007c8a:	d003      	beq.n	8007c94 <__mcmp+0x2c>
 8007c8c:	d305      	bcc.n	8007c9a <__mcmp+0x32>
 8007c8e:	2201      	movs	r2, #1
 8007c90:	4610      	mov	r0, r2
 8007c92:	bd30      	pop	{r4, r5, pc}
 8007c94:	4283      	cmp	r3, r0
 8007c96:	d3f3      	bcc.n	8007c80 <__mcmp+0x18>
 8007c98:	e7fa      	b.n	8007c90 <__mcmp+0x28>
 8007c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c9e:	e7f7      	b.n	8007c90 <__mcmp+0x28>

08007ca0 <__mdiff>:
 8007ca0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca4:	460c      	mov	r4, r1
 8007ca6:	4606      	mov	r6, r0
 8007ca8:	4611      	mov	r1, r2
 8007caa:	4620      	mov	r0, r4
 8007cac:	4690      	mov	r8, r2
 8007cae:	f7ff ffdb 	bl	8007c68 <__mcmp>
 8007cb2:	1e05      	subs	r5, r0, #0
 8007cb4:	d110      	bne.n	8007cd8 <__mdiff+0x38>
 8007cb6:	4629      	mov	r1, r5
 8007cb8:	4630      	mov	r0, r6
 8007cba:	f7ff fd53 	bl	8007764 <_Balloc>
 8007cbe:	b930      	cbnz	r0, 8007cce <__mdiff+0x2e>
 8007cc0:	4b3a      	ldr	r3, [pc, #232]	; (8007dac <__mdiff+0x10c>)
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	f240 2132 	movw	r1, #562	; 0x232
 8007cc8:	4839      	ldr	r0, [pc, #228]	; (8007db0 <__mdiff+0x110>)
 8007cca:	f000 fbf1 	bl	80084b0 <__assert_func>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007cd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd8:	bfa4      	itt	ge
 8007cda:	4643      	movge	r3, r8
 8007cdc:	46a0      	movge	r8, r4
 8007cde:	4630      	mov	r0, r6
 8007ce0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007ce4:	bfa6      	itte	ge
 8007ce6:	461c      	movge	r4, r3
 8007ce8:	2500      	movge	r5, #0
 8007cea:	2501      	movlt	r5, #1
 8007cec:	f7ff fd3a 	bl	8007764 <_Balloc>
 8007cf0:	b920      	cbnz	r0, 8007cfc <__mdiff+0x5c>
 8007cf2:	4b2e      	ldr	r3, [pc, #184]	; (8007dac <__mdiff+0x10c>)
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007cfa:	e7e5      	b.n	8007cc8 <__mdiff+0x28>
 8007cfc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007d00:	6926      	ldr	r6, [r4, #16]
 8007d02:	60c5      	str	r5, [r0, #12]
 8007d04:	f104 0914 	add.w	r9, r4, #20
 8007d08:	f108 0514 	add.w	r5, r8, #20
 8007d0c:	f100 0e14 	add.w	lr, r0, #20
 8007d10:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007d14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d18:	f108 0210 	add.w	r2, r8, #16
 8007d1c:	46f2      	mov	sl, lr
 8007d1e:	2100      	movs	r1, #0
 8007d20:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007d28:	fa1f f883 	uxth.w	r8, r3
 8007d2c:	fa11 f18b 	uxtah	r1, r1, fp
 8007d30:	0c1b      	lsrs	r3, r3, #16
 8007d32:	eba1 0808 	sub.w	r8, r1, r8
 8007d36:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d3a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007d3e:	fa1f f888 	uxth.w	r8, r8
 8007d42:	1419      	asrs	r1, r3, #16
 8007d44:	454e      	cmp	r6, r9
 8007d46:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007d4a:	f84a 3b04 	str.w	r3, [sl], #4
 8007d4e:	d8e7      	bhi.n	8007d20 <__mdiff+0x80>
 8007d50:	1b33      	subs	r3, r6, r4
 8007d52:	3b15      	subs	r3, #21
 8007d54:	f023 0303 	bic.w	r3, r3, #3
 8007d58:	3304      	adds	r3, #4
 8007d5a:	3415      	adds	r4, #21
 8007d5c:	42a6      	cmp	r6, r4
 8007d5e:	bf38      	it	cc
 8007d60:	2304      	movcc	r3, #4
 8007d62:	441d      	add	r5, r3
 8007d64:	4473      	add	r3, lr
 8007d66:	469e      	mov	lr, r3
 8007d68:	462e      	mov	r6, r5
 8007d6a:	4566      	cmp	r6, ip
 8007d6c:	d30e      	bcc.n	8007d8c <__mdiff+0xec>
 8007d6e:	f10c 0203 	add.w	r2, ip, #3
 8007d72:	1b52      	subs	r2, r2, r5
 8007d74:	f022 0203 	bic.w	r2, r2, #3
 8007d78:	3d03      	subs	r5, #3
 8007d7a:	45ac      	cmp	ip, r5
 8007d7c:	bf38      	it	cc
 8007d7e:	2200      	movcc	r2, #0
 8007d80:	441a      	add	r2, r3
 8007d82:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007d86:	b17b      	cbz	r3, 8007da8 <__mdiff+0x108>
 8007d88:	6107      	str	r7, [r0, #16]
 8007d8a:	e7a3      	b.n	8007cd4 <__mdiff+0x34>
 8007d8c:	f856 8b04 	ldr.w	r8, [r6], #4
 8007d90:	fa11 f288 	uxtah	r2, r1, r8
 8007d94:	1414      	asrs	r4, r2, #16
 8007d96:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007d9a:	b292      	uxth	r2, r2
 8007d9c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007da0:	f84e 2b04 	str.w	r2, [lr], #4
 8007da4:	1421      	asrs	r1, r4, #16
 8007da6:	e7e0      	b.n	8007d6a <__mdiff+0xca>
 8007da8:	3f01      	subs	r7, #1
 8007daa:	e7ea      	b.n	8007d82 <__mdiff+0xe2>
 8007dac:	080095a3 	.word	0x080095a3
 8007db0:	08009614 	.word	0x08009614

08007db4 <__d2b>:
 8007db4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007db8:	4689      	mov	r9, r1
 8007dba:	2101      	movs	r1, #1
 8007dbc:	ec57 6b10 	vmov	r6, r7, d0
 8007dc0:	4690      	mov	r8, r2
 8007dc2:	f7ff fccf 	bl	8007764 <_Balloc>
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	b930      	cbnz	r0, 8007dd8 <__d2b+0x24>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	4b25      	ldr	r3, [pc, #148]	; (8007e64 <__d2b+0xb0>)
 8007dce:	4826      	ldr	r0, [pc, #152]	; (8007e68 <__d2b+0xb4>)
 8007dd0:	f240 310a 	movw	r1, #778	; 0x30a
 8007dd4:	f000 fb6c 	bl	80084b0 <__assert_func>
 8007dd8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007ddc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007de0:	bb35      	cbnz	r5, 8007e30 <__d2b+0x7c>
 8007de2:	2e00      	cmp	r6, #0
 8007de4:	9301      	str	r3, [sp, #4]
 8007de6:	d028      	beq.n	8007e3a <__d2b+0x86>
 8007de8:	4668      	mov	r0, sp
 8007dea:	9600      	str	r6, [sp, #0]
 8007dec:	f7ff fd82 	bl	80078f4 <__lo0bits>
 8007df0:	9900      	ldr	r1, [sp, #0]
 8007df2:	b300      	cbz	r0, 8007e36 <__d2b+0x82>
 8007df4:	9a01      	ldr	r2, [sp, #4]
 8007df6:	f1c0 0320 	rsb	r3, r0, #32
 8007dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfe:	430b      	orrs	r3, r1
 8007e00:	40c2      	lsrs	r2, r0
 8007e02:	6163      	str	r3, [r4, #20]
 8007e04:	9201      	str	r2, [sp, #4]
 8007e06:	9b01      	ldr	r3, [sp, #4]
 8007e08:	61a3      	str	r3, [r4, #24]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	bf14      	ite	ne
 8007e0e:	2202      	movne	r2, #2
 8007e10:	2201      	moveq	r2, #1
 8007e12:	6122      	str	r2, [r4, #16]
 8007e14:	b1d5      	cbz	r5, 8007e4c <__d2b+0x98>
 8007e16:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007e1a:	4405      	add	r5, r0
 8007e1c:	f8c9 5000 	str.w	r5, [r9]
 8007e20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e24:	f8c8 0000 	str.w	r0, [r8]
 8007e28:	4620      	mov	r0, r4
 8007e2a:	b003      	add	sp, #12
 8007e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e34:	e7d5      	b.n	8007de2 <__d2b+0x2e>
 8007e36:	6161      	str	r1, [r4, #20]
 8007e38:	e7e5      	b.n	8007e06 <__d2b+0x52>
 8007e3a:	a801      	add	r0, sp, #4
 8007e3c:	f7ff fd5a 	bl	80078f4 <__lo0bits>
 8007e40:	9b01      	ldr	r3, [sp, #4]
 8007e42:	6163      	str	r3, [r4, #20]
 8007e44:	2201      	movs	r2, #1
 8007e46:	6122      	str	r2, [r4, #16]
 8007e48:	3020      	adds	r0, #32
 8007e4a:	e7e3      	b.n	8007e14 <__d2b+0x60>
 8007e4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e54:	f8c9 0000 	str.w	r0, [r9]
 8007e58:	6918      	ldr	r0, [r3, #16]
 8007e5a:	f7ff fd2b 	bl	80078b4 <__hi0bits>
 8007e5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e62:	e7df      	b.n	8007e24 <__d2b+0x70>
 8007e64:	080095a3 	.word	0x080095a3
 8007e68:	08009614 	.word	0x08009614

08007e6c <_calloc_r>:
 8007e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e6e:	fba1 2402 	umull	r2, r4, r1, r2
 8007e72:	b94c      	cbnz	r4, 8007e88 <_calloc_r+0x1c>
 8007e74:	4611      	mov	r1, r2
 8007e76:	9201      	str	r2, [sp, #4]
 8007e78:	f7fd fe06 	bl	8005a88 <_malloc_r>
 8007e7c:	9a01      	ldr	r2, [sp, #4]
 8007e7e:	4605      	mov	r5, r0
 8007e80:	b930      	cbnz	r0, 8007e90 <_calloc_r+0x24>
 8007e82:	4628      	mov	r0, r5
 8007e84:	b003      	add	sp, #12
 8007e86:	bd30      	pop	{r4, r5, pc}
 8007e88:	220c      	movs	r2, #12
 8007e8a:	6002      	str	r2, [r0, #0]
 8007e8c:	2500      	movs	r5, #0
 8007e8e:	e7f8      	b.n	8007e82 <_calloc_r+0x16>
 8007e90:	4621      	mov	r1, r4
 8007e92:	f7fd fd85 	bl	80059a0 <memset>
 8007e96:	e7f4      	b.n	8007e82 <_calloc_r+0x16>

08007e98 <__ssputs_r>:
 8007e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e9c:	688e      	ldr	r6, [r1, #8]
 8007e9e:	429e      	cmp	r6, r3
 8007ea0:	4682      	mov	sl, r0
 8007ea2:	460c      	mov	r4, r1
 8007ea4:	4690      	mov	r8, r2
 8007ea6:	461f      	mov	r7, r3
 8007ea8:	d838      	bhi.n	8007f1c <__ssputs_r+0x84>
 8007eaa:	898a      	ldrh	r2, [r1, #12]
 8007eac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007eb0:	d032      	beq.n	8007f18 <__ssputs_r+0x80>
 8007eb2:	6825      	ldr	r5, [r4, #0]
 8007eb4:	6909      	ldr	r1, [r1, #16]
 8007eb6:	eba5 0901 	sub.w	r9, r5, r1
 8007eba:	6965      	ldr	r5, [r4, #20]
 8007ebc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ec0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	444b      	add	r3, r9
 8007ec8:	106d      	asrs	r5, r5, #1
 8007eca:	429d      	cmp	r5, r3
 8007ecc:	bf38      	it	cc
 8007ece:	461d      	movcc	r5, r3
 8007ed0:	0553      	lsls	r3, r2, #21
 8007ed2:	d531      	bpl.n	8007f38 <__ssputs_r+0xa0>
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	f7fd fdd7 	bl	8005a88 <_malloc_r>
 8007eda:	4606      	mov	r6, r0
 8007edc:	b950      	cbnz	r0, 8007ef4 <__ssputs_r+0x5c>
 8007ede:	230c      	movs	r3, #12
 8007ee0:	f8ca 3000 	str.w	r3, [sl]
 8007ee4:	89a3      	ldrh	r3, [r4, #12]
 8007ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eea:	81a3      	strh	r3, [r4, #12]
 8007eec:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef4:	6921      	ldr	r1, [r4, #16]
 8007ef6:	464a      	mov	r2, r9
 8007ef8:	f7fd fd44 	bl	8005984 <memcpy>
 8007efc:	89a3      	ldrh	r3, [r4, #12]
 8007efe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f06:	81a3      	strh	r3, [r4, #12]
 8007f08:	6126      	str	r6, [r4, #16]
 8007f0a:	6165      	str	r5, [r4, #20]
 8007f0c:	444e      	add	r6, r9
 8007f0e:	eba5 0509 	sub.w	r5, r5, r9
 8007f12:	6026      	str	r6, [r4, #0]
 8007f14:	60a5      	str	r5, [r4, #8]
 8007f16:	463e      	mov	r6, r7
 8007f18:	42be      	cmp	r6, r7
 8007f1a:	d900      	bls.n	8007f1e <__ssputs_r+0x86>
 8007f1c:	463e      	mov	r6, r7
 8007f1e:	6820      	ldr	r0, [r4, #0]
 8007f20:	4632      	mov	r2, r6
 8007f22:	4641      	mov	r1, r8
 8007f24:	f000 fb4a 	bl	80085bc <memmove>
 8007f28:	68a3      	ldr	r3, [r4, #8]
 8007f2a:	1b9b      	subs	r3, r3, r6
 8007f2c:	60a3      	str	r3, [r4, #8]
 8007f2e:	6823      	ldr	r3, [r4, #0]
 8007f30:	4433      	add	r3, r6
 8007f32:	6023      	str	r3, [r4, #0]
 8007f34:	2000      	movs	r0, #0
 8007f36:	e7db      	b.n	8007ef0 <__ssputs_r+0x58>
 8007f38:	462a      	mov	r2, r5
 8007f3a:	f000 fb59 	bl	80085f0 <_realloc_r>
 8007f3e:	4606      	mov	r6, r0
 8007f40:	2800      	cmp	r0, #0
 8007f42:	d1e1      	bne.n	8007f08 <__ssputs_r+0x70>
 8007f44:	6921      	ldr	r1, [r4, #16]
 8007f46:	4650      	mov	r0, sl
 8007f48:	f7fd fd32 	bl	80059b0 <_free_r>
 8007f4c:	e7c7      	b.n	8007ede <__ssputs_r+0x46>
	...

08007f50 <_svfiprintf_r>:
 8007f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f54:	4698      	mov	r8, r3
 8007f56:	898b      	ldrh	r3, [r1, #12]
 8007f58:	061b      	lsls	r3, r3, #24
 8007f5a:	b09d      	sub	sp, #116	; 0x74
 8007f5c:	4607      	mov	r7, r0
 8007f5e:	460d      	mov	r5, r1
 8007f60:	4614      	mov	r4, r2
 8007f62:	d50e      	bpl.n	8007f82 <_svfiprintf_r+0x32>
 8007f64:	690b      	ldr	r3, [r1, #16]
 8007f66:	b963      	cbnz	r3, 8007f82 <_svfiprintf_r+0x32>
 8007f68:	2140      	movs	r1, #64	; 0x40
 8007f6a:	f7fd fd8d 	bl	8005a88 <_malloc_r>
 8007f6e:	6028      	str	r0, [r5, #0]
 8007f70:	6128      	str	r0, [r5, #16]
 8007f72:	b920      	cbnz	r0, 8007f7e <_svfiprintf_r+0x2e>
 8007f74:	230c      	movs	r3, #12
 8007f76:	603b      	str	r3, [r7, #0]
 8007f78:	f04f 30ff 	mov.w	r0, #4294967295
 8007f7c:	e0d1      	b.n	8008122 <_svfiprintf_r+0x1d2>
 8007f7e:	2340      	movs	r3, #64	; 0x40
 8007f80:	616b      	str	r3, [r5, #20]
 8007f82:	2300      	movs	r3, #0
 8007f84:	9309      	str	r3, [sp, #36]	; 0x24
 8007f86:	2320      	movs	r3, #32
 8007f88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f90:	2330      	movs	r3, #48	; 0x30
 8007f92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800813c <_svfiprintf_r+0x1ec>
 8007f96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f9a:	f04f 0901 	mov.w	r9, #1
 8007f9e:	4623      	mov	r3, r4
 8007fa0:	469a      	mov	sl, r3
 8007fa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fa6:	b10a      	cbz	r2, 8007fac <_svfiprintf_r+0x5c>
 8007fa8:	2a25      	cmp	r2, #37	; 0x25
 8007faa:	d1f9      	bne.n	8007fa0 <_svfiprintf_r+0x50>
 8007fac:	ebba 0b04 	subs.w	fp, sl, r4
 8007fb0:	d00b      	beq.n	8007fca <_svfiprintf_r+0x7a>
 8007fb2:	465b      	mov	r3, fp
 8007fb4:	4622      	mov	r2, r4
 8007fb6:	4629      	mov	r1, r5
 8007fb8:	4638      	mov	r0, r7
 8007fba:	f7ff ff6d 	bl	8007e98 <__ssputs_r>
 8007fbe:	3001      	adds	r0, #1
 8007fc0:	f000 80aa 	beq.w	8008118 <_svfiprintf_r+0x1c8>
 8007fc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fc6:	445a      	add	r2, fp
 8007fc8:	9209      	str	r2, [sp, #36]	; 0x24
 8007fca:	f89a 3000 	ldrb.w	r3, [sl]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f000 80a2 	beq.w	8008118 <_svfiprintf_r+0x1c8>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007fda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fde:	f10a 0a01 	add.w	sl, sl, #1
 8007fe2:	9304      	str	r3, [sp, #16]
 8007fe4:	9307      	str	r3, [sp, #28]
 8007fe6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fea:	931a      	str	r3, [sp, #104]	; 0x68
 8007fec:	4654      	mov	r4, sl
 8007fee:	2205      	movs	r2, #5
 8007ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ff4:	4851      	ldr	r0, [pc, #324]	; (800813c <_svfiprintf_r+0x1ec>)
 8007ff6:	f7f8 f993 	bl	8000320 <memchr>
 8007ffa:	9a04      	ldr	r2, [sp, #16]
 8007ffc:	b9d8      	cbnz	r0, 8008036 <_svfiprintf_r+0xe6>
 8007ffe:	06d0      	lsls	r0, r2, #27
 8008000:	bf44      	itt	mi
 8008002:	2320      	movmi	r3, #32
 8008004:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008008:	0711      	lsls	r1, r2, #28
 800800a:	bf44      	itt	mi
 800800c:	232b      	movmi	r3, #43	; 0x2b
 800800e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008012:	f89a 3000 	ldrb.w	r3, [sl]
 8008016:	2b2a      	cmp	r3, #42	; 0x2a
 8008018:	d015      	beq.n	8008046 <_svfiprintf_r+0xf6>
 800801a:	9a07      	ldr	r2, [sp, #28]
 800801c:	4654      	mov	r4, sl
 800801e:	2000      	movs	r0, #0
 8008020:	f04f 0c0a 	mov.w	ip, #10
 8008024:	4621      	mov	r1, r4
 8008026:	f811 3b01 	ldrb.w	r3, [r1], #1
 800802a:	3b30      	subs	r3, #48	; 0x30
 800802c:	2b09      	cmp	r3, #9
 800802e:	d94e      	bls.n	80080ce <_svfiprintf_r+0x17e>
 8008030:	b1b0      	cbz	r0, 8008060 <_svfiprintf_r+0x110>
 8008032:	9207      	str	r2, [sp, #28]
 8008034:	e014      	b.n	8008060 <_svfiprintf_r+0x110>
 8008036:	eba0 0308 	sub.w	r3, r0, r8
 800803a:	fa09 f303 	lsl.w	r3, r9, r3
 800803e:	4313      	orrs	r3, r2
 8008040:	9304      	str	r3, [sp, #16]
 8008042:	46a2      	mov	sl, r4
 8008044:	e7d2      	b.n	8007fec <_svfiprintf_r+0x9c>
 8008046:	9b03      	ldr	r3, [sp, #12]
 8008048:	1d19      	adds	r1, r3, #4
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	9103      	str	r1, [sp, #12]
 800804e:	2b00      	cmp	r3, #0
 8008050:	bfbb      	ittet	lt
 8008052:	425b      	neglt	r3, r3
 8008054:	f042 0202 	orrlt.w	r2, r2, #2
 8008058:	9307      	strge	r3, [sp, #28]
 800805a:	9307      	strlt	r3, [sp, #28]
 800805c:	bfb8      	it	lt
 800805e:	9204      	strlt	r2, [sp, #16]
 8008060:	7823      	ldrb	r3, [r4, #0]
 8008062:	2b2e      	cmp	r3, #46	; 0x2e
 8008064:	d10c      	bne.n	8008080 <_svfiprintf_r+0x130>
 8008066:	7863      	ldrb	r3, [r4, #1]
 8008068:	2b2a      	cmp	r3, #42	; 0x2a
 800806a:	d135      	bne.n	80080d8 <_svfiprintf_r+0x188>
 800806c:	9b03      	ldr	r3, [sp, #12]
 800806e:	1d1a      	adds	r2, r3, #4
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	9203      	str	r2, [sp, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	bfb8      	it	lt
 8008078:	f04f 33ff 	movlt.w	r3, #4294967295
 800807c:	3402      	adds	r4, #2
 800807e:	9305      	str	r3, [sp, #20]
 8008080:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800814c <_svfiprintf_r+0x1fc>
 8008084:	7821      	ldrb	r1, [r4, #0]
 8008086:	2203      	movs	r2, #3
 8008088:	4650      	mov	r0, sl
 800808a:	f7f8 f949 	bl	8000320 <memchr>
 800808e:	b140      	cbz	r0, 80080a2 <_svfiprintf_r+0x152>
 8008090:	2340      	movs	r3, #64	; 0x40
 8008092:	eba0 000a 	sub.w	r0, r0, sl
 8008096:	fa03 f000 	lsl.w	r0, r3, r0
 800809a:	9b04      	ldr	r3, [sp, #16]
 800809c:	4303      	orrs	r3, r0
 800809e:	3401      	adds	r4, #1
 80080a0:	9304      	str	r3, [sp, #16]
 80080a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080a6:	4826      	ldr	r0, [pc, #152]	; (8008140 <_svfiprintf_r+0x1f0>)
 80080a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080ac:	2206      	movs	r2, #6
 80080ae:	f7f8 f937 	bl	8000320 <memchr>
 80080b2:	2800      	cmp	r0, #0
 80080b4:	d038      	beq.n	8008128 <_svfiprintf_r+0x1d8>
 80080b6:	4b23      	ldr	r3, [pc, #140]	; (8008144 <_svfiprintf_r+0x1f4>)
 80080b8:	bb1b      	cbnz	r3, 8008102 <_svfiprintf_r+0x1b2>
 80080ba:	9b03      	ldr	r3, [sp, #12]
 80080bc:	3307      	adds	r3, #7
 80080be:	f023 0307 	bic.w	r3, r3, #7
 80080c2:	3308      	adds	r3, #8
 80080c4:	9303      	str	r3, [sp, #12]
 80080c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c8:	4433      	add	r3, r6
 80080ca:	9309      	str	r3, [sp, #36]	; 0x24
 80080cc:	e767      	b.n	8007f9e <_svfiprintf_r+0x4e>
 80080ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80080d2:	460c      	mov	r4, r1
 80080d4:	2001      	movs	r0, #1
 80080d6:	e7a5      	b.n	8008024 <_svfiprintf_r+0xd4>
 80080d8:	2300      	movs	r3, #0
 80080da:	3401      	adds	r4, #1
 80080dc:	9305      	str	r3, [sp, #20]
 80080de:	4619      	mov	r1, r3
 80080e0:	f04f 0c0a 	mov.w	ip, #10
 80080e4:	4620      	mov	r0, r4
 80080e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080ea:	3a30      	subs	r2, #48	; 0x30
 80080ec:	2a09      	cmp	r2, #9
 80080ee:	d903      	bls.n	80080f8 <_svfiprintf_r+0x1a8>
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d0c5      	beq.n	8008080 <_svfiprintf_r+0x130>
 80080f4:	9105      	str	r1, [sp, #20]
 80080f6:	e7c3      	b.n	8008080 <_svfiprintf_r+0x130>
 80080f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80080fc:	4604      	mov	r4, r0
 80080fe:	2301      	movs	r3, #1
 8008100:	e7f0      	b.n	80080e4 <_svfiprintf_r+0x194>
 8008102:	ab03      	add	r3, sp, #12
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	462a      	mov	r2, r5
 8008108:	4b0f      	ldr	r3, [pc, #60]	; (8008148 <_svfiprintf_r+0x1f8>)
 800810a:	a904      	add	r1, sp, #16
 800810c:	4638      	mov	r0, r7
 800810e:	f7fd fdbf 	bl	8005c90 <_printf_float>
 8008112:	1c42      	adds	r2, r0, #1
 8008114:	4606      	mov	r6, r0
 8008116:	d1d6      	bne.n	80080c6 <_svfiprintf_r+0x176>
 8008118:	89ab      	ldrh	r3, [r5, #12]
 800811a:	065b      	lsls	r3, r3, #25
 800811c:	f53f af2c 	bmi.w	8007f78 <_svfiprintf_r+0x28>
 8008120:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008122:	b01d      	add	sp, #116	; 0x74
 8008124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008128:	ab03      	add	r3, sp, #12
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	462a      	mov	r2, r5
 800812e:	4b06      	ldr	r3, [pc, #24]	; (8008148 <_svfiprintf_r+0x1f8>)
 8008130:	a904      	add	r1, sp, #16
 8008132:	4638      	mov	r0, r7
 8008134:	f7fe f838 	bl	80061a8 <_printf_i>
 8008138:	e7eb      	b.n	8008112 <_svfiprintf_r+0x1c2>
 800813a:	bf00      	nop
 800813c:	0800976c 	.word	0x0800976c
 8008140:	08009776 	.word	0x08009776
 8008144:	08005c91 	.word	0x08005c91
 8008148:	08007e99 	.word	0x08007e99
 800814c:	08009772 	.word	0x08009772

08008150 <__sfputc_r>:
 8008150:	6893      	ldr	r3, [r2, #8]
 8008152:	3b01      	subs	r3, #1
 8008154:	2b00      	cmp	r3, #0
 8008156:	b410      	push	{r4}
 8008158:	6093      	str	r3, [r2, #8]
 800815a:	da08      	bge.n	800816e <__sfputc_r+0x1e>
 800815c:	6994      	ldr	r4, [r2, #24]
 800815e:	42a3      	cmp	r3, r4
 8008160:	db01      	blt.n	8008166 <__sfputc_r+0x16>
 8008162:	290a      	cmp	r1, #10
 8008164:	d103      	bne.n	800816e <__sfputc_r+0x1e>
 8008166:	f85d 4b04 	ldr.w	r4, [sp], #4
 800816a:	f7fe ba11 	b.w	8006590 <__swbuf_r>
 800816e:	6813      	ldr	r3, [r2, #0]
 8008170:	1c58      	adds	r0, r3, #1
 8008172:	6010      	str	r0, [r2, #0]
 8008174:	7019      	strb	r1, [r3, #0]
 8008176:	4608      	mov	r0, r1
 8008178:	f85d 4b04 	ldr.w	r4, [sp], #4
 800817c:	4770      	bx	lr

0800817e <__sfputs_r>:
 800817e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008180:	4606      	mov	r6, r0
 8008182:	460f      	mov	r7, r1
 8008184:	4614      	mov	r4, r2
 8008186:	18d5      	adds	r5, r2, r3
 8008188:	42ac      	cmp	r4, r5
 800818a:	d101      	bne.n	8008190 <__sfputs_r+0x12>
 800818c:	2000      	movs	r0, #0
 800818e:	e007      	b.n	80081a0 <__sfputs_r+0x22>
 8008190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008194:	463a      	mov	r2, r7
 8008196:	4630      	mov	r0, r6
 8008198:	f7ff ffda 	bl	8008150 <__sfputc_r>
 800819c:	1c43      	adds	r3, r0, #1
 800819e:	d1f3      	bne.n	8008188 <__sfputs_r+0xa>
 80081a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081a4 <_vfiprintf_r>:
 80081a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a8:	460d      	mov	r5, r1
 80081aa:	b09d      	sub	sp, #116	; 0x74
 80081ac:	4614      	mov	r4, r2
 80081ae:	4698      	mov	r8, r3
 80081b0:	4606      	mov	r6, r0
 80081b2:	b118      	cbz	r0, 80081bc <_vfiprintf_r+0x18>
 80081b4:	6983      	ldr	r3, [r0, #24]
 80081b6:	b90b      	cbnz	r3, 80081bc <_vfiprintf_r+0x18>
 80081b8:	f7ff f9be 	bl	8007538 <__sinit>
 80081bc:	4b89      	ldr	r3, [pc, #548]	; (80083e4 <_vfiprintf_r+0x240>)
 80081be:	429d      	cmp	r5, r3
 80081c0:	d11b      	bne.n	80081fa <_vfiprintf_r+0x56>
 80081c2:	6875      	ldr	r5, [r6, #4]
 80081c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081c6:	07d9      	lsls	r1, r3, #31
 80081c8:	d405      	bmi.n	80081d6 <_vfiprintf_r+0x32>
 80081ca:	89ab      	ldrh	r3, [r5, #12]
 80081cc:	059a      	lsls	r2, r3, #22
 80081ce:	d402      	bmi.n	80081d6 <_vfiprintf_r+0x32>
 80081d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081d2:	f7ff fa54 	bl	800767e <__retarget_lock_acquire_recursive>
 80081d6:	89ab      	ldrh	r3, [r5, #12]
 80081d8:	071b      	lsls	r3, r3, #28
 80081da:	d501      	bpl.n	80081e0 <_vfiprintf_r+0x3c>
 80081dc:	692b      	ldr	r3, [r5, #16]
 80081de:	b9eb      	cbnz	r3, 800821c <_vfiprintf_r+0x78>
 80081e0:	4629      	mov	r1, r5
 80081e2:	4630      	mov	r0, r6
 80081e4:	f7fe fa26 	bl	8006634 <__swsetup_r>
 80081e8:	b1c0      	cbz	r0, 800821c <_vfiprintf_r+0x78>
 80081ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081ec:	07dc      	lsls	r4, r3, #31
 80081ee:	d50e      	bpl.n	800820e <_vfiprintf_r+0x6a>
 80081f0:	f04f 30ff 	mov.w	r0, #4294967295
 80081f4:	b01d      	add	sp, #116	; 0x74
 80081f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081fa:	4b7b      	ldr	r3, [pc, #492]	; (80083e8 <_vfiprintf_r+0x244>)
 80081fc:	429d      	cmp	r5, r3
 80081fe:	d101      	bne.n	8008204 <_vfiprintf_r+0x60>
 8008200:	68b5      	ldr	r5, [r6, #8]
 8008202:	e7df      	b.n	80081c4 <_vfiprintf_r+0x20>
 8008204:	4b79      	ldr	r3, [pc, #484]	; (80083ec <_vfiprintf_r+0x248>)
 8008206:	429d      	cmp	r5, r3
 8008208:	bf08      	it	eq
 800820a:	68f5      	ldreq	r5, [r6, #12]
 800820c:	e7da      	b.n	80081c4 <_vfiprintf_r+0x20>
 800820e:	89ab      	ldrh	r3, [r5, #12]
 8008210:	0598      	lsls	r0, r3, #22
 8008212:	d4ed      	bmi.n	80081f0 <_vfiprintf_r+0x4c>
 8008214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008216:	f7ff fa33 	bl	8007680 <__retarget_lock_release_recursive>
 800821a:	e7e9      	b.n	80081f0 <_vfiprintf_r+0x4c>
 800821c:	2300      	movs	r3, #0
 800821e:	9309      	str	r3, [sp, #36]	; 0x24
 8008220:	2320      	movs	r3, #32
 8008222:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008226:	f8cd 800c 	str.w	r8, [sp, #12]
 800822a:	2330      	movs	r3, #48	; 0x30
 800822c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80083f0 <_vfiprintf_r+0x24c>
 8008230:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008234:	f04f 0901 	mov.w	r9, #1
 8008238:	4623      	mov	r3, r4
 800823a:	469a      	mov	sl, r3
 800823c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008240:	b10a      	cbz	r2, 8008246 <_vfiprintf_r+0xa2>
 8008242:	2a25      	cmp	r2, #37	; 0x25
 8008244:	d1f9      	bne.n	800823a <_vfiprintf_r+0x96>
 8008246:	ebba 0b04 	subs.w	fp, sl, r4
 800824a:	d00b      	beq.n	8008264 <_vfiprintf_r+0xc0>
 800824c:	465b      	mov	r3, fp
 800824e:	4622      	mov	r2, r4
 8008250:	4629      	mov	r1, r5
 8008252:	4630      	mov	r0, r6
 8008254:	f7ff ff93 	bl	800817e <__sfputs_r>
 8008258:	3001      	adds	r0, #1
 800825a:	f000 80aa 	beq.w	80083b2 <_vfiprintf_r+0x20e>
 800825e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008260:	445a      	add	r2, fp
 8008262:	9209      	str	r2, [sp, #36]	; 0x24
 8008264:	f89a 3000 	ldrb.w	r3, [sl]
 8008268:	2b00      	cmp	r3, #0
 800826a:	f000 80a2 	beq.w	80083b2 <_vfiprintf_r+0x20e>
 800826e:	2300      	movs	r3, #0
 8008270:	f04f 32ff 	mov.w	r2, #4294967295
 8008274:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008278:	f10a 0a01 	add.w	sl, sl, #1
 800827c:	9304      	str	r3, [sp, #16]
 800827e:	9307      	str	r3, [sp, #28]
 8008280:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008284:	931a      	str	r3, [sp, #104]	; 0x68
 8008286:	4654      	mov	r4, sl
 8008288:	2205      	movs	r2, #5
 800828a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800828e:	4858      	ldr	r0, [pc, #352]	; (80083f0 <_vfiprintf_r+0x24c>)
 8008290:	f7f8 f846 	bl	8000320 <memchr>
 8008294:	9a04      	ldr	r2, [sp, #16]
 8008296:	b9d8      	cbnz	r0, 80082d0 <_vfiprintf_r+0x12c>
 8008298:	06d1      	lsls	r1, r2, #27
 800829a:	bf44      	itt	mi
 800829c:	2320      	movmi	r3, #32
 800829e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082a2:	0713      	lsls	r3, r2, #28
 80082a4:	bf44      	itt	mi
 80082a6:	232b      	movmi	r3, #43	; 0x2b
 80082a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082ac:	f89a 3000 	ldrb.w	r3, [sl]
 80082b0:	2b2a      	cmp	r3, #42	; 0x2a
 80082b2:	d015      	beq.n	80082e0 <_vfiprintf_r+0x13c>
 80082b4:	9a07      	ldr	r2, [sp, #28]
 80082b6:	4654      	mov	r4, sl
 80082b8:	2000      	movs	r0, #0
 80082ba:	f04f 0c0a 	mov.w	ip, #10
 80082be:	4621      	mov	r1, r4
 80082c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082c4:	3b30      	subs	r3, #48	; 0x30
 80082c6:	2b09      	cmp	r3, #9
 80082c8:	d94e      	bls.n	8008368 <_vfiprintf_r+0x1c4>
 80082ca:	b1b0      	cbz	r0, 80082fa <_vfiprintf_r+0x156>
 80082cc:	9207      	str	r2, [sp, #28]
 80082ce:	e014      	b.n	80082fa <_vfiprintf_r+0x156>
 80082d0:	eba0 0308 	sub.w	r3, r0, r8
 80082d4:	fa09 f303 	lsl.w	r3, r9, r3
 80082d8:	4313      	orrs	r3, r2
 80082da:	9304      	str	r3, [sp, #16]
 80082dc:	46a2      	mov	sl, r4
 80082de:	e7d2      	b.n	8008286 <_vfiprintf_r+0xe2>
 80082e0:	9b03      	ldr	r3, [sp, #12]
 80082e2:	1d19      	adds	r1, r3, #4
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	9103      	str	r1, [sp, #12]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	bfbb      	ittet	lt
 80082ec:	425b      	neglt	r3, r3
 80082ee:	f042 0202 	orrlt.w	r2, r2, #2
 80082f2:	9307      	strge	r3, [sp, #28]
 80082f4:	9307      	strlt	r3, [sp, #28]
 80082f6:	bfb8      	it	lt
 80082f8:	9204      	strlt	r2, [sp, #16]
 80082fa:	7823      	ldrb	r3, [r4, #0]
 80082fc:	2b2e      	cmp	r3, #46	; 0x2e
 80082fe:	d10c      	bne.n	800831a <_vfiprintf_r+0x176>
 8008300:	7863      	ldrb	r3, [r4, #1]
 8008302:	2b2a      	cmp	r3, #42	; 0x2a
 8008304:	d135      	bne.n	8008372 <_vfiprintf_r+0x1ce>
 8008306:	9b03      	ldr	r3, [sp, #12]
 8008308:	1d1a      	adds	r2, r3, #4
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	9203      	str	r2, [sp, #12]
 800830e:	2b00      	cmp	r3, #0
 8008310:	bfb8      	it	lt
 8008312:	f04f 33ff 	movlt.w	r3, #4294967295
 8008316:	3402      	adds	r4, #2
 8008318:	9305      	str	r3, [sp, #20]
 800831a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008400 <_vfiprintf_r+0x25c>
 800831e:	7821      	ldrb	r1, [r4, #0]
 8008320:	2203      	movs	r2, #3
 8008322:	4650      	mov	r0, sl
 8008324:	f7f7 fffc 	bl	8000320 <memchr>
 8008328:	b140      	cbz	r0, 800833c <_vfiprintf_r+0x198>
 800832a:	2340      	movs	r3, #64	; 0x40
 800832c:	eba0 000a 	sub.w	r0, r0, sl
 8008330:	fa03 f000 	lsl.w	r0, r3, r0
 8008334:	9b04      	ldr	r3, [sp, #16]
 8008336:	4303      	orrs	r3, r0
 8008338:	3401      	adds	r4, #1
 800833a:	9304      	str	r3, [sp, #16]
 800833c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008340:	482c      	ldr	r0, [pc, #176]	; (80083f4 <_vfiprintf_r+0x250>)
 8008342:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008346:	2206      	movs	r2, #6
 8008348:	f7f7 ffea 	bl	8000320 <memchr>
 800834c:	2800      	cmp	r0, #0
 800834e:	d03f      	beq.n	80083d0 <_vfiprintf_r+0x22c>
 8008350:	4b29      	ldr	r3, [pc, #164]	; (80083f8 <_vfiprintf_r+0x254>)
 8008352:	bb1b      	cbnz	r3, 800839c <_vfiprintf_r+0x1f8>
 8008354:	9b03      	ldr	r3, [sp, #12]
 8008356:	3307      	adds	r3, #7
 8008358:	f023 0307 	bic.w	r3, r3, #7
 800835c:	3308      	adds	r3, #8
 800835e:	9303      	str	r3, [sp, #12]
 8008360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008362:	443b      	add	r3, r7
 8008364:	9309      	str	r3, [sp, #36]	; 0x24
 8008366:	e767      	b.n	8008238 <_vfiprintf_r+0x94>
 8008368:	fb0c 3202 	mla	r2, ip, r2, r3
 800836c:	460c      	mov	r4, r1
 800836e:	2001      	movs	r0, #1
 8008370:	e7a5      	b.n	80082be <_vfiprintf_r+0x11a>
 8008372:	2300      	movs	r3, #0
 8008374:	3401      	adds	r4, #1
 8008376:	9305      	str	r3, [sp, #20]
 8008378:	4619      	mov	r1, r3
 800837a:	f04f 0c0a 	mov.w	ip, #10
 800837e:	4620      	mov	r0, r4
 8008380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008384:	3a30      	subs	r2, #48	; 0x30
 8008386:	2a09      	cmp	r2, #9
 8008388:	d903      	bls.n	8008392 <_vfiprintf_r+0x1ee>
 800838a:	2b00      	cmp	r3, #0
 800838c:	d0c5      	beq.n	800831a <_vfiprintf_r+0x176>
 800838e:	9105      	str	r1, [sp, #20]
 8008390:	e7c3      	b.n	800831a <_vfiprintf_r+0x176>
 8008392:	fb0c 2101 	mla	r1, ip, r1, r2
 8008396:	4604      	mov	r4, r0
 8008398:	2301      	movs	r3, #1
 800839a:	e7f0      	b.n	800837e <_vfiprintf_r+0x1da>
 800839c:	ab03      	add	r3, sp, #12
 800839e:	9300      	str	r3, [sp, #0]
 80083a0:	462a      	mov	r2, r5
 80083a2:	4b16      	ldr	r3, [pc, #88]	; (80083fc <_vfiprintf_r+0x258>)
 80083a4:	a904      	add	r1, sp, #16
 80083a6:	4630      	mov	r0, r6
 80083a8:	f7fd fc72 	bl	8005c90 <_printf_float>
 80083ac:	4607      	mov	r7, r0
 80083ae:	1c78      	adds	r0, r7, #1
 80083b0:	d1d6      	bne.n	8008360 <_vfiprintf_r+0x1bc>
 80083b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083b4:	07d9      	lsls	r1, r3, #31
 80083b6:	d405      	bmi.n	80083c4 <_vfiprintf_r+0x220>
 80083b8:	89ab      	ldrh	r3, [r5, #12]
 80083ba:	059a      	lsls	r2, r3, #22
 80083bc:	d402      	bmi.n	80083c4 <_vfiprintf_r+0x220>
 80083be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083c0:	f7ff f95e 	bl	8007680 <__retarget_lock_release_recursive>
 80083c4:	89ab      	ldrh	r3, [r5, #12]
 80083c6:	065b      	lsls	r3, r3, #25
 80083c8:	f53f af12 	bmi.w	80081f0 <_vfiprintf_r+0x4c>
 80083cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083ce:	e711      	b.n	80081f4 <_vfiprintf_r+0x50>
 80083d0:	ab03      	add	r3, sp, #12
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	462a      	mov	r2, r5
 80083d6:	4b09      	ldr	r3, [pc, #36]	; (80083fc <_vfiprintf_r+0x258>)
 80083d8:	a904      	add	r1, sp, #16
 80083da:	4630      	mov	r0, r6
 80083dc:	f7fd fee4 	bl	80061a8 <_printf_i>
 80083e0:	e7e4      	b.n	80083ac <_vfiprintf_r+0x208>
 80083e2:	bf00      	nop
 80083e4:	080095d4 	.word	0x080095d4
 80083e8:	080095f4 	.word	0x080095f4
 80083ec:	080095b4 	.word	0x080095b4
 80083f0:	0800976c 	.word	0x0800976c
 80083f4:	08009776 	.word	0x08009776
 80083f8:	08005c91 	.word	0x08005c91
 80083fc:	0800817f 	.word	0x0800817f
 8008400:	08009772 	.word	0x08009772

08008404 <__sread>:
 8008404:	b510      	push	{r4, lr}
 8008406:	460c      	mov	r4, r1
 8008408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800840c:	f000 f920 	bl	8008650 <_read_r>
 8008410:	2800      	cmp	r0, #0
 8008412:	bfab      	itete	ge
 8008414:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008416:	89a3      	ldrhlt	r3, [r4, #12]
 8008418:	181b      	addge	r3, r3, r0
 800841a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800841e:	bfac      	ite	ge
 8008420:	6563      	strge	r3, [r4, #84]	; 0x54
 8008422:	81a3      	strhlt	r3, [r4, #12]
 8008424:	bd10      	pop	{r4, pc}

08008426 <__swrite>:
 8008426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800842a:	461f      	mov	r7, r3
 800842c:	898b      	ldrh	r3, [r1, #12]
 800842e:	05db      	lsls	r3, r3, #23
 8008430:	4605      	mov	r5, r0
 8008432:	460c      	mov	r4, r1
 8008434:	4616      	mov	r6, r2
 8008436:	d505      	bpl.n	8008444 <__swrite+0x1e>
 8008438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800843c:	2302      	movs	r3, #2
 800843e:	2200      	movs	r2, #0
 8008440:	f000 f898 	bl	8008574 <_lseek_r>
 8008444:	89a3      	ldrh	r3, [r4, #12]
 8008446:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800844a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800844e:	81a3      	strh	r3, [r4, #12]
 8008450:	4632      	mov	r2, r6
 8008452:	463b      	mov	r3, r7
 8008454:	4628      	mov	r0, r5
 8008456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800845a:	f000 b817 	b.w	800848c <_write_r>

0800845e <__sseek>:
 800845e:	b510      	push	{r4, lr}
 8008460:	460c      	mov	r4, r1
 8008462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008466:	f000 f885 	bl	8008574 <_lseek_r>
 800846a:	1c43      	adds	r3, r0, #1
 800846c:	89a3      	ldrh	r3, [r4, #12]
 800846e:	bf15      	itete	ne
 8008470:	6560      	strne	r0, [r4, #84]	; 0x54
 8008472:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008476:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800847a:	81a3      	strheq	r3, [r4, #12]
 800847c:	bf18      	it	ne
 800847e:	81a3      	strhne	r3, [r4, #12]
 8008480:	bd10      	pop	{r4, pc}

08008482 <__sclose>:
 8008482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008486:	f000 b831 	b.w	80084ec <_close_r>
	...

0800848c <_write_r>:
 800848c:	b538      	push	{r3, r4, r5, lr}
 800848e:	4d07      	ldr	r5, [pc, #28]	; (80084ac <_write_r+0x20>)
 8008490:	4604      	mov	r4, r0
 8008492:	4608      	mov	r0, r1
 8008494:	4611      	mov	r1, r2
 8008496:	2200      	movs	r2, #0
 8008498:	602a      	str	r2, [r5, #0]
 800849a:	461a      	mov	r2, r3
 800849c:	f7f8 fb1e 	bl	8000adc <_write>
 80084a0:	1c43      	adds	r3, r0, #1
 80084a2:	d102      	bne.n	80084aa <_write_r+0x1e>
 80084a4:	682b      	ldr	r3, [r5, #0]
 80084a6:	b103      	cbz	r3, 80084aa <_write_r+0x1e>
 80084a8:	6023      	str	r3, [r4, #0]
 80084aa:	bd38      	pop	{r3, r4, r5, pc}
 80084ac:	240fb05c 	.word	0x240fb05c

080084b0 <__assert_func>:
 80084b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084b2:	4614      	mov	r4, r2
 80084b4:	461a      	mov	r2, r3
 80084b6:	4b09      	ldr	r3, [pc, #36]	; (80084dc <__assert_func+0x2c>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4605      	mov	r5, r0
 80084bc:	68d8      	ldr	r0, [r3, #12]
 80084be:	b14c      	cbz	r4, 80084d4 <__assert_func+0x24>
 80084c0:	4b07      	ldr	r3, [pc, #28]	; (80084e0 <__assert_func+0x30>)
 80084c2:	9100      	str	r1, [sp, #0]
 80084c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084c8:	4906      	ldr	r1, [pc, #24]	; (80084e4 <__assert_func+0x34>)
 80084ca:	462b      	mov	r3, r5
 80084cc:	f000 f81e 	bl	800850c <fiprintf>
 80084d0:	f000 f8dd 	bl	800868e <abort>
 80084d4:	4b04      	ldr	r3, [pc, #16]	; (80084e8 <__assert_func+0x38>)
 80084d6:	461c      	mov	r4, r3
 80084d8:	e7f3      	b.n	80084c2 <__assert_func+0x12>
 80084da:	bf00      	nop
 80084dc:	24000074 	.word	0x24000074
 80084e0:	0800977d 	.word	0x0800977d
 80084e4:	0800978a 	.word	0x0800978a
 80084e8:	08009053 	.word	0x08009053

080084ec <_close_r>:
 80084ec:	b538      	push	{r3, r4, r5, lr}
 80084ee:	4d06      	ldr	r5, [pc, #24]	; (8008508 <_close_r+0x1c>)
 80084f0:	2300      	movs	r3, #0
 80084f2:	4604      	mov	r4, r0
 80084f4:	4608      	mov	r0, r1
 80084f6:	602b      	str	r3, [r5, #0]
 80084f8:	f7f8 fafe 	bl	8000af8 <_close>
 80084fc:	1c43      	adds	r3, r0, #1
 80084fe:	d102      	bne.n	8008506 <_close_r+0x1a>
 8008500:	682b      	ldr	r3, [r5, #0]
 8008502:	b103      	cbz	r3, 8008506 <_close_r+0x1a>
 8008504:	6023      	str	r3, [r4, #0]
 8008506:	bd38      	pop	{r3, r4, r5, pc}
 8008508:	240fb05c 	.word	0x240fb05c

0800850c <fiprintf>:
 800850c:	b40e      	push	{r1, r2, r3}
 800850e:	b503      	push	{r0, r1, lr}
 8008510:	4601      	mov	r1, r0
 8008512:	ab03      	add	r3, sp, #12
 8008514:	4805      	ldr	r0, [pc, #20]	; (800852c <fiprintf+0x20>)
 8008516:	f853 2b04 	ldr.w	r2, [r3], #4
 800851a:	6800      	ldr	r0, [r0, #0]
 800851c:	9301      	str	r3, [sp, #4]
 800851e:	f7ff fe41 	bl	80081a4 <_vfiprintf_r>
 8008522:	b002      	add	sp, #8
 8008524:	f85d eb04 	ldr.w	lr, [sp], #4
 8008528:	b003      	add	sp, #12
 800852a:	4770      	bx	lr
 800852c:	24000074 	.word	0x24000074

08008530 <_fstat_r>:
 8008530:	b538      	push	{r3, r4, r5, lr}
 8008532:	4d07      	ldr	r5, [pc, #28]	; (8008550 <_fstat_r+0x20>)
 8008534:	2300      	movs	r3, #0
 8008536:	4604      	mov	r4, r0
 8008538:	4608      	mov	r0, r1
 800853a:	4611      	mov	r1, r2
 800853c:	602b      	str	r3, [r5, #0]
 800853e:	f7f8 fade 	bl	8000afe <_fstat>
 8008542:	1c43      	adds	r3, r0, #1
 8008544:	d102      	bne.n	800854c <_fstat_r+0x1c>
 8008546:	682b      	ldr	r3, [r5, #0]
 8008548:	b103      	cbz	r3, 800854c <_fstat_r+0x1c>
 800854a:	6023      	str	r3, [r4, #0]
 800854c:	bd38      	pop	{r3, r4, r5, pc}
 800854e:	bf00      	nop
 8008550:	240fb05c 	.word	0x240fb05c

08008554 <_isatty_r>:
 8008554:	b538      	push	{r3, r4, r5, lr}
 8008556:	4d06      	ldr	r5, [pc, #24]	; (8008570 <_isatty_r+0x1c>)
 8008558:	2300      	movs	r3, #0
 800855a:	4604      	mov	r4, r0
 800855c:	4608      	mov	r0, r1
 800855e:	602b      	str	r3, [r5, #0]
 8008560:	f7f8 fad2 	bl	8000b08 <_isatty>
 8008564:	1c43      	adds	r3, r0, #1
 8008566:	d102      	bne.n	800856e <_isatty_r+0x1a>
 8008568:	682b      	ldr	r3, [r5, #0]
 800856a:	b103      	cbz	r3, 800856e <_isatty_r+0x1a>
 800856c:	6023      	str	r3, [r4, #0]
 800856e:	bd38      	pop	{r3, r4, r5, pc}
 8008570:	240fb05c 	.word	0x240fb05c

08008574 <_lseek_r>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	4d07      	ldr	r5, [pc, #28]	; (8008594 <_lseek_r+0x20>)
 8008578:	4604      	mov	r4, r0
 800857a:	4608      	mov	r0, r1
 800857c:	4611      	mov	r1, r2
 800857e:	2200      	movs	r2, #0
 8008580:	602a      	str	r2, [r5, #0]
 8008582:	461a      	mov	r2, r3
 8008584:	f7f8 fac2 	bl	8000b0c <_lseek>
 8008588:	1c43      	adds	r3, r0, #1
 800858a:	d102      	bne.n	8008592 <_lseek_r+0x1e>
 800858c:	682b      	ldr	r3, [r5, #0]
 800858e:	b103      	cbz	r3, 8008592 <_lseek_r+0x1e>
 8008590:	6023      	str	r3, [r4, #0]
 8008592:	bd38      	pop	{r3, r4, r5, pc}
 8008594:	240fb05c 	.word	0x240fb05c

08008598 <__ascii_mbtowc>:
 8008598:	b082      	sub	sp, #8
 800859a:	b901      	cbnz	r1, 800859e <__ascii_mbtowc+0x6>
 800859c:	a901      	add	r1, sp, #4
 800859e:	b142      	cbz	r2, 80085b2 <__ascii_mbtowc+0x1a>
 80085a0:	b14b      	cbz	r3, 80085b6 <__ascii_mbtowc+0x1e>
 80085a2:	7813      	ldrb	r3, [r2, #0]
 80085a4:	600b      	str	r3, [r1, #0]
 80085a6:	7812      	ldrb	r2, [r2, #0]
 80085a8:	1e10      	subs	r0, r2, #0
 80085aa:	bf18      	it	ne
 80085ac:	2001      	movne	r0, #1
 80085ae:	b002      	add	sp, #8
 80085b0:	4770      	bx	lr
 80085b2:	4610      	mov	r0, r2
 80085b4:	e7fb      	b.n	80085ae <__ascii_mbtowc+0x16>
 80085b6:	f06f 0001 	mvn.w	r0, #1
 80085ba:	e7f8      	b.n	80085ae <__ascii_mbtowc+0x16>

080085bc <memmove>:
 80085bc:	4288      	cmp	r0, r1
 80085be:	b510      	push	{r4, lr}
 80085c0:	eb01 0402 	add.w	r4, r1, r2
 80085c4:	d902      	bls.n	80085cc <memmove+0x10>
 80085c6:	4284      	cmp	r4, r0
 80085c8:	4623      	mov	r3, r4
 80085ca:	d807      	bhi.n	80085dc <memmove+0x20>
 80085cc:	1e43      	subs	r3, r0, #1
 80085ce:	42a1      	cmp	r1, r4
 80085d0:	d008      	beq.n	80085e4 <memmove+0x28>
 80085d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085da:	e7f8      	b.n	80085ce <memmove+0x12>
 80085dc:	4402      	add	r2, r0
 80085de:	4601      	mov	r1, r0
 80085e0:	428a      	cmp	r2, r1
 80085e2:	d100      	bne.n	80085e6 <memmove+0x2a>
 80085e4:	bd10      	pop	{r4, pc}
 80085e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085ee:	e7f7      	b.n	80085e0 <memmove+0x24>

080085f0 <_realloc_r>:
 80085f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085f4:	4680      	mov	r8, r0
 80085f6:	4614      	mov	r4, r2
 80085f8:	460e      	mov	r6, r1
 80085fa:	b921      	cbnz	r1, 8008606 <_realloc_r+0x16>
 80085fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008600:	4611      	mov	r1, r2
 8008602:	f7fd ba41 	b.w	8005a88 <_malloc_r>
 8008606:	b92a      	cbnz	r2, 8008614 <_realloc_r+0x24>
 8008608:	f7fd f9d2 	bl	80059b0 <_free_r>
 800860c:	4625      	mov	r5, r4
 800860e:	4628      	mov	r0, r5
 8008610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008614:	f000 f842 	bl	800869c <_malloc_usable_size_r>
 8008618:	4284      	cmp	r4, r0
 800861a:	4607      	mov	r7, r0
 800861c:	d802      	bhi.n	8008624 <_realloc_r+0x34>
 800861e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008622:	d812      	bhi.n	800864a <_realloc_r+0x5a>
 8008624:	4621      	mov	r1, r4
 8008626:	4640      	mov	r0, r8
 8008628:	f7fd fa2e 	bl	8005a88 <_malloc_r>
 800862c:	4605      	mov	r5, r0
 800862e:	2800      	cmp	r0, #0
 8008630:	d0ed      	beq.n	800860e <_realloc_r+0x1e>
 8008632:	42bc      	cmp	r4, r7
 8008634:	4622      	mov	r2, r4
 8008636:	4631      	mov	r1, r6
 8008638:	bf28      	it	cs
 800863a:	463a      	movcs	r2, r7
 800863c:	f7fd f9a2 	bl	8005984 <memcpy>
 8008640:	4631      	mov	r1, r6
 8008642:	4640      	mov	r0, r8
 8008644:	f7fd f9b4 	bl	80059b0 <_free_r>
 8008648:	e7e1      	b.n	800860e <_realloc_r+0x1e>
 800864a:	4635      	mov	r5, r6
 800864c:	e7df      	b.n	800860e <_realloc_r+0x1e>
	...

08008650 <_read_r>:
 8008650:	b538      	push	{r3, r4, r5, lr}
 8008652:	4d07      	ldr	r5, [pc, #28]	; (8008670 <_read_r+0x20>)
 8008654:	4604      	mov	r4, r0
 8008656:	4608      	mov	r0, r1
 8008658:	4611      	mov	r1, r2
 800865a:	2200      	movs	r2, #0
 800865c:	602a      	str	r2, [r5, #0]
 800865e:	461a      	mov	r2, r3
 8008660:	f7f8 fa2e 	bl	8000ac0 <_read>
 8008664:	1c43      	adds	r3, r0, #1
 8008666:	d102      	bne.n	800866e <_read_r+0x1e>
 8008668:	682b      	ldr	r3, [r5, #0]
 800866a:	b103      	cbz	r3, 800866e <_read_r+0x1e>
 800866c:	6023      	str	r3, [r4, #0]
 800866e:	bd38      	pop	{r3, r4, r5, pc}
 8008670:	240fb05c 	.word	0x240fb05c

08008674 <__ascii_wctomb>:
 8008674:	b149      	cbz	r1, 800868a <__ascii_wctomb+0x16>
 8008676:	2aff      	cmp	r2, #255	; 0xff
 8008678:	bf85      	ittet	hi
 800867a:	238a      	movhi	r3, #138	; 0x8a
 800867c:	6003      	strhi	r3, [r0, #0]
 800867e:	700a      	strbls	r2, [r1, #0]
 8008680:	f04f 30ff 	movhi.w	r0, #4294967295
 8008684:	bf98      	it	ls
 8008686:	2001      	movls	r0, #1
 8008688:	4770      	bx	lr
 800868a:	4608      	mov	r0, r1
 800868c:	4770      	bx	lr

0800868e <abort>:
 800868e:	b508      	push	{r3, lr}
 8008690:	2006      	movs	r0, #6
 8008692:	f000 f833 	bl	80086fc <raise>
 8008696:	2001      	movs	r0, #1
 8008698:	f7f8 fa0c 	bl	8000ab4 <_exit>

0800869c <_malloc_usable_size_r>:
 800869c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086a0:	1f18      	subs	r0, r3, #4
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	bfbc      	itt	lt
 80086a6:	580b      	ldrlt	r3, [r1, r0]
 80086a8:	18c0      	addlt	r0, r0, r3
 80086aa:	4770      	bx	lr

080086ac <_raise_r>:
 80086ac:	291f      	cmp	r1, #31
 80086ae:	b538      	push	{r3, r4, r5, lr}
 80086b0:	4604      	mov	r4, r0
 80086b2:	460d      	mov	r5, r1
 80086b4:	d904      	bls.n	80086c0 <_raise_r+0x14>
 80086b6:	2316      	movs	r3, #22
 80086b8:	6003      	str	r3, [r0, #0]
 80086ba:	f04f 30ff 	mov.w	r0, #4294967295
 80086be:	bd38      	pop	{r3, r4, r5, pc}
 80086c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80086c2:	b112      	cbz	r2, 80086ca <_raise_r+0x1e>
 80086c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086c8:	b94b      	cbnz	r3, 80086de <_raise_r+0x32>
 80086ca:	4620      	mov	r0, r4
 80086cc:	f000 f830 	bl	8008730 <_getpid_r>
 80086d0:	462a      	mov	r2, r5
 80086d2:	4601      	mov	r1, r0
 80086d4:	4620      	mov	r0, r4
 80086d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086da:	f000 b817 	b.w	800870c <_kill_r>
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d00a      	beq.n	80086f8 <_raise_r+0x4c>
 80086e2:	1c59      	adds	r1, r3, #1
 80086e4:	d103      	bne.n	80086ee <_raise_r+0x42>
 80086e6:	2316      	movs	r3, #22
 80086e8:	6003      	str	r3, [r0, #0]
 80086ea:	2001      	movs	r0, #1
 80086ec:	e7e7      	b.n	80086be <_raise_r+0x12>
 80086ee:	2400      	movs	r4, #0
 80086f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80086f4:	4628      	mov	r0, r5
 80086f6:	4798      	blx	r3
 80086f8:	2000      	movs	r0, #0
 80086fa:	e7e0      	b.n	80086be <_raise_r+0x12>

080086fc <raise>:
 80086fc:	4b02      	ldr	r3, [pc, #8]	; (8008708 <raise+0xc>)
 80086fe:	4601      	mov	r1, r0
 8008700:	6818      	ldr	r0, [r3, #0]
 8008702:	f7ff bfd3 	b.w	80086ac <_raise_r>
 8008706:	bf00      	nop
 8008708:	24000074 	.word	0x24000074

0800870c <_kill_r>:
 800870c:	b538      	push	{r3, r4, r5, lr}
 800870e:	4d07      	ldr	r5, [pc, #28]	; (800872c <_kill_r+0x20>)
 8008710:	2300      	movs	r3, #0
 8008712:	4604      	mov	r4, r0
 8008714:	4608      	mov	r0, r1
 8008716:	4611      	mov	r1, r2
 8008718:	602b      	str	r3, [r5, #0]
 800871a:	f7f8 f9c3 	bl	8000aa4 <_kill>
 800871e:	1c43      	adds	r3, r0, #1
 8008720:	d102      	bne.n	8008728 <_kill_r+0x1c>
 8008722:	682b      	ldr	r3, [r5, #0]
 8008724:	b103      	cbz	r3, 8008728 <_kill_r+0x1c>
 8008726:	6023      	str	r3, [r4, #0]
 8008728:	bd38      	pop	{r3, r4, r5, pc}
 800872a:	bf00      	nop
 800872c:	240fb05c 	.word	0x240fb05c

08008730 <_getpid_r>:
 8008730:	f7f8 b9b6 	b.w	8000aa0 <_getpid>
 8008734:	0000      	movs	r0, r0
	...

08008738 <exp>:
 8008738:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 800873a:	ee10 3a90 	vmov	r3, s1
 800873e:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8008742:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8008746:	18a2      	adds	r2, r4, r2
 8008748:	2a3e      	cmp	r2, #62	; 0x3e
 800874a:	ee10 1a10 	vmov	r1, s0
 800874e:	d922      	bls.n	8008796 <exp+0x5e>
 8008750:	2a00      	cmp	r2, #0
 8008752:	da06      	bge.n	8008762 <exp+0x2a>
 8008754:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8008758:	ee30 0b07 	vadd.f64	d0, d0, d7
 800875c:	b004      	add	sp, #16
 800875e:	bcf0      	pop	{r4, r5, r6, r7}
 8008760:	4770      	bx	lr
 8008762:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 8008766:	f04f 0000 	mov.w	r0, #0
 800876a:	d913      	bls.n	8008794 <exp+0x5c>
 800876c:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8008770:	bf08      	it	eq
 8008772:	4281      	cmpeq	r1, r0
 8008774:	f000 80a0 	beq.w	80088b8 <exp+0x180>
 8008778:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800877c:	4294      	cmp	r4, r2
 800877e:	d0e9      	beq.n	8008754 <exp+0x1c>
 8008780:	4283      	cmp	r3, r0
 8008782:	da03      	bge.n	800878c <exp+0x54>
 8008784:	b004      	add	sp, #16
 8008786:	bcf0      	pop	{r4, r5, r6, r7}
 8008788:	f000 b8c6 	b.w	8008918 <__math_uflow>
 800878c:	b004      	add	sp, #16
 800878e:	bcf0      	pop	{r4, r5, r6, r7}
 8008790:	f000 b8ca 	b.w	8008928 <__math_oflow>
 8008794:	4604      	mov	r4, r0
 8008796:	4950      	ldr	r1, [pc, #320]	; (80088d8 <exp+0x1a0>)
 8008798:	ed91 6b02 	vldr	d6, [r1, #8]
 800879c:	ed91 5b00 	vldr	d5, [r1]
 80087a0:	eeb0 7b46 	vmov.f64	d7, d6
 80087a4:	eea5 7b00 	vfma.f64	d7, d5, d0
 80087a8:	ee17 5a10 	vmov	r5, s14
 80087ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 80087b0:	ed91 6b04 	vldr	d6, [r1, #16]
 80087b4:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 80087b8:	eea6 0b07 	vfma.f64	d0, d6, d7
 80087bc:	ed91 6b06 	vldr	d6, [r1, #24]
 80087c0:	18d8      	adds	r0, r3, r3
 80087c2:	f100 030f 	add.w	r3, r0, #15
 80087c6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80087ca:	eea6 0b07 	vfma.f64	d0, d6, d7
 80087ce:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 80087d2:	ee20 7b00 	vmul.f64	d7, d0, d0
 80087d6:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 80087da:	ed91 5b08 	vldr	d5, [r1, #32]
 80087de:	ee30 6b06 	vadd.f64	d6, d0, d6
 80087e2:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80087e6:	eea4 5b00 	vfma.f64	d5, d4, d0
 80087ea:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 80087ee:	eea5 6b07 	vfma.f64	d6, d5, d7
 80087f2:	ee27 7b07 	vmul.f64	d7, d7, d7
 80087f6:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 80087fa:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 80087fe:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8008802:	eea4 5b00 	vfma.f64	d5, d4, d0
 8008806:	2600      	movs	r6, #0
 8008808:	19f2      	adds	r2, r6, r7
 800880a:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 800880e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008812:	2c00      	cmp	r4, #0
 8008814:	d14b      	bne.n	80088ae <exp+0x176>
 8008816:	42b5      	cmp	r5, r6
 8008818:	db10      	blt.n	800883c <exp+0x104>
 800881a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800881e:	ed9f 7b28 	vldr	d7, [pc, #160]	; 80088c0 <exp+0x188>
 8008822:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8008826:	4610      	mov	r0, r2
 8008828:	ec41 0b10 	vmov	d0, r0, r1
 800882c:	eea6 0b00 	vfma.f64	d0, d6, d0
 8008830:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008834:	b004      	add	sp, #16
 8008836:	bcf0      	pop	{r4, r5, r6, r7}
 8008838:	f000 b88a 	b.w	8008950 <__math_check_oflow>
 800883c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8008840:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8008844:	4610      	mov	r0, r2
 8008846:	ec41 0b17 	vmov	d7, r0, r1
 800884a:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800884e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008852:	ee37 5b06 	vadd.f64	d5, d7, d6
 8008856:	eeb4 5bc4 	vcmpe.f64	d5, d4
 800885a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800885e:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80088c8 <exp+0x190>
 8008862:	d51e      	bpl.n	80088a2 <exp+0x16a>
 8008864:	ee35 3b04 	vadd.f64	d3, d5, d4
 8008868:	ee37 7b45 	vsub.f64	d7, d7, d5
 800886c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008870:	ee34 6b43 	vsub.f64	d6, d4, d3
 8008874:	ee36 5b05 	vadd.f64	d5, d6, d5
 8008878:	ee35 5b07 	vadd.f64	d5, d5, d7
 800887c:	ee35 5b03 	vadd.f64	d5, d5, d3
 8008880:	ee35 5b44 	vsub.f64	d5, d5, d4
 8008884:	eeb5 5b40 	vcmp.f64	d5, #0.0
 8008888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800888c:	d101      	bne.n	8008892 <exp+0x15a>
 800888e:	ed9f 5b10 	vldr	d5, [pc, #64]	; 80088d0 <exp+0x198>
 8008892:	ed8d 0b00 	vstr	d0, [sp]
 8008896:	ed9d 7b00 	vldr	d7, [sp]
 800889a:	ee27 7b00 	vmul.f64	d7, d7, d0
 800889e:	ed8d 7b02 	vstr	d7, [sp, #8]
 80088a2:	ee25 0b00 	vmul.f64	d0, d5, d0
 80088a6:	b004      	add	sp, #16
 80088a8:	bcf0      	pop	{r4, r5, r6, r7}
 80088aa:	f000 b845 	b.w	8008938 <__math_check_uflow>
 80088ae:	ec43 2b10 	vmov	d0, r2, r3
 80088b2:	eea6 0b00 	vfma.f64	d0, d6, d0
 80088b6:	e751      	b.n	800875c <exp+0x24>
 80088b8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80088d0 <exp+0x198>
 80088bc:	e74e      	b.n	800875c <exp+0x24>
 80088be:	bf00      	nop
 80088c0:	00000000 	.word	0x00000000
 80088c4:	7f000000 	.word	0x7f000000
 80088c8:	00000000 	.word	0x00000000
 80088cc:	00100000 	.word	0x00100000
	...
 80088d8:	080098c8 	.word	0x080098c8

080088dc <with_errno>:
 80088dc:	b513      	push	{r0, r1, r4, lr}
 80088de:	4604      	mov	r4, r0
 80088e0:	ed8d 0b00 	vstr	d0, [sp]
 80088e4:	f7fd f814 	bl	8005910 <__errno>
 80088e8:	ed9d 0b00 	vldr	d0, [sp]
 80088ec:	6004      	str	r4, [r0, #0]
 80088ee:	b002      	add	sp, #8
 80088f0:	bd10      	pop	{r4, pc}

080088f2 <xflow>:
 80088f2:	b082      	sub	sp, #8
 80088f4:	b158      	cbz	r0, 800890e <xflow+0x1c>
 80088f6:	eeb1 7b40 	vneg.f64	d7, d0
 80088fa:	ed8d 7b00 	vstr	d7, [sp]
 80088fe:	ed9d 7b00 	vldr	d7, [sp]
 8008902:	2022      	movs	r0, #34	; 0x22
 8008904:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008908:	b002      	add	sp, #8
 800890a:	f7ff bfe7 	b.w	80088dc <with_errno>
 800890e:	eeb0 7b40 	vmov.f64	d7, d0
 8008912:	e7f2      	b.n	80088fa <xflow+0x8>
 8008914:	0000      	movs	r0, r0
	...

08008918 <__math_uflow>:
 8008918:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008920 <__math_uflow+0x8>
 800891c:	f7ff bfe9 	b.w	80088f2 <xflow>
 8008920:	00000000 	.word	0x00000000
 8008924:	10000000 	.word	0x10000000

08008928 <__math_oflow>:
 8008928:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008930 <__math_oflow+0x8>
 800892c:	f7ff bfe1 	b.w	80088f2 <xflow>
 8008930:	00000000 	.word	0x00000000
 8008934:	70000000 	.word	0x70000000

08008938 <__math_check_uflow>:
 8008938:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800893c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008940:	d102      	bne.n	8008948 <__math_check_uflow+0x10>
 8008942:	2022      	movs	r0, #34	; 0x22
 8008944:	f7ff bfca 	b.w	80088dc <with_errno>
 8008948:	4770      	bx	lr
 800894a:	0000      	movs	r0, r0
 800894c:	0000      	movs	r0, r0
	...

08008950 <__math_check_oflow>:
 8008950:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8008970 <__math_check_oflow+0x20>
 8008954:	eeb0 7bc0 	vabs.f64	d7, d0
 8008958:	eeb4 7b46 	vcmp.f64	d7, d6
 800895c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008960:	dd02      	ble.n	8008968 <__math_check_oflow+0x18>
 8008962:	2022      	movs	r0, #34	; 0x22
 8008964:	f7ff bfba 	b.w	80088dc <with_errno>
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	f3af 8000 	nop.w
 8008970:	ffffffff 	.word	0xffffffff
 8008974:	7fefffff 	.word	0x7fefffff

08008978 <_init>:
 8008978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897a:	bf00      	nop
 800897c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800897e:	bc08      	pop	{r3}
 8008980:	469e      	mov	lr, r3
 8008982:	4770      	bx	lr

08008984 <_fini>:
 8008984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008986:	bf00      	nop
 8008988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800898a:	bc08      	pop	{r3}
 800898c:	469e      	mov	lr, r3
 800898e:	4770      	bx	lr
